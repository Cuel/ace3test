{"advanced_ballistics":[{"name":"ace_advanced_ballistics_fnc_calculateAmmoTemperatureVelocityShift","file":"advanced_ballistics/functions/fnc_calculateAmmoTemperatureVelocityShift.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Calculates the ammo temperature induced muzzle velocity shift\r\n *\r\n * Arguments:\r\n * 0: muzzle velocity shift lookup table - m/s <ARRAY>\r\n * 1: temperature - degrees celcius <NUMBER>\r\n *\r\n * Return Value:\r\n * muzzle velocity shift - m/s <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_muzzleVelocityShiftTableUpperLimit\", \"_temperatureIndexFunction\",\r\n    \"_temperatureIndexA\", \"_temperatureIndexB\", \"_interpolationRatio\"];\r\nparams[\"_muzzleVelocityShiftTable\", \"_temperature\"];\r\n\r\n// Check if muzzleVelocityShiftTable is Less Than 11 Entrys\r\nif ((count _muzzleVelocityShiftTable) < 11) exitWith {0};\r\n_muzzleVelocityShiftTableUpperLimit = _muzzleVelocityShiftTable select 10;\r\nif (isNil \"_muzzleVelocityShiftTableUpperLimit\") exitWith { 0 };\r\n\r\n// Find exact data index required for given temperature\r\n_temperatureIndexFunction = (_temperature + 15) / 5;\r\n\r\n// lower and upper data index used for interpolation\r\n_temperatureIndexA = (0 max (floor(_temperatureIndexFunction))) min 10;\r\n_temperatureIndexB = (0 max (ceil(_temperatureIndexFunction))) min 10;\r\n\r\n// Interpolation ratio\r\n_interpolationRatio = _temperatureIndexFunction - floor(_temperatureIndexFunction);\r\n\r\n// Interpolation\r\n(_muzzleVelocityShiftTable select _temperatureIndexA) * (1 - _interpolationRatio) + (_muzzleVelocityShiftTable select _temperatureIndexB) * _interpolationRatio // Return\r\n"},{"name":"ace_advanced_ballistics_fnc_calculateAtmosphericCorrection","file":"advanced_ballistics/functions/fnc_calculateAtmosphericCorrection.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Calculates the atmospherically corrected ballistic coefficient\r\n *\r\n * Arguments:\r\n * 0: ballistic coefficient - G1-G7 <NUMBER>\r\n * 1: temperature - degrees celcius <NUMBER>\r\n * 2: pressure - hPa <NUMBER>\r\n * 3: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\r\n * 4: atmosphereModel - ICAO or ASM <STRING>\r\n *\r\n * Return Value:\r\n * corrected ballistic coefficient <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_airDensity\";\r\n\r\nparams [\"_ballisticCoefficient\", \"_temperature\"/*in C*/, \"_pressure\"/*in hPa*/, \"_relativeHumidity\"/*as ratio 0-1*/, \"_atmosphereModel\"/*\"ICAO\" or \"ASM\"*/];\r\n\r\n_airDensity = [_temperature, _pressure, _relativeHumidity] call EFUNC(weather,calculateAirDensity);\r\n\r\nif (_atmosphereModel == \"ICAO\") then {\r\n    (STD_AIR_DENSITY_ICAO / _airDensity) * _ballisticCoefficient\r\n} else {\r\n    (STD_AIR_DENSITY_ASM / _airDensity) * _ballisticCoefficient\r\n};\r\n"},{"name":"ace_advanced_ballistics_fnc_calculateBarrelLengthVelocityShift","file":"advanced_ballistics/functions/fnc_calculateBarrelLengthVelocityShift.sqf","text":"/*\r\n * Author: Ruthberg, MikeMatrix, joko // Jonas\r\n *\r\n * Calculates the muzzle velocity shift caused by different barrel lengths\r\n *\r\n * Arguments:\r\n * 0: barrel length - mm\r\n * 1: muzzle velocity lookup table - m/s <ARRAY>\r\n * 2: barrel length lookup table - mm <ARRAY>\r\n * 3: muzzle velocity - m/s <NUMBER>\r\n *\r\n * Return Value:\r\n * muzzle velocity shift - m/s <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nscopeName \"main\";\r\n\r\nprivate [\"_muzzleVelocityTableCount\", \"_barrelLengthTableCount\", \"_lowerDataIndex\",\r\n    \"_upperDataIndex\", \"_lowerBarrelLength\", \"_upperBarrelLength\", \"_lowerMuzzleVelocity\",\r\n    \"_upperMuzzleVelocity\", \"_interpolationRatio\"];\r\nparams [\"_barrelLength\", \"_muzzleVelocityTable\", \"_barrelLengthTable\", \"_muzzleVelocity\"];\r\nTRACE_4(\"params\",_barrelLength,_muzzleVelocityTable,_barrelLengthTable,_muzzleVelocity);\r\n\r\n// If barrel length is not defined, then there is no point in calculating muzzle velocity\r\nif (_barrelLength == 0) exitWith { 0 };\r\n\r\n_muzzleVelocityTableCount = count _muzzleVelocityTable;\r\n_barrelLengthTableCount = count _barrelLengthTable;\r\n\r\n// Exit if tables are different sizes, have no elements or have only one element\r\nif (_muzzleVelocityTableCount != _barrelLengthTableCount || _muzzleVelocityTableCount == 0 || _barrelLengthTableCount == 0) exitWith { 0 };\r\nif (_muzzleVelocityTableCount == 1) exitWith { (_muzzleVelocityTable select 0) - _muzzleVelocity };\r\n\r\n// If we have the precise barrel length value, return result immediately\r\nif (_barrelLength in _barrelLengthTable) exitWith {\r\n    (_muzzleVelocityTable select (_barrelLengthTable find _barrelLength)) - _muzzleVelocity\r\n};\r\n\r\n// Limit values to lower and upper bound of data we have available\r\nif (_barrelLength <= (_barrelLengthTable select 0)) exitWith { (_muzzleVelocityTable select 0) - _muzzleVelocity };\r\nif (_barrelLength >= (_barrelLengthTable select _barrelLengthTableCount - 1)) exitWith { (_muzzleVelocityTable select _barrelLengthTableCount - 1) - _muzzleVelocity };\r\n\r\n// Find closest bordering values for barrel length\r\n{\r\n    if (_barrelLength <= _x) then {\r\n        _upperDataIndex = _forEachIndex;\r\n        _lowerDataIndex = _upperDataIndex - 1;\r\n        breakTo \"main\";\r\n    };\r\n} forEach _barrelLengthTable;\r\n\r\n// Worst case scenario\r\nif (isNil \"_lowerDataIndex\" || isNil \"_upperDataIndex\") exitWith {0};\r\n\r\n_lowerBarrelLength = _barrelLengthTable select _lowerDataIndex;\r\n_upperBarrelLength = _barrelLengthTable select _upperDataIndex;\r\n_lowerMuzzleVelocity = _muzzleVelocityTable select _lowerDataIndex;\r\n_upperMuzzleVelocity = _muzzleVelocityTable select _upperDataIndex;\r\n\r\n// Calculate interpolation ratio\r\n_interpolationRatio = if (abs (_lowerBarrelLength - _upperBarrelLength) > 0) then {\r\n    (_upperBarrelLength - _barrelLength) / (_upperBarrelLength - _lowerBarrelLength)\r\n} else {\r\n    0\r\n};\r\n\r\n// Calculate interpolated muzzle velocity shift\r\n(_lowerMuzzleVelocity + ((_upperMuzzleVelocity - _lowerMuzzleVelocity) * (1 - _interpolationRatio))) - _muzzleVelocity // Return\r\n"},{"name":"ace_advanced_ballistics_fnc_calculateRetardation","file":"advanced_ballistics/functions/fnc_calculateRetardation.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Calculates the retardation of the bullet\r\n *\r\n * Arguments:\r\n * 0: drag model - integer 1-7 <NUMBER>\r\n * 1: drag coefficient - bc <NUMBER>\r\n * 2: velocity - m/s <NUMBER>\r\n *\r\n * Return Value:\r\n * retardation - m/(s^2) <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Source: GNU Exterior Ballistics\r\n\r\nprivate [\"_A\", \"_M\"];\r\nparams [\"_dragModel\", \"_dragCoefficient\", \"_velocity\"];\r\n_velocity = _velocity * 3.2808399;\r\n\r\nswitch _dragModel do {\r\n    case 1: {\r\n        call {\r\n            if (_velocity > 4230) exitWith { _A = 0.0001477404177730177; _M = 1.9565; };\r\n            if (_velocity > 3680) exitWith { _A = 0.0001920339268755614; _M = 1.925; };\r\n            if (_velocity > 3450) exitWith { _A = 0.0002894751026819746; _M = 1.875; };\r\n            if (_velocity > 3295) exitWith { _A = 0.0004349905111115636; _M = 1.825; };\r\n            if (_velocity > 3130) exitWith { _A = 0.0006520421871892662; _M = 1.775; };\r\n            if (_velocity > 2960) exitWith { _A = 0.0009748073694078696; _M = 1.725; };\r\n            if (_velocity > 2830) exitWith { _A = 0.001453721560187286; _M = 1.675; };\r\n            if (_velocity > 2680) exitWith { _A = 0.002162887202930376; _M = 1.625; };\r\n            if (_velocity > 2460) exitWith { _A = 0.003209559783129881; _M = 1.575; };\r\n            if (_velocity > 2225) exitWith { _A = 0.003904368218691249; _M = 1.55; };\r\n            if (_velocity > 2015) exitWith { _A = 0.003222942271262336; _M = 1.575; };\r\n            if (_velocity > 1890) exitWith { _A = 0.002203329542297809; _M = 1.625; };\r\n            if (_velocity > 1810) exitWith { _A = 0.001511001028891904; _M = 1.675; };\r\n            if (_velocity > 1730) exitWith { _A = 0.0008609957592468259; _M = 1.75; };\r\n            if (_velocity > 1595) exitWith { _A = 0.0004086146797305117; _M = 1.85; };\r\n            if (_velocity > 1520) exitWith { _A = 0.0001954473210037398; _M = 1.95; };\r\n            if (_velocity > 1420) exitWith { _A = 0.00005431896266462351; _M = 2.125; };\r\n            if (_velocity > 1360) exitWith { _A = 0.000008847742581674416; _M = 2.375; };\r\n            if (_velocity > 1315) exitWith { _A = 0.000001456922328720298; _M = 2.625; };\r\n            if (_velocity > 1280) exitWith { _A = 0.0000002419485191895565; _M = 2.875; };\r\n            if (_velocity > 1220) exitWith { _A = 0.00000001657956321067612; _M = 3.25; };\r\n            if (_velocity > 1185) exitWith { _A = 0.0000000004745469537157371; _M = 3.75; };\r\n            if (_velocity > 1150) exitWith { _A = 0.00000000001379746590025088; _M = 4.25; };\r\n            if (_velocity > 1100) exitWith { _A = 0.0000000000004070157961147882; _M = 4.75; };\r\n            if (_velocity > 1060) exitWith { _A = 0.00000000000002938236954847331; _M = 5.125; };\r\n            if (_velocity > 1025) exitWith { _A = 0.00000000000001228597370774746; _M = 5.25; };\r\n            if (_velocity >  980) exitWith { _A = 0.00000000000002916938264100495; _M = 5.125; };\r\n            if (_velocity >  945) exitWith { _A = 0.0000000000003855099424807451; _M = 4.75; };\r\n            if (_velocity >  905) exitWith { _A = 0.00000000001185097045689854; _M = 4.25; };\r\n            if (_velocity >  860) exitWith { _A = 0.0000000003566129470974951; _M = 3.75; };\r\n            if (_velocity >  810) exitWith { _A = 0.00000001045513263966272; _M = 3.25; };\r\n            if (_velocity >  780) exitWith { _A = 0.0000001291159200846216; _M = 2.875; };\r\n            if (_velocity >  750) exitWith { _A = 0.0000006824429329105383; _M = 2.625; };\r\n            if (_velocity >  700) exitWith { _A = 0.000003569169672385163; _M = 2.375; };\r\n            if (_velocity >  640) exitWith { _A = 0.00001839015095899579; _M = 2.125; };\r\n            if (_velocity >  600) exitWith { _A = 0.00005711174688734240; _M = 1.950; };\r\n            if (_velocity >  550) exitWith { _A = 0.00009226557091973427; _M = 1.875; };\r\n            if (_velocity >  250) exitWith { _A = 0.00009337991957131389; _M = 1.875; };\r\n            if (_velocity >  100) exitWith { _A = 0.00007225247327590413; _M = 1.925; };\r\n            if (_velocity >   65) exitWith { _A = 0.00005792684957074546; _M = 1.975; };\r\n            if (_velocity >    0) exitWith { _A = 0.00005206214107320588; _M = 2.000; };\r\n        };\r\n    };\r\n    case 2: {\r\n        call {\r\n            if (_velocity > 1674) exitWith { _A = 0.0079470052136733; _M = 1.36999902851493; };\r\n            if (_velocity > 1172) exitWith { _A = 0.00100419763721974; _M = 1.65392237010294; };\r\n            if (_velocity > 1060) exitWith { _A = 0.0000000000000000000000715571228255369; _M = 7.91913562392361; };\r\n            if (_velocity >  949) exitWith { _A = 0.000000000139589807205091; _M = 3.81439537623717; };\r\n            if (_velocity >  670) exitWith { _A = 0.000234364342818625; _M = 1.71869536324748; };\r\n            if (_velocity >  335) exitWith { _A = 0.000177962438921838; _M = 1.76877550388679; };\r\n            if (_velocity >    0) exitWith { _A = 0.0000518033561289704; _M = 1.98160270524632; };\r\n        };\r\n    };\r\n    case 5: {\r\n        call {\r\n            if (_velocity > 1730) exitWith { _A = 0.00724854775171929; _M = 1.41538574492812; };\r\n            if (_velocity > 1228) exitWith { _A = 0.0000350563361516117; _M = 2.13077307854948; };\r\n            if (_velocity > 1116) exitWith { _A = 0.000000000000184029481181151; _M = 4.81927320350395; };\r\n            if (_velocity > 1004) exitWith { _A = 0.000000000000000000000134713064017409; _M = 7.8100555281422; };\r\n            if (_velocity >  837) exitWith { _A = 0.000000103965974081168; _M = 2.84204791809926; };\r\n            if (_velocity >  335) exitWith { _A = 0.0001093015938698234; _M = 1.81096361579504; };\r\n            if (_velocity >    0) exitWith { _A = 0.0000351963178524273; _M = 2.00477856801111; };\r\n        };\r\n    };\r\n    case 6: {\r\n        call {\r\n            if (_velocity > 3236) exitWith { _A = 0.0455384883480781; _M = 1.15997674041274; };\r\n            if (_velocity > 2065) exitWith { _A = 0.07167261849653769; _M = 1.10704436538885; };\r\n            if (_velocity > 1311) exitWith { _A = 0.00166676386084348; _M = 1.60085100195952; };\r\n            if (_velocity > 1144) exitWith { _A = 0.000000101482730119215; _M = 2.9569674731838; };\r\n            if (_velocity > 1004) exitWith { _A = 0.00000000000000000431542773103552; _M = 6.34106317069757; };\r\n            if (_velocity >  670) exitWith { _A = 0.0000204835650496866; _M = 2.11688446325998; };\r\n            if (_velocity >    0) exitWith { _A = 0.0000750912466084823; _M = 1.92031057847052; };\r\n        };\r\n    };\r\n    case 7: {\r\n        call {\r\n            if (_velocity > 4200) exitWith { _A = 0.00000000129081656775919; _M = 3.24121295355962; };\r\n            if (_velocity > 3000) exitWith { _A = 0.0171422231434847; _M = 1.27907168025204; };\r\n            if (_velocity > 1470) exitWith { _A = 0.00233355948302505; _M = 1.52693913274526; };\r\n            if (_velocity > 1260) exitWith { _A = 0.000797592111627665; _M = 1.67688974440324; };\r\n            if (_velocity > 1110) exitWith { _A = 0.00000000000571086414289273; _M = 4.3212826264889; };\r\n            if (_velocity >  960) exitWith { _A = 0.0000000000000000302865108244904; _M = 5.99074203776707; };\r\n            if (_velocity >  670) exitWith { _A = 0.00000752285155782535; _M = 2.1738019851075; };\r\n            if (_velocity >  540) exitWith { _A = 0.0000131766281225189; _M = 2.08774690257991; };\r\n            if (_velocity >    0) exitWith { _A = 0.0000134504843776525; _M = 2.08702306738884; };\r\n        };\r\n    };\r\n    case 8: {\r\n        call {\r\n            if (_velocity > 3571) exitWith { _A = 0.0112263766252305; _M = 1.33207346655961; };\r\n            if (_velocity > 1841) exitWith { _A = 0.0167252613732636; _M = 1.28662041261785; };\r\n            if (_velocity > 1120) exitWith { _A = 0.00220172456619625; _M = 1.55636358091189; };\r\n            if (_velocity > 1088) exitWith { _A = 0.00000000000000020538037167098; _M = 5.80410776994789; };\r\n            if (_velocity >  976) exitWith { _A = 0.00000000000592182174254121; _M = 4.29275576134191; };\r\n            if (_velocity >    0) exitWith { _A = 0.000043917343795117; _M = 1.99978116283334; };\r\n        };\r\n    };\r\n};\r\n\r\nif (!isNil \"_A\" && !isNil \"_M\" && _velocity > 0 && _velocity < 10000) then {\r\n    (_A * (_velocity ^ _M) / _dragCoefficient) / 3.2808399\r\n} else {\r\n    0\r\n};\r\n"},{"name":"ace_advanced_ballistics_fnc_calculateStabilityFactor","file":"advanced_ballistics/functions/fnc_calculateStabilityFactor.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Calculates the stability factor of a bullet\r\n *\r\n * Arguments:\r\n * 0: caliber - mm <NUMBER>\r\n * 1: bullet length - mm <NUMBER>\r\n * 2: bullet mass - grams <NUMBER>\r\n * 3: barrel twist - mm <NUMBER>\r\n * 4: muzzle velocity shift - m/s <NUMBER>\r\n * 5: temperature - degrees celcius <NUMBER>\r\n * 6: barometric Pressure - hPA <NUMBER>\r\n *\r\n * Return Value:\r\n * stability factor <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_twist\", \"_length\", \"_stabilityFactor\"];\r\nparams [\"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_barrelTwist\", \"_muzzleVelocity\", \"_temperature\", \"_barometricPressure\"];\r\n\r\n// Source: http://www.jbmballistics.com/ballistics/bibliography/articles/miller_stability_1.pdf\r\n_twist = _barrelTwist / _caliber;\r\n_length = _bulletLength / _caliber;\r\n\r\n_stabilityFactor = 7587000 * _bulletMass / (_twist^2 * _caliber^3 * _length * (1 + _length^2));\r\n\r\nif (_muzzleVelocity > 341.376) then {\r\n    (_stabilityFactor * (_muzzleVelocity / 853.44) ^ (1/3)) * KELVIN(_temperature) / KELVIN(15) * 1013.25 / _barometricPressure\r\n} else {\r\n    (_stabilityFactor * (_muzzleVelocity / 341.376) ^ (1/3)) * KELVIN(_temperature) / KELVIN(15) * 1013.25 / _barometricPressure\r\n};\r\n"},{"name":"ace_advanced_ballistics_fnc_diagnoseWeapons","file":"advanced_ballistics/functions/fnc_diagnoseWeapons.sqf","text":"/*\r\n * Author: esteldunedain\r\n *\r\n * This function diagnoses all primary weapons to find cases in which the initial\r\n * velocity of shots with and without AB significantly mismatch\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nprivate _cfgWeapons = configFile >> \"CfgWeapons\";\r\nfor \"_i\" from 0 to (count _cfgWeapons)-1 do {\r\n    private _weaponConfig = _cfgWeapons select _i;\r\n    if (isClass _weaponConfig) then {\r\n        private _weapon = configName _weaponConfig;\r\n        private _weaponType = getNumber (_weaponConfig >> \"Type\");\r\n        if (_weaponType == 1) then {\r\n            // The weapon is a primary weapon\r\n\r\n            private _weaponInitSpeed = getNumber (_weaponConfig >> \"initSpeed\");\r\n            private _magazines = getArray (_weaponConfig >> \"magazines\");\r\n            {\r\n                private _magazine = _x;\r\n                private _magazineInitSpeed = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\r\n                private _ammo = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\r\n\r\n                // Vanilla initial speed --------------------------\r\n                private _vanillaInitialSpeed = _magazineInitSpeed;\r\n                if (_weaponInitSpeed > 0) then {\r\n                    _vanillaInitialSpeed = _weaponInitSpeed;\r\n                } else {\r\n                    if (_weaponInitSpeed < 0) then {\r\n                        _vanillaInitialSpeed = _vanillaInitialSpeed * (-_weaponInitSpeed);\r\n                    };\r\n                };\r\n                // --------------------------------------------------\r\n\r\n                // AB initial speed --------------------------------\r\n                // Get Weapon and Ammo Configurations\r\n                private _AmmoCacheEntry = _ammo call FUNC(readAmmoDataFromConfig);\r\n                private _WeaponCacheEntry = _weapon call FUNC(readWeaponDataFromConfig);\r\n                _AmmoCacheEntry params [\"_airFriction\", \"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_transonicStabilityCoef\", \"_dragModel\", \"_ballisticCoefficients\", \"_velocityBoundaries\", \"_atmosphereModel\", \"_ammoTempMuzzleVelocityShifts\", \"_muzzleVelocityTable\", \"_barrelLengthTable\"];\r\n                _WeaponCacheEntry params [\"_barrelTwist\", \"_twistDirection\", \"_barrelLength\"];\r\n\r\n                private _barrelVelocityShift = [_barrelLength, _muzzleVelocityTable, _barrelLengthTable, _vanillaInitialSpeed] call FUNC(calculateBarrelLengthVelocityShift);\r\n                private _abInitialSpeed = _vanillaInitialSpeed + _barrelVelocityShift;\r\n                // --------------------------------------------------\r\n                diag_log text format [\"ABDiagnose,%1,%2,%3,%4,%5,%6,%7\",_weapon,_magazine,_ammo,_magazineInitSpeed,_weaponInitSpeed,_vanillaInitialSpeed,_abInitialSpeed];\r\n            } forEach _magazines;\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_advanced_ballistics_fnc_displayProtractor","file":"advanced_ballistics/functions/fnc_displayProtractor.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Displays a protractor in the top left corner of the screen\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __dsp (uiNamespace getVariable \"RscProtractor\")\r\n#define __ctrl1 (__dsp displayCtrl 132950)\r\n#define __ctrl2 (__dsp displayCtrl 132951)\r\n\r\nif (GVAR(Protractor)) exitWith {\r\n    GVAR(Protractor) = false;\r\n    1 cutText [\"\", \"PLAIN\"];\r\n    true\r\n};\r\nif (weaponLowered ACE_player) exitWith { false };\r\nif (vehicle ACE_player != ACE_player) exitWith { false };\r\nif (currentWeapon ACE_player != primaryWeapon ACE_player) exitWith { false };\r\n\r\n2 cutText [\"\", \"PLAIN\"];\r\nEGVAR(weather,WindInfo) = false;\r\n([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\nGVAR(Protractor) = true;\r\n\r\n[{\r\n    params [\"\",\"_idPFH\"];\r\n    if !(GVAR(Protractor) && !(weaponLowered ACE_player) && currentWeapon ACE_player == primaryWeapon ACE_player) exitWith {\r\n        GVAR(Protractor) = false;\r\n        1 cutText [\"\", \"PLAIN\"];\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    1 cutRsc [\"RscProtractor\", \"PLAIN\", 1, false];\r\n\r\n    __ctrl1 ctrlSetScale 1;\r\n    __ctrl1 ctrlCommit 0;\r\n    __ctrl1 ctrlSetText QPATHTOF(UI\\protractor.paa);\r\n    __ctrl1 ctrlSetTextColor [1, 1, 1, 1];\r\n\r\n    __ctrl2 ctrlSetScale 1;\r\n    __ctrl2 ctrlSetPosition [SafeZoneX + 0.001, SafeZoneY - 0.001 - 0.1074 * (-0.86 max ((ACE_player weaponDirection currentWeapon ACE_player) select 2) min 0.86), 0.2, 0.2 * 4/3];\r\n    __ctrl2 ctrlCommit 0;\r\n    __ctrl2 ctrlSetText QPATHTOF(UI\\protractor_marker.paa);\r\n    __ctrl2 ctrlSetTextColor [1, 1, 1, 1];\r\n\r\n}, 0.1, []] call CBA_fnc_addPerFrameHandler;\r\n\r\ntrue\r\n"},{"name":"ace_advanced_ballistics_fnc_handleFired","file":"advanced_ballistics/functions/fnc_handleFired.sqf","text":"/*\r\n * Author: Glowbal, Ruthberg\r\n *\r\n * Handles advanced ballistics for (BulletBase) projectiles. Called from the unified fired EH only for players.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\n// Parameterization\r\nprivate [\"_abort\", \"_AmmoCacheEntry\", \"_WeaponCacheEntry\", \"_opticsName\", \"_opticType\", \"_bulletTraceVisible\", \"_temperature\", \"_barometricPressure\", \"_bulletMass\", \"_bulletLength\", \"_muzzleVelocity\", \"_muzzleVelocityShift\", \"_bulletVelocity\", \"_bulletLength\", \"_barrelTwist\", \"_stabilityFactor\", \"_aceTimeSecond\", \"_barrelVelocityShift\", \"_ammoTemperatureVelocityShift\"];\r\n\r\n_abort = false;\r\n\r\nif (!(_ammo isKindOf \"BulletBase\")) exitWith {};\r\nif (!alive _projectile) exitWith {};\r\nif (_unit distance ACE_player > GVAR(simulationRadius)) exitWith {};\r\nif (underwater _unit) exitWith {};\r\nif (!GVAR(simulateForEveryone) && !(local _unit)) then {\r\n    // The shooter is non local\r\n    _abort = true;\r\n    if (GVAR(simulateForSnipers)) then {\r\n        if (currentWeapon _unit == primaryWeapon _unit && count primaryWeaponItems _unit > 2) then {\r\n            _opticsName = (primaryWeaponItems _unit) select 2;\r\n            _opticType = getNumber(configFile >> \"CfgWeapons\" >> _opticsName >> \"ItemInfo\" >> \"opticType\");\r\n            _abort = _opticType != 2; // We only abort if the non local shooter is not a sniper\r\n        };\r\n    };\r\n    if (GVAR(simulateForGroupMembers) && _abort) then {\r\n        _abort = (group ACE_player) != (group _unit);\r\n    };\r\n};\r\n//if (!GVAR(vehicleGunnerEnabled) && !(_unit isKindOf \"Man\")) then { _abort = true; }; // We currently do not have firedEHs on vehicles\r\nif (GVAR(disabledInFullAutoMode) && getNumber(configFile >> \"CfgWeapons\" >> _weapon >> _mode >> \"autoFire\") == 1) then { _abort = true; };\r\n\r\nif (_abort || !(GVAR(extensionAvailable))) exitWith {\r\n    if (missionNamespace getVariable [QEGVAR(windDeflection,enabled), false]) then {\r\n        EGVAR(windDeflection,trackedBullets) pushBack [_projectile, getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\")];\r\n    };\r\n};\r\n\r\n// Get Weapon and Ammo Configurations\r\n_AmmoCacheEntry = uiNamespace getVariable format[QGVAR(%1), _ammo];\r\nif (isNil \"_AmmoCacheEntry\") then {\r\n     _AmmoCacheEntry = _ammo call FUNC(readAmmoDataFromConfig);\r\n};\r\n_WeaponCacheEntry = uiNamespace getVariable format[QGVAR(%1), _weapon];\r\nif (isNil \"_WeaponCacheEntry\") then {\r\n     _WeaponCacheEntry = _weapon call FUNC(readWeaponDataFromConfig);\r\n};\r\n\r\n_AmmoCacheEntry params [\"_airFriction\", \"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_transonicStabilityCoef\", \"_dragModel\", \"_ballisticCoefficients\", \"_velocityBoundaries\", \"_atmosphereModel\", \"_ammoTempMuzzleVelocityShifts\", \"_muzzleVelocityTable\", \"_barrelLengthTable\"];\r\n_WeaponCacheEntry params [\"_barrelTwist\", \"_twistDirection\", \"_barrelLength\"];\r\n\r\n\r\n_bulletVelocity = velocity _projectile;\r\n_muzzleVelocity = vectorMagnitude _bulletVelocity;\r\n\r\n_barrelVelocityShift = 0;\r\nif (GVAR(barrelLengthInfluenceEnabled)) then {\r\n    _barrelVelocityShift = [_barrelLength, _muzzleVelocityTable, _barrelLengthTable, _muzzleVelocity] call FUNC(calculateBarrelLengthVelocityShift);\r\n};\r\n\r\n_ammoTemperatureVelocityShift = 0;\r\nif (GVAR(ammoTemperatureEnabled)) then {\r\n    _temperature = ((getPosASL _unit) select 2) call EFUNC(weather,calculateTemperatureAtHeight);\r\n    _ammoTemperatureVelocityShift = ([_ammoTempMuzzleVelocityShifts, _temperature] call FUNC(calculateAmmoTemperatureVelocityShift));\r\n};\r\n\r\nif (GVAR(ammoTemperatureEnabled) || GVAR(barrelLengthInfluenceEnabled)) then {\r\n    _muzzleVelocityShift = _barrelVelocityShift + _ammoTemperatureVelocityShift;\r\n    TRACE_4(\"shift\",_muzzleVelocity,_muzzleVelocityShift, _barrelVelocityShift, _ammoTemperatureVelocityShift);\r\n    if (_muzzleVelocityShift != 0) then {\r\n        _muzzleVelocity = _muzzleVelocity + _muzzleVelocityShift;\r\n        _bulletVelocity = _bulletVelocity vectorAdd ((vectorNormalized _bulletVelocity) vectorMultiply (_muzzleVelocityShift));\r\n        _projectile setVelocity _bulletVelocity;\r\n    };\r\n};\r\n\r\n_bulletTraceVisible = false;\r\nif (GVAR(bulletTraceEnabled) && cameraView == \"GUNNER\") then {\r\n    if (currentWeapon ACE_player == binocular ACE_player) then {\r\n        _bulletTraceVisible = true;\r\n    } else {\r\n        if (currentWeapon ACE_player == primaryWeapon ACE_player && count primaryWeaponItems ACE_player > 2) then {\r\n            _opticsName = (primaryWeaponItems ACE_player) select 2;\r\n            _opticType = getNumber(configFile >> \"CfgWeapons\" >> _opticsName >> \"ItemInfo\" >> \"opticType\");\r\n            _bulletTraceVisible = _opticType == 2;\r\n        };\r\n    };\r\n};\r\n\r\n_stabilityFactor = 1.5;\r\nif (_caliber > 0 && _bulletLength > 0 && _bulletMass > 0 && _barrelTwist > 0) then {\r\n    if (isNil \"_temperature\") then {\r\n        _temperature = ((getPosASL _unit) select 2) call EFUNC(weather,calculateTemperatureAtHeight);\r\n    };\r\n    _barometricPressure = ((getPosASL _projectile) select 2) call EFUNC(weather,calculateBarometricPressure);\r\n    _stabilityFactor = [_caliber, _bulletLength, _bulletMass, _barrelTwist, _muzzleVelocity, _temperature, _barometricPressure] call FUNC(calculateStabilityFactor);\r\n};\r\n\r\nGVAR(currentbulletID) = (GVAR(currentbulletID) + 1) % 10000;\r\n\r\n_aceTimeSecond = floor CBA_missionTime;\r\n\"ace_advanced_ballistics\" callExtension format[\"new:%1:%2:%3:%4:%5:%6:%7:%8:%9:%10:%11:%12:%13:%14:%15:%16:%17:%18\", GVAR(currentbulletID), _airFriction, _ballisticCoefficients, _velocityBoundaries, _atmosphereModel, _dragModel, _stabilityFactor, _twistDirection, _muzzleVelocity, _transonicStabilityCoef, getPosASL _projectile, EGVAR(common,mapLatitude), EGVAR(weather,currentTemperature), EGVAR(common,mapAltitude), EGVAR(weather,currentHumidity), overcast, _aceTimeSecond, CBA_missionTime - _aceTimeSecond];\r\n\r\nGVAR(allBullets) pushBack [_projectile, _caliber, _bulletTraceVisible, GVAR(currentbulletID)];\r\n\r\nif (isNil QGVAR(BulletPFH)) then {\r\n    GVAR(BulletPFH) = [FUNC(handleFirePFH), GVAR(simulationInterval), []] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_advanced_ballistics_fnc_handleFirePFH","file":"advanced_ballistics/functions/fnc_handleFirePFH.sqf","text":"/*\r\n * Author: Glowbal, Ruthberg, joko // Jonas\r\n * Handle the PFH for Bullets\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _aceTimeSecond = floor CBA_missionTime;\r\n\r\n{\r\n    private [\"_bulletVelocity\", \"_bulletPosition\", \"_bulletSpeed\"];\r\n    _x params[\"_bullet\",\"_caliber\",\"_bulletTraceVisible\",\"_index\"];\r\n\r\n    _bulletVelocity = velocity _bullet;\r\n\r\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\r\n\r\n    if (!alive _bullet || _bulletSpeed < 100) then {\r\n        GVAR(allBullets) deleteAt (GVAR(allBullets) find _x);\r\n    } else {\r\n        _bulletPosition = getPosASL _bullet;\r\n\r\n        if (_bulletTraceVisible && _bulletSpeed > 500) then {\r\n            drop [\"\\A3\\data_f\\ParticleEffects\\Universal\\Refract\",\"\",\"Billboard\",1,0.1,getPos _bullet,[0,0,0],0,1.275,1,0,[0.02*_caliber,0.01*_caliber],[[0,0,0,0.65],[0,0,0,0.2]],[1,0],0,0,\"\",\"\",\"\"];\r\n        };\r\n\r\n        call compile (\"ace_advanced_ballistics\" callExtension format[\"simulate:%1:%2:%3:%4:%5:%6:%7\", _index, _bulletVelocity, _bulletPosition, ACE_wind, ASLToATL(_bulletPosition) select 2, _aceTimeSecond, CBA_missionTime - _aceTimeSecond]);\r\n    };\r\n    nil\r\n} count +GVAR(allBullets);\r\n\r\nif (GVAR(allBullets) isEqualTo []) then {\r\n    [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    GVAR(BulletPFH) = nil;\r\n};\r\n"},{"name":"ace_advanced_ballistics_fnc_initializeTerrainExtension","file":"advanced_ballistics/functions/fnc_initializeTerrainExtension.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Initializes the advanced ballistics dll extension with terrain data\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!hasInterface) exitWith {};\r\nif (!GVAR(enabled)) exitWith {};\r\nif (!GVAR(extensionAvailable)) exitWith {};\r\n\r\nprivate [\"_initStartTime\", \"_mapSize\", \"_mapGrids\", \"_gridCells\", \"_x\", \"_y\", \"_gridCenter\", \"_gridHeight\", \"_gridNumObjects\", \"_gridSurfaceIsWater\"];\r\n\r\n_initStartTime = CBA_missionTime;\r\n_mapSize = getNumber (configFile >> \"CfgWorlds\" >> worldName >> \"MapSize\");\r\n\r\nif ((\"ace_advanced_ballistics\" callExtension format[\"init:%1:%2\", worldName, _mapSize]) == \"Terrain already initialized\") exitWith {\r\n    #ifdef DEBUG_MODE_FULL\r\n        systemChat \"AdvancedBallistics: Terrain already initialized\";\r\n    #endif\r\n};\r\n\r\n_mapGrids = ceil(_mapSize / 50) + 1;\r\n_gridCells = _mapGrids * _mapGrids;\r\n\r\nGVAR(currentGrid) = 0;\r\n\r\n[{\r\n    params [\"_args\",\"_idPFH\"];\r\n    _args params [\"_mapGrids\", \"_gridCells\", \"_initStartTime\"];\r\n\r\n    if (GVAR(currentGrid) >= _gridCells) exitWith {\r\n        #ifdef DEBUG_MODE_FULL\r\n            systemChat format[\"AdvancedBallistics: Finished terrain initialization in %1 seconds\", ceil(CBA_missionTime - _initStartTime)];\r\n        #endif\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    for \"_i\" from 1 to 50 do {\r\n        _x = floor(GVAR(currentGrid) / _mapGrids) * 50;\r\n        _y = (GVAR(currentGrid) - floor(GVAR(currentGrid) / _mapGrids) * _mapGrids) * 50;\r\n        _gridCenter = [_x + 25, _y + 25];\r\n        _gridHeight = round(getTerrainHeightASL _gridCenter);\r\n        _gridNumObjects = count (_gridCenter nearObjects [\"Building\", 50]);\r\n        _gridSurfaceIsWater = if (surfaceIsWater _gridCenter) then {1} else {0};\r\n        \"ace_advanced_ballistics\" callExtension format[\"set:%1:%2:%3\", _gridHeight, _gridNumObjects, _gridSurfaceIsWater];\r\n        GVAR(currentGrid) = GVAR(currentGrid) + 1;\r\n        if (GVAR(currentGrid) >= _gridCells) exitWith {};\r\n    };\r\n\r\n}, 0, [_mapGrids, _gridCells, _initStartTime]] call CBA_fnc_addPerFrameHandler\r\n"},{"name":"ace_advanced_ballistics_fnc_initModuleSettings","file":"advanced_ballistics/functions/fnc_initModuleSettings.sqf","text":"/*\r\n * Author: Glowbal, Ruthberg\r\n * Module for adjusting the advanced ballistics settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\",\"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(ammoTemperatureEnabled), \"ammoTemperatureEnabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(barrelLengthInfluenceEnabled), \"barrelLengthInfluenceEnabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(bulletTraceEnabled), \"bulletTraceEnabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(simulateForEveryone), \"simulateForEveryone\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(disabledInFullAutoMode), \"disabledInFullAutoMode\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(simulateForSnipers), \"simulateForSnipers\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(simulateForGroupMembers), \"simulateForGroupMembers\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(simulationInterval), \"simulationInterval\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(simulationRadius), \"simulationRadius\"] call EFUNC(common,readSettingFromModule);\r\n\r\nGVAR(simulationInterval) = 0 max GVAR(simulationInterval) min 0.2;\r\n"},{"name":"ace_advanced_ballistics_fnc_readAmmoDataFromConfig","file":"advanced_ballistics/functions/fnc_readAmmoDataFromConfig.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Reads the ammo class config and updates the config cache\r\n *\r\n * Arguments:\r\n * ammo - classname <STRING>\r\n *\r\n * Return Value:\r\n * 0: _airFriction\r\n * 1: _caliber\r\n * 2: _bulletLength\r\n * 3: _bulletMass\r\n * 4: _transonicStabilityCoef\r\n * 5: _dragModel\r\n * 6: _ballisticCoefficients\r\n * 7: _velocityBoundaries\r\n * 8: _atmosphereModel\r\n * 9: _ammoTempMuzzleVelocityShifts\r\n * 10: _muzzleVelocityTable\r\n * 11: _barrelLengthTable\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nTRACE_1(\"Reading Ammo Config\",_this);\r\nprivate [\"_ammo\", \"_airFriction\", \"_caliber\", \"_bulletLength\", \"_bulletMass\", \"_transonicStabilityCoef\", \"_dragModel\", \"_ballisticCoefficients\", \"_velocityBoundaries\", \"_atmosphereModel\", \"_ammoTempMuzzleVelocityShifts\", \"_muzzleVelocityTable\", \"_barrelLengthTable\", \"_result\"];\r\n_ammoConfig = configFile >> \"CfgAmmo\" >> _this;\r\n\r\n_airFriction = getNumber(_ammoConfig >> \"airFriction\");\r\n_caliber = getNumber(_ammoConfig >> \"ACE_caliber\");\r\n_bulletLength = getNumber(_ammoConfig >> \"ACE_bulletLength\");\r\n_bulletMass = getNumber(_ammoConfig >> \"ACE_bulletMass\");\r\n_transonicStabilityCoef = getNumber(_ammoConfig >> \"ACE_transonicStabilityCoef\");\r\nif (_transonicStabilityCoef == 0) then {\r\n    _transonicStabilityCoef = 0.5;\r\n};\r\n_dragModel = getNumber(_ammoConfig >> \"ACE_dragModel\");\r\nif (_dragModel == 0 || !(_dragModel in [1, 2, 5, 6, 7, 8])) then {\r\n    _dragModel = 1;\r\n};\r\n_ballisticCoefficients = getArray(_ammoConfig >> \"ACE_ballisticCoefficients\");\r\n_velocityBoundaries = getArray(_ammoConfig >> \"ACE_velocityBoundaries\");\r\n_atmosphereModel = getText(_ammoConfig >> \"ACE_standardAtmosphere\");\r\nif (_atmosphereModel isEqualTo \"\") then {\r\n    _atmosphereModel = \"ICAO\";\r\n};\r\n_ammoTempMuzzleVelocityShifts = getArray(_ammoConfig >> \"ACE_ammoTempMuzzleVelocityShifts\");\r\n_muzzleVelocityTable = getArray(_ammoConfig >> \"ACE_muzzleVelocities\");\r\n_barrelLengthTable = getArray(_ammoConfig >> \"ACE_barrelLengths\");\r\n\r\n//Handle subsonic ammo that would have a huge muzzle velocity shift (when ballistic configs not explicitly defined)\r\nprivate _typicalSpeed = getNumber (_ammoConfig >> \"typicalSpeed\");\r\nif ((_typicalSpeed > 0) && {_typicalSpeed < 360}) then {\r\n    private _inheritedBarrelConfig = (!(_muzzleVelocityTable isEqualTo [])) && {(configProperties [_ammoConfig, \"(configName _x) == 'ACE_muzzleVelocities'\", false]) isEqualTo []};\r\n    private _inheritedTempConfig = (!(_ammoTempMuzzleVelocityShifts isEqualTo [])) && {(configProperties [_ammoConfig, \"(configName _x) == 'ACE_ammoTempMuzzleVelocityShifts'\", false]) isEqualTo []};\r\n    TRACE_3(\"subsonic\",_typicalSpeed,_inheritedBarrelConfig,_inheritedTempConfig);\r\n    if (_inheritedBarrelConfig || _inheritedTempConfig) then {\r\n        private _parentConfig = inheritsFrom _ammoConfig;\r\n        private _parentSpeed = getNumber (_parentConfig >> \"typicalSpeed\");\r\n        ACE_LOGWARNING_4(\"Subsonic Ammo %1 (%2 m/s) missing `ACE_muzzleVelocities` or `ACE_ammoTempMuzzleVelocityShifts` configs, attempting to use parent %3 (%4m/s)\",_this,_typicalSpeed,configName _parentConfig, _parentSpeed);\r\n        if (_parentSpeed <= 0) exitWith {//Handle weird or null parent\r\n            _muzzleVelocityTable = [];\r\n            _ammoTempMuzzleVelocityShifts = [];\r\n        };\r\n        private _linearMuliplier = _typicalSpeed / _parentSpeed;\r\n        if (_inheritedBarrelConfig) then {\r\n            if (!((configProperties [_parentConfig, \"(configName _x) == 'ACE_muzzleVelocities'\", false]) isEqualTo [])) then {\r\n                TRACE_2(\"Parent Has Defined Barrel MV\",_linearMuliplier,_muzzleVelocityTable);\r\n                { _muzzleVelocityTable set [_forEachIndex, (_x * _linearMuliplier)]; } forEach _muzzleVelocityTable;\r\n            } else {\r\n                TRACE_2(\"Parent DOES NOT Have Defined Barrel MV\",_linearMuliplier,_muzzleVelocityTable);\r\n                _muzzleVelocityTable = [];\r\n            };\r\n        };\r\n        if (_inheritedTempConfig) then {\r\n            if (!((configProperties [_parentConfig, \"(configName _x) == 'ACE_ammoTempMuzzleVelocityShifts'\", false]) isEqualTo [])) then {\r\n                TRACE_2(\"Parent Has Defined Ammo Temp Shifts\",_linearMuliplier,_muzzleVelocityTable);\r\n                { _ammoTempMuzzleVelocityShifts set [_forEachIndex, (_x * _linearMuliplier)]; } forEach _ammoTempMuzzleVelocityShifts;\r\n            } else {\r\n                TRACE_2(\"Parent DOES NOT Have Defined Ammo Temp Shifts\",_linearMuliplier,_muzzleVelocityTable);\r\n                _ammoTempMuzzleVelocityShifts = [];\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n_result = [_airFriction, _caliber, _bulletLength, _bulletMass, _transonicStabilityCoef, _dragModel, _ballisticCoefficients, _velocityBoundaries, _atmosphereModel, _ammoTempMuzzleVelocityShifts, _muzzleVelocityTable, _barrelLengthTable];\r\n\r\nuiNamespace setVariable [format[QGVAR(%1), _this], _result];\r\n\r\n_result\r\n"},{"name":"ace_advanced_ballistics_fnc_readWeaponDataFromConfig","file":"advanced_ballistics/functions/fnc_readWeaponDataFromConfig.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Reads the weapon class config and updates the config cache\r\n *\r\n * Arguments:\r\n * weapon - classname <STRING>\r\n *\r\n * Return Value:\r\n * 0: _barrelTwist\r\n * 1: _twistDirection\r\n * 2: _barrelLength\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_weaponConfig\", \"_barrelTwist\", \"_twistDirection\", \"_barrelLength\", \"_result\"];\r\n_weaponConfig = (configFile >> \"CfgWeapons\" >> _this);\r\n\r\n_barrelTwist = getNumber(_weaponConfig >> \"ACE_barrelTwist\");\r\n_twistDirection = 1;\r\nif (isNumber (_weaponConfig >> \"ACE_twistDirection\")) then {\r\n    _twistDirection = getNumber (_weaponConfig >> \"ACE_twistDirection\");\r\n    if !(_twistDirection in [-1, 0, 1]) then {\r\n        _twistDirection = 1;\r\n    };\r\n};\r\n\r\n_barrelLength = getNumber(_weaponConfig >> \"ACE_barrelLength\");\r\n\r\n_result = [_barrelTwist, _twistDirection, _barrelLength];\r\n\r\nuiNamespace setVariable [format[QGVAR(%1), _weapon], _result];\r\n\r\n_result\r\n"}],"ai":[],"aircraft":[],"apl":[],"atragmx":[{"name":"ace_atragmx_fnc_add_new_gun","file":"atragmx/functions/fnc_add_new_gun.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Adds a new (default) gun profile to the profileNamespace\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_add_new_gun\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_gunName\", \"_gunProfileEntry\"];\r\n\r\n_gunName = ctrlText 11001;\r\nif (_gunName != \"\") then {\r\n    _gunProfileEntry = [_gunName, 810, 100, 0.0679, -0.0010350, 3.81, 0, 2, 10, 120, 0, 0, 9.525, 7.82, 25.40, 0.393, 1, \"ICAO\"],\r\n\r\n    GVAR(gunList) = GVAR(gunList) + [_gunProfileEntry];\r\n\r\n    lbAdd [6000, _gunProfileEntry select 0];\r\n\r\n    profileNamespace setVariable [\"ACE_ATragMX_gunList\", GVAR(gunList)];\r\n};\r\n"},{"name":"ace_atragmx_fnc_calculate_range_card","file":"atragmx/functions/fnc_calculate_range_card.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the range card output based on the current data set\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_calculate_range_card\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n[] call FUNC(parse_input);\r\n\r\nprivate [\"_scopeBaseAngle\"];\r\n_scopeBaseAngle = (GVAR(workingMemory) select 3);\r\n\r\nprivate [\"_bulletMass\", \"_bulletDiameter\", \"_boreHeight\", \"_airFriction\", \"_barrelTwist\", \"_muzzleVelocity\", \"_bc\", \"_dragModel\", \"_atmosphereModel\", \"_twistDirection\"];\r\n_bulletMass = GVAR(workingMemory) select 12;\r\n_bulletDiameter = GVAR(workingMemory) select 13;\r\n_boreHeight = GVAR(workingMemory) select 5;\r\n_airFriction = GVAR(workingMemory) select 4;\r\n_barrelTwist = GVAR(workingMemory) select 14;\r\n_muzzleVelocity = GVAR(workingMemory) select 1;\r\n_bc = GVAR(workingMemory) select 15;\r\n_dragModel = GVAR(workingMemory) select 16;\r\n_atmosphereModel = GVAR(workingMemory) select 17;\r\n\r\n_twistDirection = 0;\r\nif (_barrelTwist > 0) then {\r\n    _twistDirection = 1;\r\n} else {\r\n    if (_barrelTwist < 0) then {\r\n        _twistDirection = -1;\r\n    };\r\n};\r\n_barrelTwist = abs(_barrelTwist);\r\n\r\nprivate [\"_altitude\", \"_temperature\", \"_barometricPressure\", \"_relativeHumidity\"];\r\n_altitude = GVAR(altitude);\r\n_temperature = GVAR(temperature);\r\n_barometricPressure = GVAR(barometricPressure);\r\n_relativeHumidity = GVAR(relativeHumidity);\r\nif (!GVAR(atmosphereModeTBH)) then {\r\n    _barometricPressure = 1013.25 * (1 - (0.0065 * _altitude) / (273.15 + _temperature + 0.0065 * _altitude)) ^ 5.255754495;\r\n    _relativeHumidity = 50;\r\n};\r\n\r\nprivate [\"_bulletLength\", \"_stabilityFactor\"];\r\n_bulletLength = 45.72;\r\n_stabilityFactor = 1.5;\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    if (_bulletDiameter > 0 && _bulletLength > 0 && _bulletMass > 0 && _barrelTwist > 0) then {\r\n        _stabilityFactor = [_bulletDiameter, _bulletLength, _bulletMass, _barrelTwist * 10, _muzzleVelocity, _temperature, _barometricPressure] call EFUNC(advanced_ballistics,calculateStabilityFactor);\r\n    };\r\n};\r\n\r\nprivate [\"_latitude\", \"_directionOfFire\", \"_windSpeed1\", \"_windSpeed2\", \"_windDirection\", \"_inclinationAngle\", \"_targetSpeed\", \"_targetRange\"];\r\n_latitude = GVAR(latitude) select GVAR(currentTarget);\r\n_directionOfFire = GVAR(directionOfFire) select GVAR(currentTarget);\r\n_windSpeed1 = (GVAR(windSpeed1) select GVAR(currentTarget));\r\n_windSpeed2 = (GVAR(windSpeed2) select GVAR(currentTarget));\r\n_windDirection = (GVAR(windDirection) select GVAR(currentTarget));\r\n_inclinationAngle = (GVAR(inclinationAngle) select GVAR(currentTarget));\r\n_targetSpeed = (GVAR(targetSpeed) select GVAR(currentTarget));\r\n_targetRange = GVAR(rangeCardEndRange);\r\nif (GVAR(currentUnit) == 1) then {\r\n    _targetRange = _targetRange / 1.0936133;\r\n};\r\n\r\nGVAR(rangeCardData) = [];\r\n\r\nprivate [\"_result\"];\r\n_result = [_scopeBaseAngle, _bulletMass, _boreHeight, _airFriction, _muzzleVelocity, _temperature, _barometricPressure, _relativeHumidity, 1000,\r\n            [_windSpeed1, _windSpeed2], _windDirection, _inclinationAngle, _targetSpeed, _targetRange, _bc, _dragModel, _atmosphereModel, true, _stabilityFactor, _twistDirection, _latitude, _directionOfFire] call FUNC(calculate_solution);\r\n"},{"name":"ace_atragmx_fnc_calculate_solution","file":"atragmx/functions/fnc_calculate_solution.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the fireing solution\r\n *\r\n * Arguments:\r\n * 0: Scope base angle <NUMBER>\r\n * 1: Bullet mass <NUMBER>\r\n * 2: Bore height <NUMBER>\r\n * 3: air friction <NUMBER>\r\n * 4: muzzle velocity <NUMBER>\r\n * 5: temperature <NUMBER>\r\n * 6: barometric pressure <NUMBER>\r\n * 7: relative humidity <NUMBER>\r\n * 8: simulation steps <NUMBER>\r\n * 9: wind speed <ARRAY>\r\n * 10: wind direction <NUMBER>\r\n * 11: inclination angle <NUMBER>\r\n * 12: target speed <NUMBER>\r\n * 13: target range <NUMBER>\r\n * 14: ballistic coefficient <NUMBER>\r\n * 15: drag model <NUMBER>\r\n * 16: atmosphere model <STRING>\r\n * 17: Store range card data? <BOOL>\r\n * 18: Stability factor <NUMBER>\r\n * 19: Twist Direction <NUMBER>\r\n * 20: Latitude <NUMBER>\r\n *\r\n * Return Value:\r\n * 0: Elevation (MOA) <NUMBER>\r\n * 1: Windage (MOA) <ARRAY>\r\n * 2: Lead (MOA) <NUMBER>\r\n * 3: Time of fligth (SECONDS) <NUMBER>\r\n * 4: Remaining velocity (m/s) <NUMBER>\r\n * 5: Remaining kinetic energy (ft·lb) <NUMBER>\r\n * 6: Vertical coriolis drift (MOA) <NUMBER>\r\n * 7: Horizontal coriolis drift (MOA) <NUMBER>\r\n * 8: Spin drift (MOA) <NUMBER>\r\n *\r\n * Example:\r\n * call ace_atragmx_calculate_solution\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\r\n    \"_scopeBaseAngle\", \"_bulletMass\", \"_boreHeight\", \"_airFriction\", \"_muzzleVelocity\",\r\n    \"_temperature\", \"_barometricPressure\", \"_relativeHumidity\", \"_simSteps\", \"_windSpeed\",\r\n    \"_windDirection\", \"_inclinationAngle\", \"_targetSpeed\", \"_targetRange\", \"_bc\", \"_dragModel\",\r\n    \"_atmosphereModel\", \"_storeRangeCardData\", \"_stabilityFactor\", \"_twistDirection\", \"_latitude\",\r\n    \"_directionOfFire\"\r\n];\r\n_windSpeed params [\"_windSpeed1\", \"_windSpeed2\"];\r\n\r\nprivate [\"_bulletPos\", \"_bulletVelocity\", \"_bulletAccel\", \"_bulletSpeed\", \"_gravity\", \"_deltaT\"];\r\n_bulletPos = [0, 0, 0];\r\n_bulletVelocity = [0, 0, 0];\r\n_bulletAccel = [0, 0, 0];\r\n_bulletSpeed = 0;\r\n_gravity = [0, sin(_scopeBaseAngle + _inclinationAngle) * -9.80665, cos(_scopeBaseAngle + _inclinationAngle) * -9.80665];\r\n_deltaT = 1 / _simSteps;\r\n\r\nprivate [\"_elevation\", \"_windage1\", \"_windage2\", \"_lead\", \"_TOF\", \"_trueVelocity\", \"_trueSpeed\", \"_kineticEnergy\", \"_verticalCoriolis\", \"_verticalDeflection\", \"_horizontalCoriolis\", \"_horizontalDeflection\", \"_spinDrift\", \"_spinDeflection\"];\r\n_elevation = 0;\r\n_windage1 = 0;\r\n_windage2 = 0;\r\n_lead = 0;\r\n_TOF = 0;\r\n_trueVelocity = [0, 0, 0];\r\n_trueSpeed = 0;\r\n_verticalCoriolis = 0;\r\n_verticalDeflection = 0;\r\n_horizontalCoriolis = 0;\r\n_horizontalDeflection = 0;\r\n_spinDrift = 0;\r\n_spinDeflection = 0;\r\n\r\nprivate [\"_n\", \"_range\", \"_rangeFactor\"];\r\n_n = 0;\r\n_range = 0;\r\n_rangeFactor = 1;\r\nif (_storeRangeCardData) then {\r\n    if (GVAR(currentUnit) == 1) then {\r\n        _rangeFactor = 1.0936133;\r\n    };\r\n    GVAR(rangeCardData) = [];\r\n};\r\n\r\nprivate [\"_wind1\", \"_wind2\", \"_windDrift\"];\r\n_wind1 = [cos(270 - _windDirection * 30) * _windSpeed1, sin(270 - _windDirection * 30) * _windSpeed1, 0];\r\n_wind2 = [cos(270 - _windDirection * 30) * _windSpeed2, sin(270 - _windDirection * 30) * _windSpeed2, 0];\r\n_windDrift = 0;\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    _bc = [_bc, _temperature, _barometricPressure, _relativeHumidity, _atmosphereModel] call EFUNC(advanced_ballistics,calculateAtmosphericCorrection);\r\n};\r\n\r\nprivate [\"_speedTotal\", \"_stepsTotal\", \"_speedAverage\"];\r\n_speedTotal = 0;\r\n_stepsTotal = 0;\r\n_speedAverage = 0;\r\n\r\nprivate [\"_eoetvoesMultiplier\"];\r\n_eoetvoesMultiplier = 0;\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    _eoetvoesMultiplier = 2 * (0.0000729 * _muzzleVelocity / -9.80665) * cos(_latitude) * sin(_directionOfFire);\r\n};\r\n\r\n_TOF = 0;\r\n\r\n_bulletPos set [0, 0];\r\n_bulletPos set [1, 0];\r\n_bulletPos set [2, -(_boreHeight / 100)];\r\n\r\n_bulletVelocity set [0, 0];\r\n_bulletVelocity set [1, Cos(_scopeBaseAngle) * _muzzleVelocity];\r\n_bulletVelocity set [2, Sin(_scopeBaseAngle) * _muzzleVelocity];\r\n\r\nwhile {_TOF < 15 && (_bulletPos select 1) < _targetRange} do {\r\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\r\n\r\n    _speedTotal = _speedTotal + _bulletSpeed;\r\n    _stepsTotal = _stepsTotal + 1;\r\n    _speedAverage = (_speedTotal / _stepsTotal);\r\n\r\n    _trueVelocity = _bulletVelocity vectorDiff _wind1;\r\n    _trueSpeed = vectorMagnitude _trueVelocity;\r\n\r\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n        private _drag = if (missionNamespace getVariable [QEGVAR(advanced_ballistics,extensionAvailable), false]) then {\r\n            parseNumber((\"ace_advanced_ballistics\" callExtension format[\"retard:%1:%2:%3\", _dragModel, _bc, _trueSpeed]))\r\n        } else {\r\n            ([_dragModel, _bc, _trueSpeed] call EFUNC(advanced_ballistics,calculateRetardation))\r\n        };\r\n        _bulletAccel = (vectorNormalized _trueVelocity) vectorMultiply (-1 * _drag);\r\n    } else {\r\n        _bulletAccel = _trueVelocity vectorMultiply (_trueSpeed * _airFriction);\r\n    };\r\n\r\n    _bulletAccel = _bulletAccel vectorAdd _gravity;\r\n\r\n    _bulletVelocity = _bulletVelocity vectorAdd (_bulletAccel vectorMultiply _deltaT);\r\n    _bulletPos = _bulletPos vectorAdd (_bulletVelocity vectorMultiply _deltaT);\r\n\r\n    _TOF = _TOF + _deltaT;\r\n\r\n    if (_storeRangeCardData) then {\r\n        _range = GVAR(rangeCardStartRange) + _n * GVAR(rangeCardIncrement);\r\n        if ((_bulletPos select 1) * _rangeFactor >= _range && _range <= GVAR(rangeCardEndRange)) then {\r\n            if ((_bulletPos select 1) > 0) then {\r\n                _elevation = - atan((_bulletPos select 2) / (_bulletPos select 1));\r\n                _windage1 = - atan((_bulletPos select 0) / (_bulletPos select 1));\r\n                _windDrift = (_wind2 select 0) * (_TOF - (_range / _rangeFactor) / _muzzleVelocity);\r\n                _windage2 = - atan(_windDrift / (_bulletPos select 1));\r\n            };\r\n            if (_range != 0) then {\r\n                _lead = (_targetSpeed * _TOF) / (Tan(3.38 / 60) * _range);\r\n            };\r\n            _kineticEnergy = 0.5 * (_bulletMass / 1000 * (_bulletSpeed ^ 2));\r\n            _kineticEnergy = _kineticEnergy * 0.737562149;\r\n\r\n            if ((missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) && (_bulletPos select 1) > 0) then {\r\n                // Coriolis\r\n                _horizontalDeflection = 0.0000729 * ((_bulletPos select 1) ^ 2) * sin(_latitude) / _speedAverage;\r\n                _horizontalCoriolis = - atan(_horizontalDeflection / (_bulletPos select 1));\r\n                _windage1 = _windage1 + _horizontalCoriolis;\r\n                _windage2 = _windage2 + _horizontalCoriolis;\r\n                // Eoetvoes\r\n                _verticalDeflection = (_bulletPos select 2) * _eoetvoesMultiplier;\r\n                _verticalCoriolis = - atan(_verticalDeflection / (_bulletPos select 1));\r\n                _elevation = _elevation + _verticalCoriolis;\r\n                // Spin drift\r\n                _spinDeflection = _twistDirection * 0.0254 * 1.25 * (_stabilityFactor + 1.2) * _TOF ^ 1.83;\r\n                _spinDrift = - atan(_spinDeflection / (_bulletPos select 1));\r\n                _windage1 = _windage1 + _spinDrift;\r\n                _windage2 = _windage2 + _spinDrift;\r\n            };\r\n\r\n            GVAR(rangeCardData) set [_n, [_range, _elevation * 60, [_windage1 * 60, _windage2 * 60], _lead, _TOF, _bulletSpeed, _kineticEnergy]];\r\n            _n = _n + 1;\r\n        };\r\n    };\r\n};\r\n\r\nif ((_bulletPos select 1) > 0) then {\r\n    _elevation = - atan((_bulletPos select 2) / (_bulletPos select 1));\r\n    _windage1 = - atan((_bulletPos select 0) / (_bulletPos select 1));\r\n    _windDrift = (_wind2 select 0) * (_TOF - _targetRange / _muzzleVelocity);\r\n    _windage2 = - atan(_windDrift / (_bulletPos select 1));\r\n};\r\n\r\nif (_targetRange != 0) then {\r\n    _lead = (_targetSpeed * _TOF) / (Tan(3.38 / 60) * _targetRange);\r\n};\r\n\r\n_kineticEnergy = 0.5 * (_bulletMass / 1000 * (_bulletSpeed ^ 2));\r\n_kineticEnergy = _kineticEnergy * 0.737562149;\r\n\r\nif ((missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) && (_bulletPos select 1) > 0) then {\r\n    // Coriolis\r\n    _horizontalDeflection = 0.0000729 * ((_bulletPos select 1) ^ 2) * sin(_latitude) / _speedAverage;\r\n    _horizontalCoriolis = - atan(_horizontalDeflection / (_bulletPos select 1));\r\n    _windage1 = _windage1 + _horizontalCoriolis;\r\n    _windage2 = _windage2 + _horizontalCoriolis;\r\n    // Eoetvoes\r\n    _verticalDeflection = (_bulletPos select 2) * _eoetvoesMultiplier;\r\n    _verticalCoriolis = - atan(_verticalDeflection / (_bulletPos select 1));\r\n    _elevation = _elevation + _verticalCoriolis;\r\n    // Spin drift\r\n    _spinDeflection = _twistDirection * 0.0254 * 1.25 * (_stabilityFactor + 1.2) * _TOF ^ 1.83;\r\n    _spinDrift = - atan(_spinDeflection / (_bulletPos select 1));\r\n    _windage1 = _windage1 + _spinDrift;\r\n    _windage2 = _windage2 + _spinDrift;\r\n};\r\n\r\n[_elevation * 60, [_windage1 * 60, _windage2 * 60], _lead, _TOF, _bulletSpeed, _kineticEnergy, _verticalCoriolis * 60, _horizontalCoriolis * 60, _spinDrift * 60]\r\n"},{"name":"ace_atragmx_fnc_calculate_target_range_assist","file":"atragmx/functions/fnc_calculate_target_range_assist.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the target range and updates the output fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_calculate_target_range_assist\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_targetSize\", \"_imageSize\", \"_angle\", \"_estRange\"];\r\n\r\n_angle = parseNumber(ctrlText 7012);\r\n_targetSize = parseNumber(ctrlText 7010);\r\nif (GVAR(rangeAssistUseTargetHeight)) then {\r\n    _targetSize = _targetSize * cos(_angle);\r\n};\r\nswitch (GVAR(rangeAssistTargetSizeUnit)) do {\r\n    case 0: {\r\n        _targetSize = _targetSize * 0.0254;\r\n    };\r\n    case 1: {\r\n        _targetSize = _targetSize * 0.3048;\r\n    };\r\n    case 2: {\r\n        _targetSize = _targetSize * 0.01;\r\n    };\r\n};\r\n_imageSize = parseNumber(ctrlText 7011);\r\nswitch (GVAR(rangeAssistImageSizeUnit)) do {\r\n    case 0: {\r\n        _imageSize = _imageSize / 6400 * 360;\r\n    };\r\n    case 1: {\r\n        _imageSize = _imageSize / 60;\r\n    };\r\n    case 2: {\r\n        _imageSize = _imageSize / 60 / 1.047;\r\n    };\r\n};\r\n_estRange = parseNumber(ctrlText 7013);\r\nif (GVAR(currentUnit) == 1) then {\r\n    _estRange = _estRange / 1.0936133;\r\n};\r\n\r\nswitch (_this) do {\r\n    case 0: {\r\n        _targetSize = tan(_imageSize) * _estRange;\r\n\r\n        if (GVAR(rangeAssistUseTargetHeight)) then {\r\n            _targetSize = _targetSize / cos(_angle);\r\n        };\r\n\r\n        switch (GVAR(rangeAssistTargetSizeUnit)) do {\r\n            case 0: {\r\n                _targetSize = _targetSize / 0.0254;\r\n            };\r\n            case 1: {\r\n                _targetSize = _targetSize / 0.3048;\r\n            };\r\n            case 2: {\r\n                _targetSize = _targetSize / 0.01;\r\n            };\r\n        };\r\n\r\n        ctrlSetText [7010, Str(Round(_targetSize * 100) / 100)];\r\n    };\r\n    case 1: {\r\n        _imageSize = atan(_targetSize / _estRange);\r\n\r\n        switch (GVAR(rangeAssistImageSizeUnit)) do {\r\n            case 0: {\r\n                _imageSize = _imageSize * 6400 / 360;\r\n            };\r\n            case 1: {\r\n                _imageSize = _imageSize * 60;\r\n            };\r\n            case 2: {\r\n                _imageSize = _imageSize * 60 * 1.047;\r\n            };\r\n        };\r\n\r\n        ctrlSetText [7011, Str(Round(_imageSize * 100) / 100)];\r\n    };\r\n    case 2: {\r\n        _estRange = _targetSize / tan(_imageSize);\r\n\r\n        ctrlSetText [7013, Str(Round(_estRange))];\r\n    };\r\n};\r\n"},{"name":"ace_atragmx_fnc_calculate_target_solution","file":"atragmx/functions/fnc_calculate_target_solution.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the fireing solution and updates the result input/output fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_calculate_target_solution\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n[] call FUNC(parse_input);\r\n\r\nprivate [\"_scopeBaseAngle\"];\r\n_scopeBaseAngle = (GVAR(workingMemory) select 3);\r\n\r\nprivate [\"_bulletMass\", \"_bulletDiameter\", \"_boreHeight\", \"_airFriction\", \"_barrelTwist\", \"_muzzleVelocity\", \"_bc\", \"_dragModel\", \"_atmosphereModel\", \"_twistDirection\"];\r\n_bulletMass = GVAR(workingMemory) select 12;\r\n_bulletDiameter = GVAR(workingMemory) select 13;\r\n_boreHeight = GVAR(workingMemory) select 5;\r\n_airFriction = GVAR(workingMemory) select 4;\r\n_barrelTwist = GVAR(workingMemory) select 14;\r\n_muzzleVelocity = GVAR(workingMemory) select 1;\r\n_bc = GVAR(workingMemory) select 15;\r\n_dragModel = GVAR(workingMemory) select 16;\r\n_atmosphereModel = GVAR(workingMemory) select 17;\r\n\r\n_twistDirection = 0;\r\nif (_barrelTwist > 0) then {\r\n    _twistDirection = 1;\r\n} else {\r\n    if (_barrelTwist < 0) then {\r\n        _twistDirection = -1;\r\n    };\r\n};\r\n_barrelTwist = abs(_barrelTwist);\r\n\r\nprivate [\"_altitude\", \"_temperature\", \"_barometricPressure\", \"_relativeHumidity\"];\r\n_altitude = GVAR(altitude);\r\n_temperature = GVAR(temperature);\r\n_barometricPressure = GVAR(barometricPressure);\r\n_relativeHumidity = GVAR(relativeHumidity);\r\nif (!GVAR(atmosphereModeTBH)) then {\r\n    _barometricPressure = 1013.25 * (1 - (0.0065 * _altitude) / (273.15 + _temperature + 0.0065 * _altitude)) ^ 5.255754495;\r\n    _relativeHumidity = 50;\r\n};\r\n\r\nprivate [\"_bulletLength\", \"_stabilityFactor\"];\r\n_bulletLength = 45.72;\r\n_stabilityFactor = 1.5;\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    if (_bulletDiameter > 0 && _bulletLength > 0 && _bulletMass > 0 && _barrelTwist > 0) then {\r\n        _stabilityFactor = [_bulletDiameter, _bulletLength, _bulletMass, _barrelTwist * 10, _muzzleVelocity, _temperature, _barometricPressure] call EFUNC(advanced_ballistics,calculateStabilityFactor);\r\n    };\r\n};\r\n\r\nprivate [\"_latitude\", \"_directionOfFire\", \"_windSpeed1\", \"_windSpeed2\", \"_windDirection\", \"_inclinationAngle\", \"_targetSpeed\", \"_targetRange\"];\r\n_latitude = GVAR(latitude) select GVAR(currentTarget);\r\n_directionOfFire = GVAR(directionOfFire) select GVAR(currentTarget);\r\n_windSpeed1 = GVAR(windSpeed1) select GVAR(currentTarget);\r\n_windSpeed2 = GVAR(windSpeed2) select GVAR(currentTarget);\r\n_windDirection = GVAR(windDirection) select GVAR(currentTarget);\r\n_inclinationAngle = GVAR(inclinationAngle) select GVAR(currentTarget);\r\n_targetSpeed = GVAR(targetSpeed) select GVAR(currentTarget);\r\n_targetRange = GVAR(targetRange) select GVAR(currentTarget);\r\n\r\nprivate [\"_result\"];\r\n_result = [_scopeBaseAngle, _bulletMass, _boreHeight, _airFriction, _muzzleVelocity, _temperature, _barometricPressure, _relativeHumidity, 1000,\r\n            [_windSpeed1, _windSpeed2], _windDirection, _inclinationAngle, _targetSpeed, _targetRange, _bc, _dragModel, _atmosphereModel, false, _stabilityFactor, _twistDirection, _latitude, _directionOfFire] call FUNC(calculate_solution);\r\n\r\nGVAR(elevationOutput) set [GVAR(currentTarget), _result select 0];\r\nGVAR(windage1Output) set [GVAR(currentTarget), (_result select 1) select 0];\r\nGVAR(windage2Output) set [GVAR(currentTarget), (_result select 1) select 1];\r\nGVAR(leadOutput) set [GVAR(currentTarget), _result select 2];\r\nGVAR(tofOutput) set [GVAR(currentTarget), _result select 3];\r\nGVAR(velocityOutput) set [GVAR(currentTarget), _result select 4];\r\n\r\n[] call FUNC(update_result);\r\n"},{"name":"ace_atragmx_fnc_calculate_target_speed_assist","file":"atragmx/functions/fnc_calculate_target_speed_assist.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the target speed and updates the output fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_calculate_target_speed_assist\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_targetRange\", \"_numTicks\", \"_timeSecs\", \"_estSpeed\"];\r\n\r\n_targetRange = parseNumber(ctrlText 8004);\r\n_numTicks = parseNumber(ctrlText 8005);\r\n_timeSecs = parseNumber(ctrlText 8006);\r\n_estSpeed = 0;\r\n\r\nif (GVAR(currentUnit) == 1) then {\r\n    _targetRange = _targetRange / 1.0936133;\r\n};\r\n\r\nswitch (GVAR(rangeAssistImageSizeUnit)) do {\r\n    case 0: {\r\n        _numTicks = _numTicks / 6400 * 360;\r\n    };\r\n    case 1: {\r\n        _numTicks = _numTicks / 60;\r\n    };\r\n    case 2: {\r\n        _numTicks = _numTicks / 60 / 1.047;\r\n    };\r\n};\r\n\r\nif (_timeSecs > 0) then {\r\n    _estSpeed = tan(_numTicks) * _targetRange / _timeSecs;\r\n};\r\n\r\nif (GVAR(currentUnit) != 2) then {\r\n    _estSpeed = _estSpeed * 2.23693629;\r\n};\r\n\r\nctrlSetText [8007, Str(Round(_estSpeed * 10) / 10)];\r\n"},{"name":"ace_atragmx_fnc_can_show","file":"atragmx/functions/fnc_can_show.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Tests if the ATragMX dialog can be shown\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * can_show <BOOL>\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_can_show\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n((\"ACE_ATragMX\" in (uniformItems ACE_player)) || (\"ACE_ATragMX\" in (vestItems ACE_player))) && !(underwater ACE_player);\r\n"},{"name":"ace_atragmx_fnc_change_gun","file":"atragmx/functions/fnc_change_gun.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Selects a new gun profile and updates the gun column and the result input/output fields\r\n *\r\n * Arguments:\r\n * gunID <number>\r\n * restore workingMemory from gunList <BOOL>\r\n * update display <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_change_gun\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_gunID\", \"_restoreMemory\", \"_updateDisplay\"];\r\n\r\nif (_gunID < 0 || _gunID > (count GVAR(gunList)) - 1) exitWith {};\r\n\r\nif (_restoreMemory) then {\r\n    GVAR(workingMemory) = +(GVAR(gunList) select _gunID);\r\n};\r\nGVAR(currentGun) = _gunID;\r\n\r\nif (_updateDisplay) then {\r\n    lbSetCurSel [6000, GVAR(currentGun)];\r\n};\r\n\r\nGVAR(currentScopeUnit) = 0 max (GVAR(workingMemory) select 6) min 3;\r\nGVAR(currentScopeClickUnit) = 0 max (GVAR(workingMemory) select 7) min 2;\r\nGVAR(currentScopeClickNumber) = 1 max (GVAR(workingMemory) select 8) min 10;\r\n\r\nif (_updateDisplay) then {\r\n    [] call FUNC(update_gun);\r\n    [] call FUNC(update_gun_ammo_data);\r\n};\r\n\r\nGVAR(elevationOutput) set [GVAR(currentTarget), 0];\r\nGVAR(windage1Output) set [GVAR(currentTarget), 0];\r\nGVAR(windage2Output) set [GVAR(currentTarget), 0];\r\nGVAR(leadOutput) set [GVAR(currentTarget), 0];\r\nGVAR(tofOutput) set [GVAR(currentTarget), 0];\r\nGVAR(velocityOutput) set [GVAR(currentTarget), 0];\r\n\r\nif (_updateDisplay) then {\r\n    [] call FUNC(calculate_target_solution);\r\n};\r\n"},{"name":"ace_atragmx_fnc_change_target_slot","file":"atragmx/functions/fnc_change_target_slot.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Selects a target slot (A, B, C or D)\r\n *\r\n * Arguments:\r\n * target <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 2 call ace_atragmx_fnc_change_target_slot\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_target\"];\r\n_target = 0 max _this min 3;\r\n\r\ncall FUNC(parse_input);\r\n\r\nGVAR(currentTarget) = _target;\r\ncall FUNC(update_target_selection);\r\n\r\n[] call FUNC(calculate_target_solution);\r\n"},{"name":"ace_atragmx_fnc_clear_user_data","file":"atragmx/functions/fnc_clear_user_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Removes all user data from the profileNamespace\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_clear_user_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_gunList\", nil];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_currentUnit\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_currentGun\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_currentTarget\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_currentScopeUnit\", nil];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_atmosphereModeTBH\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_altitude\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_temperature\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_barometricPressure\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_relativeHumidity\", nil];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_showWind2\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_latitude\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_directionOfFire\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed1\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed2\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_windDirection\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_inclinationAngle\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeed\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeedDirection\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_targetRange\", nil];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardStartRange\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardEndRange\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardIncrement\", nil];\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardCurrentColumn\", nil];"},{"name":"ace_atragmx_fnc_create_dialog","file":"atragmx/functions/fnc_create_dialog.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Creates the ATragMX dialog\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_create_dialog\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __dsp (uiNamespace getVariable \"ATragMX_Display\")\r\n#define __ctrlBackground (__dsp displayCtrl 720000)\r\n\r\nif (GVAR(active)) exitWith { false };\r\nif (underwater ACE_player) exitWith { false };\r\nif (!(\"ACE_ATragMX\" in (uniformItems ACE_player)) && !(\"ACE_ATragMX\" in (vestItems ACE_player))) exitWith { false };\r\n\r\ncreateDialog 'ATragMX_Display';\r\n\r\ncall FUNC(update_target_selection);\r\n\r\nGVAR(showMainPage) call FUNC(show_main_page);\r\n\r\nGVAR(showAddNewGun) call FUNC(show_add_new_gun);\r\nGVAR(showAtmoEnvData) call FUNC(show_atmo_env_data);\r\nGVAR(showGunAmmoData) call FUNC(show_gun_ammo_data);\r\nGVAR(showGunList) call FUNC(show_gun_list);\r\nGVAR(showRangeCard) call FUNC(show_range_card);\r\nif (GVAR(showRangeCard)) then {\r\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 5001);\r\n    [] call FUNC(update_range_card);\r\n};\r\nGVAR(showRangeCardSetup) call FUNC(show_range_card_setup);\r\nGVAR(showSolutionSetup) call FUNC(show_solution_setup);\r\nGVAR(showTargetData) call FUNC(show_target_data);\r\nGVAR(showTargetRangeAssist) call FUNC(show_target_range_assist);\r\nGVAR(showTargetSpeedAssist) call FUNC(show_target_speed_assist);\r\nGVAR(showTargetSpeedAssistTimer) call FUNC(show_target_speed_assist_timer);\r\n\r\n[GVAR(currentGun), false, true] call FUNC(change_gun);\r\n\r\n{\r\n    lbAdd [6000, _x select 0];\r\n} forEach GVAR(gunList);\r\n\r\nGVAR(active) = true;\r\n\r\nGVAR(DialogPFH) = [{\r\n    if (!GVAR(active)) exitWith {\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n    __ctrlBackground ctrlSetText format [QPATHTOF(UI\\ATRAG_%1.paa), [\"N\", \"D\"] select (call EFUNC(common,ambientBrightness))];\r\n}, 60, []] call CBA_fnc_addPerFrameHandler;\r\n\r\ntrue\r\n"},{"name":"ace_atragmx_fnc_cycle_gun_list","file":"atragmx/functions/fnc_cycle_gun_list.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Cycles through the gun list\r\n *\r\n * Arguments:\r\n * step <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_cycle_scope_unit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!(GVAR(showMainPage) || GVAR(showGunList))) exitWith {};\r\n\r\n[(GVAR(currentGun) + (count GVAR(gunList)) + _this) % (count GVAR(gunList)), true, true] call FUNC(change_gun);\r\n"},{"name":"ace_atragmx_fnc_cycle_image_size_units","file":"atragmx/functions/fnc_cycle_image_size_units.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Cycles through the image size units\r\n *\r\n * Arguments:\r\n * step <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_cycle_image_size_units\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(rangeAssistImageSizeUnit) = (GVAR(rangeAssistImageSizeUnit) + 1) % (count GVAR(rangeAssistImageSizeUnits));\r\nctrlSetText [7015, GVAR(rangeAssistImageSizeUnits) select GVAR(rangeAssistImageSizeUnit)];\r\n"},{"name":"ace_atragmx_fnc_cycle_num_ticks_units","file":"atragmx/functions/fnc_cycle_num_ticks_units.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Cycles through the num ticks units\r\n *\r\n * Arguments:\r\n * step <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_cycle_num_ticks_units\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(speedAssistNumTicksUnit) = (GVAR(speedAssistNumTicksUnit) + 1) % (count GVAR(speedAssistNumTicksUnits));\r\nctrlSetText [8009, GVAR(speedAssistNumTicksUnits) select GVAR(speedAssistNumTicksUnit)];\r\ncall FUNC(calculate_target_speed_assist);\r\n"},{"name":"ace_atragmx_fnc_cycle_range_card_columns","file":"atragmx/functions/fnc_cycle_range_card_columns.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Cycles through the range card columns\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_cycle_range_card_columns\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(rangeCardCurrentColumn) = (GVAR(rangeCardCurrentColumn) + 1) % (count GVAR(rangeCardLastColumns));\r\n\r\nctrlSetText [5006, (GVAR(rangeCardLastColumns) select GVAR(rangeCardCurrentColumn))];\r\n\r\n[] call FUNC(update_range_card);\r\n"},{"name":"ace_atragmx_fnc_cycle_scope_unit","file":"atragmx/functions/fnc_cycle_scope_unit.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Cycles through the scope units\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_cycle_scope_unit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n[] call FUNC(parse_input);\r\n\r\nGVAR(currentScopeUnit) = (GVAR(currentScopeUnit) + 1) % (count GVAR(scopeUnits));\r\nGVAR(workingMemory) set [6, GVAR(currentScopeUnit)];\r\n\r\n[] call FUNC(update_scope_unit);\r\n[] call FUNC(update_result);\r\n"},{"name":"ace_atragmx_fnc_cycle_target_size_units","file":"atragmx/functions/fnc_cycle_target_size_units.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Cycles through the target size units\r\n *\r\n * Arguments:\r\n * step <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_cycle_target_size_units\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(rangeAssistTargetSizeUnit) = (GVAR(rangeAssistTargetSizeUnit) + 1) % (count GVAR(rangeAssistTargetSizeUnits));\r\nctrlSetText [7014, GVAR(rangeAssistTargetSizeUnits) select GVAR(rangeAssistTargetSizeUnit)];\r\n"},{"name":"ace_atragmx_fnc_cycle_target_speed_direction","file":"atragmx/functions/fnc_cycle_target_speed_direction.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Cycles through the target directions left/right\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_cycle_target_direction\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif ((ctrlText 140051) == \">\") then {\r\n    ctrlSetText [140051, \"<\"];\r\n} else {\r\n    ctrlSetText [140051, \">\"];\r\n};\r\n"},{"name":"ace_atragmx_fnc_delete_gun","file":"atragmx/functions/fnc_delete_gun.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Deletes the currently selected gun profile from the profileNamespace\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_delete_gun\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_index\"];\r\n_index = lbCurSel 6000;\r\n\r\nif (_index == -1) exitWith {};\r\n\r\nif (GVAR(currentGun) > _index) then {\r\n    GVAR(currentGun) = GVAR(currentGun) - 1;\r\n};\r\n\r\nGVAR(gunList) set [_index, 0];\r\nGVAR(gunList) = GVAR(gunList) - [0];\r\n\r\nlbDelete [6000, _index];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_gunList\", GVAR(gunList)];\r\n"},{"name":"ace_atragmx_fnc_init","file":"atragmx/functions/fnc_init.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Inits all global variables with the default values\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_init\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(active) = false;\r\n\r\nGVAR(workingMemory) = +(GVAR(gunList) select 0);\r\n\r\nGVAR(scopeUnits) = [\"MILs\", \"TMOA\", \"SMOA\", \"Clicks\"];\r\nGVAR(scopeClickUnits) = [\"TMOA\", \"SMOA\", \"MILs\"];\r\n\r\nGVAR(rangeCardStartRange) = 200;\r\nGVAR(rangeCardEndRange) = 2000;\r\nGVAR(rangeCardIncrement) = 50;\r\nGVAR(rangeCardLastColumns) = [\"Lead\", \"RemV\", \"RemE\", \"TmFlt\"];\r\nGVAR(rangeCardCurrentColumn) = 3;\r\nGVAR(rangeCardData) = [];\r\n\r\nGVAR(rangeAssistTargetSizeUnits) = [\"in\", \"ft\", \"cm\", \"m\"];\r\nGVAR(rangeAssistTargetSizeUnit) = 2;\r\nGVAR(rangeAssistImageSizeUnits) = [\"MIL\", \"TMOA\", \"IOA\"];\r\nGVAR(rangeAssistImageSizeUnit) = 0;\r\nGVAR(rangeAssistUseTargetHeight) = true;\r\n\r\nGVAR(speedAssistNumTicksUnits) = [\"MIL\", \"TMOA\", \"IOA\"];\r\nGVAR(speedAssistNumTicksUnit) = 0;\r\nGVAR(speedAssistTimer) = true;\r\n\r\nGVAR(currentUnit) = 2;\r\nGVAR(currentGun) = 0;\r\nGVAR(currentTarget) = 0;\r\nGVAR(currentScopeUnit) = 0;\r\nGVAR(currentScopeClickUnit) = 2;\r\nGVAR(currentScopeClickUnitTemp) = 2;\r\nGVAR(currentScopeClickNumber) = 10;\r\nGVAR(currentScopeClickNumberTemp) = 10;\r\n\r\nGVAR(atmosphereModeTBH) = true;\r\nGVAR(altitude) = 0;\r\nGVAR(temperature) = 15;\r\nGVAR(barometricPressure) = 1013.25;\r\nGVAR(relativeHumidity) = 0.5;\r\n\r\nGVAR(latitude) = [38, 38, 38, 38];\r\nGVAR(directionOfFire) = [0, 0, 0, 0];\r\nGVAR(windSpeed1) = [0, 0, 0, 0];\r\nGVAR(windSpeed2) = [0, 0, 0, 0];\r\nGVAR(windDirection) = [12, 12, 12, 12];\r\nGVAR(inclinationAngle) = [0, 0, 0, 0];\r\nGVAR(targetSpeed) = [0, 0, 0, 0];\r\nGVAR(targetSpeedDirection) = [1, 1, 1, 1];\r\nGVAR(targetRange) = [0, 0, 0, 0];\r\n\r\nGVAR(showWind2) = false;\r\nGVAR(elevationOutput) = [0, 0, 0, 0];\r\nGVAR(windage1Output) = [0, 0, 0, 0];\r\nGVAR(windage2Output) = [0, 0, 0, 0];\r\nGVAR(leadOutput) = [0, 0, 0, 0];\r\nGVAR(tofOutput) = [0, 0, 0, 0];\r\nGVAR(velocityOutput) = [0, 0, 0, 0];\r\n\r\nGVAR(showMainPage) = true;\r\nGVAR(showAddNewGun) = false;\r\nGVAR(showAtmoEnvData) = false;\r\nGVAR(showGunAmmoData) = false;\r\nGVAR(showGunList) = false;\r\nGVAR(showRangeCard) = false;\r\nGVAR(showRangeCardSetup) = false;\r\nGVAR(showSolutionSetup) = false;\r\nGVAR(showTargetData) = false;\r\nGVAR(showTargetRangeAssist) = false;\r\nGVAR(showTargetSpeedAssist) = false;\r\nGVAR(showTargetSpeedAssistTimer) = false;\r\n"},{"name":"ace_atragmx_fnc_on_close_dialog","file":"atragmx/functions/fnc_on_close_dialog.sqf","text":"#include \"script_component.hpp\"\r\n\r\nuiNamespace setVariable ['ATragMX_Display', nil];\r\nGVAR(active) = false;\r\n[GVAR(DialogPFH)] call CBA_fnc_removePerFrameHandler;"},{"name":"ace_atragmx_fnc_parse_input","file":"atragmx/functions/fnc_parse_input.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Parses all input fields in the gun, atmosphere and target column and the result input fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_parse_input\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(altitude) = -1000 max parseNumber(ctrlText 130030) min 20000;\r\nGVAR(temperature) = -50 max parseNumber(ctrlText 130040) min 160;\r\nGVAR(barometricPressure) = 10 max parseNumber(ctrlText 130050) min 1350;\r\nGVAR(relativeHumidity) = (0 max parseNumber(ctrlText 130060) min 100) / 100;\r\nif (GVAR(currentUnit) != 2) then {\r\n    GVAR(altitude) = GVAR(altitude) * 0.3048;\r\n    GVAR(temperature) = (GVAR(temperature) - 32) / 1.8;\r\n    GVAR(barometricPressure) = GVAR(barometricPressure) * 33.86389;\r\n};\r\n\r\nprivate [\"_inclinationAngleCosine\", \"_inclinationAngleDegree\"];\r\nGVAR(latitude) set [GVAR(currentTarget), -90 max Round(parseNumber(ctrlText 140000)) min 90];\r\nGVAR(directionOfFire) set [GVAR(currentTarget), 0 max abs(Round(parseNumber(ctrlText 140010))) min 359];\r\nGVAR(windSpeed1) set [GVAR(currentTarget), 0 max abs(parseNumber(ctrlText 140020)) min 50];\r\nGVAR(windSpeed2) set [GVAR(currentTarget), 0 max abs(parseNumber(ctrlText 140021)) min 50];\r\nGVAR(windDirection) set [GVAR(currentTarget), 1 max Round(parseNumber(ctrlText 140030)) min 12];\r\n_inclinationAngleCosine = 0.5 max parseNumber(ctrlText 140041) min 1;\r\n_inclinationAngleDegree = -60 max round(parseNumber(ctrlText 140040)) min 60;\r\nif (_inclinationAngleDegree != GVAR(inclinationAngle) select GVAR(currentTarget)) then {\r\n    GVAR(inclinationAngle) set [GVAR(currentTarget), _inclinationAngleDegree];\r\n} else {\r\n    if (_inclinationAngleCosine != Round(cos(GVAR(inclinationAngle) select GVAR(currentTarget)) * 100) / 100) then {\r\n        GVAR(inclinationAngle) set [GVAR(currentTarget), round(acos(_inclinationAngleCosine))];\r\n    };\r\n};\r\nGVAR(targetSpeed) set [GVAR(currentTarget), 0 max abs(parseNumber(ctrlText 140050)) min 50];\r\nif ((ctrlText 140051) == \">\") then {\r\n    GVAR(targetSpeedDirection) set [GVAR(currentTarget), +1];\r\n} else {\r\n    GVAR(targetSpeedDirection) set [GVAR(currentTarget), -1];\r\n};\r\nGVAR(targetRange) set [GVAR(currentTarget), 0 max abs(parseNumber(ctrlText 140060)) min 4000];\r\nif (GVAR(currentUnit) != 2) then {\r\n    GVAR(windSpeed1) set [GVAR(currentTarget), (GVAR(windSpeed1) select GVAR(currentTarget)) * 0.44704];\r\n    GVAR(windSpeed2) set [GVAR(currentTarget), (GVAR(windSpeed2) select GVAR(currentTarget))  * 0.44704];\r\n    GVAR(targetSpeed) set [GVAR(currentTarget), (GVAR(targetSpeed) select GVAR(currentTarget))  * 0.44704];\r\n};\r\nif (GVAR(currentUnit) == 1) then {\r\n    GVAR(targetRange) set [GVAR(currentTarget), (GVAR(targetRange) select GVAR(currentTarget))  * 0.9144];\r\n};\r\n\r\nprivate [\"_boreHeight\", \"_bulletMass\", \"_bulletDiameter\", \"_airFriction\", \"_rifleTwist\", \"_muzzleVelocity\", \"_zeroRange\"];\r\n_boreHeight = parseNumber(ctrlText 120000);\r\n_bulletMass = parseNumber(ctrlText 120010);\r\n_bulletDiameter = parseNumber(ctrlText 120020) * 10;\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    _airFriction = 0.1 max parseNumber(ctrlText 120030) min 2;\r\n} else {\r\n    _airFriction = parseNumber(ctrlText 120030) / -1000;\r\n};\r\n_rifleTwist = parseNumber(ctrlText 120040);\r\n_muzzleVelocity = parseNumber(ctrlText 120050);\r\n_zeroRange = parseNumber (ctrlText 120060);\r\nif (GVAR(currentUnit) != 2) then {\r\n    _boreHeight = _boreHeight * 2.54;\r\n    _bulletMass = _bulletMass * 0.06479891;\r\n    _bulletDiameter = _bulletDiameter * 2.54;\r\n    _rifleTwist = _rifleTwist * 2.54;\r\n    _muzzleVelocity = _muzzleVelocity / 3.2808399;\r\n};\r\nif (GVAR(currentUnit) == 1) then {\r\n    _zeroRange = _zeroRange / 1.0936133;\r\n};\r\n_boreHeight = 0.1 max _boreHeight min 10;\r\n_bulletMass = 1 max _bulletMass min 100;\r\n_bulletDiameter = 1 max _bulletDiameter min 25;\r\n_muzzleVelocity = 100 max _muzzleVelocity min 1400;\r\n_zeroRange = 0 max _zeroRange min 1000;\r\nGVAR(workingMemory) set [5, _boreHeight];\r\nGVAR(workingMemory) set [12, _bulletMass];\r\nGVAR(workingMemory) set [13, _bulletDiameter];\r\nGVAR(workingMemory) set [14, _rifleTwist];\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    GVAR(workingMemory) set [15, _airFriction];\r\n} else {\r\n    GVAR(workingMemory) set [4, _airFriction];\r\n};\r\nGVAR(workingMemory) set [1, _muzzleVelocity];\r\nGVAR(workingMemory) set [2, _zeroRange];\r\n\r\n[] call FUNC(update_gun);\r\n[] call FUNC(update_gun_ammo_data);\r\n[] call FUNC(update_atmosphere);\r\n[] call FUNC(update_atmo_env_data);\r\n[] call FUNC(update_target);\r\n[] call FUNC(update_target_data);\r\n\r\n[] call FUNC(store_user_data);\r\n"},{"name":"ace_atragmx_fnc_reset_relative_click_memory","file":"atragmx/functions/fnc_reset_relative_click_memory.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Resets the relative click memory and updates the result input/output fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_reset_relative_click_memory\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(workingMemory) set [10, 0];\r\nGVAR(workingMemory) set [11, 0];\r\n\r\n[] call FUNC(update_result);\r\n"},{"name":"ace_atragmx_fnc_restore_atmo_default","file":"atragmx/functions/fnc_restore_atmo_default.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Restores the atmospheric data defaults\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_restore_atmo_default\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(atmosphereModeTBH) = true;\r\nGVAR(altitude) = 0;\r\nGVAR(temperature) = 15;\r\nGVAR(barometricPressure) = 1013.25;\r\nGVAR(relativeHumidity) = 0.5;\r\n\r\n[] call FUNC(update_atmo_selection);\r\n[] call FUNC(update_atmosphere);\r\n"},{"name":"ace_atragmx_fnc_restore_user_data","file":"atragmx/functions/fnc_restore_user_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Reads user data from profileNamespace\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_restore_user_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(currentUnit) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_currentUnit\", 2]) min 2;\r\n[(profileNamespace getVariable [\"ACE_ATragMX_currentGun\", 0]), true, false] call FUNC(change_gun);\r\nGVAR(currentTarget) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_currentTarget\", 0]) min 3;\r\n\r\nGVAR(atmosphereModeTBH) = profileNamespace getVariable [\"ACE_ATragMX_atmosphereModeTBH\", true];\r\nGVAR(altitude) = -1000 max (profileNamespace getVariable [\"ACE_ATragMX_altitude\", 0]) min 20000;\r\nGVAR(temperature) = -50 max (profileNamespace getVariable [\"ACE_ATragMX_temperature\", 15]) min 160;\r\nGVAR(barometricPressure) = 340 max (profileNamespace getVariable [\"ACE_ATragMX_barometricPressure\", 1013.25]) min 1350;\r\nGVAR(relativeHumidity) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_relativeHumidity\", 0.5]) min 1;\r\n\r\nGVAR(showWind2) = profileNamespace getVariable [\"ACE_ATragMX_showWind2\", false];\r\nGVAR(latitude) = profileNamespace getVariable [\"ACE_ATragMX_latitude\", [38, 38, 38, 38]];\r\nGVAR(directionOfFire) = profileNamespace getVariable [\"ACE_ATragMX_directionOfFire\", [0, 0, 0, 0]];\r\nGVAR(windSpeed1) = profileNamespace getVariable [\"ACE_ATragMX_windSpeed1\", [0, 0, 0, 0]];\r\nGVAR(windSpeed2) = profileNamespace getVariable [\"ACE_ATragMX_windSpeed2\", [0, 0, 0, 0]];\r\nGVAR(windDirection) = profileNamespace getVariable [\"ACE_ATragMX_windDirection\", [12, 12, 12, 12]];\r\nGVAR(inclinationAngle) = profileNamespace getVariable [\"ACE_ATragMX_inclinationAngle\", [0, 0, 0, 0]];\r\nGVAR(targetSpeed) = profileNamespace getVariable [\"ACE_ATragMX_targetSpeed\", [0, 0, 0, 0]];\r\nGVAR(targetSpeedDirection) = profileNamespace getVariable [\"ACE_ATragMX_targetSpeedDirection\", [1, 1, 1, 1]];\r\nGVAR(targetRange) = profileNamespace getVariable [\"ACE_ATragMX_targetRange\", [0, 0, 0, 0]];\r\n\r\nGVAR(rangeCardStartRange) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardStartRange\", 200]) min 3000;\r\nGVAR(rangeCardEndRange) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardEndRange\", 2000]) min 3000;\r\nGVAR(rangeCardIncrement) = 1 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardIncrement\", 50]) min 3000;\r\nGVAR(rangeCardCurrentColumn) = 0 max (profileNamespace getVariable [\"ACE_ATragMX_rangeCardCurrentColumn\", 3]) min 3;\r\n"},{"name":"ace_atragmx_fnc_save_gun","file":"atragmx/functions/fnc_save_gun.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Saves the currently select gun profile into the profileNamespace\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_save_gun\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_index\"];\r\n_index = 0 max (lbCurSel 6000);\r\n\r\nGVAR(gunList) set [_index, +GVAR(workingMemory)];\r\n\r\nlbClear 6000;\r\n{\r\n    lbAdd [6000, _x select 0];\r\n} forEach GVAR(gunList);\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_gunList\", GVAR(gunList)];\r\n"},{"name":"ace_atragmx_fnc_show_add_new_gun","file":"atragmx/functions/fnc_show_add_new_gun.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides add new gun controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_add_new_gun\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showAddNewGun) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [11000, 11001, 11002, 11003];"},{"name":"ace_atragmx_fnc_show_atmo_env_data","file":"atragmx/functions/fnc_show_atmo_env_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the atmosphere and environmental data controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * false call ace_atragmx_fnc_show_atmo_env_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showAtmoEnvData) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [13000, 13001, 13002, 13003, 130030, 13004, 130040, 13005, 130050, 13006, 130060, 13007, 13008, 13009, 13010, 13011];\r\n\r\nif (_this) then {\r\n    [] call FUNC(update_atmo_selection);\r\n    [] call FUNC(update_atmo_env_data);\r\n};\r\n"},{"name":"ace_atragmx_fnc_show_gun_ammo_data","file":"atragmx/functions/fnc_show_gun_ammo_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the gun ammo data controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * false call ace_atragmx_fnc_show_gun_ammo_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showGunAmmoData) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [12000, 120000, 12001, 120010, 12002, 120020, 12003, 120030, 12004, 120040, 12005, 120050, 12006, 120060, 120061, 12007, 12008, 12009, 12010, 12011];\r\n\r\nif (_this) then {\r\n    [] call FUNC(update_gun_ammo_data);\r\n};\r\n"},{"name":"ace_atragmx_fnc_show_gun_list","file":"atragmx/functions/fnc_show_gun_list.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the gun list controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_gun_list\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showGunList) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [6000, 6001, 6002, 6003, 6004, 6005, 6006, 6007];\r\n\r\nif (_this) then {\r\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 6002);\r\n    lbSetCurSel [6000, GVAR(currentGun)];\r\n};\r\n"},{"name":"ace_atragmx_fnc_show_main_page","file":"atragmx/functions/fnc_show_main_page.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the main menu controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_main_page\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showMainPage) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [10, 100, 11, 110, 12, 120, 13, 130, 14, 140, 20, 200, 21, 210, 22, 220, 23, 230, 30, 300, 31, 310, 32, 320, 33, 330, 34, 340, 40, 400, 401, 402, 403, 41, 410, 411, 412, 42, 420,\r\n                                500, 501, 502, 503, 600, 601, 602, 603, 1000, 1001, 1002, 1003, 1004, 2000, 2001, 3000, 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008];\r\n\r\nif (_this) then {\r\n    if (GVAR(atmosphereModeTBH)) then {\r\n        {ctrlShow [_x, false]} forEach [23, 230];\r\n    } else {\r\n        {ctrlShow [_x, false]} forEach [21, 210, 22, 220];\r\n    };\r\n    if (GVAR(currentScopeUnit) != 3) then {\r\n        {ctrlShow [_x, false]} forEach [2001];\r\n    };\r\n};\r\n"},{"name":"ace_atragmx_fnc_show_range_card_setup","file":"atragmx/functions/fnc_show_range_card_setup.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the range card setup controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_range_card_setup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showRangeCardSetup) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [10000, 10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009];\r\n\r\nif (_this) then {\r\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 10006);\r\n\r\n    ctrlSetText [10003, Str(Round(GVAR(rangeCardStartRange)))];\r\n    ctrlSetText [10004, Str(Round(GVAR(rangeCardEndRange)))];\r\n    ctrlSetText [10005, Str(Round(GVAR(rangeCardIncrement)))];\r\n};\r\n"},{"name":"ace_atragmx_fnc_show_range_card","file":"atragmx/functions/fnc_show_range_card.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the range card controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_range_card\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showRangeCard) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [5000, 5001, 5002, 5003, 5004, 5005, 5006, 5007];\r\n"},{"name":"ace_atragmx_fnc_show_solution_setup","file":"atragmx/functions/fnc_show_solution_setup.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the solution setup controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * false call ace_atragmx_fnc_show_solution_setup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showSolutionSetup) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [15000, 15001, 15002, 15003, 15004, 15005, 15006, 15007, 15008, 15009, 15010, 15011, 15012];\r\n"},{"name":"ace_atragmx_fnc_show_target_data","file":"atragmx/functions/fnc_show_target_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the target data controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * false call ace_atragmx_fnc_show_target_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showTargetData) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [14000, 140000, 14001, 140010, 14002, 141020, 140020, 141021, 140021, 14003, 140030, 14004, 140040, 141040, 141041, 140041, 14005, 140050, 140051, 14006, 140060, 140061, 14007, 14008, 14009, 14010, 14011];\r\n\r\nif (_this) then {\r\n    [] call FUNC(update_target_data);\r\n};\r\n"},{"name":"ace_atragmx_fnc_show_target_range_assist","file":"atragmx/functions/fnc_show_target_range_assist.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the target range assist controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_target_range_assist\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showTargetRangeAssist) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [7000, 7001, 7002, 7003, 7004, 7005, 7006, 7007, 7008, 7009, 7010, 7011, 7012, 7013, 7014, 7015, 7016, 7017, 7018, 7019, 7020];\r\n\r\nif (_this) then {\r\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 7018);\r\n    ctrlSetText [7012, Str(parseNumber(ctrlText 320))];\r\n    ctrlSetText [7013, Str(parseNumber(ctrlText 340))];\r\n\r\n    if (GVAR(currentUnit) == 1) then {\r\n        ctrlSetText [7016, \"Yards\"];\r\n    } else {\r\n        ctrlSetText [7016, \"Meters\"];\r\n    };\r\n};\r\n"},{"name":"ace_atragmx_fnc_show_target_speed_assist_timer","file":"atragmx/functions/fnc_show_target_speed_assist_timer.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the target speed assist timer controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_target_speed_assist_timer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showTargetSpeedAssistTimer) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [9000, 9001, 9002];\r\n"},{"name":"ace_atragmx_fnc_show_target_speed_assist","file":"atragmx/functions/fnc_show_target_speed_assist.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows/Hides the target speed assist controls\r\n *\r\n * Arguments:\r\n * visible - <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_show_target_speed_assist\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(showTargetSpeedAssist) = _this;\r\n\r\n{ctrlShow [_x, _this]} forEach [8000, 8001, 8002, 8003, 8004, 8005, 8006, 8007, 8008, 8009, 8010, 8011, 8012, 8013, 8014, 8015];\r\n\r\nif (_this) then {\r\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 8012);\r\n\r\n    ctrlSetText [8004, Str(Round((GVAR(targetRange) select GVAR(currentTarget))))];\r\n\r\n    if (GVAR(currentUnit) == 1) then {\r\n        ctrlSetText [8008, \"Yards\"];\r\n    } else {\r\n        ctrlSetText [8008, \"Meters\"];\r\n    };\r\n\r\n    if (GVAR(currentUnit) == 2) then {\r\n        ctrlSetText [8011, \"m/s\"];\r\n    } else {\r\n        ctrlSetText [8011, \"mph\"];\r\n    };\r\n};\r\n"},{"name":"ace_atragmx_fnc_sord","file":"atragmx/functions/fnc_sord.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Handles incoming data packets from the Vectronix Vector LRF\r\n *\r\n * Arguments:\r\n * 0: Slope distance (Meters) <NUMBER>\r\n * 1: Azimuth (Degrees) <NUMBER>\r\n * 2: Inclination (Degrees) <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [1000, 45, 1] call ace_microdagr_fnc_recieveRangefinderData\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_slopeDistance\", \"_azimuth\", \"_inclination\"];\r\n\r\nGVAR(inclinationAngle) set [GVAR(currentTarget), round(_inclination)];\r\nGVAR(directionOfFire) set [GVAR(currentTarget), round(_azimuth)];\r\nGVAR(targetRange) set [GVAR(currentTarget), round(_slopeDistance)];\r\n"},{"name":"ace_atragmx_fnc_store_user_data","file":"atragmx/functions/fnc_store_user_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Saves user data into profileNamespace\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_store_user_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_profileNamespaceVersion\", ATRAGMX_PROFILE_NAMESPACE_VERSION];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_currentUnit\", GVAR(currentUnit)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_currentGun\", GVAR(currentGun)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_currentTarget\", GVAR(currentTarget)];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_atmosphereModeTBH\", GVAR(atmosphereModeTBH)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_altitude\", GVAR(altitude)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_temperature\", GVAR(temperature)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_barometricPressure\", GVAR(barometricPressure)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_relativeHumidity\", GVAR(relativeHumidity)];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_showWind2\", GVAR(showWind2)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_latitude\", GVAR(latitude)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_directionOfFire\", GVAR(directionOfFire)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed1\", GVAR(windSpeed1)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_windSpeed2\", GVAR(windSpeed2)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_windDirection\", GVAR(windDirection)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_inclinationAngle\", GVAR(inclinationAngle)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeed\", GVAR(targetSpeed)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_targetSpeedDirection\", GVAR(targetSpeedDirection)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_targetRange\", GVAR(targetRange)];\r\n\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardStartRange\", GVAR(rangeCardStartRange)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardEndRange\", GVAR(rangeCardEndRange)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardIncrement\", GVAR(rangeCardIncrement)];\r\nprofileNamespace setVariable [\"ACE_ATragMX_rangeCardCurrentColumn\", GVAR(rangeCardCurrentColumn)];"},{"name":"ace_atragmx_fnc_target_speed_assist_timer","file":"atragmx/functions/fnc_target_speed_assist_timer.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows and starts the target speed assist timer\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_target_speed_assist_timer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(ctrlVisible 9000) then {\r\n\r\n    false call FUNC(show_target_speed_assist);\r\n    true call FUNC(show_target_speed_assist_timer);\r\n\r\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 9002);\r\n\r\n    [{\r\n        private [\"_args\", \"_startTime\"];\r\n        _args = _this select 0;\r\n        _startTime = _args select 0;\r\n\r\n        if (!(GVAR(speedAssistTimer))) exitWith {\r\n            GVAR(speedAssistTimer) = true;\r\n\r\n            ctrlSetText [8006, Str(Round((CBA_missionTime - _startTime) * 10) / 10)];\r\n\r\n            [] call FUNC(calculate_target_speed_assist);\r\n\r\n            false call FUNC(show_target_speed_assist_timer);\r\n            true call FUNC(show_target_speed_assist);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n\r\n        ctrlSetText [9001, Str(Round((CBA_missionTime - _startTime) * 10) / 10)];\r\n\r\n    }, 0.1, [CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_atmo_env_data","file":"atragmx/functions/fnc_toggle_atmo_env_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the atmospheric data screen on/off\r\n *\r\n * Arguments:\r\n * Apply new data? <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 1 call ace_atragmx_fnc_toggle_atmo_env_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 13000) then {\r\n    false call FUNC(show_atmo_env_data);\r\n    true call FUNC(show_main_page);\r\n\r\n    if (_this == 1) then {\r\n        call FUNC(calculate_target_solution);\r\n    };\r\n} else {\r\n    true call FUNC(show_atmo_env_data);\r\n    false call FUNC(show_main_page);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_gun_ammo_data","file":"atragmx/functions/fnc_toggle_gun_ammo_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the gun ammo data screen on/off\r\n *\r\n * Arguments:\r\n * Apply new data? <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 1 call ace_atragmx_fnc_toggle_gun_ammo_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 12000) then {\r\n    false call FUNC(show_gun_ammo_data);\r\n    true call FUNC(show_main_page);\r\n\r\n    if (_this == 1) then {\r\n        call FUNC(update_zero_range);\r\n        call FUNC(calculate_target_solution);\r\n    };\r\n} else {\r\n    true call FUNC(show_gun_ammo_data);\r\n    false call FUNC(show_main_page);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_gun_list","file":"atragmx/functions/fnc_toggle_gun_list.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the gun list screen on/off\r\n *\r\n * Arguments:\r\n * change gun? <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * false call ace_atragmx_fnc_toggle_gun_list\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 6000) then {\r\n    false call FUNC(show_gun_list);\r\n    true call FUNC(show_main_page);\r\n\r\n    if (_this) then {\r\n        [lbCurSel 6000, true, true] call FUNC(change_gun);\r\n    };\r\n} else {\r\n    false call FUNC(show_main_page);\r\n    true call FUNC(show_gun_list);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_range_card_setup","file":"atragmx/functions/fnc_toggle_range_card_setup.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the range card setup screen on/off\r\n *\r\n * Arguments:\r\n * Apply new range card settings <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 1 call ace_atragmx_fnc_toggle_range_card_setup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 10000) then {\r\n    false call FUNC(show_range_card_setup);\r\n    true call FUNC(show_range_card);\r\n\r\n    if (_this == 1) then {\r\n        GVAR(rangeCardStartRange) = 0 max Round(parseNumber(ctrlText 10003)) min 3000;\r\n        GVAR(rangeCardEndRange) = 0 max Round(parseNumber(ctrlText 10004)) min 3000;\r\n        GVAR(rangeCardIncrement) = 1 max Round(parseNumber(ctrlText 10005)) min 3000;\r\n\r\n        [] call FUNC(calculate_range_card);\r\n        [] call FUNC(update_range_card);\r\n    };\r\n} else {\r\n    false call FUNC(show_range_card);\r\n    true call FUNC(show_range_card_setup);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_range_card","file":"atragmx/functions/fnc_toggle_range_card.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the range card screen on/off\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_toggle_range_card\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 5006) then {\r\n    false call FUNC(show_range_card);\r\n    true call FUNC(show_main_page);\r\n} else {\r\n    false call FUNC(show_main_page);\r\n    true call FUNC(show_range_card);\r\n\r\n    ctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 5001);\r\n\r\n    [] call FUNC(calculate_range_card);\r\n    [] call FUNC(update_range_card);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_solution_setup","file":"atragmx/functions/fnc_toggle_solution_setup.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the solution setup screen on/off\r\n *\r\n * Arguments:\r\n * Apply new data? <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 1 call ace_atragmx_fnc_toggle_solution_setup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 15000) then {\r\n    false call FUNC(show_solution_setup);\r\n    true call FUNC(show_main_page);\r\n\r\n    if (_this == 1) then {\r\n        GVAR(currentScopeClickUnit) = GVAR(currentScopeClickUnitTemp);\r\n        GVAR(currentScopeClickNumber) = GVAR(currentScopeClickNumberTemp);\r\n        GVAR(workingMemory) set [7, GVAR(currentScopeClickUnit)];\r\n        GVAR(workingMemory) set [8, GVAR(currentScopeClickNumber)];\r\n       [] call FUNC(update_scope_unit);\r\n       [] call FUNC(update_result);\r\n    };\r\n} else {\r\n    true call FUNC(show_solution_setup);\r\n    false call FUNC(show_main_page);\r\n\r\n    GVAR(currentScopeClickUnitTemp) = GVAR(currentScopeClickUnit);\r\n    GVAR(currentScopeClickNumberTemp) = GVAR(currentScopeClickNumber);\r\n\r\n    [] call FUNC(update_solution_setup);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_target_data","file":"atragmx/functions/fnc_toggle_target_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the target data screen on/off\r\n *\r\n * Arguments:\r\n * Apply new data? <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 1 call ace_atragmx_fnc_toggle_target_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 14000) then {\r\n    false call FUNC(show_target_data);\r\n    true call FUNC(show_main_page);\r\n\r\n    if (_this == 1) then {\r\n        call FUNC(calculate_target_solution);\r\n    };\r\n} else {\r\n    true call FUNC(show_target_data);\r\n    false call FUNC(show_main_page);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_target_range_assist","file":"atragmx/functions/fnc_toggle_target_range_assist.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the target range assist screen on/off\r\n *\r\n * Arguments:\r\n * update range? <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 1 call ace_atragmx_fnc_toggle_target_range_assist\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 7000) then {\r\n    false call FUNC(show_target_range_assist);\r\n    true call FUNC(show_main_page);\r\n\r\n    if (_this == 1) then {\r\n        ctrlSetText [320, Str(parseNumber(ctrlText 7012))];\r\n        ctrlSetText [140040, Str(parseNumber(ctrlText 7012))];\r\n        ctrlSetText [340, Str(parseNumber(ctrlText 7013))];\r\n        ctrlSetText [140060, Str(parseNumber(ctrlText 7013))];\r\n        [] call FUNC(calculate_target_solution);\r\n    };\r\n} else {\r\n    false call FUNC(show_main_page);\r\n    true call FUNC(show_target_range_assist);\r\n};\r\n"},{"name":"ace_atragmx_fnc_toggle_target_speed_assist","file":"atragmx/functions/fnc_toggle_target_speed_assist.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Toggles the target speed assist screen on/off\r\n *\r\n * Arguments:\r\n * update speed? <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 1 call ace_atragmx_fnc_toggle_target_speed_assist\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (ctrlVisible 8000) then {\r\n    false call FUNC(show_target_speed_assist);\r\n    true call FUNC(show_main_page);\r\n\r\n    if (_this == 1) then {\r\n        [] call FUNC(calculate_target_speed_assist);\r\n        private [\"_targetSpeed\"];\r\n        _targetSpeed = parseNumber(ctrlText 8007);\r\n        if (_targetSpeed != 0) then {\r\n            ctrlSetText [330, Str(_targetSpeed)];\r\n            ctrlSetText [140050, Str(_targetSpeed)];\r\n            [] call FUNC(calculate_target_solution);\r\n        };\r\n    };\r\n} else {\r\n    false call FUNC(show_main_page);\r\n    true call FUNC(show_target_speed_assist);\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_atmo_env_data","file":"atragmx/functions/fnc_update_atmo_env_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the atmospheric data fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_atmo_env_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13007);\r\n\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [130040, Str(Round(GVAR(temperature) * 10) / 10)];\r\n} else {\r\n    ctrlSetText [130040, Str(Round((GVAR(temperature) * 1.8 + 32) * 10) / 10)];\r\n};\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [130050, Str(Round(GVAR(barometricPressure)))];\r\n} else {\r\n    ctrlSetText [130050, Str(Round(GVAR(barometricPressure) / 33.8638866667 * 100) / 100)];\r\n};\r\nctrlSetText [130060, Str(Round(GVAR(relativeHumidity) * 100 * 10) / 10)];\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [130030, Str(Round(GVAR(altitude)))];\r\n} else {\r\n    ctrlSetText [130030, Str(Round(GVAR(altitude) * 3.2808399))];\r\n};\r\n\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [13003, \"Altitude (m)\"];\r\n    ctrlSetText [13004, \"temperature (C)\"];\r\n    ctrlSetText [13005, \"Barom Pres (milibars)\"];\r\n} else {\r\n    ctrlSetText [13003, \"Altitude (ft)\"];\r\n    ctrlSetText [13004, \"temperature (F)\"];\r\n    ctrlSetText [13005, \"Barom Pres (in.merc.)\"];\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_atmo_selection","file":"atragmx/functions/fnc_update_atmo_selection.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the atmospheric data input method\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_atmo_selection\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13001) ctrlEnable true;\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13002) ctrlEnable true;\r\n\r\nif (GVAR(atmosphereModeTBH)) then {\r\n    ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13002) ctrlEnable false;\r\n    {ctrlShow [_x, false]} forEach [13003, 130030];\r\n    {ctrlShow [_x, true]} forEach [13005, 130050, 13006, 130060];\r\n} else {\r\n    ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 13001) ctrlEnable false;\r\n    {ctrlShow [_x, false]} forEach [13005, 130050, 13006, 130060];\r\n    {ctrlShow [_x, true]} forEach [13003, 130030];\r\n};\r\n\r\n[] call FUNC(update_atmo_env_data);\r\n"},{"name":"ace_atragmx_fnc_update_atmosphere","file":"atragmx/functions/fnc_update_atmosphere.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates all atmosphere column input fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_atmosphere\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [200, Str(Round(GVAR(temperature) * 10) / 10)];\r\n} else {\r\n    ctrlSetText [200, Str(Round((GVAR(temperature) * 1.8 + 32) * 10) / 10)];\r\n};\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [210, Str(Round(GVAR(barometricPressure)))];\r\n} else {\r\n    ctrlSetText [210, Str(Round(GVAR(barometricPressure) / 33.8638866667 * 100) / 100)];\r\n};\r\nctrlSetText [220, Str(Round(GVAR(relativeHumidity) * 100 * 10) / 10)];\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [230, Str(Round(GVAR(altitude)))];\r\n} else {\r\n    ctrlSetText [230, Str(Round(GVAR(altitude) * 3.2808399))];\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_gun_ammo_data","file":"atragmx/functions/fnc_update_gun_ammo_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the gun ammo data fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_gun_ammo_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 12008);\r\n\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [120000, Str(Round((GVAR(workingMemory) select 5) / 2.54 * 100) / 100)];\r\n} else {\r\n    ctrlSetText [120000, Str(Round((GVAR(workingMemory) select 5) * 100) / 100)];\r\n};\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [120010, Str(Round((GVAR(workingMemory) select 12) * 15.4323584))];\r\n} else {\r\n    ctrlSetText [120010, Str(Round(GVAR(workingMemory) select 12))];\r\n};\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [120020, Str(Round((GVAR(workingMemory) select 13) / 10 / 2.54 * 1000) / 1000)];\r\n} else {\r\n    ctrlSetText [120020, Str(Round((GVAR(workingMemory) select 13) / 10 * 1000) / 1000)];\r\n};\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    ctrlSetText [120030, Str(Round((GVAR(workingMemory) select 15) * 1000) / 1000)];\r\n} else {\r\n    ctrlSetText [120030, Str(Round((GVAR(workingMemory) select 4) * -1000 * 1000) / 1000)];\r\n};\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [120040, Str(Round((GVAR(workingMemory) select 14) / 2.54 * 10) / 10)];\r\n} else {\r\n    ctrlSetText [120040, Str(Round((GVAR(workingMemory) select 14) * 100) / 100)];\r\n};\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [120050, Str(Round((GVAR(workingMemory) select 1) * 3.2808399))];\r\n} else {\r\n    ctrlSetText [120050, Str(Round(GVAR(workingMemory) select 1))];\r\n};\r\nif (GVAR(currentUnit) == 1) then {\r\n    ctrlSetText [120060, Str(Round((GVAR(workingMemory) select 2) * 1.0936133))];\r\n} else {\r\n    ctrlSetText [120060, Str(Round(GVAR(workingMemory) select 2))];\r\n};\r\nif (GVAR(currentUnit) == 0) then {\r\n    ctrlSetText [120061, \"*\"];\r\n} else {\r\n    ctrlSetText [120061, \"\"];\r\n};\r\n\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [12000, \"Bore       (cm)\"];\r\n    ctrlSetText [12001, \"Bullet Weight (grams)\"];\r\n    ctrlSetText [12002, \"Bullet Diam  (cm)\"];\r\n    ctrlSetText [12004, \"Rifle Twist (cm/trn)\"];\r\n    ctrlSetText [12005, \"Muzzle Velocity (m/s)\"];\r\n} else {\r\n    ctrlSetText [12000, \"Bore       (inches)\"];\r\n    ctrlSetText [12001, \"Bullet Weight (grains)\"];\r\n    ctrlSetText [12002, \"Bullet Diam  (inches)\"];\r\n    ctrlSetText [12004, \"Rifle Twist (inches/trn)\"];\r\n    ctrlSetText [12005, \"Muzzle Velocity (feet/sec)\"];\r\n};\r\n\r\nif (GVAR(currentUnit) == 1) then {\r\n    ctrlSetText [12006, \"Zero Range (yards)\"];\r\n} else {\r\n    ctrlSetText [12006, \"Zero Range (meters)\"];\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_gun","file":"atragmx/functions/fnc_update_gun.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates all gun column input fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_gun\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nctrlSetText [1000, GVAR(workingMemory) select 0];\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [100, Str(Round((GVAR(workingMemory) select 5) / 2.54 * 100) / 100)];\r\n} else {\r\n    ctrlSetText [100, Str(Round((GVAR(workingMemory) select 5) * 100) / 100)];\r\n};\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [110, Str(Round((GVAR(workingMemory) select 12) * 15.4323584))];\r\n} else {\r\n    ctrlSetText [110, Str(Round(GVAR(workingMemory) select 12))];\r\n};\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    ctrlSetText [120, Str(Round((GVAR(workingMemory) select 15) * 1000) / 1000)];\r\n} else {\r\n    ctrlSetText [120, Str(Round((GVAR(workingMemory) select 4) * -1000 * 1000) / 1000)];\r\n};\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [130, Str(Round((GVAR(workingMemory) select 1) * 3.2808399))];\r\n} else {\r\n    ctrlSetText [130, Str(Round(GVAR(workingMemory) select 1))];\r\n};\r\nswitch (GVAR(currentUnit)) do {\r\n    case 0: {\r\n        ctrlSetText [140, format[\"*%1\", Round(GVAR(workingMemory) select 2)]];\r\n    };\r\n    case 1: {\r\n        ctrlSetText [140, Str(Round((GVAR(workingMemory) select 2) * 1.0936133))];\r\n    };\r\n    case 2: {\r\n        ctrlSetText [140, Str(Round(GVAR(workingMemory) select 2))];\r\n    };\r\n};\r\n[] call FUNC(update_scope_unit);\r\n"},{"name":"ace_atragmx_fnc_update_inclination_angle","file":"atragmx/functions/fnc_update_inclination_angle.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the inclination angle input fields\r\n *\r\n * Arguments:\r\n * Reference input field ID <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * 0 call ace_atragmx_fnc_update_inclination_angle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_inclinationAngleCosine\", \"_inclinationAngleDegree\"];\r\n_inclinationAngleCosine = 0.5 max parseNumber(ctrlText 140041) min 1;\r\n_inclinationAngleDegree = -60 max parseNumber(ctrlText 140040) min 60;\r\n\r\nif (_this == 0) then {\r\n    ctrlSetText [140040, Str(round(acos(_inclinationAngleCosine)))];\r\n} else {\r\n    ctrlSetText [140041, Str(round(cos(_inclinationAngleDegree) * 100) / 100)];\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_range_card","file":"atragmx/functions/fnc_update_range_card.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the range card listbox content\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_range_card\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_range\", \"_elevation\", \"_windage1\", \"_windage2\", \"_clickSize\", \"_clickNumber\", \"_clickInterval\", \"_lead\", \"_TOF\", \"_velocity\", \"_kineticEnergy\", \"_rangeOutput\", \"_elevationOutput\", \"_windageOutput\", \"_lastColumnOutput\", \"_speedOfSound\"];\r\n_lastColumnOutput = \"\";\r\n\r\nif (GVAR(showWind2) && GVAR(rangeCardCurrentColumn) == 0) then {\r\n    ctrlSetText [5006, \"Wind2\"];\r\n} else {\r\n    ctrlSetText [5006, (GVAR(rangeCardLastColumns) select GVAR(rangeCardCurrentColumn))];\r\n};\r\n\r\nif (GVAR(currentUnit) == 1) then {\r\n    ctrlSetText [5003, \"Yards\"];\r\n} else {\r\n    ctrlSetText [5003, \"Meters\"];\r\n};\r\n\r\nlnbClear 5007;\r\n\r\n_speedOfSound = GVAR(temperature) call EFUNC(weather,calculateSpeedOfSound);\r\n\r\n{\r\n    _range = _x select 0;\r\n    _elevation = _x select 1;\r\n    _windage1 = (_x select 2) select 0;\r\n    _windage2 = (_x select 2) select 1;\r\n    _lead = _x select 3;\r\n    _TOF =  _x select 4;\r\n    _velocity = _x select 5;\r\n    _kineticEnergy = _x select 6;\r\n\r\n    switch (GVAR(currentScopeUnit)) do {\r\n        case 0: {\r\n            _elevation = _elevation / 3.38;\r\n            _windage1 = _windage1 / 3.38;\r\n            _windage2 = _windage2 / 3.38;\r\n        };\r\n        case 2: {\r\n            _elevation = _elevation * 1.047;\r\n            _windage1 = _windage1 * 1.047;\r\n            _windage2 = _windage2 * 1.047;\r\n        };\r\n        case 3: {\r\n            switch (GVAR(workingMemory) select 7) do {\r\n                case 0: { _clickSize = 1; };\r\n                case 1: { _clickSize = 1 / 1.047; };\r\n                case 2: { _clickSize = 3.38; };\r\n            };\r\n            _clickNumber = GVAR(workingMemory) select 8;\r\n            _clickInterval = _clickSize / _clickNumber;\r\n\r\n            _elevation = Round(_elevation / _clickInterval);\r\n            _windage1 = Round(_windage1 / _clickInterval);\r\n            _windage2 = Round(_windage2 / _clickInterval);\r\n        };\r\n    };\r\n\r\n    _elevationOutput = Str(Round(_elevation * 100) / 100);\r\n    _windageOutput = Str(Round(_windage1 * 100) / 100);\r\n\r\n    _rangeOutput = Str(_range);\r\n    if (_velocity < _speedOfSound) then {\r\n        _rangeOutput = _rangeOutput + \"*\";\r\n    };\r\n\r\n    if (GVAR(currentUnit) == 1) then {\r\n        _velocity = _velocity * 3.2808399;\r\n    };\r\n\r\n    switch (GVAR(rangeCardCurrentColumn)) do {\r\n        case 0: {\r\n            if (GVAR(showWind2)) then {\r\n                _lastColumnOutput = Str(Round(_windage2 * 100) / 100);\r\n            } else {\r\n                _lastColumnOutput = Str(Round(_lead * 100) / 100);\r\n            };\r\n        };\r\n        case 1: {\r\n            _lastColumnOutput = Str(Round(_velocity));\r\n        };\r\n        case 2: {\r\n            _lastColumnOutput = Str(Round(_kineticEnergy));\r\n        };\r\n        case 3: {\r\n            _lastColumnOutput = Str(Round(_TOF * 100) / 100);\r\n        }\r\n    };\r\n\r\n    lnbAddRow [5007, [_rangeOutput, _elevationOutput, _windageOutput, _lastColumnOutput]];\r\n} forEach GVAR(rangeCardData);\r\n"},{"name":"ace_atragmx_fnc_update_relative_click_memory","file":"atragmx/functions/fnc_update_relative_click_memory.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the relative click memory\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_relative_click_memory\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(workingMemory) set [10, (GVAR(elevationOutput) select GVAR(currentTarget))];\r\nGVAR(workingMemory) set [11, (GVAR(windage1Output) select GVAR(currentTarget))];\r\n\r\n[] call FUNC(update_result);\r\n"},{"name":"ace_atragmx_fnc_update_result","file":"atragmx/functions/fnc_update_result.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the result input and output fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_result\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_elevationAbs\", \"_elevationRel\", \"_elevationCur\", \"_windageAbs\", \"_wind2\", \"_windageRel\", \"_windageCur\", \"_lead\", \"_clickSize\", \"_clickNumber\", \"_clickInterval\"];\r\n_elevationAbs = GVAR(elevationOutput) select GVAR(currentTarget);\r\n_windageAbs = GVAR(windage1Output) select GVAR(currentTarget);\r\n\r\n_wind2 = GVAR(windage2Output) select GVAR(currentTarget);\r\n\r\n_elevationCur = GVAR(workingMemory) select 10;\r\n_windageCur = GVAR(workingMemory) select 11;\r\n\r\n_elevationRel = _elevationAbs - _elevationCur;\r\n_windageRel = _windageAbs - _windageCur;\r\n\r\n_lead = GVAR(leadOutput) select GVAR(currentTarget);\r\n\r\nswitch (GVAR(currentScopeUnit)) do {\r\n    case 0: {\r\n        _elevationAbs = _elevationAbs / 3.38;\r\n        _windageAbs = _windageAbs / 3.38;\r\n\r\n        _wind2 = _wind2 / 3.38;\r\n\r\n        _elevationRel = _elevationRel / 3.38;\r\n        _windageRel = _windageRel / 3.38;\r\n\r\n        _elevationCur = _elevationCur / 3.38;\r\n        _windageCur = _windageCur / 3.38;\r\n    };\r\n    case 2: {\r\n        _elevationAbs = _elevationAbs * 1.047;\r\n        _windageAbs = _windageAbs * 1.047;\r\n\r\n        _wind2 = _wind2 / 1.047;\r\n\r\n        _elevationRel = _elevationRel * 1.047;\r\n        _windageRel = _windageRel * 1.047;\r\n\r\n        _elevationCur = _elevationCur * 1.047;\r\n        _windageCur = _windageCur * 1.047;\r\n    };\r\n    case 3: {\r\n        switch (GVAR(workingMemory) select 7) do {\r\n            case 0: { _clickSize = 1; };\r\n            case 1: { _clickSize = 1 / 1.047; };\r\n            case 2: { _clickSize = 3.38; };\r\n        };\r\n        _clickNumber = GVAR(workingMemory) select 8;\r\n        _clickInterval = _clickSize / _clickNumber;\r\n\r\n        _elevationAbs = Round(_elevationAbs / _clickInterval);\r\n        _windageAbs = Round(_windageAbs / _clickInterval);\r\n\r\n        _wind2 = Round(_wind2 / _clickInterval);\r\n\r\n        _elevationRel = Round(_elevationRel / _clickInterval);\r\n        _windageRel = Round(_windageRel / _clickInterval);\r\n\r\n        _elevationCur = Round(_elevationCur / _clickInterval);\r\n        _windageCur = Round(_windageCur / _clickInterval);\r\n    };\r\n};\r\n\r\nif (GVAR(showWind2)) then {\r\n    ctrlSetText [42, \"Wind2\"];\r\n} else {\r\n    ctrlSetText [42, \"Lead\"];\r\n};\r\n\r\n_elevationAbs = Round(_elevationAbs * 100) / 100;\r\nif (_elevationAbs > 0) then {\r\n    ctrlSetText [400, format[\"%1\", abs(_elevationAbs)]];\r\n} else {\r\n    if (_elevationAbs < 0) then {\r\n        ctrlSetText [400, format[\"%1D\", abs(_elevationAbs)]];\r\n    } else {\r\n        ctrlSetText [400, \"0.0\"];\r\n    };\r\n};\r\n_elevationRel = Round(_elevationRel * 100) / 100;\r\nif (_elevationRel > 0) then {\r\n    ctrlSetText [401, format[\"%1\", abs(_elevationRel)]];\r\n} else {\r\n    if (_elevationRel < 0) then {\r\n        ctrlSetText [401, format[\"%1D\", abs(_elevationRel)]];\r\n    } else {\r\n        ctrlSetText [401, \"0.0\"];\r\n    };\r\n};\r\n_elevationCur = Round(_elevationCur * 100) / 100;\r\nif (_elevationCur > 0) then {\r\n    ctrlSetText [402, format[\"%1\", abs(_elevationCur)]];\r\n} else {\r\n    if (_elevationCur < 0) then {\r\n        ctrlSetText [402, format[\"%1D\", abs(_elevationCur)]];\r\n    } else {\r\n        ctrlSetText [402, \"0.0\"];\r\n    };\r\n};\r\n\r\n_windageAbs = Round(_windageAbs * 100) / 100;\r\nif (_windageAbs > 0) then {\r\n    ctrlSetText [410, format[\"%1R\", abs(_windageAbs)]];\r\n} else {\r\n    if (_windageAbs < 0) then {\r\n        ctrlSetText [410, format[\"%1L\", abs(_windageAbs)]];\r\n    } else {\r\n        ctrlSetText [410, \"0.0\"];\r\n    };\r\n};\r\n_windageRel = Round(_windageRel * 100) / 100;\r\nif (_windageRel > 0) then {\r\n    ctrlSetText [411, format[\"%1R\", abs(_windageRel)]];\r\n} else {\r\n    if (_windageRel < 0) then {\r\n        ctrlSetText [411, format[\"%1L\", abs(_windageRel)]];\r\n    } else {\r\n        ctrlSetText [411, \"0.0\"];\r\n    };\r\n};\r\n_windageCur = Round(_windageCur * 100) / 100;\r\nif (_windageCur > 0) then {\r\n    ctrlSetText [412, format[\"%1R\", abs(_windageCur)]];\r\n} else {\r\n    if (_windageCur < 0) then {\r\n        ctrlSetText [412, format[\"%1L\", abs(_windageCur)]];\r\n    } else {\r\n        ctrlSetText [412, \"0.0\"];\r\n    };\r\n};\r\n\r\nif (GVAR(showWind2)) then {\r\n    _wind2 = Round(_wind2 * 100) / 100;\r\n    if (_wind2 > 0) then {\r\n        ctrlSetText [420, format[\"%1R\", abs(_wind2)]];\r\n    } else {\r\n        if (_wind2 < 0) then {\r\n            ctrlSetText [420, format[\"%1L\", abs(_wind2)]];\r\n        } else {\r\n            ctrlSetText [420, \"0.0\"];\r\n        };\r\n    };\r\n} else {\r\n    _lead = Round(_lead * 100) / 100;\r\n    if (_lead > 0) then {\r\n        if ((GVAR(targetSpeedDirection) select GVAR(currentTarget)) == 1) then {\r\n            ctrlSetText [420, format[\"%1R\", abs(_lead)]];\r\n        } else {\r\n            ctrlSetText [420, format[\"%1L\", abs(_lead)]];\r\n        };\r\n    } else {\r\n        ctrlSetText [420, \"0.0\"];\r\n    };\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_scope_unit","file":"atragmx/functions/fnc_update_scope_unit.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the scope unit fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_scope_unit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nctrlSetText [2000, GVAR(scopeUnits) select GVAR(currentScopeUnit)];\r\nctrlSetText [2001, Str(GVAR(currentScopeClickNumber))];\r\n\r\nif (GVAR(currentScopeUnit) == 3) then {\r\n    ctrlSetText [5000, format[\"Clicks=%1\", GVAR(currentScopeClickNumber)]];\r\n    if (GVAR(showMainPage)) then {\r\n        ctrlShow [2001, true];\r\n    };\r\n} else {\r\n    ctrlSetText [5000, GVAR(scopeUnits) select GVAR(currentScopeUnit)];\r\n    ctrlShow [2001, false];\r\n};"},{"name":"ace_atragmx_fnc_update_solution_setup","file":"atragmx/functions/fnc_update_solution_setup.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates all solution setup input fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_solution_setup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n{((uiNamespace getVariable \"ATragMX_Display\") displayCtrl _x) ctrlEnable true} forEach [15001, 15002, 15003, 15004, 15005, 15006, 15008, 15009, 15010];\r\n\r\nswitch (GVAR(currentScopeClickNumberTemp)) do {\r\n    case 1:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15001) ctrlEnable false; };\r\n    case 2:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15002) ctrlEnable false; };\r\n    case 3:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15003) ctrlEnable false; };\r\n    case 4:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15004) ctrlEnable false; };\r\n    case 8:  { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15005) ctrlEnable false; };\r\n    case 10: { ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15006) ctrlEnable false; };\r\n};\r\n\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl (15008 + GVAR(currentScopeClickUnitTemp))) ctrlEnable false;\r\n\r\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 15011);\r\n"},{"name":"ace_atragmx_fnc_update_target_data","file":"atragmx/functions/fnc_update_target_data.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates all target column input fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_target\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nctrlSetText [140000, Str(Round((GVAR(latitude) select GVAR(currentTarget)) * 100) / 100)];\r\nctrlSetText [140010, Str(Round((GVAR(directionOfFire) select GVAR(currentTarget)) * 100) / 100)];\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [140020, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\r\n    ctrlSetText [140021, Str(Round((GVAR(windSpeed2) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\r\n} else {\r\n    ctrlSetText [140020, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 100) / 100)];\r\n    ctrlSetText [140021, Str(Round((GVAR(windSpeed2) select GVAR(currentTarget)) * 100) / 100)];\r\n};\r\nctrlSetText [140030, Str(Round((GVAR(windDirection) select GVAR(currentTarget))))];\r\nctrlSetText [140040, Str(Round((GVAR(inclinationAngle) select GVAR(currentTarget))))];\r\nctrlSetText [140041, Str(Round(cos(GVAR(inclinationAngle) select GVAR(currentTarget)) * 100) / 100)];\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [140050, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\r\n} else {\r\n    ctrlSetText [140050, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 100) / 100)];\r\n};\r\nif ((GVAR(targetSpeedDirection) select GVAR(currentTarget)) == 1) then {\r\n    ctrlSetText [140051, \">\"];\r\n} else {\r\n    ctrlSetText [140051, \"<\"];\r\n};\r\nif (GVAR(currentUnit) == 1) then {\r\n    ctrlSetText [140060, Str(Round((GVAR(targetRange) select GVAR(currentTarget)) * 1.0936133))];\r\n} else {\r\n    ctrlSetText [140060, Str(Round((GVAR(targetRange) select GVAR(currentTarget))))];\r\n};\r\nif (GVAR(currentUnit) == 0) then {\r\n    ctrlSetText [140061, \"*\"];\r\n} else {\r\n    ctrlSetText [140061, \"\"];\r\n};\r\n\r\nif (GVAR(currentUnit) == 2) then {\r\n    ctrlSetText [14002, \"Wind Speed (m/s)\"];\r\n    ctrlSetText [14005, \"Target Speed (m/s)\"];\r\n} else {\r\n    ctrlSetText [14002, \"Wind Speed (mph)\"];\r\n    ctrlSetText [14005, \"Target Speed (mph)\"];\r\n};\r\n\r\nif (GVAR(currentUnit) == 1) then {\r\n    ctrlSetText [14006, \"Target Range (yards)\"];\r\n} else {\r\n    ctrlSetText [14006, \"Target Range (meters)\"];\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_target_selection","file":"atragmx/functions/fnc_update_target_selection.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates all input fields based on the currently selected target\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_target_selection\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n{((uiNamespace getVariable \"ATragMX_Display\") displayCtrl _x) ctrlEnable true} forEach [500, 501, 502, 503];\r\n\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 500 + GVAR(currentTarget)) ctrlEnable false;\r\n\r\nctrlSetFocus ((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 3000);\r\n\r\n[] call FUNC(update_unit_selection);\r\n"},{"name":"ace_atragmx_fnc_update_target","file":"atragmx/functions/fnc_update_target.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates all target column input fields\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_target\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(showWind2)) then {\r\n    if (GVAR(currentUnit) != 2) then {\r\n        ctrlSetText [300, format[\"%1/%2\", Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 2.23693629), Round((GVAR(windSpeed2) select GVAR(currentTarget)) * 2.23693629)]];\r\n    } else {\r\n        ctrlSetText [300, format[\"%1/%2\", Round(GVAR(windSpeed1) select GVAR(currentTarget)), Round(GVAR(windSpeed2) select GVAR(currentTarget))]];\r\n    };\r\n} else {\r\n    if (GVAR(currentUnit) != 2) then {\r\n        ctrlSetText [300, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\r\n    } else {\r\n        ctrlSetText [300, Str(Round((GVAR(windSpeed1) select GVAR(currentTarget)) * 100) / 100)];\r\n    };\r\n};\r\nctrlSetText [310, Str(Round((GVAR(windDirection) select GVAR(currentTarget))))];\r\nctrlSetText [320, Str(Round((GVAR(inclinationAngle) select GVAR(currentTarget))))];\r\nif (GVAR(currentUnit) != 2) then {\r\n    ctrlSetText [330, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 2.23693629 * 100) / 100)];\r\n} else {\r\n    ctrlSetText [330, Str(Round((GVAR(targetSpeed) select GVAR(currentTarget)) * 100) / 100)];\r\n};\r\nswitch (GVAR(currentUnit)) do {\r\n    case 0: {\r\n        ctrlSetText [340, format[\"*%1\", Round((GVAR(targetRange) select GVAR(currentTarget)))]];\r\n    };\r\n    case 1: {\r\n        ctrlSetText [340, Str(Round((GVAR(targetRange) select GVAR(currentTarget)) * 1.0936133))];\r\n    };\r\n    case 2: {\r\n        ctrlSetText [340, Str(Round((GVAR(targetRange) select GVAR(currentTarget))))];\r\n    };\r\n};\r\n"},{"name":"ace_atragmx_fnc_update_unit_selection","file":"atragmx/functions/fnc_update_unit_selection.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates all input fields based on the currently selected unit\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_unit_selection\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 600) ctrlEnable true;\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 601) ctrlEnable true;\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 602) ctrlEnable true;\r\n\r\n((uiNamespace getVariable \"ATragMX_Display\") displayCtrl 600 + GVAR(currentUnit)) ctrlEnable false;\r\n\r\n[] call FUNC(update_gun);\r\n[] call FUNC(update_gun_ammo_data);\r\n[] call FUNC(update_atmosphere);\r\n[] call FUNC(update_atmo_env_data);\r\n[] call FUNC(update_target);\r\n[] call FUNC(update_target_data);\r\n\r\n[] call FUNC(update_result);\r\n"},{"name":"ace_atragmx_fnc_update_zero_range","file":"atragmx/functions/fnc_update_zero_range.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the scope base angle based on the zero range input\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_atragmx_fnc_update_zero_range\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_scopeBaseAngle\"];\r\n_scopeBaseAngle = (GVAR(workingMemory) select 3);\r\n\r\nprivate [\"_bulletMass\", \"_boreHeight\", \"_airFriction\", \"_muzzleVelocity\", \"_bc\", \"_dragModel\", \"_atmosphereModel\"];\r\n_bulletMass = GVAR(workingMemory) select 12;\r\n_boreHeight = GVAR(workingMemory) select 5;\r\n_airFriction = GVAR(workingMemory) select 4;\r\n_muzzleVelocity = GVAR(workingMemory) select 1;\r\n_bc = GVAR(workingMemory) select 15;\r\n_dragModel = GVAR(workingMemory) select 16;\r\n_atmosphereModel = GVAR(workingMemory) select 17;\r\n\r\nprivate [\"_zeroRange\"];\r\n_zeroRange = Round(parseNumber(ctrlText 120060));\r\nif (GVAR(currentUnit) == 1) then {\r\n    _zeroRange = _zeroRange / 1.0936133;\r\n};\r\nif (_zeroRange < 10) exitWith {\r\n    GVAR(workingMemory) set [2, _zeroRange];\r\n    GVAR(workingMemory) set [3, 0];\r\n};\r\n\r\nprivate [\"_altitude\", \"_temperature\", \"_barometricPressure\", \"_relativeHumidity\"];\r\n_altitude = GVAR(altitude);\r\n_temperature = GVAR(temperature);\r\n_barometricPressure = GVAR(barometricPressure);\r\n_relativeHumidity = GVAR(relativeHumidity);\r\n\r\nprivate [\"_result\"];\r\n_result = [_scopeBaseAngle, _bulletMass, _boreHeight, _airFriction, _muzzleVelocity, _temperature, _barometricPressure, _relativeHumidity, 1000, [0, 0], 0, 0, 0, _zeroRange, _bc, _dragModel, _atmosphereModel, false, 1.5, 0, 0, 0] call FUNC(calculate_solution);\r\n\r\nGVAR(workingMemory) set [2, _zeroRange];\r\nGVAR(workingMemory) set [3, _scopeBaseAngle + (_result select 0) / 60];\r\n"}],"attach":[{"name":"ace_attach_fnc_attach","file":"attach/functions/fnc_attach.sqf","text":"/*\r\n * Author: eRazeri, esteldunedain, PabstMirror\r\n * Attach an item to the unit\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\r\n * 1: unit doing the attach (player) <OBJECT>\r\n * 2: Array containing a string of the attachable item <ARRAY>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob, bob, [\"light\"]] call ace_attach_fnc_attach;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_attachToVehicle\",\"_unit\",\"_args\", [\"_silentScripted\", false]];\r\n_args params [[\"_itemClassname\",\"\", [\"\"]]];\r\nTRACE_4(\"params\",_attachToVehicle,_unit,_itemClassname,_silentScripted);\r\n\r\nprivate [\"_itemVehClass\", \"_onAtachText\", \"_selfAttachPosition\", \"_attachedItem\", \"_tempObject\", \"_actionID\", \"_model\"];\r\n\r\n//Sanity Check (_unit has item in inventory, not over attach limit)\r\nif ((_itemClassname == \"\") || {(!_silentScripted) && {!(_this call FUNC(canAttach))}}) exitWith {ERROR(\"Tried to attach, but check failed\");};\r\n\r\n_itemVehClass = getText (configFile >> \"CfgWeapons\" >> _itemClassname >> \"ACE_Attachable\");\r\n_onAtachText = getText (configFile >> \"CfgWeapons\" >> _itemClassname >> \"displayName\");\r\n\r\nif (_itemVehClass == \"\") then {\r\n    _itemVehClass = getText (configFile >> \"CfgMagazines\" >> _itemClassname >> \"ACE_Attachable\");\r\n    _onAtachText = getText (configFile >> \"CfgMagazines\" >> _itemClassname >> \"displayName\");\r\n};\r\n\r\nif (_itemVehClass == \"\") exitWith {ERROR(\"no ACE_Attachable for Item\");};\r\n\r\n_onAtachText = format [localize LSTRING(Item_Attached), _onAtachText];\r\n\r\nif (_unit == _attachToVehicle) then {  //Self Attachment\r\n    _attachedItem = _itemVehClass createVehicle [0,0,0];\r\n    _attachedItem attachTo [_unit, [0.05, -0.09, 0.1], \"leftshoulder\"];\r\n    if (!_silentScripted) then {\r\n        _unit removeItem _itemClassname;  // Remove item\r\n        [_onAtachText] call EFUNC(common,displayTextStructured);\r\n    };\r\n    _unit setVariable [QGVAR(attached), [[_attachedItem, _itemClassname]], true];\r\n} else {\r\n    GVAR(placeAction) = PLACE_WAITING;\r\n\r\n    [_unit, \"forceWalk\", \"ACE_Attach\", true] call EFUNC(common,statusEffect_set);\r\n\r\n    [{[localize LSTRING(PlaceAction), \"\"] call EFUNC(interaction,showMouseHint)}, []] call CBA_fnc_execNextFrame;\r\n    _unit setVariable [QGVAR(placeActionEH), [_unit, \"DefaultAction\", {true}, {GVAR(placeAction) = PLACE_APPROVE;}] call EFUNC(common,AddActionEventHandler)];\r\n\r\n    _actionID = _unit addAction [format [\"<t color='#FF0000'>%1</t>\", localize LSTRING(CancelAction)], {GVAR(placeAction) = PLACE_CANCEL}];\r\n\r\n    //Display to show virtual object:\r\n    private [];\r\n    _model = getText (configFile >> \"CfgAmmo\" >> _itemVehClass >> \"model\");\r\n    if (_model == \"\") then {\r\n        _model = getText (configFile >> \"CfgVehicles\" >> _itemVehClass >> \"model\");\r\n    };\r\n    //\"\\A3\\Weapons_F\\empty.p3d\" is fine, but ctrlSetModel \"\"; - will crash game!\r\n    if (_model == \"\") exitWith {ERROR(\"No Model\");};\r\n    (QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutRsc [QGVAR(virtualAmmo), \"PLAIN\", 0, false];\r\n    ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModel _model;\r\n\r\n    [{\r\n        private[\"_angle\", \"_dir\", \"_screenPos\", \"_realDistance\", \"_up\", \"_virtualPos\", \"_virtualPosASL\", \"_lineInterection\"];\r\n        params [\"_args\",\"_idPFH\"];\r\n        _args params [\"_unit\",\"_attachToVehicle\",\"_itemClassname\",\"_itemVehClass\",\"_onAtachText\",\"_actionID\"];\r\n\r\n        _virtualPosASL = (eyePos _unit) vectorAdd (positionCameraToWorld [0,0,0.6]) vectorDiff (positionCameraToWorld [0,0,0]);\r\n        if (cameraView == \"EXTERNAL\") then {\r\n            _virtualPosASL = _virtualPosASL vectorAdd ((positionCameraToWorld [0.3,0,0]) vectorDiff (positionCameraToWorld [0,0,0]));\r\n        };\r\n        _virtualPos = _virtualPosASL call EFUNC(common,ASLToPosition);\r\n        _lineInterection = lineIntersects [eyePos ACE_player, _virtualPosASL, ACE_player];\r\n\r\n        //Don't allow placing in a bad position:\r\n        if (_lineInterection && {GVAR(placeAction) == PLACE_APPROVE}) then {GVAR(placeAction) = PLACE_WAITING;};\r\n\r\n        if ((GVAR(placeAction) != PLACE_WAITING) ||\r\n                {_unit != ACE_player} ||\r\n                {!([_unit, _attachToVehicle, []] call EFUNC(common,canInteractWith))} ||\r\n                {!([_attachToVehicle, _unit, _itemClassname] call FUNC(canAttach))}) then {\r\n\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n            [_unit, \"forceWalk\", \"ACE_Attach\", false] call EFUNC(common,statusEffect_set);\r\n            [] call EFUNC(interaction,hideMouseHint);\r\n            [_unit, \"DefaultAction\", (_unit getVariable [QGVAR(placeActionEH), -1])] call EFUNC(common,removeActionEventHandler);\r\n            _unit removeAction _actionID;\r\n\r\n            (QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\n\r\n            if (GVAR(placeAction) == PLACE_APPROVE) then {\r\n                [_unit, _attachToVehicle, _itemClassname, _itemVehClass, _onAtachText, _virtualPos] call FUNC(placeApprove);\r\n            };\r\n        } else {\r\n            //Show the virtual object:\r\n            if (_lineInterection) then {\r\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow false;\r\n            } else {\r\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow true;\r\n                _screenPos = worldToScreen _virtualPos;\r\n                if (_screenPos isEqualTo []) exitWith {\r\n                    ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow false;\r\n                };\r\n                _realDistance = (_virtualPos distance (positionCameraToWorld [0,0,0])) / ((call CBA_fnc_getFov) select 1);\r\n                _screenPos = [(_screenPos select 0), _realDistance, (_screenPos select 1)];\r\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetPosition _screenPos;\r\n                _dir = (positionCameraToWorld [0,0,1]) vectorFromTo (positionCameraToWorld [0,0,0]);\r\n                _angle = asin (_dir select 2);\r\n                _up = [0, cos _angle, sin _angle];\r\n                ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModelDirAndUp [[1,0,0], _up];\r\n            };\r\n        };\r\n    }, 0, [_unit, _attachToVehicle, _itemClassname, _itemVehClass, _onAtachText, _actionID]] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_attach_fnc_canAttach","file":"attach/functions/fnc_canAttach.sqf","text":"/*\r\n * Author: commy2\r\n * Check if a unit can attach a specific item.\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\r\n * 1: unit doing the attach (player) <OBJECT>\r\n * 2: Array empty or containing a string of the attachable item <ARRAY>\r\n *\r\n * Return Value:\r\n * Can Attach <BOOL>\r\n *\r\n * Example:\r\n * [bob, bob, [\"light\"]] call ace_attach_fnc_canAttach;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_attachToVehicle\",\"_player\",\"_args\"];\r\n_args params [[\"_itemClassname\",\"\", [\"\"]]];\r\nTRACE_3(\"params\",_attachToVehicle,_player,_itemClassname);\r\n\r\nprivate [\"_attachLimit\", \"_attachedObjects\"];\r\n\r\n_attachLimit = [6, 1] select (_player == _attachToVehicle);\r\n_attachedObjects = _attachToVehicle getVariable [QGVAR(attached), []];\r\n\r\n((_player == _attachToVehicle) || {canStand _player}) &&\r\n{(_attachToVehicle distance _player) < 7} && \r\n{alive _attachToVehicle} && \r\n{(count _attachedObjects) < _attachLimit} && \r\n{_itemClassname in ((itemsWithMagazines _player) + [\"\"])};\r\n"},{"name":"ace_attach_fnc_canDetach","file":"attach/functions/fnc_canDetach.sqf","text":"/*\r\n * Author: commy2\r\n * Check if a unit has an item attached and if it can remove that item.\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be detached from (player or vehicle) <OBJECT>\r\n * 1: unit doing the detaching (player) <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Detach <BOOL>\r\n *\r\n * Example:\r\n * [bob, bob] call ace_attach_fnc_canDetach;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_attachToVehicle\", \"_unit\"];\r\nTRACE_2(\"params\",_attachToVehicle,_unit);\r\n\r\nif ((vehicle _unit) != _unit) exitWith {false};\r\n\r\n_attachedList = _attachToVehicle getVariable [QGVAR(attached), []];\r\nif ((count _attachedList) == 0) exitWith {false};\r\n\r\nprivate [\"_inRange\"];\r\n\r\n_inRange = false;\r\n{\r\n    _x params [\"_xObject\"];\r\n    if (isNull _xObject) exitWith {\r\n        TRACE_1(\"Null attached\",_x);\r\n        _attachedList deleteAt _forEachIndex;\r\n        _attachToVehicle setVariable [QGVAR(attached), _attachedList, true];\r\n    };\r\n    if (((getPos _unit) distance2d (getPos _xObject)) < 4) exitWith {_inRange = true};\r\n} forEach _attachedList;\r\n\r\n_inRange &&\r\n{(_unit == _attachToVehicle) || {canStand _unit}} &&\r\n{alive _attachToVehicle}\r\n"},{"name":"ace_attach_fnc_detach","file":"attach/functions/fnc_detach.sqf","text":"/*\r\n * Author: eRazeri and esteldunedain\r\n * Detach an item from a unit\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be detached from (player or vehicle) <OBJECT>\r\n * 1: unit doing the detaching (player) <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [car, bob] call ace_attach_fnc_detach\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_attachToVehicle\",\"_unit\"],\r\nTRACE_2(\"params\",_attachToVehicle,_unit);\r\n\r\nprivate [\"_attachedList\", \"_itemDisplayName\", \"_attachedObject\", \"_attachedIndex\", \"_itemName\", \"_minDistance\", \"_isChemlight\"];\r\n\r\n_attachedList = _attachToVehicle getVariable [QGVAR(attached), []];\r\n\r\n_attachedObject = objNull;\r\n_attachedIndex = -1;\r\n_itemName = \"\";\r\n\r\n//Find closest attached object\r\n_minDistance = 1000;\r\n\r\n{\r\n    _x params [\"_xObject\", \"_xItemName\"];\r\n\r\n    if (((getPos _unit) distance2d (getPos _xObject)) < _minDistance) then {\r\n        _minDistance = ((getPos _unit) distance2d (getPos _xObject));\r\n        _attachedObject = _xObject;\r\n        _itemName = _xItemName;\r\n        _attachedIndex = _forEachIndex;\r\n    };\r\n} forEach _attachedList;\r\n\r\n// Check if unit has an attached item\r\nif (isNull _attachedObject || {_itemName == \"\"}) exitWith {ERROR(\"Could not find attached object\")};\r\n\r\n// Check if item is a chemlight\r\n_isChemlight = _attachedObject isKindOf \"Chemlight_base\";\r\n\r\n// Exit if can't add the item\r\nif (!(_unit canAdd _itemName) && {!_isChemlight}) exitWith {\r\n    [localize LSTRING(Inventory_Full)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n// Add item to inventory (unless it's a chemlight)\r\nif (!_isChemlight) then {\r\n    _unit addItem _itemName;\r\n};\r\n\r\nif (toLower _itemName in [\"b_ir_grenade\", \"o_ir_grenade\", \"i_ir_grenade\"]) then {\r\n    // Hack for dealing with X_IR_Grenade effect not dissapearing on deleteVehicle\r\n    detach _attachedObject;\r\n    _attachedObject setPos ((getPos _unit) vectorAdd [0, 0, -1000]);\r\n    // Delete attached item after 0.5 seconds\r\n    [{deleteVehicle (_this select 0)}, [_attachedObject], 2] call CBA_fnc_waitAndExecute;\r\n} else {\r\n    // Delete attached item\r\n    detach _attachedObject;\r\n    deleteVehicle _attachedObject;\r\n};\r\n\r\n// Reset unit variables\r\n_attachedList deleteAt _attachedIndex;\r\n_attachToVehicle setVariable [QGVAR(attached), _attachedList, true];\r\n\r\n// Display message\r\n_itemDisplayName = getText (configFile >> \"CfgWeapons\" >> _itemName >> \"displayName\");\r\nif (_itemDisplayName == \"\") then {\r\n    _itemDisplayName = getText (configFile >> \"CfgMagazines\" >> _itemName >> \"displayName\");\r\n};\r\n\r\n[format [localize LSTRING(Item_Detached), _itemDisplayName]] call EFUNC(common,displayTextStructured);\r\n"},{"name":"ace_attach_fnc_getChildrenAttachActions","file":"attach/functions/fnc_getChildrenAttachActions.sqf","text":"/*\r\n * Author: Garth de Wet (LH), PabstMirror\r\n * Show the ammo counts for a static weapon.\r\n * Called from \"insertChildren\" on interact_menu\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * ChildActiosn<ARRAY>\r\n *\r\n * Example:\r\n * [player, player] call ace_attach_fnc_getChildrenAttachActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_listed\", \"_actions\", \"_item\", \"_displayName\", \"_picture\", \"_action\"];\r\nparams [\"_target\",\"_player\"];\r\nTRACE_2(\"params\",_target,_player);\r\n\r\n_listed = [];\r\n_actions = [];\r\n\r\n{\r\n    if !(_x in _listed) then {\r\n        _listed pushBack _x;\r\n        _item = ConfigFile >> \"CfgMagazines\" >> _x;\r\n        if (getText (_item >> \"ACE_Attachable\") != \"\") then {\r\n            _displayName = getText(_item >> \"displayName\");\r\n            _picture = getText(_item >> \"picture\");\r\n            _action = [_x, _displayName, _picture, {[{_this call FUNC(attach)}, _this] call CBA_fnc_execNextFrame}, {_this call FUNC(canAttach)}, {}, [_x]] call EFUNC(interact_menu,createAction);\r\n            _actions pushBack [_action, [], _target];\r\n        };\r\n    };\r\n} forEach (magazines _player);\r\n\r\n{\r\n    if !(_x in _listed) then {\r\n        _listed pushBack _x;\r\n        _item = ConfigFile >> \"CfgWeapons\" >> _x;\r\n        if (getText (_item >> \"ACE_Attachable\") != \"\") then {\r\n            _displayName = getText(_item >> \"displayName\");\r\n            _picture = getText(_item >> \"picture\");\r\n            _action = [_x, _displayName, _picture, {[{_this call FUNC(attach)}, _this] call CBA_fnc_execNextFrame}, {_this call FUNC(canAttach)}, {}, [_x]] call EFUNC(interact_menu,createAction);\r\n            _actions pushBack [_action, [], _target];\r\n        };\r\n    };\r\n} forEach (items _player);\r\n\r\n_actions\r\n"},{"name":"ace_attach_fnc_handleGetIn","file":"attach/functions/fnc_handleGetIn.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles when a unit gets in to a vehicle.\r\n *\r\n * Arguments:\r\n * 0: vehicle <OBJECT>\r\n * 1: dunno <OBJECT>\r\n * 2: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [car2, x, player] call ACE_attach_fnc_handleGetIn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"\", \"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nif (!local _unit) exitWith {};\r\n\r\nprivate [\"_attachedList\"];\r\n\r\n_attachedList = _unit getVariable [QGVAR(attached), []];\r\nif ((count _attachedList) == 0) exitWith {};\r\n\r\n(_attachedList select 0) params [\"_xObject\"];\r\nif (!isNull _xObject) then {\r\n    TRACE_1(\"detaching and moving attached light\",_xObject);\r\n    detach _xObject;\r\n    _xObject setPos ((getPos _unit) vectorAdd [0, 0, -1000]);\r\n    [{\r\n        params [\"_detachedLight\"];\r\n        TRACE_1(\"delayed delete\",_detachedLight);\r\n        deleteVehicle _detachedLight;\r\n    }, [_xObject], 2] call CBA_fnc_waitAndExecute;\r\n    (_attachedList select 0) set [0, objNull];\r\n};\r\n\r\n_unit setVariable [QGVAR(attached), _attachedList, true];\r\n"},{"name":"ace_attach_fnc_handleGetOut","file":"attach/functions/fnc_handleGetOut.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles when a unit gets in to a vehicle.\r\n *\r\n * Arguments:\r\n * 0: vehicle <OBJECT>\r\n * 1: dunno <OBJECT>\r\n * 2: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [car2, x, player] call ACE_attach_fnc_handleGetOut\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"\", \"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nif (!local _unit) exitWith {};\r\n\r\nprivate [\"_attachedList\"];\r\n\r\n_attachedList = _unit getVariable [QGVAR(attached), []];\r\nif ((count _attachedList) == 0) exitWith {};\r\n\r\n(_attachedList select 0) params [\"_xObject\", \"_xItemName\"];\r\nif (isNull _xObject) then {\r\n    TRACE_1(\"null attached when exiting vehicle, scripted reattach\",_xItemName);\r\n    _unit setVariable [QGVAR(attached), [], true];\r\n    [_unit, _unit, _xItemName, true] call FUNC(attach);\r\n};\r\n"},{"name":"ace_attach_fnc_handleKilled","file":"attach/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles when vehicle or man is killed. \r\n * Note: Runs where unit is local.\r\n *\r\n * Arguments:\r\n * 0: DeadVehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [bob1] call ACE_attach_fnc_handleKilled\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_deadUnit\"];\r\nTRACE_1(\"params\",_deadUnit);\r\n\r\nprivate [\"_attachedList\"];\r\n\r\n_attachedList = _deadUnit getVariable [QGVAR(attached), []];\r\n\r\nif ((count _attachedList) == 0) exitWith {};\r\n\r\n{\r\n    _x params [\"_xObject\"];\r\n    TRACE_2(\"detaching\",_xObject,_deadUnit);\r\n    detach _xObject;\r\n    //If it's a vehicle, also delete the attached\r\n    if (!(_deadUnit isKindOf \"CAManBase\")) then {\r\n        _xObject setPos ((getPos _deadUnit) vectorAdd [0, 0, -1000]);\r\n        [{deleteVehicle (_this select 0)}, [_xObject], 2] call CBA_fnc_waitAndExecute;\r\n    };\r\n} forEach _attachedList;\r\n\r\n_deadUnit setVariable [QGVAR(attached), nil, true];\r\n"},{"name":"ace_attach_fnc_placeApprove","file":"attach/functions/fnc_placeApprove.sqf","text":"/*\r\n * Author: Pabst Mirror (based on Explosive attach by Garth de Wet (LH))\r\n * Approves placement of the lightObject, scans for an appropriate location and attaches\r\n * A player can release the attachObject with it floating in mid-air.\r\n * This will use lineIntersectsWith to scan towards the center of the vehicle to find a collision\r\n * ArmA's collision detection is of couse terrible and often misses collisions (difference between what we see and collision LOD)\r\n * So it does multiple scans at slighly different angles\r\n * This is VERY computationaly intensive, but doesn't happen that often.\r\n *\r\n * Arguments:\r\n * 0: Unit (player) <OBJECT>\r\n * 1: attachToVehicle <OBJECT>\r\n * 2: Item Classname (CfgWeapon/CfgMagazine) <STRING>\r\n * 3: Light Vehicle Classname <STRING>\r\n * 4: On Attach Text <STRING>\r\n * 5: Starting Pos of dummy item <ARRAY>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * No\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_startingOffset\", \"_startDistanceFromCenter\", \"_closeInUnitVector\", \"_closeInMax\", \"_closeInMin\", \"_closeInDistance\", \"_endPosTestOffset\", \"_endPosTest\", \"_doesIntersect\", \"_startingPosShifted\", \"_startASL\", \"_endPosShifted\", \"_endASL\", \"_attachedObject\", \"_attachList\"];\r\n\r\nparams [\"_unit\", \"_attachToVehicle\", \"_itemClassname\", \"_itemVehClass\", \"_onAtachText\", \"_startingPosition\"];\r\nTRACE_6(\"params\",_unit,_attachToVehicle,_itemClassname,_itemVehClass,_onAtachText,_startingPosition);\r\n\r\n_startingOffset = _attachToVehicle worldToModel _startingPosition;\r\n\r\n_startDistanceFromCenter = vectorMagnitude _startingOffset;\r\n_closeInUnitVector = vectorNormalized (_startingOffset vectorFromTo [0,0,0]);\r\n\r\n_closeInMax = _startDistanceFromCenter;\r\n_closeInMin = 0;\r\n\r\nwhile {(_closeInMax - _closeInMin) > 0.01} do {\r\n    _closeInDistance = (_closeInMax + _closeInMin) / 2;\r\n    // systemChat format [\"Trying %1 from %2 start %3\", _closeInDistance, [_closeInMax, _closeInMin], _startDistanceFromCenter];\r\n    _endPosTestOffset = _startingOffset vectorAdd (_closeInUnitVector vectorMultiply _closeInDistance);\r\n    _endPosTestOffset set [2, (_startingOffset select 2)];\r\n    _endPosTest = _attachToVehicle modelToWorldVisual _endPosTestOffset;\r\n\r\n    _doesIntersect = false;\r\n    {\r\n        if (_doesIntersect) exitWith {};\r\n        _startingPosShifted = _startingPosition vectorAdd _x;\r\n        _startASL = if (surfaceIsWater _startingPosShifted) then {_startingPosShifted} else {ATLtoASL _startingPosShifted};\r\n        {\r\n            _endPosShifted = _endPosTest vectorAdd _x;\r\n            _endASL = if (surfaceIsWater _startingPosShifted) then {_endPosShifted} else {ATLtoASL _endPosShifted};\r\n\r\n            //Uncomment to see the lazor show, and see how the scanning works:\r\n            // drawLine3D [_startingPosShifted, _endPosShifted, [1,0,0,1]];\r\n            if (_attachToVehicle in lineIntersectsWith [_startASL, _endASL, _unit]) exitWith {_doesIntersect = true};\r\n        } forEach [[0,0,0.045], [0,0,-0.045], [0,0.045,0], [0,-0.045,0], [0.045,0,0], [-0.045,0,0]];\r\n    } forEach [[0,0,0], [0,0,0.05], [0,0,-0.05]];\r\n\r\n    if (_doesIntersect) then {\r\n        _closeInMax = _closeInDistance;\r\n    } else {\r\n        _closeInMin = _closeInDistance;\r\n    };\r\n};\r\n\r\n_closeInDistance = (_closeInMax + _closeInMin) / 2;\r\n\r\n//Checks (too close to center or can't attach)\r\nif (((_startDistanceFromCenter - _closeInDistance) < 0.1) || {!([_attachToVehicle, _unit, _itemClassname] call FUNC(canAttach))}) exitWith {\r\n    TRACE_2(\"no valid spot found\",_closeInDistance,_startDistanceFromCenter);\r\n    [localize LSTRING(Failed)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n//Move it out slightly, for visability sake (better to look a little funny than be embedded//sunk in the hull and be useless)\r\n_closeInDistance = (_closeInDistance - 0.0085);\r\n\r\n//Create New 'real' Object\r\n_endPosTestOffset = _startingOffset vectorAdd (_closeInUnitVector vectorMultiply _closeInDistance);\r\n_endPosTestOffset set [2, (_startingOffset select 2)];\r\n_attachedObject = _itemVehClass createVehicle (getPos _unit);\r\n_attachedObject attachTo [_attachToVehicle, _endPosTestOffset];\r\n\r\n//Remove Item from inventory\r\n_unit removeItem _itemClassname;\r\n\r\n//Add Object to attached array\r\n_attachList = _attachToVehicle getVariable [QGVAR(attached), []];\r\n_attachList pushBack [_attachedObject, _itemClassname];\r\n_attachToVehicle setVariable [QGVAR(attached), _attachList, true];\r\n\r\n[_onAtachText] call EFUNC(common,displayTextStructured);\r\n"}],"backpacks":[{"name":"ace_backpacks_fnc_backpackOpened","file":"backpacks/functions/fnc_backpackOpened.sqf","text":"/*\r\n * Author: commy2\r\n * Someone opened your backpack. Play sound and camshake. Execute locally.\r\n *\r\n * Arguments:\r\n * 0: Who accessed your inventory? (Object)\r\n * 1: Unit that wields the backpack (Object)\r\n * 2: The backpack object (Object)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_backpack\"];\r\n\r\n// do cam shake if the target is the player\r\nif (_target call EFUNC(common,isPlayer)) then {\r\n    addCamShake [4, 0.5, 5];\r\n};\r\n\r\n// play a zipper sound effect\r\nprivate _sounds = [\r\n    QUOTE(PATHTO_R(sounds\\zip_in.wav)),\r\n    QUOTE(PATHTO_R(sounds\\zip_out.wav))\r\n];\r\n\r\nprivate _position = AGLToASL (_target modelToWorldVisual (_target selectionPosition \"Spine3\"));\r\n\r\nplaySound3D [\r\n    selectRandom _sounds,\r\n    objNull,\r\n    false,\r\n    _position,\r\n    1,\r\n    1,\r\n    50\r\n];\r\n"},{"name":"ace_backpacks_fnc_isBackpack","file":"backpacks/functions/fnc_isBackpack.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the given backpack is an actual backpack that can store items. Parachute, static weapon packs, etc. will return false.\r\n *\r\n * Arguments:\r\n * 0: Backpack <OBJECT, STRING>\r\n *\r\n * Return Value:\r\n * Boolean <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_backpack\", objNull, [objNull, \"\"]]];\r\n\r\nif (_backpack isEqualType objNull) then {\r\n    _backpack = typeOf _backpack;\r\n};\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> _backpack;\r\n\r\ngetText (_config >> \"vehicleClass\") == \"backpacks\" && {getNumber (_config >> \"maximumLoad\") > 0} // return\r\n"},{"name":"ace_backpacks_fnc_onOpenInventory","file":"backpacks/functions/fnc_onOpenInventory.sqf","text":"/*\r\n * Author: commy2\r\n * Handle the open inventory event. Camshake and sound on target client.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Backpack <OBJECT>\r\n *\r\n * Return Value:\r\n * false. Always open the inventory dialog. (Bool)\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_backpack\"];\r\n\r\n// exit if the target is not a real backpack, i.e. parachute, static weapon bag etc.\r\nif !(_backpack call FUNC(isBackpack)) exitWith {false};\r\n\r\n// get the unit that wears the backpack object\r\nprivate _target = objectParent _backpack;\r\n\r\nif (isNull _target) exitWith {false};\r\n\r\n// raise event on target unit\r\n[\"ace_backpackOpened\", [_target, _backpack], _target] call CBA_fnc_targetEvent;\r\n\r\n// return false to open inventory as usual\r\nfalse\r\n"}],"ballistics":[],"captives":[{"name":"ace_captives_fnc_canApplyHandcuffs","file":"captives/functions/fnc_canApplyHandcuffs.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Checks the conditions for being able to apply handcuffs\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_canApplyHandcuffs\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n//Check sides, Player has cableTie, target is alive and not already handcuffed\r\n\r\n(GVAR(allowHandcuffOwnSide) || {(side _unit) != (side _target)}) &&\r\n{\"ACE_CableTie\" in (items _unit)} &&\r\n{alive _target} &&\r\n{!(_target getVariable [QGVAR(isHandcuffed), false])} &&\r\n{\r\n    (_target getVariable [\"ACE_isUnconscious\", false]) || //isUnconscious\r\n    {!([_target] call EFUNC(common,isPlayer))} || //is an AI (not a player)\r\n    {GVAR(requireSurrender) == 0} || //or don't require surrendering\r\n    {_target getVariable [QGVAR(isSurrendering), false]} ||  //or is surrendering\r\n    {(GVAR(requireSurrender) == 2) && {(currentWeapon _target) == \"\"}} //or \"SurrenderOrNoWeapon\" and no weapon\r\n}\r\n"},{"name":"ace_captives_fnc_canEscortCaptive","file":"captives/functions/fnc_canEscortCaptive.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Tests if can escort target (attach)\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_canEscortCaptive\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n//Alive, handcuffed, not being escored, and not unconscious\r\n\r\n(_target getVariable [QGVAR(isHandcuffed), false]) &&\r\n{isNull (attachedTo _target)} &&\r\n{alive _target} &&\r\n{!(_target getVariable [\"ACE_isUnconscious\", false])} &&\r\n{(vehicle _unit) == _unit} &&\r\n{(vehicle _target) == _target}\r\n"},{"name":"ace_captives_fnc_canFriskPerson","file":"captives/functions/fnc_canFriskPerson.sqf","text":"/*\r\n * Author: bux578\r\n * Checks the conditions for being able to frisk a unit\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_canFriskPerson\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\n_target getVariable [QGVAR(isHandcuffed), false]\r\n|| {_target getVariable [QGVAR(isSurrendering), false]}\r\n|| {_target getVariable [\"ACE_isSearchable\", false]}\r\n|| {_target getVariable [\"ACE_isUnconscious\", false]}\r\n"},{"name":"ace_captives_fnc_canLoadCaptive","file":"captives/functions/fnc_canLoadCaptive.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit can load the target object into a vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit that wants to load a captive <OBJECT>\r\n * 1: A captive. ObjNull for the first escorted captive (may be null) <OBJECT>\r\n * 2: Vehicle to load the captive into. ObjNull for the nearest vehicle (may be null) <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob, car] call ACE_captives_fnc_canLoadCaptive\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\",\"_vehicle\"];\r\n\r\nif ((isNull _target) && {_unit getVariable [QGVAR(isEscorting), false]}) then {\r\n    //Looking at a vehicle while escorting, get target from attached objects:\r\n    {\r\n        if (_x getVariable [QGVAR(isHandcuffed), false]) exitWith {\r\n            _target = _x;\r\n        };\r\n    } forEach (attachedObjects _unit);\r\n};\r\nif ((isNull _target) || {(vehicle _target) != _target} || {!(_target getVariable [QGVAR(isHandcuffed), false])}) exitWith {false};\r\n\r\nif (isNull _vehicle) then {\r\n    //Looking at a captive unit, search for nearby vehicles with valid seats:\r\n    {\r\n        if ((_x emptyPositions \"cargo\") > 0) exitWith {\r\n            _vehicle = _x;\r\n        };\r\n    } forEach (nearestObjects [_unit, [\"Car\", \"Tank\", \"Helicopter\", \"Plane\", \"Ship\"], 10]);\r\n} else {\r\n    //We have a vehicle picked, make sure it has empty seats:\r\n    if ((_vehicle emptyPositions \"cargo\") == 0) then {\r\n        _vehicle = objNull;\r\n    };\r\n};\r\n\r\n(!isNull _vehicle)\r\n"},{"name":"ace_captives_fnc_canRemoveHandcuffs","file":"captives/functions/fnc_canRemoveHandcuffs.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Checks the conditions for being able to remove handcuffs\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_canRemoveHandcuffs\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\n//Unit is handcuffed and not currently being escorted\r\n_target getVariable [QGVAR(isHandcuffed), false] &&\r\n{isNull (attachedTo _target)} &&\r\n{(vehicle _target) == _target}\r\n"},{"name":"ace_captives_fnc_canStopEscorting","file":"captives/functions/fnc_canStopEscorting.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Tests if player can stop escorting\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT><OPTIONAL>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_canStopEscorting\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_target\", objNull]];\r\n\r\nif (isNull _target) then {\r\n    _target = _unit getVariable [QGVAR(escortedUnit), objNull];\r\n};\r\n\r\nif (isNull _target) exitWith {false};\r\n\r\n(_target in (attachedObjects _unit)) && {_target getVariable [QGVAR(isHandcuffed), false]}\r\n"},{"name":"ace_captives_fnc_canSurrender","file":"captives/functions/fnc_canSurrender.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Checks the conditions for being able switch surrender states\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: New Surrender State to test <BOOL>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [Jean, true] call ACE_captives_fnc_canSurrender;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_returnValue\";\r\n\r\nparams [\"_unit\", \"_newSurrenderState\"];\r\n\r\n_returnValue = if (_newSurrenderState) then {\r\n    //no weapon equiped AND not currently surrendering and\r\n    GVAR(allowSurrender) && {(currentWeapon _unit) == \"\"} && {!(_unit getVariable [QGVAR(isSurrendering), false])}\r\n} else {\r\n    //is Surrendering\r\n    (_unit getVariable [QGVAR(isSurrendering), false])\r\n};\r\n\r\n_returnValue\r\n"},{"name":"ace_captives_fnc_canUnloadCaptive","file":"captives/functions/fnc_canUnloadCaptive.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit can unload a captive from the vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit that wants to unload a captive (player) <OBJECT>\r\n * 1: A captive loaded in a vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_canUnloadCaptive;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_cargo\"];\r\n\r\nparams [\"_player\", \"_unit\"];\r\n\r\n((vehicle _unit) != _unit) && {_unit getVariable [QGVAR(isHandcuffed), false]}\r\n"},{"name":"ace_captives_fnc_doApplyHandcuffs","file":"captives/functions/fnc_doApplyHandcuffs.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Checks the conditions for being able to apply handcuffs\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_doApplyHandcuffs;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nplaySound3D [QUOTE(PATHTO_R(sounds\\cable_tie_zipping.ogg)), objNull, false, (getPosASL _target), 1, 1, 10];\r\n\r\n[QGVAR(setHandcuffed), [_target, true], [_target]] call CBA_fnc_targetEvent;\r\n\r\n_unit removeItem \"ACE_CableTie\";\r\n"},{"name":"ace_captives_fnc_doEscortCaptive","file":"captives/functions/fnc_doEscortCaptive.sqf","text":"/*\r\n * Author: Nic547\r\n * Attaches a Captive to the _unit\r\n *\r\n * Arguments:\r\n * 0: _unit-Player <OBJECT>\r\n * 1: target <OBJECT>\r\n * 2: _state <BOOL>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player, bob, true] call ACE_captives_fnc_doEscorteCaptive;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\",\"_state\"];\r\n\r\nif (_state) then {\r\n    if (_unit getVariable [QGVAR(isEscorting), false]) exitWith {};\r\n\r\n    [_unit, _target, false] call EFUNC(common,claim);\r\n    _unit setVariable [QGVAR(isEscorting), true, true];\r\n\r\n    _target attachTo [_unit, [0, 1, 0]];\r\n\r\n    _unit setVariable [QGVAR(escortedUnit), _target, true];\r\n\r\n    //Add Actionmenu to release captive\r\n    _actionID = _unit addAction [format [\"<t color='#FF0000'>%1</t>\", localize LSTRING(StopEscorting)],\r\n    {[(_this select 0), ((_this select 0) getVariable [QGVAR(escortedUnit), objNull]), false] call FUNC(doEscortCaptive);},\r\n    nil, 20, false, true, \"\", QUOTE(!isNull (GETVAR(_target,QGVAR(escortedUnit),objNull)))];\r\n\r\n    [{\r\n        params [\"_args\", \"_pfID\"];\r\n        _args params [\"_unit\", \"_target\", \"_actionID\"];\r\n\r\n        if (_unit getVariable [QGVAR(isEscorting), false]) then {\r\n            if (!alive _target || {!alive _unit} || {!canStand _target} || {!canStand _unit} || {_target getVariable [\"ACE_isUnconscious\", false]} || {_unit getVariable [\"ACE_isUnconscious\", false]} || {!isNull (attachedTo _unit)}) then {\r\n                _unit setVariable [QGVAR(isEscorting), false, true];\r\n            };\r\n        };\r\n\r\n        if (!(_unit getVariable [QGVAR(isEscorting), false])) then {\r\n            [(_this select 1)] call CBA_fnc_removePerFrameHandler;\r\n            [objNull, _target, false] call EFUNC(common,claim);\r\n            detach _target;\r\n            _unit removeAction _actionID;\r\n            _unit setVariable [QGVAR(escortedUnit), objNull, true];\r\n        };\r\n    }, 0, [_unit, _target, _actionID]] call CBA_fnc_addPerFrameHandler;\r\n\r\n} else {\r\n    _unit setVariable [QGVAR(isEscorting), false, true];\r\n    _unit setVariable [QGVAR(escortedUnit), objNull, true];\r\n};\r\n"},{"name":"ace_captives_fnc_doFriskPerson","file":"captives/functions/fnc_doFriskPerson.sqf","text":"/*\r\n * Author: bux578\r\n * Open the select menu with the \"personal\" items of a frisked unit.  It only shows \"handgunWeapon\", \"uniformItems\", \"vestItems\", \"backpackItems\" and \"assignedItems\" because every other item is visible on the character\r\n *\r\n * Arguments:\r\n * 0: player unit <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, bob] call ACE_captives_fnc_doFristPerson;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_weapon\", \"_listedItemClasses\", \"_actions\", \"_allGear\"];\r\n\r\nparams [\"_player\", \"_unit\"];\r\n\r\n_weapon = currentWeapon _player;\r\nif (_weapon == primaryWeapon _player && {_weapon != \"\"}) then {\r\n    [_player, \"AmovPercMstpSlowWrflDnon\", 0] call EFUNC(common,doAnimation);\r\n};\r\n\r\n_listedItemClasses = [];\r\n\r\n_actions = [localize LSTRING(FriskMenuHeader), \"\"] call ACE_Interaction_fnc_prepareSelectMenu;\r\n\r\n_allGear = [];\r\n\r\nif ((handgunWeapon _unit) != \"\") then {\r\n    _allGear pushBack (handgunWeapon _unit);\r\n};\r\nif (count (uniformItems _unit) > 0) then {\r\n    _allGear = _allGear + (uniformItems _unit);\r\n};\r\nif (count (vestItems _unit) > 0) then {\r\n    _allGear = _allGear + (vestItems _unit);\r\n};\r\nif (count (backpackItems _unit) > 0) then {\r\n    _allGear = _allGear + (backpackItems _unit);\r\n};\r\nif (count (assignedItems _unit) > 0) then {\r\n    _allGear = _allGear + (assignedItems _unit);\r\n};\r\n\r\n// Handgun\r\n// Uniform Items\r\n// Vest Items\r\n// Backpack Items\r\n// Assigned Items\r\n{\r\n    if (!(_x in _listedItemClasses)) then {\r\n        private \"_item\";\r\n        _item = configFile >> \"CfgMagazines\" >> _x;\r\n        if (isNil \"_item\" || str _item == \"\") then {  //str _item ?\r\n            _item = configFile >> \"CfgWeapons\" >> _x;\r\n        };\r\n        _actions = [_actions, getText(_item >> \"displayName\"), getText(_item >> \"picture\"), _x] call ACE_Interaction_fnc_addSelectableItem;\r\n        _listedItemClasses pushBack _x;\r\n    };\r\n} forEach (_allGear);\r\n\r\n[_actions, {call ACE_Interaction_fnc_hideMenu;}, {call ACE_Interaction_fnc_hideMenu;}] call ACE_Interaction_fnc_openSelectMenu;\r\n\r\n// don't need an \"Ok\" Button\r\nctrlShow [8860, false];\r\n"},{"name":"ace_captives_fnc_doLoadCaptive","file":"captives/functions/fnc_doLoadCaptive.sqf","text":"/*\r\n * Author: commy2\r\n * Unit loads the target object into a vehicle. (logic same as canLoadCaptive)\r\n *\r\n * Arguments:\r\n * 0: Unit that wants to load a captive <OBJECT>\r\n * 1: A captive. ObjNull for the first escorted captive <OBJECT>\r\n * 2: Vehicle to load the captive into. ObjNull for the nearest vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob, tom, car] call ACE_captives_fnc_doLoadCaptive\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\",\"_vehicle\"];\r\n\r\nif ((isNull _target) && {_unit getVariable [QGVAR(isEscorting), false]}) then {\r\n    //Looking at a vehicle while escorting, get target from attached objects:\r\n    {\r\n        if (_x getVariable [QGVAR(isHandcuffed), false]) exitWith {\r\n            _target = _x;\r\n        };\r\n    } forEach (attachedObjects _unit);\r\n};\r\nif ((isNull _target) || {(vehicle _target) != _target} || {!(_target getVariable [QGVAR(isHandcuffed), false])}) exitWith {ERROR(\"\");};\r\n\r\nif (isNull _vehicle) then {\r\n    //Looking at a captive unit, search for nearby vehicles with valid seats:\r\n    {\r\n        // if (([_x] call FUNC(findEmptyNonFFVCargoSeat)) != -1) exitWith {\r\n        if ((_x emptyPositions \"cargo\") > 0) exitWith {\r\n            _vehicle = _x;\r\n        };\r\n    } forEach (nearestObjects [_unit, [\"Car\", \"Tank\", \"Helicopter\", \"Plane\", \"Ship\"], 10]);\r\n} else {\r\n    // if (([_vehicle] call FUNC(findEmptyNonFFVCargoSeat)) == -1) then {\r\n    if ((_vehicle emptyPositions \"cargo\") == 0) then {\r\n        _vehicle = objNull;\r\n    };\r\n};\r\n\r\nif (isNull _vehicle) exitWith {ERROR(\"\");};\r\n\r\n_unit setVariable [QGVAR(isEscorting), false, true];\r\n[QGVAR(moveInCaptive), [_target, _vehicle], [_target]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_captives_fnc_doRemoveHandcuffs","file":"captives/functions/fnc_doRemoveHandcuffs.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Remove handcuffs from a target\r\n *\r\n * Arguments:\r\n * 0: target <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [bob, false] call ACE_captives_fnc_doRemoveHandcuffs\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\n[QGVAR(setHandcuffed), [_target, false], [_target]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_captives_fnc_doUnloadCaptive","file":"captives/functions/fnc_doUnloadCaptive.sqf","text":"/*\r\n * Author: commy2\r\n * Unit unloads a captive from a vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit that wants to unload a captive <OBJECT>\r\n * 1: A captive loaded in a vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob, prisoner] call ACE_captives_fnc_doUnloadCaptive\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\n[QGVAR(moveOutCaptive), [_target], [_target]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_captives_fnc_findEmptyNonFFVCargoSeat","file":"captives/functions/fnc_findEmptyNonFFVCargoSeat.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Finds a free cargo seat, searching non FFV first\r\n *\r\n * Arguments:\r\n * 0: The Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * ARRAY [seat index <NUMBER>, is FFV <BOOL>]\r\n *\r\n * Example:\r\n * [car1] call ACE_captives_fnc_findEmptyNonFFVCargoSeat\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_1(\"params\", _vehicle);\r\n\r\n_vehicleConfig = configFile >> \"CfgVehicles\" >> (typeOf _vehicle);\r\n\r\n_proxyOrder = getArray (_vehicleConfig >> \"getInProxyOrder\");\r\n_transportSoldier = getNumber (_vehicleConfig >> \"transportSoldier\");\r\n_realCargoCount = if (isArray (_vehicleConfig >> \"getInProxyOrder\")) then {count _proxyOrder} else {_transportSoldier};\r\n\r\n//Find FFV turrets:\r\n_ffvCargoIndexes = [];\r\n{\r\n    _turretConfig = [_vehicleConfig, _x] call EFUNC(common,getTurretConfigPath);\r\n    _isCargoProxy = ((getText (_turretConfig >> \"proxyType\")) == \"CPCargo\") && {isNumber (_turretConfig >> \"proxyIndex\")};\r\n\r\n    if (_isCargoProxy) then {\r\n        _proxyCargoIndex = getNumber (_turretConfig >> \"proxyIndex\");\r\n        _cargoIndex = _proxyOrder find _proxyCargoIndex;\r\n        _ffvCargoIndexes pushBack _cargoIndex;\r\n    };\r\n} forEach (allTurrets [_vehicle, true]);\r\n\r\n//Find Empty Seats:\r\n_occupiedSeats = [];\r\n{\r\n    _x params [\"\", \"\", \"_xIndex\"];\r\n    if (_xIndex > -1) then {_occupiedSeats pushBack _xIndex;};\r\n} forEach (fullCrew _vehicle);\r\n\r\nTRACE_3(\"Searching for empty seat\",_realCargoCount,_ffvCargoIndexes,_occupiedSeats);\r\n\r\n_emptyCargoSeatReturn = [-1, false];\r\n\r\n//First seach for non-ffv seats:\r\nfor \"_index\" from 0 to (_realCargoCount - 1) do {\r\n    if ((!(_index in _ffvCargoIndexes)) && {!(_index in _occupiedSeats)}) exitWith {\r\n        _emptyCargoSeatReturn = [_index, false];\r\n    };\r\n};\r\n\r\n//Only use FFV if none found:\r\nif (_emptyCargoSeatReturn isEqualTo [-1, false]) then {\r\n    for \"_index\" from 0 to (_realCargoCount - 1) do {\r\n        if (!(_index in _occupiedSeats)) exitWith {\r\n            _emptyCargoSeatReturn = [_index, true];\r\n        };\r\n    };\r\n};\r\n\r\n_emptyCargoSeatReturn\r\n"},{"name":"ace_captives_fnc_handleAnimChangedHandcuffed","file":"captives/functions/fnc_handleAnimChangedHandcuffed.sqf","text":"/*\r\n * Author: Nic547, commy2\r\n * Restart the handcuffing animation if it got interrupted. Called from a AnimChanged EH.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: New animation <STRING>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_newAnimation\"];\r\nTRACE_2(\"AnimChanged\",_unit,_newAnimation);\r\nif (_unit == (vehicle _unit)) then {\r\n    if ((_newAnimation != \"ACE_AmovPercMstpSsurWnonDnon\") && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\r\n        TRACE_1(\"Handcuff animation interrupted\",_newAnimation);\r\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\r\n    };\r\n} else {\r\n    _turretPath = [];\r\n    {\r\n        _x params [\"_xUnit\", \"\", \"\", \"_xTurretPath\"];\r\n        if (_unit == _xUnit) exitWith {_turretPath = _xTurretPath};\r\n    } forEach (fullCrew (vehicle _unit));\r\n    TRACE_1(\"turret Path\",_turretPath);\r\n    if (_turretPath isEqualTo []) exitWith {};\r\n\r\n    TRACE_1(\"Handcuff (FFV) animation interrupted\",_newAnimation);\r\n    [_unit, \"ACE_HandcuffedFFV\", 2] call EFUNC(common,doAnimation);\r\n    [_unit, \"ACE_HandcuffedFFV\", 1] call EFUNC(common,doAnimation);\r\n};\r\n"},{"name":"ace_captives_fnc_handleAnimChangedSurrendered","file":"captives/functions/fnc_handleAnimChangedSurrendered.sqf","text":"/*\r\n * Author: Nic547, commy2\r\n * Restart the surrendering animation if it got interrupted. Called from a AnimChanged EH.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: New animation <STRING>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_newAnimation\"];\r\n\r\nTRACE_2(\"AnimChanged\",_unit,_newAnimation);\r\nif ((_newAnimation != \"ACE_AmovPercMstpSsurWnonDnon\") && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\r\n    TRACE_1(\"Surrender animation interrupted\",_newAnimation);\r\n    [_unit, \"ACE_AmovPercMstpSsurWnonDnon\", 1] call EFUNC(common,doAnimation);\r\n};\r\n"},{"name":"ace_captives_fnc_handleGetIn","file":"captives/functions/fnc_handleGetIn.sqf","text":"/*\r\n * Author: commy2\r\n * Handles when a unit gets in to a vehicle.  Release escorted captive when entering a vehicle\r\n *\r\n * Arguments:\r\n * 0: _vehicle <OBJECT>\r\n * 1: dunno <OBJECT>\r\n * 2: _unit <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [car2, x, player] call ACE_captives_fnc_handleGetIn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"\",\"_unit\"];\r\nTRACE_2(\"params\",_vehicle,_unit);\r\n\r\nif (local _unit) then {\r\n    if (_unit getVariable [QGVAR(isEscorting), false]) then {\r\n        _unit setVariable [QGVAR(isEscorting), false, true];\r\n    };\r\n\r\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\r\n        [_unit, false] call FUNC(setSurrendered);\r\n    };\r\n\r\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\r\n        //Need to force animation for FFV turrets\r\n        _turretPath = [];\r\n        {\r\n            _x params [\"_xUnit\", \"\", \"\", \"_xTurretPath\"];\r\n            if (_unit == _xUnit) exitWith {_turretPath = _xTurretPath};\r\n        } forEach (fullCrew (vehicle _unit));\r\n        if (!(_turretPath isEqualTo [])) then {\r\n            TRACE_1(\"Setting FFV Handcuffed Animation\",_turretPath);\r\n            [_unit, \"ACE_HandcuffedFFV\", 2] call EFUNC(common,doAnimation);\r\n            [_unit, \"ACE_HandcuffedFFV\", 1] call EFUNC(common,doAnimation);\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_captives_fnc_handleGetOut","file":"captives/functions/fnc_handleGetOut.sqf","text":"/*\r\n * Author: commy2\r\n * Handles when a captive unit gets out of a vehicle.\r\n *\r\n * Arguments:\r\n * 0: _vehicle <OBJECT>\r\n * 1: dunno <OBJECT>\r\n * 2: _unit <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [car2, x, player] call ACE_captives_fnc_handleGetOut\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"\", \"_unit\"];\r\nTRACE_2(\"params\",_vehicle,_unit);\r\n\r\nif ((local _unit) && {_unit getVariable [QGVAR(isHandcuffed), false]}) then {\r\n    private [\"_cargoIndex\"];\r\n\r\n    _cargoIndex = _unit getVariable [QGVAR(CargoIndex), -1];\r\n\r\n    if (_cargoIndex != -1) then {\r\n        //If captive was not \"unloaded\", then move them back into the vehicle.\r\n        TRACE_1(\"forcing back into vehicle\",_cargoIndex);\r\n        _unit moveInCargo [_vehicle, _cargoIndex];\r\n    } else {\r\n        //Getting out of vehicle:\r\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 2] call EFUNC(common,doAnimation);\r\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\r\n    };\r\n};\r\n"},{"name":"ace_captives_fnc_handleLocal","file":"captives/functions/fnc_handleLocal.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Called when a unit switched locality\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Is local <BOOL>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_local\"];\r\n\r\n// Make sure that if the unit is captive or surrendered it has a AnimChanged EH running ONLY on the machine that owns it\r\nif (_local) then {\r\n\r\n    // If the unit is handcuffed\r\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\r\n        // If the unit already has an AnimChanged EH here then there's nothing to do either\r\n        if (_unit getVariable [QGVAR(handcuffAnimEHID), -1] != -1) exitWith {};\r\n\r\n        // Otherwise, restart the AnimChanged EH in the new machine\r\n        private _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedHandcuffed)];\r\n        TRACE_2(\"Adding animChangedEH\",_unit,_animChangedEHID);\r\n        _unit setVariable [QGVAR(handcuffAnimEHID), _animChangedEHID];\r\n    };\r\n\r\n    // If the unit is surrendering\r\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\r\n        // If the unit already has an AnimChanged EH here then there's nothing to do either\r\n        if (_unit getVariable [QGVAR(surrenderAnimEHID), -1] != -1) exitWith {};\r\n\r\n        // Otherwise, restart the AnimChanged EH in the new machine\r\n        private _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedSurrendered)];\r\n        TRACE_2(\"Adding animChangedEH\",_unit,_animChangedEHID);\r\n        _unit setVariable [QGVAR(surrenderAnimEHID), _animChangedEHID];\r\n    };\r\n\r\n} else {\r\n\r\n    private _animChangedEHID = _unit getVariable [QGVAR(handcuffAnimEHID), -1];\r\n    if (_animChangedEHID != -1) then {\r\n        // If the unit had a AnimChanged EH for handcuffing in the old machine then remove it\r\n        TRACE_1(\"Removing animChanged EH\",_animChangedEHID);\r\n        _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\r\n        _unit setVariable [QGVAR(handcuffAnimEHID), -1];\r\n    };\r\n\r\n    _animChangedEHID = _unit getVariable [QGVAR(surrenderAnimEHID), -1];\r\n    if (_animChangedEHID != -1) then {\r\n        // If the unit had a AnimChanged EH for handcuffing in the old machine then remove it\r\n        TRACE_1(\"Removing animChanged EH\",_animChangedEHID);\r\n        _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\r\n        _unit setVariable [QGVAR(surrenderAnimEHID), -1];\r\n    };\r\n\r\n};\r\n"},{"name":"ace_captives_fnc_handleOnUnconscious","file":"captives/functions/fnc_handleOnUnconscious.sqf","text":"/*\r\n * Author: commy2, PabstMirror\r\n * Handles the \"ace_unconscious\" event\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 0: Is Unconsisisiouses <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob, true] call ACE_captives_fnc_handleOnUnconscious\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\",\"_isUnconc\"];\r\n\r\nif (!local _unit) exitWith {};\r\n\r\nif (_isUnconc) then {\r\n    //Knocked out: If surrendering, stop\r\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\r\n        [_unit, false] call FUNC(setSurrendered);\r\n    };\r\n} else {\r\n    //Woke up: if handcuffed, goto animation\r\n    if (_unit getVariable [QGVAR(isHandcuffed), false] && {vehicle _unit == _unit}) then {\r\n        [_unit] call EFUNC(common,fixLoweredRifleAnimation);\r\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\r\n    };\r\n};\r\n"},{"name":"ace_captives_fnc_handlePlayerChanged","file":"captives/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handles playerChanged.  Resets \"showHUD\" based on handcuff status\r\n *\r\n * Arguments:\r\n * 0: _newUnit <OBJECT>\r\n * 1: _oldUnit <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [bob1, bob2] call ACE_captives_fnc_handlePlayerChange\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_newUnit\",\"_oldUnit\"];\r\n\r\n//set showHUD based on new unit status:\r\nif ((_newUnit getVariable [QGVAR(isHandcuffed), false]) || {_newUnit getVariable [QGVAR(isSurrendering), false]}) then {\r\n    TRACE_1(\"Player Change (showHUD false)\",_newUnit);\r\n    [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\r\n} else {\r\n    TRACE_1(\"Player Change (showHUD true)\",_newUnit);\r\n    [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\r\n};\r\n\r\n//If old player was escorting, stop\r\nif (_oldUnit getVariable [QGVAR(isEscorting), false]) then {\r\n    _oldUnit setVariable [QGVAR(isEscorting), false, true];\r\n};\r\n"},{"name":"ace_captives_fnc_handleRespawn","file":"captives/functions/fnc_handleRespawn.sqf","text":"/*\r\n * Author: commy2 PabstMirror\r\n * Fix, because captiveNum doesn't reset properly on respawn\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Corpse <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [alive, body] call ACE_captives_fnc_handleRespawn;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\",\"_dead\"];\r\n\r\nif (!local _unit) exitWith {};\r\n\r\n// Group and side respawn can potentially respawn you as a captive unit\r\n// Base and instant respawn cannot, so captive should be entirely reset\r\n// So we explicity account for the respawn type\r\nprivate [\"_respawn\"];\r\n_respawn = [0] call BIS_fnc_missionRespawnType;\r\n\r\nif (_respawn > 3) then {\r\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\r\n        _unit setVariable [QGVAR(isHandcuffed), false];\r\n        [_unit, true] call FUNC(setHandcuffed);\r\n    };\r\n\r\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\r\n        _unit setVariable [QGVAR(isSurrendering), false];\r\n        [_unit, true] call FUNC(setSurrendered);\r\n    };\r\n} else {\r\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\r\n        [_unit, false] call FUNC(setHandcuffed);\r\n    };\r\n    [_unit, \"setCaptive\", QGVAR(Handcuffed), false] call EFUNC(common,statusEffect_set);\r\n\r\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\r\n        [_unit, false] call FUNC(setSurrendered);\r\n    };\r\n    [_unit, \"setCaptive\", QGVAR(Surrendered), false] call EFUNC(common,statusEffect_set);\r\n\r\n    if (_oldUnit getVariable [QGVAR(isEscorting), false]) then {\r\n        _oldUnit setVariable [QGVAR(isEscorting), false, true];\r\n    };\r\n};\r\n"},{"name":"ace_captives_fnc_handleUnitInitPost","file":"captives/functions/fnc_handleUnitInitPost.sqf","text":"/*\r\n * Author: commy2\r\n * handle captive and unconsciousness state and prevent grenades\r\n *\r\n * Arguments:\r\n * 0: _unit <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [bob] call ACE_captives_fnc_handleUnitInitPost\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// prevent players from throwing grenades (added to all units)\r\n// [_unit, \"Throw\", {systemChat \"a\"; ((_this select 1) getVariable [QGVAR(isHandcuffed), false]) || {(_this select 1) getVariable [QGVAR(isSurrendering), false]}; true}, {systemChat \"b\";}] call EFUNC(common,addActionEventhandler);\r\n\r\nif (local _unit) then {\r\n    // reset status on mission start\r\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) then {\r\n        _unit setVariable [QGVAR(isHandcuffed), false];\r\n        [_unit, true] call FUNC(setHandcuffed);\r\n    };\r\n\r\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {\r\n        _unit setVariable [QGVAR(isSurrendering), false];\r\n        [_unit, true] call FUNC(setSurrendered);\r\n    };\r\n};\r\n"},{"name":"ace_captives_fnc_handleZeusDisplayChanged","file":"captives/functions/fnc_handleZeusDisplayChanged.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles ZeusDisplayChanged event\r\n * Need to reset showHUD after closing zeus\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Display is now open <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob1, false] call ACE_captives_fnc_handleZeusDisplayChanged\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif ((ACE_player getVariable [QGVAR(isHandcuffed), false]) || {ACE_player getVariable [QGVAR(isSurrendering), false]}) then {\r\n    TRACE_1(\"Player Change (showHUD false)\",ACE_player);\r\n    [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\r\n} else {\r\n    TRACE_1(\"Player Change (showHUD true)\",ACE_player);\r\n    [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\r\n};\r\n"},{"name":"ace_captives_fnc_moduleHandcuffed","file":"captives/functions/fnc_moduleHandcuffed.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Module Function to make a unit handcuffed (can be called from editor)\r\n * Also used for threeden attribute expression with dummy Logic Object\r\n *\r\n * Arguments:\r\n * 0: The Module Logic <OBJECT>\r\n * 1: synced objects <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [objNull, [player], true] call ace_captives_fnc_moduleHandcuffed\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nTRACE_3(\"params\",_logic,_units,_activated);\r\n\r\nif (!_activated) exitWith {};\r\nif (!isServer) exitWith {};\r\n\r\n//Modules run before postInit can instal the event handler, so we need to wait a little bit\r\n[{\r\n    params [\"_units\"];\r\n    {\r\n        TRACE_2(\"event\",_x,local _x);\r\n        [QGVAR(setHandcuffed), [_x, true], [_x]] call CBA_fnc_targetEvent;\r\n    } forEach _units;\r\n}, [_units], 0.05] call CBA_fnc_waitAndExecute;\r\n\r\nif (!isNull _logic) then {\r\n    deleteVehicle _logic;\r\n};\r\n"},{"name":"ace_captives_fnc_moduleSettings","file":"captives/functions/fnc_moduleSettings.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Module for captivity settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\n[_logic, QGVAR(allowHandcuffOwnSide), \"allowHandcuffOwnSide\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(allowSurrender), \"allowSurrender\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(requireSurrender), \"requireSurrender\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_captives_fnc_moduleSurrender","file":"captives/functions/fnc_moduleSurrender.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Module Function to make a unit surrender (can be called from editor)\r\n * Also used for threeden attribute expression with dummy Logic Object\r\n *\r\n * Arguments:\r\n * 0: The Module Logic <OBJECT>\r\n * 1: synced objects <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [objNull, [player], true] call ace_captives_fnc_moduleSurrender\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nTRACE_3(\"params\",_logic,_units,_activated);\r\n\r\nif (!_activated) exitWith {};\r\nif (!isServer) exitWith {};\r\n\r\n//Modules run before postInit can instal the event handler, so we need to wait a little bit\r\n[{\r\n    params [\"_units\"];\r\n    {\r\n        TRACE_2(\"event\",_x,local _x);\r\n        [QGVAR(setSurrendered), [_x, true], [_x]] call CBA_fnc_targetEvent;\r\n    } forEach _units;\r\n}, [_units], 0.05] call CBA_fnc_waitAndExecute;\r\n\r\nif (!isNull _logic) then {\r\n    deleteVehicle _logic;\r\n};\r\n"},{"name":"ace_captives_fnc_setHandcuffed","file":"captives/functions/fnc_setHandcuffed.sqf","text":"/*\r\n * Author: Nic547, commy2\r\n * Handcuffs a unit.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: True to take captive, false to release captive <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob, true] call ACE_captives_fnc_setHandcuffed;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\",\"_state\"];\r\nTRACE_2(\"params\",_unit,_state);\r\n\r\nif (!local _unit) exitWith {\r\n    ERROR(\"running setHandcuffed on remote unit\");\r\n};\r\n\r\nif !(missionNamespace getVariable [QGVAR(captivityEnabled), false]) exitWith {\r\n    // It's to soon to call this function, delay it\r\n    if (EGVAR(common,settingsInitFinished)) then {\r\n        // Settings are already initialized, but the small wait isn't over\r\n        [DFUNC(setHandCuffed), _this, 0.05] call CBA_fnc_waitAndExecute;\r\n    } else {\r\n        // Settings are not initialized yet\r\n        [DFUNC(setHandCuffed), _this] call EFUNC(common,runAfterSettingsInit);\r\n    };\r\n};\r\n\r\nif ((_unit getVariable [QGVAR(isHandcuffed), false]) isEqualTo _state) exitWith {\r\n    ERROR(\"setHandcuffed: current state same as new\");\r\n};\r\n\r\nif (_state) then {\r\n    _unit setVariable [QGVAR(isHandcuffed), true, true];\r\n    [_unit, \"setCaptive\", QGVAR(Handcuffed), true] call EFUNC(common,statusEffect_set);\r\n\r\n    if (_unit getVariable [QGVAR(isSurrendering), false]) then {  //If surrendering, stop\r\n        [_unit, false] call FUNC(setSurrendered);\r\n    };\r\n\r\n    //Set unit cargoIndex (will be -1 if dismounted)\r\n    _unit setVariable [QGVAR(CargoIndex), ((vehicle _unit) getCargoIndex _unit), true];\r\n\r\n    if (_unit == ACE_player) then {\r\n        [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\r\n    };\r\n\r\n    // fix anim on mission start (should work on dedicated servers)\r\n    [{\r\n        params [\"_unit\"];\r\n        if (!(_unit getVariable [QGVAR(isHandcuffed), false])) exitWith {};\r\n\r\n        if ((vehicle _unit) == _unit) then {\r\n            [_unit] call EFUNC(common,fixLoweredRifleAnimation);\r\n            [_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\r\n        } else {\r\n            [_unit, \"ACE_HandcuffedFFV\", 2] call EFUNC(common,doAnimation);\r\n            [_unit, \"ACE_HandcuffedFFV\", 1] call EFUNC(common,doAnimation);\r\n        };\r\n\r\n        //Adds an animation changed eh\r\n        //If we get a change in animation then redo the animation (handles people vaulting to break the animation chain)\r\n        private _animChangedEHID = _unit getVariable [QGVAR(handcuffAnimEHID), -1];\r\n        if (_animChangedEHID != -1) then {\r\n            TRACE_1(\"removing animChanged EH\",_animChangedEHID);\r\n            _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\r\n        };\r\n        _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedHandcuffed)];\r\n        TRACE_2(\"Adding animChangedEH\",_unit,_animChangedEHID);\r\n        _unit setVariable [QGVAR(handcuffAnimEHID), _animChangedEHID];\r\n\r\n    }, [_unit], 0.01] call CBA_fnc_waitAndExecute;\r\n} else {\r\n    _unit setVariable [QGVAR(isHandcuffed), false, true];\r\n    [_unit, \"setCaptive\", QGVAR(Handcuffed), false] call EFUNC(common,statusEffect_set);\r\n\r\n    //remove AnimChanged EH\r\n    private _animChangedEHID = _unit getVariable [QGVAR(handcuffAnimEHID), -1];\r\n    TRACE_1(\"removing animChanged EH\",_animChangedEHID);\r\n    _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\r\n    _unit setVariable [QGVAR(handcuffAnimEHID), -1];\r\n\r\n    if (((vehicle _unit) == _unit) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\r\n        //Break out of hands up animation loop\r\n        [_unit, \"ACE_AmovPercMstpScapWnonDnon_AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\r\n    };\r\n\r\n    if (_unit getVariable [QGVAR(CargoIndex), -1] != -1) then {\r\n        _unit setVariable [QGVAR(CargoIndex), -1, true];\r\n    };\r\n\r\n    if (_unit == ACE_player) then {\r\n        [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\r\n    };\r\n};\r\n\r\n//Global Event after changes:\r\n[\"ace_captiveStatusChanged\", [_unit, _state, \"SetHandcuffed\"]] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_captives_fnc_setSurrendered","file":"captives/functions/fnc_setSurrendered.sqf","text":"/*\r\n * Author: commy2 PabstMirror\r\n * Lets a unit surrender\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: True to surrender, false to un-surrender <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [Pierre, true] call ACE_captives_fnc_setSurrendered;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\",\"_state\"];\r\nTRACE_2(\"params\",_unit,_state);\r\n\r\nif (!local _unit) exitWith {\r\n    ERROR(\"running surrender on remote unit\");\r\n};\r\n\r\nif !(missionNamespace getVariable [QGVAR(captivityEnabled), false]) exitWith {\r\n    // It's to soon to call this function, delay it\r\n    if (EGVAR(common,settingsInitFinished)) then {\r\n        // Settings are already initialized, but the small wait isn't over\r\n        [DFUNC(setSurrendered), _this, 0.05] call CBA_fnc_waitAndExecute;\r\n    } else {\r\n        // Settings are not initialized yet\r\n        [DFUNC(setSurrendered), _this] call EFUNC(common,runAfterSettingsInit);\r\n    };\r\n};\r\n\r\nif ((_unit getVariable [QGVAR(isSurrendering), false]) isEqualTo _state) exitWith {\r\n    ERROR(\"Surrender: current state same as new\");\r\n};\r\n\r\nif (_state) then {\r\n    if ((vehicle _unit) != _unit) exitWith {ERROR(\"Cannot surrender while mounted\");};\r\n    if (_unit getVariable [QGVAR(isHandcuffed), false]) exitWith {ERROR(\"Cannot surrender while handcuffed\");};\r\n\r\n    _unit setVariable [QGVAR(isSurrendering), true, true];\r\n\r\n    [_unit, \"setCaptive\", QGVAR(Surrendered), true] call EFUNC(common,statusEffect_set);\r\n\r\n    if (_unit == ACE_player) then {\r\n        [\"captive\", [false, false, false, false, false, false, false, false]] call EFUNC(common,showHud);\r\n    };\r\n\r\n    [_unit] call EFUNC(common,fixLoweredRifleAnimation);\r\n    [_unit, \"ACE_AmovPercMstpSsurWnonDnon\", 1] call EFUNC(common,doAnimation);\r\n\r\n    // fix anim on mission start (should work on dedicated servers)\r\n    [{\r\n        params [\"_unit\"];\r\n        if (_unit getVariable [QGVAR(isSurrendering), false] && {(vehicle _unit) == _unit}) then {\r\n            //Adds an animation changed eh\r\n            //If we get a change in animation then redo the animation (handles people vaulting to break the animation chain)\r\n            private _animChangedEHID = _unit getVariable [QGVAR(surrenderAnimEHID), -1];\r\n            if (_animChangedEHID != -1) then {\r\n                TRACE_1(\"removing animChanged EH\",_animChangedEHID);\r\n                _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\r\n            };\r\n            _animChangedEHID = _unit addEventHandler [\"AnimChanged\", DFUNC(handleAnimChangedSurrendered)];\r\n            _unit setVariable [QGVAR(surrenderAnimEHID), _animChangedEHID];\r\n        };\r\n    }, [_unit], 0.01] call CBA_fnc_waitAndExecute;\r\n} else {\r\n    _unit setVariable [QGVAR(isSurrendering), false, true];\r\n    [_unit, \"setCaptive\", QGVAR(Surrendered), false] call EFUNC(common,statusEffect_set);\r\n\r\n    //remove AnimChanged EH\r\n    private _animChangedEHID = _unit getVariable [QGVAR(surrenderAnimEHID), -1];\r\n    _unit removeEventHandler [\"AnimChanged\", _animChangedEHID];\r\n    _unit setVariable [QGVAR(surrenderAnimEHID), -1];\r\n\r\n    if (_unit == ACE_player) then {\r\n        //only re-enable HUD if not handcuffed\r\n        if (!(_unit getVariable [QGVAR(isHandcuffed), false])) then {\r\n            [\"captive\", []] call EFUNC(common,showHud); //same as showHud true;\r\n        };\r\n    };\r\n\r\n    if (!alive _unit) exitWith {};\r\n    if (_unit getVariable [\"ACE_isUnconscious\", false]) exitWith {};  //don't touch animations if unconscious\r\n\r\n    //if we are in \"hands up\" animationState, crack it now\r\n    if (((vehicle _unit) == _unit) && {(animationState _unit) == \"ACE_AmovPercMstpSsurWnonDnon\"}) then {\r\n        [_unit, \"ACE_AmovPercMstpSsurWnonDnon_AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\r\n    } else {\r\n        //spin up a PFEH, to watching animationState for the next 20 seconds to make sure we don't enter \"hands up\"\r\n        //Handles long animation chains\r\n        [{\r\n            params [\"_args\", \"_pfID\"];\r\n            _args params [\"_unit\", \"_maxTime\"];\r\n            //If waited long enough or they re-surrendered or they are unconscious, exit loop\r\n            if ((CBA_missionTime > _maxTime) || {_unit getVariable [QGVAR(isSurrendering), false]} || {_unit getVariable [\"ACE_isUnconscious\", false]}) exitWith {\r\n                [_pfID] call CBA_fnc_removePerFrameHandler;\r\n            };\r\n            //Only break animation if they are actualy the \"hands up\" animation (because we are using switchmove there won't be an transition)\r\n            if (((vehicle _unit) == _unit) && {(animationState _unit) == \"ACE_AmovPercMstpSsurWnonDnon\"}) exitWith {\r\n                [_pfID] call CBA_fnc_removePerFrameHandler;\r\n                //Break out of hands up animation loop\r\n                [_unit, \"ACE_AmovPercMstpSsurWnonDnon_AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\r\n            };\r\n        }, 0, [_unit, (CBA_missionTime + 20)]] call CBA_fnc_addPerFrameHandler;\r\n    };\r\n};\r\n\r\n//Global Event after changes:\r\n[\"ace_captiveStatusChanged\", [_unit, _state, \"SetSurrendered\"]] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_captives_fnc_vehicleCaptiveMoveIn","file":"captives/functions/fnc_vehicleCaptiveMoveIn.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Loads a captive into a vehicle\r\n *\r\n * Arguments:\r\n * 0: The Captive <OBJECT>\r\n * 1: The Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob, car1] call ACE_captives_fnc_vehicleCaptiveMoveIn;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\",\"_vehicle\"];\r\nTRACE_2(\"params\",_target,_vehicle);\r\n\r\nprivate [\"_cargoIndex\"];\r\n\r\n_getSeat = [_vehicle] call FUNC(findEmptyNonFFVCargoSeat);\r\nTRACE_1(\"free cargo seat\",_getSeat);\r\n_cargoIndex = _getSeat select 0;\r\nif (_cargoIndex == -1) exitWith {ERROR(\"cargo index -1\");};\r\n\r\n_target moveInCargo [_vehicle, _cargoIndex];\r\n_target assignAsCargoIndex [_vehicle, _cargoIndex];\r\n\r\n_target setVariable [QGVAR(CargoIndex), _cargoIndex, true];\r\n"},{"name":"ace_captives_fnc_vehicleCaptiveMoveOut","file":"captives/functions/fnc_vehicleCaptiveMoveOut.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Unloads a captive from a vehicle.\r\n *\r\n * Arguments:\r\n * 0: Captive Unit being unloaded <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [bob] call ACE_captives_fnc_vehicleCaptiveMoveOut;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\n_unit setVariable [QGVAR(CargoIndex), -1, true];\r\n\r\nmoveOut _unit;\r\n[_unit, \"ACE_AmovPercMstpScapWnonDnon\", 2] call EFUNC(common,doAnimation);\r\n[_unit, \"ACE_AmovPercMstpScapWnonDnon\", 1] call EFUNC(common,doAnimation);\r\nunassignVehicle _unit;\r\n"}],"cargo":[{"name":"ace_cargo_fnc_addCargoItem","file":"cargo/functions/fnc_addCargoItem.sqf","text":"/*\r\n * Author: Glowbal, Jonpas\r\n * Adds a cargo item to the vehicle.\r\n *\r\n * Arguments:\r\n * 0: Item Classname <STRING>\r\n * 1: Vehicle <OBJECT>\r\n * 2: Amount <NUMBER> (default: 1)\r\n * 3: Show Hint <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"item\", vehicle] call ace_cargo_fnc_addCargoItem\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_itemClass\", \"_vehicle\", [\"_amount\", 1], [\"_showHint\", false, [false]]];\r\nTRACE_3(\"params\",_itemClass,_vehicle,_amount);\r\n\r\nfor \"_i\" from 1 to _amount do {\r\n    [_itemClass, _vehicle] call FUNC(loadItem);\r\n};\r\n\r\n// Invoke listenable event\r\n[\"ace_cargoAdded\", [_itemClass, _vehicle, _amount]] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_cargo_fnc_canLoad","file":"cargo/functions/fnc_canLoad.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if player can load an item into the nearest vehicle.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Object to load <OBJECT>\r\n *\r\n * Return Value:\r\n * Can load <BOOL>\r\n *\r\n * Example:\r\n * [player, object] call ace_cargo_fnc_canLoad\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_object\"];\r\nTRACE_2(\"params\",_player,_object);\r\n\r\nif (!([_player, _object, []] call EFUNC(common,canInteractWith))) exitWith {false};\r\n\r\nprivate _nearestVehicle = [_player] call FUNC(findNearestVehicle);\r\n\r\nif (_nearestVehicle isKindOf \"Cargo_Base_F\" || isNull _nearestVehicle) then {\r\n    {\r\n        if ([_object, _x] call FUNC(canLoadItemIn)) exitWith {_nearestVehicle = _x};\r\n    } forEach (nearestObjects [_player, [\"Cargo_base_F\", \"Land_PaperBox_closed_F\"], MAX_LOAD_DISTANCE]);\r\n};\r\n\r\nif (isNull _nearestVehicle) exitWith {false};\r\n\r\nif ((locked _nearestVehicle) >= 2) exitWith {false};\r\n\r\n[_object, _nearestVehicle] call FUNC(canLoadItemIn)\r\n"},{"name":"ace_cargo_fnc_canLoadItemIn","file":"cargo/functions/fnc_canLoadItemIn.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if item can be loaded into other Object.\r\n *\r\n * Arguments:\r\n * 0: Item <OBJECT or STRING>\r\n * 1: Holder Object (Vehicle) <OBJECT>\r\n *\r\n * Return Value:\r\n * Can load in <BOOL>\r\n *\r\n * Example:\r\n * [item, holder] call ace_cargo_fnc_canLoadItemIn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_item\", \"\", [objNull,\"\"]], \"_vehicle\"];\r\n\r\nif (speed _vehicle > 1 || {((getPos _vehicle) select 2) > 3}) exitWith {TRACE_1(\"vehicle not stable\",_vehicle); false};\r\n\r\nprivate _itemSize = [_item] call FUNC(getSizeItem);\r\nprivate _validItem = false;\r\nif (_item  isEqualType \"\") then {\r\n    _validItem =\r\n        isClass (configFile >> \"CfgVehicles\" >> _item) &&\r\n        {getNumber (configFile >> \"CfgVehicles\" >> _item >> QGVAR(canLoad)) == 1};\r\n} else {\r\n    _validItem =\r\n        (alive _item) &&\r\n        {(_item distance _vehicle) <= MAX_LOAD_DISTANCE};\r\n};\r\n\r\n_validItem &&\r\n{_itemSize > 0} &&\r\n{alive _vehicle} &&\r\n{_itemSize <= ([_vehicle] call FUNC(getCargoSpaceLeft))}\r\n"},{"name":"ace_cargo_fnc_canUnloadItem","file":"cargo/functions/fnc_canUnloadItem.sqf","text":"/*\r\n * Author: Glowbal, ViperMaul\r\n * Check if item can be unloaded.\r\n *\r\n * Arguments:\r\n * 0: loaded Object <OBJECT>\r\n * 1: Object <OBJECT>\r\n * 2: Unloader (player) <OPTIONAL><OBJECT>\r\n *\r\n * Return Value:\r\n * Can be unloaded <BOOL>\r\n *\r\n * Example:\r\n * [item, holder] call ace_cargo_fnc_canUnloadItem\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_item\", \"_vehicle\", [\"_unloader\", objNull]];\r\nTRACE_2(\"params\",_item,_vehicle);\r\n\r\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\r\nif !(_item in _loaded) exitWith {false};\r\n\r\nprivate _itemClass = if (_item isEqualType \"\") then {_item} else {typeOf _item};\r\n\r\nprivate _emptyPos = [_vehicle, _itemClass, _unloader] call EFUNC(common,findUnloadPosition);\r\n\r\n(count _emptyPos) == 3\r\n"},{"name":"ace_cargo_fnc_findNearestVehicle","file":"cargo/functions/fnc_findNearestVehicle.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get nearest vehicle from unit, priority: Car-Air-Tank-Ship.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Vehicle in Distance <OBJECT>\r\n *\r\n * Example:\r\n * [unit] call ace_cargo_fnc_findNearestVehicle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _loadCar = nearestObject [_unit, \"car\"];\r\nif (_unit distance _loadCar <= MAX_LOAD_DISTANCE) exitWith {_loadCar};\r\n\r\nprivate _loadHelicopter = nearestObject [_unit, \"air\"];\r\nif (_unit distance _loadHelicopter <= MAX_LOAD_DISTANCE) exitWith {_loadHelicopter};\r\n\r\nprivate _loadTank = nearestObject [_unit, \"tank\"];\r\nif (_unit distance _loadTank <= MAX_LOAD_DISTANCE) exitWith {_loadTank};\r\n\r\nprivate _loadShip = nearestObject [_unit, \"ship\"];\r\nif (_unit distance _loadShip <= MAX_LOAD_DISTANCE) exitWith {_loadShip};\r\n\r\nprivate _loadContainer = nearestObject [_unit,\"Cargo_base_F\"];\r\nif (_unit distance _loadContainer <= MAX_LOAD_DISTANCE) exitWith {_loadContainer};\r\n\r\nobjNull\r\n"},{"name":"ace_cargo_fnc_getCargoSpaceLeft","file":"cargo/functions/fnc_getCargoSpaceLeft.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the cargo space left on object.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * Cargo space left <NUMBER>\r\n *\r\n * Example:\r\n * [object] call ace_cargo_fnc_getCargoSpaceLeft\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\n// TRACE_1(\"params\",_object);\r\n\r\n_object getVariable [QGVAR(space), getNumber (configFile >> \"CfgVehicles\" >> typeOf _object >> QGVAR(space))]\r\n"},{"name":"ace_cargo_fnc_getSizeItem","file":"cargo/functions/fnc_getSizeItem.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the cargo size of an object.\r\n *\r\n * Arguments:\r\n * 0: Item <OBJECT or STRING>\r\n *\r\n * Return Value:\r\n * Cargo size <NUMBER> (default: -1)\r\n *\r\n * Example:\r\n * [object] call ace_cargo_fnc_getSizeItem\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_item\"];\r\n\r\nscopeName \"return\";\r\n\r\nprivate _isVirtual = (_item isEqualType \"\");\r\nprivate _itemClass = if (_isVirtual) then {_item} else {typeOf _item};\r\nprivate _config = (configFile >> \"CfgVehicles\" >> _itemClass >> QGVAR(size));\r\n\r\nif (_isVirtual) then {\r\n    if (isNumber _config) then {\r\n        (getNumber _config) breakOut \"return\";\r\n    };\r\n} else {\r\n    if (!isNil {_item getVariable QGVAR(size)}) then {\r\n        (_item getVariable QGVAR(size)) breakOut \"return\";\r\n    };\r\n    if (isNumber _config) then {\r\n        (getNumber _config) breakOut \"return\";\r\n    };\r\n};\r\n\r\n-1\r\n"},{"name":"ace_cargo_fnc_handleDestroyed","file":"cargo/functions/fnc_handleDestroyed.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handle object being destroyed. Only runs on server.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [object] call ace_cargo_fnc_handleDestroyed\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_1(\"params\",_vehicle);\r\n\r\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\r\nif (_loaded isEqualTo []) exitWith {};\r\n\r\n{\r\n    // TODO Do we want to be able to recover destroyed equipment?\r\n    if (_x isEqualType objNull) then {\r\n        deleteVehicle _x;\r\n    };\r\n    nil\r\n} count _loaded;\r\n\r\n[_vehicle] call FUNC(validateCargoSpace);\r\n"},{"name":"ace_cargo_fnc_initObject","file":"cargo/functions/fnc_initObject.sqf","text":"/*\r\n * Author: Glowbal\r\n * Initializes variables for loadable objects. Called from init EH.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [object] call ace_cargo_fnc_initObject\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\nprivate _type = typeOf _object;\r\nTRACE_2(\"params\",_object,_type);\r\n\r\nif ((_object getVariable [QGVAR(canLoad), getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(canLoad))]) != 1) exitWith {};\r\n\r\n// do nothing if the class is already initialized\r\nif (_type in GVAR(initializedItemClasses)) exitWith {};\r\nGVAR(initializedItemClasses) pushBack _type;\r\n\r\nTRACE_1(\"Adding load cargo action to class\", _type);\r\n\r\nprivate _condition = {\r\n    GVAR(enable) &&\r\n    {(_target getVariable [QGVAR(canLoad), getNumber (configFile >> \"CfgVehicles\" >> (typeOf _target) >> QGVAR(canLoad))]) == 1} &&\r\n    {locked _target < 2} &&\r\n    {alive _target} &&\r\n    {[_player, _target, []] call EFUNC(common,canInteractWith)}\r\n};\r\nprivate _statement = {\r\n    params [\"_target\", \"_player\"];\r\n    [_player, _target] call FUNC(startLoadIn);\r\n};\r\nprivate _text = localize LSTRING(loadObject);\r\nprivate _icon = QPATHTOF(UI\\Icon_load.paa);\r\n\r\nprivate _action = [QGVAR(load), _text, _icon, _statement, _condition] call EFUNC(interact_menu,createAction);\r\n[_type, 0, [\"ACE_MainActions\"], _action] call EFUNC(interact_menu,addActionToClass);\r\n\r\n"},{"name":"ace_cargo_fnc_initVehicle","file":"cargo/functions/fnc_initVehicle.sqf","text":"/*\r\n * Author: Glowbal\r\n * Initializes vehicle, adds open cargo menu action if available.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle] call ace_cargo_fnc_initVehicle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_1(\"params\", _vehicle);\r\n\r\nprivate _type = typeOf _vehicle;\r\n\r\nif (getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(hasCargo)) != 1) exitWith {};\r\n\r\nif (isServer) then {\r\n    {\r\n        if (isClass _x) then {\r\n            private [\"_cargoClassname\", \"_cargoCount\"];\r\n            _cargoClassname = getText (_x >> \"type\");\r\n            _cargoCount = getNumber (_x >> \"amount\");\r\n            TRACE_3(\"adding ACE_Cargo\", (configName _x), _cargoClassname, _cargoCount);\r\n            [\"ace_addCargo\", [_cargoClassname, _vehicle, _cargoCount]] call CBA_fnc_localEvent;\r\n        };\r\n    } count (\"true\" configClasses (configFile >> \"CfgVehicles\" >> _type >> \"ACE_Cargo\" >> \"Cargo\"));\r\n};\r\n\r\n// do nothing if the class is already initialized\r\nif (_type in GVAR(initializedVehicleClasses)) exitWith {};\r\n// set class as initialized\r\nGVAR(initializedVehicleClasses) pushBack _type;\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\nTRACE_1(\"Adding unload cargo action to class\", _type);\r\n\r\nprivate _condition = {\r\n    GVAR(enable) && {locked _target < 2} && {alive _target} && {[_player, _target, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith)}\r\n};\r\nprivate _statement = {\r\n    GVAR(interactionVehicle) = _target;\r\n    createDialog QGVAR(menu);\r\n};\r\nprivate _text = localize LSTRING(openMenu);\r\nprivate _icon = \"\";\r\n\r\nprivate _action = [QGVAR(openMenu), _text, _icon, _statement, _condition] call EFUNC(interact_menu,createAction);\r\n[_type, 0, [\"ACE_MainActions\"], _action] call EFUNC(interact_menu,addActionToClass);\r\n"},{"name":"ace_cargo_fnc_loadItem","file":"cargo/functions/fnc_loadItem.sqf","text":"/*\r\n * Author: Glowbal\r\n * Load object into vehicle.\r\n * Objects loaded via classname remain virtual until unloaded.\r\n *\r\n * Arguments:\r\n * 0: Item <OBJECT or STRING>\r\n * 1: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Object loaded <BOOL>\r\n *\r\n * Example:\r\n * [object, vehicle] call ace_cargo_fnc_loadItem\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_item\",\"\",[objNull,\"\"]], [\"_vehicle\",objNull,[objNull]]];\r\nTRACE_2(\"params\",_item,_vehicle);\r\n\r\nif !([_item, _vehicle] call FUNC(canLoadItemIn)) exitWith {TRACE_2(\"cannot load\",_item,_vehicle); false};\r\n\r\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\r\n_loaded pushBack _item;\r\n_vehicle setVariable [QGVAR(loaded), _loaded, true];\r\n\r\nTRACE_1(\"added to loaded array\",_loaded);\r\n\r\nprivate _space = [_vehicle] call FUNC(getCargoSpaceLeft);\r\nprivate _itemSize = [_item] call FUNC(getSizeItem);\r\n_vehicle setVariable [QGVAR(space), _space - _itemSize, true];\r\n\r\nif (_item isEqualType objNull) then {\r\n    detach _item;\r\n    _item attachTo [_vehicle,[0,0,-100]];\r\n    [QEGVAR(common,hideObjectGlobal), [_item, true]] call CBA_fnc_serverEvent;\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_cargo_fnc_makeLoadable","file":"cargo/functions/fnc_makeLoadable.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Makes any object loadable.  Needs to be called on all machines.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n * 1: Set as loadable (default: true) <BOOL><SCALAR>\r\n * 2: Size. (default: 1) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [cursorTarget, true, 1] call ace_cargo_fnc_makeLoadable\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_object\", objNull, [objNull]], [\"_canLoad\", true, [false, 0]], [\"_setSize\", 1, [0]]];\r\nTRACE_3(\"params\",_object,_canLoad,_setSize);\r\n\r\nif (isNull _object) exitWith {TRACE_1(\"null\",_object);};\r\nprivate _type = typeOf _object;\r\nprivate _cfgCanLoad = getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(canLoad));\r\nprivate _curSize = [_object] call FUNC(getSizeItem);\r\n\r\n_canLoad = [0, 1] select _canLoad; //convert true/false to scalar\r\n\r\nif ((_canLoad == 1) && {_setSize <= 0}) exitWith {\r\n    ACE_LOGERROR(\"ace_cargo_fnc_makeLoadable (size <= 0) when making loadable\");\r\n};\r\n\r\nTRACE_2(\"setVar if different from config\",_canLoad,_cfgCanLoad);\r\nif (_canLoad != _cfgCanLoad) then {\r\n    _object setVariable [QGVAR(canLoad), _canLoad];\r\n};\r\n\r\nTRACE_2(\"setVar if different from config\",_setSize,_curSize);\r\nif (_setSize != _curSize) then {\r\n    _object setVariable [QGVAR(size), _setSize];\r\n};\r\n\r\n//Add the load actions to the object class if not already added\r\n[_object] call FUNC(initObject);\r\n\r\nnil\r\n"},{"name":"ace_cargo_fnc_moduleMakeLoadable","file":"cargo/functions/fnc_moduleMakeLoadable.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Module to make an object loadable.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic, [box], true] call ace_cargo_fnc_moduleMakeLoadable\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_objects\", \"_activated\"];\r\nTRACE_3(\"params\",_logic,_objects,_activated);\r\n\r\nif ((isNull _logic) || {!_activated}) exitWith {};\r\nif (_objects isEqualTo []) exitWith {\r\n    ACE_LOGWARNING_1(\"ace_cargo_fnc_moduleMakeLoadable has no synced objects [%1]\", _logic);\r\n};\r\n\r\nprivate _canLoad = _logic getVariable [\"canLoad\", true];\r\nprivate _setSize = _logic getVariable [\"setSize\", 1];\r\nTRACE_2(\"settings\",_canLoad,_setSize);\r\n\r\n{\r\n    [_x, _canLoad, _setSize] call FUNC(makeLoadable);\r\n} forEach _objects;\r\n"},{"name":"ace_cargo_fnc_moduleSettings","file":"cargo/functions/fnc_moduleSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Module for adjusting the cargo settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * function = \"ace_cargo_fnc_loadItem\"\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"\", \"_activated\"];\r\n\r\nif (!_activated) exitWith {};\r\n\r\n[_logic, QGVAR(enable), \"enable\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO(\"Cargo Module Initialized.\");\r\n"},{"name":"ace_cargo_fnc_onMenuOpen","file":"cargo/functions/fnc_onMenuOpen.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handle the UI data display.\r\n *\r\n * Arguments:\r\n * 0: Display <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [display] call ace_cargo_fnc_onMenuOpen\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_display\"];\r\n\r\nuiNamespace setVariable [QGVAR(menuDisplay), _display];\r\n\r\n[{\r\n    disableSerialization;\r\n    private _display = uiNamespace getVariable QGVAR(menuDisplay);\r\n    if (isnil \"_display\") exitWith {\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    if (isNull GVAR(interactionVehicle) || {ACE_player distance GVAR(interactionVehicle) >= 10}) exitWith {\r\n        closeDialog 0;\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    private _loaded = GVAR(interactionVehicle) getVariable [QGVAR(loaded), []];\r\n    private _ctrl = _display displayCtrl 100;\r\n    private _label = _display displayCtrl 2;\r\n\r\n    lbClear _ctrl;\r\n    {\r\n        private _class = if (_x isEqualType \"\") then {_x} else {typeOf _x};\r\n        _ctrl lbAdd (getText(configfile >> \"CfgVehicles\" >> _class >> \"displayName\"));\r\n        true\r\n    } count _loaded;\r\n\r\n    _label ctrlSetText format[localize LSTRING(labelSpace), [GVAR(interactionVehicle)] call DFUNC(getCargoSpaceLeft)];\r\n}, 0, []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_cargo_fnc_startLoadIn","file":"cargo/functions/fnc_startLoadIn.sqf","text":"/*\r\n * Author: Glowbal\r\n * Start load item.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * Load ProgressBar Started <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_cargo_fnc_startLoadIn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_object\"];\r\nTRACE_2(\"params\",_player,_object);\r\n\r\nprivate _vehicle = [_player] call FUNC(findNearestVehicle);\r\n\r\nif ((isNull _vehicle) || {_vehicle isKindOf \"Cargo_Base_F\"}) then {\r\n    {\r\n        if ([_object, _x] call FUNC(canLoadItemIn)) exitWith {_vehicle = _x};\r\n    } forEach (nearestObjects [_player, [\"Cargo_base_F\", \"Land_PaperBox_closed_F\"], MAX_LOAD_DISTANCE]);\r\n};\r\n\r\nif (isNull _vehicle) exitWith {\r\n    TRACE_3(\"Could not find vehicle\",_player,_object,_vehicle);\r\n    false\r\n};\r\n\r\nprivate _return = false;\r\n// Start progress bar\r\nif ([_object, _vehicle] call FUNC(canLoadItemIn)) then {\r\n    private _size = [_object] call FUNC(getSizeItem);\r\n\r\n    [\r\n        5 * _size,\r\n        [_object,_vehicle],\r\n        {[\"ace_loadCargo\", _this select 0] call CBA_fnc_localEvent},\r\n        {},\r\n        localize LSTRING(LoadingItem)\r\n    ] call EFUNC(common,progressBar);\r\n    _return = true;\r\n} else {\r\n    private _displayName = getText (configFile >> \"CfgVehicles\" >> typeOf _object >> \"displayName\");\r\n\r\n    [[LSTRING(LoadingFailed), _displayName], 3.0] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n_return\r\n"},{"name":"ace_cargo_fnc_startUnload","file":"cargo/functions/fnc_startUnload.sqf","text":"/*\r\n * Author: Glowbal\r\n * Start unload action.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_cargo_fnc_startUnload\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nprivate _display = uiNamespace getVariable QGVAR(menuDisplay);\r\nif (isNil \"_display\") exitWith {};\r\n\r\nprivate _loaded = GVAR(interactionVehicle) getVariable [QGVAR(loaded), []];\r\nif (_loaded isEqualTo []) exitWith {};\r\n\r\nprivate _ctrl = _display displayCtrl 100;\r\n\r\nprivate _selected = (lbCurSel _ctrl) max 0;\r\n\r\nif (count _loaded <= _selected) exitWith {};\r\nprivate _item = _loaded select _selected; //This can be an object or a classname string\r\n\r\n// Start progress bar\r\nif ([_item, GVAR(interactionVehicle), ACE_player] call FUNC(canUnloadItem)) then {\r\n    private _size = [_item] call FUNC(getSizeItem);\r\n\r\n    [\r\n        5 * _size,\r\n        [_item, GVAR(interactionVehicle), ACE_player],\r\n        {[\"ace_unloadCargo\", _this select 0] call CBA_fnc_localEvent},\r\n        {},\r\n        localize LSTRING(UnloadingItem),\r\n        {true},\r\n        [\"isNotSwimming\"]\r\n    ] call EFUNC(common,progressBar);\r\n} else {\r\n    private _itemClass = if (_item isEqualType \"\") then {_item} else {typeOf _item};\r\n    private _displayName = getText (configFile >> \"CfgVehicles\" >> _itemClass >> \"displayName\");\r\n\r\n    [[LSTRING(UnloadingFailed), _displayName], 3.0] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_cargo_fnc_unloadItem","file":"cargo/functions/fnc_unloadItem.sqf","text":"/*\r\n * Author: Glowbal, ViperMaul\r\n * Unload object from vehicle.\r\n *\r\n * Arguments:\r\n * 0: Item <OBJECT or STRING>\r\n * 1: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Object unloaded <BOOL>\r\n *\r\n * Example:\r\n * [object, vehicle] call ace_cargo_fnc_unloadItem\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_item\", \"_vehicle\", [\"_unloader\", objNull]];\r\nTRACE_3(\"params\",_item,_vehicle,_unloader);\r\n\r\nprivate _itemClass = if (_item isEqualType \"\") then {_item} else {typeOf _item};\r\n\r\n//This covers testing vehicle stability and finding a safe position\r\nprivate _emptyPosAGL = [_vehicle, _itemClass, _unloader] call EFUNC(common,findUnloadPosition);\r\nTRACE_1(\"findUnloadPosition\",_emptyPosAGL);\r\n\r\nif ((count _emptyPosAGL) != 3) exitWith {\r\n    TRACE_4(\"Could not find unload pos\",_vehicle,getPosASL _vehicle,isTouchingGround _vehicle,speed _vehicle);\r\n    if ((!isNull _unloader) && {_unloader == ACE_player}) then {\r\n        //display text saying there are no safe places to exit the vehicle\r\n        [localize ELSTRING(common,NoRoomToUnload)] call EFUNC(common,displayTextStructured);\r\n    };\r\n    false\r\n};\r\n\r\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\r\n\r\nif !(_item in _loaded) exitWith {\r\n    ACE_LOGERROR_3(\"Tried to unload item [%1] not in vehicle[%2] cargo[%3]\", _item, _vehicle, _loaded);\r\n    false\r\n};\r\n\r\n_loaded deleteAt (_loaded find _item);\r\n_vehicle setVariable [QGVAR(loaded), _loaded, true];\r\n\r\nprivate _space = [_vehicle] call FUNC(getCargoSpaceLeft);\r\nprivate _itemSize = [_item] call FUNC(getSizeItem);\r\n_vehicle setVariable [QGVAR(space), (_space + _itemSize), true];\r\n\r\nif (_item isEqualType objNull) then {\r\n    detach _item;\r\n    // hideObjectGlobal must be executed before setPos to ensure light objects are rendered correctly\r\n    // do both on server to ensure they are executed in the correct order\r\n    [QGVAR(serverUnload), [_item, _emptyPosAGL]] call CBA_fnc_serverEvent;\r\n} else {\r\n    private _newItem = createVehicle [_item, _emptyPosAGL, [], 0, \"\"];\r\n    _newItem setPosASL (AGLtoASL _emptyPosAGL);\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_cargo_fnc_validateCargoSpace","file":"cargo/functions/fnc_validateCargoSpace.sqf","text":"/*\r\n * Author: Glowbal\r\n * Validate the vehicle cargo space.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [object] call ace_cargo_fnc_validateCargoSpace\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_1(\"params\",_vehicle);\r\n\r\nprivate _loaded = _vehicle getVariable [QGVAR(loaded), []];\r\n\r\nprivate _newLoaded = [];\r\nprivate _totalSpaceOccupied = 0;\r\n{\r\n    if ((_x isEqualType \"\") || {!isNull _x}) then {\r\n        _newLoaded pushback _x;\r\n        _totalSpaceOccupied = _totalSpaceOccupied + ([_x] call FUNC(getSizeItem));\r\n    };\r\n    true\r\n} count _loaded;\r\n\r\nif (count _loaded != count _newLoaded) then {\r\n    _vehicle setVariable [QGVAR(loaded), _newLoaded, true];\r\n};\r\n\r\n_vehicle setVariable [QGVAR(space), getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> QGVAR(space)) - _totalSpaceOccupied, true];\r\n"}],"common":[{"name":"ace_common_fnc__handleRequestAllSyncedEvents","file":"common/functions/fnc__handleRequestAllSyncedEvents.sqf","text":"/*\r\n * Author: jaynus\r\n * Handles a server-side request for synchronization ALL events on JIP to a client.\r\n *\r\n * Arguments:\r\n * 0: client <OBJECT>\r\n *\r\n * Return Value:\r\n * Event is successed <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_client\"];\r\n\r\n{\r\n    private _eventEntry = HASH_GET(GVAR(syncedEvents),_x);\r\n    _eventEntry params [\"\", \"_eventLog\"];\r\n\r\n    [\"ACEs\", [_x, _eventLog], _client] call CBA_fnc_targetEvent;\r\n    false\r\n} count (GVAR(syncedEvents) select 0);\r\n\r\ntrue\r\n"},{"name":"ace_common_fnc__handleRequestSyncedEvent","file":"common/functions/fnc__handleRequestSyncedEvent.sqf","text":"/*\r\n * Author: jaynus\r\n * Receives either requests for synchronization from clients, or the synchronization data from the server.\r\n *\r\n * Arguments [Client] :\r\n * 0: eventName <STRING>\r\n * 1: eventLog <ARRAY>\r\n *\r\n * Arguments [Server] :\r\n * 0: eventName <STRING>\r\n * 1: client <OBJECT>\r\n *\r\n * Return Value:\r\n * Event is successed <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//SEH_s\r\nif (isServer) then {\r\n    // Find the event name, and shovel out the events to the client\r\n    params [\"_eventName\", \"_client\"];\r\n\r\n    if (!HASH_HASKEY(GVAR(syncedEvents),_eventName)) exitWith {\r\n        ACE_LOGERROR_1(\"Request for synced event - key [%1] not found.\", _eventName);\r\n        false\r\n    };\r\n\r\n    private _eventEntry = HASH_GET(GVAR(syncedEvents),_eventName);\r\n    _eventEntry params [\"\", \"_eventLog\"];\r\n\r\n    [\"ACEs\", [_eventName, _eventLog], _client] call CBA_fnc_targetEvent;\r\n} else {\r\n    params [\"_eventName\", \"_eventLog\"];\r\n\r\n    // This is the client handling the response from the server\r\n    // Start running the events\r\n    {\r\n        _x params [\"\", \"_eventArgs\",\"_ttl\"];\r\n        [_eventName, _eventArgs, _ttl] call FUNC(_handleSyncedEvent);\r\n        false\r\n    } count _eventLog;\r\n\r\n    ACE_LOGINFO_1(\"[%1] synchronized\",_eventName);\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_common_fnc__handleSyncedEvent","file":"common/functions/fnc__handleSyncedEvent.sqf","text":"/*\r\n * Author: jaynus\r\n * Handles synced events being received. Server will log them, and server/client will execute them.\r\n *\r\n * Arguments [Client] :\r\n * 0: eventName <STRING>\r\n * 1: arguments <ARRAY>\r\n * 2: ttl <NUMBER>\r\n *\r\n * Return Value:\r\n * Boolean of success <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_args\", \"_ttl\"];\r\n\r\nif (!HASH_HASKEY(GVAR(syncedEvents),_name)) exitWith {\r\n    ACE_LOGERROR_1(\"Synced event key [%1] not found (_handleSyncedEvent).\", _name);\r\n    false\r\n};\r\n\r\nprivate _internalData = HASH_GET(GVAR(syncedEvents),_name);\r\n\r\nif (isServer) then {\r\n    // Server needs to internally log it for synchronization\r\n    if (_ttl > -1) then {\r\n        _internalData = HASH_GET(GVAR(syncedEvents),_name);\r\n\r\n        _internalData params [\"\", \"_eventLog\"];\r\n        _eventLog pushBack [diag_tickTime, _args, _ttl];\r\n    };\r\n};\r\n\r\n_internalData params [\"_eventCode\"];\r\n_args call _eventCode;\r\n"},{"name":"ace_common_fnc_addActionEventHandler","file":"common/functions/fnc_addActionEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Add an addAction event to a unit. Used to handle multiple addAction events. Global arguments, local effects. Does only work for player controlled units.\r\n *\r\n * Arguments:\r\n * 0: Unit the action should be assigned to <OBJECT>\r\n * 1: Name of the action, e.g. \"DefaultAction\" <STRING>\r\n * 2: Condition <CODE, STRING>\r\n * 3: Code to execute <CODE, STRING>\r\n *\r\n * Return Value:\r\n * ID of the action (used to remove it later) <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_action\", \"_condition\", \"_statement\"];\r\n\r\nif (_condition isEqualType \"\") then {\r\n    _condition = compile _condition;\r\n};\r\n\r\nif (_statement isEqualType \"\") then {\r\n    _statement = compile _statement;\r\n};\r\n\r\nprivate _name = format [\"ACE_Action_%1\", _action];\r\nprivate _actionsVar = _unit getVariable [_name, [-1, [-1, [], []], objNull]];\r\n\r\nif (_unit != _actionsVar select 2) then {  // check if the unit is still valid, fixes respawn issues\r\n    _actionsVar = [-1, [-1, [], []], objNull];\r\n};\r\n\r\n_actionsVar params [\"_actionID\", \"_actionsArray\"];\r\n_actionsArray params [\"_id\", \"_actionIDs\", \"_actions\"];\r\n\r\n_id = _id + 1;\r\n\r\n_actionIDs pushBack _id;\r\n_actions pushBack [_condition, _statement];\r\n\r\n// first action to add, unit needs addAction command\r\nif (_actionID == -1) then {\r\n    private _addAction = call compile format [\r\n        \"[\r\n            '',\r\n            {[{if (inputAction '%1' == 0) exitWith {}; {if (_this call (_x select 0)) then {_this call (_x select 1)}} forEach (((_this select 0) getVariable '%2') select 1 select 2)}, _this] call CBA_fnc_directCall},\r\n            nil,\r\n            -1,\r\n            false,\r\n            true,\r\n            '%1',\r\n            \"\"if (_this != ACE_player || {vehicle _this != _target}) exitWith {false}; _actions = (_this getVariable '%2') select 1 select 2; _count = count _actions; _index = 0; _return = false; while {_index < _count && {!_return}} do {_return = [_target, _this] call ((_actions select _index) select 0); _index = _index + 1}; _return\"\"\r\n        ]\",\r\n        _action,\r\n        _name\r\n    ];\r\n\r\n    _actionID = _unit addAction _addAction;\r\n};\r\n\r\n_unit setVariable [_name, [_actionID, [_id, _actionIDs, _actions], _unit], false];\r\n\r\n_id\r\n"},{"name":"ace_common_fnc_addActionMenuEventHandler","file":"common/functions/fnc_addActionMenuEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Add an addAction event to a unit. Used to handle multiple addAction events and add a action to the mouse wheel menu. Global arguments, local effects. Does only work for player controlled units.\r\n *\r\n * Arguments:\r\n * 0: Unit the action should be assigned to <OBJECT>\r\n * 1: Menu title of the action <STRING>\r\n * 2: Name of the action, e.g. \"DefaultAction\" <STRING>\r\n * 3: Condition <CODE, STRING>\r\n * 4: Code to execute by the action <CODE, STRING>\r\n * 5: Condition for the menu action <CODE, STRING>\r\n * 6: Code to execute from the menu <CODE, STRING>\r\n * 7: Priority of the action (default: 0) <NUMBER>\r\n *\r\n * Return Value:\r\n * ID of the action (used to remove it later) <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_displayName\", \"_action\", \"_condition\", \"_statement\", \"_condition2\", \"_statement2\", [\"_priority\", 0]];\r\n\r\nif (_condition isEqualType \"\") then {\r\n    _condition = compile _condition;\r\n};\r\n\r\nif (_statement isEqualType \"\") then {\r\n    _statement = compile _statement;\r\n};\r\n\r\nif (_condition2 isEqualType \"\") then {\r\n    _condition2 = compile _condition2;\r\n};\r\n\r\nif (_statement2 isEqualType \"\") then {\r\n    _statement2 = compile _statement2;\r\n};\r\n\r\nprivate _name = format [\"ACE_ActionMenu_%1\", _action];\r\nprivate _actionsVar = _unit getVariable [_name, [-1, [], []]];\r\n\r\n_actionsVar params [\"_id\", \"_actionIDs\", \"_actions\"];\r\n\r\n_id = _id + 1;\r\n\r\nprivate _nameVar = format [\"%1_ID%2\", _name, _id];\r\nmissionNamespace setVariable [_nameVar, [_condition, _statement, _condition2, _statement2]];\r\n\r\n_actionIDs pushBack _id;\r\n\r\nprivate _addAction = call compile format [\r\n    \"[\r\n        '%2',\r\n        {[{if (inputAction '%1' == 0) then {if (_this call (%3 select 2)) then {_this call (%3 select 3)}} else {_this call (%3 select 1)}}, _this] call CBA_fnc_directCall},\r\n        nil,\r\n        %4,\r\n        false,\r\n        true,\r\n        '%1',\r\n        \"\"if (_this != ACE_player || {vehicle _this != _target}) exitWith {false}; [_target, _this] call (%3 select 0)\"\"\r\n    ]\",\r\n    _action,\r\n    _displayName,\r\n    _nameVar,\r\n    _priority\r\n];\r\n\r\nprivate _actionID = _unit addAction _addAction;\r\n\r\n_actions pushBack [_actionID, _nameVar];\r\n\r\n_unit setVariable [_name, [_id, _actionIDs, _actions], false];\r\n\r\n_id\r\n"},{"name":"ace_common_fnc_addCanInteractWithCondition","file":"common/functions/fnc_addCanInteractWithCondition.sqf","text":"/*\r\n * Author: commy2\r\n * Add a condition that gets checked by ace_common_fnc_canInteractWith.\r\n *\r\n * Arguments:\r\n * 0: The conditions id. Used to remove later or as exception name. An already existing name overwrites. <STRING>\r\n * 1: The condition to check. format of \"_this\" is \"[_player, _target]\". <CODE>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_conditionName\", \"_conditionFunc\"];\r\n\r\n_conditionName = toLower _conditionName;\r\n\r\nprivate _conditions = missionNamespace getVariable [QGVAR(InteractionConditions), [[],[]]];\r\n_conditions params [\"_conditionNames\", \"_conditionFuncs\"];\r\n\r\nprivate _index = _conditionNames find _conditionName;\r\n\r\nif (_index == -1) then {\r\n    _index = count _conditionNames;\r\n};\r\n\r\n_conditionNames set [_index, _conditionName];\r\n_conditionFuncs set [_index, _conditionFunc];\r\n\r\nGVAR(InteractionConditions) = _conditions;\r\n"},{"name":"ace_common_fnc_addEventHandler","file":"common/functions/fnc_addEventHandler.sqf","text":"#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\", \"_eventCode\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\n[_eventName, _eventCode] call CBA_fnc_addEventHandler;\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_addEventHandler\",\"3.8.0\",\"CBA_fnc_addEventHandler\");\r\n"},{"name":"ace_common_fnc_addLineToDebugDraw","file":"common/functions/fnc_addLineToDebugDraw.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Add line to draw on debug\r\n *\r\n * Arguments:\r\n * 0: Start point ASL <ARRAY>\r\n * 1: End point ASL <ARRAY>\r\n * 2: Color <ARRAY>\r\n *\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (isNil QGVAR(debugLines)) then {\r\n    GVAR(debugLines) = [];\r\n    GVAR(debugLinesIndex) = 0;\r\n};\r\n\r\nif (count GVAR(debugLines) < 100) then {\r\n    GVAR(debugLines) pushBack _this;\r\n    GVAR(debugLinesIndex) = 0;\r\n} else {\r\n    GVAR(debugLines) set [GVAR(debugLinesIndex), _this];\r\n    GVAR(debugLinesIndex) = (GVAR(debugLinesIndex) + 1) mod 100;\r\n};\r\n\r\nif (isNil QGVAR(debugDrawHandler)) then {\r\n    GVAR(debugDrawHandler) = addMissionEventHandler [\"Draw3D\", {\r\n        if (count GVAR(debugLines) == 0) exitWith {\r\n            removeMissionEventHandler [\"Draw3D\", GVAR(debugDrawHandler)];\r\n            GVAR(debugDrawHandler) = nil;\r\n        };\r\n\r\n        {\r\n            _p0 = _x select 0;\r\n            if (!surfaceIsWater _p0) then {\r\n                _p0 = ASLtoATL _p0;\r\n            };\r\n            _p1 = _x select 1;\r\n            if (!surfaceIsWater _p1) then {\r\n                _p1 = ASLtoATL _p1;\r\n            };\r\n            drawLine3D [_p0, _p1, _x select 2];\r\n        } forEach GVAR(debugLines);\r\n    }];\r\n};\r\n"},{"name":"ace_common_fnc_addMapMarkerCreatedEventHandler","file":"common/functions/fnc_addMapMarkerCreatedEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Add a map marker creation event handler.\r\n *\r\n * Arguments:\r\n * 0: Code to execute <CODE, STRING>\r\n *\r\n * Return Value:\r\n * ID of the event script (used to remove it later). <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_statement\"];\r\n\r\nif (_statement isEqualType \"\") then {\r\n    _statement = compile _statement;\r\n};\r\n\r\nprivate _actionsVar = missionNamespace getVariable [\"ACE_EventHandler_MapMarker\", [-1, [], []]];\r\n\r\n_actionsVar params [\"_id\", \"_actionIDs\", \"_actions\"];\r\n\r\n_id = _id + 1;\r\n\r\nif (_id == 0) then {\r\n    uiNamespace setVariable [\"ACE_EventHandler_MapMarker\", count allMapMarkers];\r\n    (\"ACE_EventHandlerHelper2\" call BIS_fnc_rscLayer) cutRsc [\"ACE_EventHandlerHelper2\", \"PLAIN\"];\r\n};\r\n\r\n_actionIDs pushBack _id;\r\n_actions pushBack _statement;\r\n\r\nmissionNamespace setVariable [\"ACE_EventHandler_MapMarker\", [_id, _actionIDs, _actions]];\r\n\r\n_id\r\n"},{"name":"ace_common_fnc_addScrollWheelEventHandler","file":"common/functions/fnc_addScrollWheelEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Add an event handler that executes every time the scroll wheel is used. This is needed, because adding a MouseZ display event handler to display 46 will break in save games.\r\n * _this will be [Interval] where 'Interval' is a number.\r\n *\r\n * Arguments:\r\n * 0: Code to execute <CODE, STRING>\r\n *\r\n * Return Value:\r\n * ID of the event script (used to remove it later). <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_statement\"];\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_addScrollWheelEventHandler\", \"3.8.0\", \"'MouseZChanged' Display EventHandler\");\r\n\r\nif (_statement isEqualType \"\") then {\r\n    _statement = compile _statement;\r\n};\r\n\r\nprivate _actionsVar = missionNamespace getVariable [\"ACE_EventHandler_ScrollWheel\", [-1, [], []]];\r\n\r\n_actionsVar params [\"_id\", \"_actionIDs\", \"_actions\"];\r\n\r\n_id = _id + 1;\r\n\r\n_actionIDs pushBack _id;\r\n_actions pushBack _statement;\r\n\r\nmissionNamespace setVariable [\"ACE_EventHandler_ScrollWheel\", [_id, _actionIDs, _actions]];\r\n\r\n_id\r\n"},{"name":"ace_common_fnc_addSetting","file":"common/functions/fnc_addSetting.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Adds a new setting at runtime, with all it's metadata.\r\n * If has only local effects.\r\n *\r\n * Arguments:\r\n * 0: name <STRING>\r\n * 1: typeName <STRING>\r\n * 2: isClientSetable <BOOL>\r\n * 3: localizedName <STRING>\r\n * 4: localizedDescription <STRING>\r\n * 5: possibleValues <ARRAY>\r\n * 6: isForced <BOOL>\r\n * 7: defaultValue <ANY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"\", \"\", \"\", \"\", \"\", \"\", \"_value\"]; //[\"_name\", \"_typeName\", \"_isClientSetable\", \"_localizedName\", \"_localizedDescription\", \"_possibleValues\", \"_isForced\", \"_value\"];\r\n\r\nprivate _settingData = [_name] call FUNC(getSettingData);\r\n\r\n// Exit if the setting already exists\r\nif (count _settingData > 0) exitWith {};\r\n\r\n// Update the variable\r\nTRACE_2(\"Setting added\",_name,_value);\r\n\r\n// Init the variable\r\nmissionNamespace setVariable [_name, _value];\r\n\r\n// Add the setting data\r\nGVAR(settings) pushBack _this;\r\n\r\n// Raise event locally\r\n[\"ace_settingChanged\", [_name, _value]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_common_fnc_addSyncedEventHandler","file":"common/functions/fnc_addSyncedEventHandler.sqf","text":"/*\r\n * Author: jaynus\r\n * Register an event handler for an ACE synced event\r\n *\r\n * Arguments:\r\n * 0: Name <STRING>\r\n * 1: Handler <CODE>\r\n * 2: TTL (optional: 0) <NUMBER, CODE>\r\n *\r\n * Return Value:\r\n * Boolean of success <BOOL>\r\n *\r\n * Example:\r\n * [\"myEvent\", {_this call x}, 0] call ace_common_fnc_addSyncedEventHandler\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_handler\", [\"_ttl\", 0]];\r\n\r\nif (HASH_HASKEY(GVAR(syncedEvents),_name)) exitWith {\r\n    ACE_LOGERROR_1(\"Duplicate synced event [%1] creation.\",_name);\r\n    false\r\n};\r\n\r\nprivate _eventId = [_name, FUNC(_handleSyncedEvent)] call CBA_fnc_addEventHandler;\r\nprivate _data = [_handler, [], _ttl, _eventId];\r\n\r\nHASH_SET(GVAR(syncedEvents),_name,_data);\r\n"},{"name":"ace_common_fnc_addToInventory","file":"common/functions/fnc_addToInventory.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Adds an item, weapon, or magazine to the unit's inventory or places it in a weaponHolder if no space.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Classname <STRING>\r\n * 2: Container (uniform, vest, backpack) (default: \"\") <STRING>\r\n * 3: Magazine Ammo Count (default: -1) <NUMBER>\r\n *\r\n * Return Value:\r\n * 0: Added to player <BOOL>\r\n * 1: weaponholder <OBJECT>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_classname\", [\"_container\", \"\"], [\"_ammoCount\", -1]];\r\n\r\nprivate _type = _classname call FUNC(getItemType);\r\n\r\nprivate [\"_canAdd\", \"_addedToUnit\"];\r\n\r\nswitch (_container) do {\r\n    case \"vest\": {\r\n        _canAdd = _unit canAddItemToVest _classname;\r\n    };\r\n    case \"backpack\": {\r\n        _canAdd = _unit canAddItemToBackpack _classname;\r\n    };\r\n    case \"uniform\": {\r\n        _canAdd = _unit canAddItemToUniform _classname;\r\n    };\r\n    default {\r\n        _canAdd = _unit canAdd _classname;\r\n    };\r\n};\r\n\r\nswitch (_type select 0) do {\r\n    case \"weapon\": {\r\n        if (_canAdd) then {\r\n            _addedToUnit = true;\r\n\r\n            switch (_container) do {\r\n                case \"vest\": {\r\n                    (vestContainer _unit) addWeaponCargoGlobal [_classname, 1];\r\n                };\r\n                case \"backpack\": {\r\n                    (backpackContainer _unit) addWeaponCargoGlobal [_classname, 1];\r\n                };\r\n                case \"uniform\": {\r\n                    (uniformContainer _unit) addWeaponCargoGlobal [_classname, 1];\r\n                };\r\n                default {\r\n                    _unit addWeaponGlobal _classname;\r\n                };\r\n            };\r\n        } else {\r\n            _addedToUnit = false;\r\n\r\n            private _pos = _unit modelToWorldVisual [0,1,0.05];\r\n\r\n            _unit = createVehicle [\"WeaponHolder_Single_F\", _pos, [], 0, \"NONE\"];\r\n            _unit addWeaponCargoGlobal [_classname, 1];\r\n            _unit setPosATL _pos;\r\n        };\r\n    };\r\n\r\n    case \"magazine\": {\r\n        if (_ammoCount == -1) then {\r\n            _ammoCount = getNumber (configFile >> \"CfgMagazines\" >> _classname >> \"count\");\r\n        };\r\n\r\n        if (_canAdd) then {\r\n            _addedToUnit = true;\r\n\r\n            switch (_container) do {\r\n                case \"vest\": {\r\n                    (vestContainer _unit) addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\r\n                };\r\n                case \"backpack\": {\r\n                    (backpackContainer _unit) addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\r\n                };\r\n                case \"uniform\": {\r\n                    (uniformContainer _unit) addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\r\n                };\r\n                default {\r\n                    _unit addMagazine [_classname, _ammoCount];\r\n                };\r\n            };\r\n        } else {\r\n            _addedToUnit = false;\r\n\r\n            private _pos = _unit modelToWorldVisual [0,1,0.05];\r\n\r\n            _unit = createVehicle [\"WeaponHolder_Single_F\", _pos, [], 0, \"NONE\"];\r\n            _unit addMagazineCargoGlobal [_classname, 1/*_ammoCount*/]; //@todo Bug! This isn't really the ammo, but magazine count. No such command.\r\n            _unit setPosATL _pos;\r\n        };\r\n    };\r\n\r\n    case \"item\": {\r\n        if (_canAdd) then {\r\n            _addedToUnit = true;\r\n\r\n            switch (_container) do {\r\n                case \"vest\": {\r\n                    _unit addItemToVest _classname;\r\n                };\r\n                case \"backpack\": {\r\n                    _unit addItemToBackpack _classname;\r\n                };\r\n                case \"uniform\": {\r\n                    _unit addItemToUniform _classname;\r\n                };\r\n                default {\r\n                    _unit addItem _classname;\r\n                };\r\n            };\r\n        } else {\r\n            _addedToUnit = false;\r\n\r\n            private _pos = _unit modelToWorldVisual [0,1,0.05];\r\n\r\n            _unit = createVehicle [\"WeaponHolder_Single_F\", _pos, [], 0, \"NONE\"];\r\n            _unit addItemCargoGlobal [_classname, 1];\r\n            _unit setPosATL _pos;\r\n        };\r\n    };\r\n\r\n    default {\r\n        _addedToUnit = false;\r\n        ACE_LOGWARNING_2(\"Incorrect item type passed to %1, passed: %2\",QFUNC(AddToInventory),_type);\r\n    };\r\n};\r\n\r\n[_addedToUnit, _unit]\r\n"},{"name":"ace_common_fnc_ambientBrightness","file":"common/functions/fnc_ambientBrightness.sqf","text":"/*\r\n * Author: commy2, idea by Falke\r\n * Returns a brightness value depending on the sun and moon state. Ranges from 0 to 1 (dark ... bright).\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Ambient brightness <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(sunOrMoon * sunOrMoon * (1 - overcast * 0.25) + (moonIntensity / 5) * (1 - overcast)) min 1\r\n"},{"name":"ace_common_fnc_ASLToPosition","file":"common/functions/fnc_ASLToPosition.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Converts ASL to Arma \"Position\"\r\n *\r\n * Arguments:\r\n * 0: position x <NUMBER>\r\n * 1: position y <NUMBER>\r\n * 2: position z <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (surfaceIsWater _this) then {\r\n    _this\r\n} else {\r\n    ASLtoATL _this\r\n};\r\n"},{"name":"ace_common_fnc_assignedItemFix","file":"common/functions/fnc_assignedItemFix.sqf","text":"/*\r\n * Author: commy2\r\n * Initialized the assigned item fix.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public : No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_isMapEnabled     = call {private _config = missionConfigFile >> \"showMap\";     !isNumber _config || {getNumber _config == 1}};  // default value is 1, so do isNumber check first\r\nACE_isCompassEnabled = call {private _config = missionConfigFile >> \"showCompass\"; !isNumber _config || {getNumber _config == 1}};\r\nACE_isWatchEnabled   = call {private _config = missionConfigFile >> \"showWatch\";   !isNumber _config || {getNumber _config == 1}};\r\nACE_isRadioEnabled   = call {private _config = missionConfigFile >> \"showRadio\";   !isNumber _config || {getNumber _config == 1}};\r\nACE_isGPSEnabled     = call {private _config = missionConfigFile >> \"showGPS\";     !isNumber _config || {getNumber _config == 1}};\r\n\r\nGVAR(AssignedItems) = [];\r\nGVAR(AssignedItemsInfo) = [];\r\nGVAR(AssignedItemsShownItems) = [\r\n    ACE_isMapEnabled,\r\n    ACE_isCompassEnabled,\r\n    ACE_isWatchEnabled,\r\n    ACE_isRadioEnabled,\r\n    ACE_isGPSEnabled\r\n];\r\n\r\n[\"loadout\", {\r\n    params [\"_unit\"];\r\n\r\n    private _assignedItems = getUnitLoadout _unit param [9, [\"\",\"\",\"\",\"\",\"\",\"\"]]; // [\"ItemMap\",\"ItemGPS\",\"ItemRadio\",\"ItemCompass\",\"ItemWatch\",\"NVGoggles\"]\r\n\r\n    GVAR(AssignedItemsShownItems) = [\r\n        !((_assignedItems select 0) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 0 >> \"ACE_hideItemType\") != \"map\"},\r\n        !((_assignedItems select 3) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 3 >> \"ACE_hideItemType\") != \"compass\"},\r\n        !((_assignedItems select 4) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 4 >> \"ACE_hideItemType\") != \"watch\"},\r\n        !((_assignedItems select 2) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 2 >> \"ACE_hideItemType\") != \"radio\"},\r\n        !((_assignedItems select 1) isEqualTo \"\") && {getText (configFile >> \"CfgWeapons\" >> _assignedItems select 1 >> \"ACE_hideItemType\") != \"gps\"}\r\n    ];\r\n\r\n    GVAR(AssignedItemsShownItems) params [\"_showMap\", \"_showCompass\", \"_showWatch\", \"_showRadio\", \"_showGPS\"];\r\n\r\n    showMap _showMap;\r\n    showCompass _showCompass;\r\n    showWatch _showWatch;\r\n    showRadio _showRadio;\r\n    showGPS (_showGPS || {cameraOn == getConnectedUAV _unit});  //If player is activly controling a UAV, showGPS controls showing the map (m key)\r\n}] call CBA_fnc_addPlayerEventHandler;\r\n"},{"name":"ace_common_fnc_assignObjectsInList","file":"common/functions/fnc_assignObjectsInList.sqf","text":"/*\r\n * Author: Glowbal\r\n * Loops through a string and filters out object names/variables to assign a value for given variable.\r\n * Used by moduleAssign* within various parts of the ACE3 project.\r\n *\r\n * Arguments:\r\n * 0: List <STRING>\r\n * 1: Variable Name <STRING>\r\n * 2: Value <ANY>\r\n * 3: Global <BOOL>\r\n * 4: Vehicle <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"text\", \"variable\", value, true] call ace_common_fnc_assignObjectsInList\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_list\", \"_variable\", \"_setting\", \"_global\", [\"_vehicle\", false]];\r\n\r\nif (_list isEqualType \"\") then {\r\n    _list = [_list, true, true] call FUNC(parseList);\r\n    TRACE_1(\"Parsed\",_list)\r\n};\r\n\r\n{\r\n    if (!isNil \"_x\") then {\r\n        if (_x isEqualType objNull) then {\r\n            if (local _x) then {\r\n                if (_vehicle) then {\r\n                    (vehicle _x) setVariable [_variable, _setting, _global];\r\n                    TRACE_6(\"Set variable vehicle\",_x,vehicle _x,typeOf (vehicle _x),_variable,_setting,_global);\r\n                } else {\r\n                    _x setVariable [_variable, _setting, _global];\r\n                    TRACE_5(\"Set variable\",_x,typeOf _x,_variable,_setting,_global);\r\n                };\r\n            };\r\n        };\r\n    };\r\n    false\r\n} count _list;\r\n"},{"name":"ace_common_fnc_binarizeNumber","file":"common/functions/fnc_binarizeNumber.sqf","text":"/*\r\n * Author: commy2\r\n * Get a binary equivalent of a decimal number.\r\n *\r\n * Arguments:\r\n * 0: Decimal Number <NUMBER>\r\n * 1: Minimum length of the returned Array, note: returned array can be larger (default: 8) <NUMBER>\r\n *\r\n * Return Value:\r\n * Booleans <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_number\", [\"_minLength\", 8]];\r\n\r\n_number = round _number;\r\n\r\nprivate _array = [];\r\n_array resize _minLength;\r\n\r\nfor \"_index\" from 0 to (_minLength - 1) do {\r\n    _array set [_index, false];\r\n};\r\n\r\nprivate _index = 0;\r\n\r\nwhile {_number > 0} do {\r\n    private _rest = _number mod 2;\r\n    _number = floor (_number / 2);\r\n\r\n    _array set [_index, _rest == 1];\r\n    _index = _index + 1;\r\n};\r\n\r\n_array\r\n"},{"name":"ace_common_fnc_binocularMagazine","file":"common/functions/fnc_binocularMagazine.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the magazine of the units rangefinder.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Magazine of the units binocular <STRING>\r\n *\r\n * Example:\r\n * player call ace_common_fnc_binocularMagazine\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_binocularMagazine\",\"3.8.0\",\"CBA_fnc_binocularMagazine\");\r\n\r\n_this call CBA_fnc_binocularMagazine\r\n"},{"name":"ace_common_fnc_blurScreen","file":"common/functions/fnc_blurScreen.sqf","text":"/*\r\n * Author: Glowbal\r\n *\r\n * Arguments:\r\n * 0: ID <NUMBER>\r\n * 1: Show? <BOOL, NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\nparams [\"_id\", [\"_show\", false]];\r\n\r\nif (_show isEqualType 0) then {\r\n    _show = _show == 1;\r\n};\r\n\r\nif (isNil QGVAR(SHOW_BLUR_SCREEN_COLLECTION)) then {\r\n    GVAR(SHOW_BLUR_SCREEN_COLLECTION) = [];\r\n};\r\n\r\nif (_show) then {\r\n    GVAR(SHOW_BLUR_SCREEN_COLLECTION) pushBack _id;\r\n\r\n    // show blur\r\n    if (isNil QGVAR(MENU_ppHandle_GUI_BLUR_SCREEN)) then {\r\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) = ppEffectCreate [\"DynamicBlur\", 102];\r\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) ppEffectAdjust [0.9];\r\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) ppEffectEnable true;\r\n        GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) ppEffectCommit 0;\r\n    };\r\n} else {\r\n    GVAR(SHOW_BLUR_SCREEN_COLLECTION) = GVAR(SHOW_BLUR_SCREEN_COLLECTION) - [_id];\r\n\r\n    if (GVAR(SHOW_BLUR_SCREEN_COLLECTION) isEqualTo []) then {\r\n        // hide blur\r\n        if (!isNil QGVAR(MENU_ppHandle_GUI_BLUR_SCREEN)) then {\r\n            ppEffectDestroy GVAR(MENU_ppHandle_GUI_BLUR_SCREEN);\r\n            GVAR(MENU_ppHandle_GUI_BLUR_SCREEN) = nil;\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_cachedCall","file":"common/functions/fnc_cachedCall.sqf","text":"/*\r\n * Author: esteldunedain, Jaynus\r\n * Returns the result of the function and caches it up to a given time or event\r\n *\r\n * Arguments:\r\n * 0: Parameters <ARRAY>\r\n * 1: Function <CODE>\r\n * 2: Namespace to store the cache on <NAMESPACE>\r\n * 3: Cache uid <STRING>\r\n * 4: Max duration of the cache <NUMBER>\r\n * 5: Event that clears the cache (default: nil) <STRING>\r\n *\r\n * Return Value:\r\n * Result of the function <ANY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_params\", \"_function\", \"_namespace\", \"_uid\", \"_duration\", \"_event\"];\r\n\r\nif ((_namespace getVariable [_uid, [-99999]]) select 0 < diag_tickTime) then {\r\n    _namespace setVariable [_uid, [diag_tickTime + _duration, _params call _function]];\r\n\r\n    // Does the cache needs to be cleared on an event?\r\n    if (!isNil \"_event\") then {\r\n        private _varName = format [QGVAR(clearCache_%1), _event];\r\n        private _cacheList = missionNamespace getVariable _varName;\r\n\r\n        // If there was no EH to clear these caches, add one\r\n        if (isNil \"_cacheList\") then {\r\n            _cacheList = [];\r\n            missionNamespace setVariable [_varName, _cacheList];\r\n\r\n            [_event, {\r\n                // _eventName is defined on the function that calls the event\r\n                #ifdef DEBUG_MODE_FULL\r\n                    ACE_LOGINFO_1(\"Clear cached variables on event: %1\",_eventName);\r\n                #endif\r\n                // Get the list of caches to clear\r\n                private _varName = format [QGVAR(clearCache_%1), _eventName];\r\n                private _cacheList = missionNamespace getVariable [_varName, []];\r\n                // Erase all the cached results\r\n                {\r\n                    _x call FUNC(eraseCache);\r\n                } forEach _cacheList;\r\n                // Empty the list\r\n                missionNamespace setVariable [_varName, []];\r\n            }] call CBA_fnc_addEventHandler;\r\n        };\r\n\r\n        // Add this cache to the list of the event\r\n        _cacheList pushBack [_namespace, _uid];\r\n    };\r\n\r\n#ifdef DEBUG_MODE_FULL\r\n    ACE_LOGINFO_2(\"Calculated result: %1 %2\",_namespace,_uid);\r\n} else {\r\n    ACE_LOGINFO_2(\"Cached result: %1 %2\",_namespace,_uid);\r\n#endif\r\n\r\n};\r\n\r\n(_namespace getVariable _uid) select 1\r\n"},{"name":"ace_common_fnc_canGetInPosition","file":"common/functions/fnc_canGetInPosition.sqf","text":"/*\r\n * Author: commy2\r\n * Is the unit able to enter the vehicle in the given position?\r\n *\r\n * Arguments:\r\n * 0: Unit to enter the vehicle <OBJECT>\r\n * 1: The vehicle to be entered <OBJECT>\r\n * 2: Position. Can be \"Driver\", \"Pilot\", \"Gunner\", \"Commander\", \"Copilot\", \"Turret\", \"FFV\", \"Codriver\" or \"Cargo\" <STRING>\r\n * 3: Check current distance to vehicles memory point? (default: false) <BOOL>\r\n * 4: Index. \"Turret\", \"FFV\", \"Codriver\" and \"Cargo\" support this optional parameter. Which position should be taken.\r\n *    Note: This index is diffrent from Armas \"cargoIndex\". (default: next free index) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define CANGETINDRIVER      (isNull (driver _vehicle)             || {!alive driver _vehicle})               && {!lockedDriver _vehicle}           && {getNumber (_config >> \"isUav\") != 1}\r\n#define CANGETINTURRETINDEX (isNull (_vehicle turretUnit _turret) || {!alive (_vehicle turretUnit _turret)}) && {!(_vehicle lockedTurret _turret)} && {getNumber (_config >> \"isUav\") != 1}\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_position\", [\"_checkDistance\", false], [\"_index\", -1]];\r\n\r\n_position = toLower _position;\r\n\r\n// general\r\nif (!alive _vehicle || {locked _vehicle > 1}) exitWith {false};\r\n\r\nprivate [\"_selectionPosition\", \"_selectionPosition2\"];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\nprivate _turret = [];\r\n\r\nprivate _radius = 0;\r\n\r\nprivate _enemiesInVehicle = false;   //Possible Side Restriction\r\n{\r\n    if (side _unit getFriend side _x < 0.6) exitWith {_enemiesInVehicle = true};\r\n} forEach crew _vehicle;\r\n\r\nprivate _return = false;\r\nswitch (_position) do {\r\n    case \"driver\" : {\r\n        _radius = getNumber (_config >> \"getInRadius\");\r\n        _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\r\n\r\n        if (_vehicle isKindOf \"Tank\") then {\r\n            _selectionPosition2 = [-(_selectionPosition select 0), _selectionPosition select 1, _selectionPosition select 2];\r\n        };\r\n\r\n        _return = CANGETINDRIVER;\r\n    };\r\n\r\n    case \"pilot\" : {\r\n        _radius = getNumber (_config >> \"getInRadius\");\r\n        _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\r\n\r\n        _return = CANGETINDRIVER;\r\n    };\r\n\r\n    case \"gunner\" : {\r\n        _turret = [_vehicle] call FUNC(getTurretGunner);\r\n        if (_turret isEqualTo []) exitWith {false};\r\n\r\n        private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\n        _radius = getNumber (_config >> \"getInRadius\");\r\n        _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\r\n\r\n        _return = CANGETINTURRETINDEX\r\n    };\r\n\r\n    case \"commander\" : {\r\n        _turret = [_vehicle] call FUNC(getTurretCommander);\r\n        if (_turret isEqualTo []) exitWith {false};\r\n\r\n        private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\n        _radius = getNumber (_config >> \"getInRadius\");\r\n        _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\r\n\r\n        _return = CANGETINTURRETINDEX\r\n    };\r\n\r\n    case \"copilot\" : {\r\n        _turret = [_vehicle] call FUNC(getTurretCopilot);\r\n        if (_turret isEqualTo []) exitWith {false};\r\n\r\n        private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\n        _radius = getNumber (_config >> \"getInRadius\");\r\n        _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\r\n\r\n        _return = CANGETINTURRETINDEX\r\n    };\r\n\r\n    case \"turret\" : {\r\n        private _turrets = [_vehicle] call FUNC(getTurretsOther);\r\n\r\n        if (_index != -1 && {_turret = _turrets select _index;\r\n          CANGETINTURRETINDEX\r\n        }) then {\r\n            private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\n            _radius = getNumber (_config >> \"getInRadius\");\r\n            _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\r\n\r\n            _return = true\r\n        } else {\r\n            for \"_index\" from 0 to (count _turrets - 1) do {\r\n                _turret = _turrets select _index;\r\n                if (CANGETINTURRETINDEX) exitWith {\r\n                    private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\n                    _radius = getNumber (_config >> \"getInRadius\");\r\n                    _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\r\n\r\n                    _return = true\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    case \"ffv\" : {\r\n        private _turrets = [_vehicle] call FUNC(getTurretsFFV);\r\n\r\n        if (_index != -1 && {_turret = _turrets select _index;\r\n          CANGETINTURRETINDEX\r\n        }) then {\r\n            private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\n            _radius = getNumber (_config >> \"getInRadius\");\r\n            _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\r\n\r\n            _return = true\r\n        } else {\r\n            for \"_index\" from 0 to (count _turrets - 1) do {\r\n                _turret = _turrets select _index;\r\n                if (CANGETINTURRETINDEX) exitWith {\r\n                    private _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\n                    _radius = getNumber (_config >> \"getInRadius\");\r\n                    _selectionPosition = _vehicle selectionPosition (getText (_turretConfig >> \"memoryPointsGetInGunner\"));\r\n\r\n                    _return = true\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    case \"codriver\" : {\r\n        private _positions = [typeOf _vehicle] call FUNC(getVehicleCodriver);\r\n\r\n        {\r\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\r\n        } forEach crew _vehicle;\r\n\r\n        if (_index != -1 && {_index in _positions}) then {\r\n            _radius = getNumber (_config >> \"getInRadius\");\r\n            _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\r\n\r\n            if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\r\n              _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\r\n              _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\r\n            };\r\n\r\n            _return = true\r\n        } else {\r\n            _index = _positions select 0;\r\n            if (!isNil \"_index\") then {\r\n                _radius = getNumber (_config >> \"getInRadius\");\r\n                _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\r\n\r\n                if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\r\n                    _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\r\n                    _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\r\n                };\r\n\r\n                _return = true\r\n            };\r\n        };\r\n    };\r\n\r\n    case \"cargo\" : {\r\n        private _positions = [typeOf _vehicle] call FUNC(getVehicleCargo);\r\n\r\n        {\r\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\r\n        } forEach crew _vehicle;\r\n\r\n        if (_index != -1 && {_index in _positions}) then {\r\n            _radius = getNumber (_config >> \"getInRadius\");\r\n            _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\r\n\r\n            if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\r\n              _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\r\n              _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\r\n            };\r\n\r\n            _return = true\r\n        } else {\r\n\r\n            _index = _positions select 0;\r\n            if (!isNil \"_index\") then {\r\n                _radius = getNumber (_config >> \"getInRadius\");\r\n                _selectionPosition = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInCargo\"));\r\n\r\n                if (_vehicle isKindOf \"Car\" && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\r\n                    _selectionPosition2 = _vehicle selectionPosition (getText (_config >> \"memoryPointsGetInDriver\"));\r\n                    _selectionPosition2 set [0, -(_selectionPosition2 select 0)];\r\n                };\r\n\r\n                _return = true\r\n            };\r\n        };\r\n    };\r\n\r\n    default {};\r\n};\r\n\r\nprivate _fnc_isInRange = {\r\n    if (_radius == 0) exitWith {true};\r\n\r\n    private _unitPosition = getPos _unit;\r\n    private _distance = _unitPosition distance (_vehicle modelToWorldVisual _selectionPosition);\r\n\r\n    if (!isNil \"_selectionPosition2\") then {\r\n        _distance = _distance min (_unitPosition distance (_vehicle modelToWorldVisual _selectionPosition2));\r\n    };\r\n\r\n    _distance < _radius\r\n};\r\n\r\n// if you want into the cargo and you can't, then check ffv turrets aswell\r\nif (_position == \"cargo\") exitWith {\r\n    if (_return && {!_checkDistance || {_vehicle == vehicle _unit} || _fnc_isInRange}) then {true} else {\r\n        [_unit, _vehicle, \"ffv\", _checkDistance] call FUNC(canGetInPosition);\r\n    };\r\n};\r\n\r\n_return && {!_checkDistance || {_vehicle == vehicle _unit} || _fnc_isInRange}\r\n\r\n//_enemiesInVehicle\r\n"},{"name":"ace_common_fnc_canInteractWith","file":"common/functions/fnc_canInteractWith.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit can interact.\r\n *\r\n * Arguments:\r\n * 0: The player. <OBJECT>\r\n * 1: The interaction target. objNull to ignore. <OBJECT>\r\n * 2: Exceptions. What general conditions are to skip? (default: []) <ARRAY>\r\n *\r\n * Return Value:\r\n * Unit can interact?\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", [\"_exceptions\", []]];\r\n\r\n_exceptions = _exceptions apply {toLower _x};\r\n\r\nprivate _owner = _target getVariable [QGVAR(owner), objNull];\r\n\r\n// exit if the target is not free to interact\r\nif (!isNull _owner && {_unit != _owner}) exitWith {false};\r\n\r\n// check general conditions\r\nprivate _conditions = missionNamespace getVariable [QGVAR(InteractionConditions), [[],[]]];\r\n_conditions params [\"_conditionNames\", \"_conditionFuncs\"];\r\n\r\nprivate _canInteract = true;\r\n\r\n{\r\n    if (!(_x in _exceptions) && {!([_unit, _target] call (_conditionFuncs select _forEachIndex))}) exitWith {\r\n        _canInteract = false;\r\n    };\r\n} forEach _conditionNames;\r\n\r\n_canInteract\r\n"},{"name":"ace_common_fnc_changeProjectileDirection","file":"common/functions/fnc_changeProjectileDirection.sqf","text":"/*\r\n * Author: commy2\r\n * Adjust a projectiles velocity and dir + up vector.\r\n *\r\n * Arguments:\r\n * 0: Projectile <OBJECT>\r\n * 1: Adjust azimuth this much. <NUMBER>\r\n * 2: Adjust inclination this much. <NUMBER>\r\n * 3: Adjust projectile speed this much. In m/s. (optional: 0) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_projectile\", \"_adjustDir\", \"_adjustUp\", [\"_adjustSpeed\",0]];\r\n\r\n// get old direction vector\r\nprivate _vdir = vectorNormalized velocity _projectile;\r\n\r\n// get azimuth and inclination and apply corrections\r\nprivate _dir = (_vdir select 0) atan2 (_vdir select 1) + _adjustDir;\r\nprivate _up = asin (_vdir select 2) + _adjustUp;\r\n\r\n// get new direction vector (this is a unit vector)\r\n_vdir = [\r\n  sin _dir * cos _up,\r\n  cos _dir * cos _up,\r\n  sin _up\r\n];\r\n\r\n// get best up vector\r\nprivate _vlat = vectorNormalized (_vdir vectorCrossProduct [0,0,1]);\r\nprivate _vup = _vlat vectorCrossProduct _vdir;\r\n\r\n// get new speed vector. Keep total speed, but change to new direction. Yay for vector commands.\r\nprivate _vel = _vdir vectorMultiply (_adjustSpeed + vectorMagnitude velocity _projectile);\r\n\r\n// set projectile direction dir and up. Projectiles are long objects, especially with tracers, so it would look dumb otherwise.\r\n_projectile setVectorDirAndUp [_vdir, _vup];\r\n\r\n// set new speed vector\r\n_projectile setVelocity _vel;\r\n"},{"name":"ace_common_fnc_checkFiles","file":"common/functions/fnc_checkFiles.sqf","text":"/*\r\n * Author: commy2\r\n * Compares version numbers of PBOs and DLLs.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n///////////////\r\n// check addons\r\n///////////////\r\nprivate _version = getText (configFile >> \"CfgPatches\" >> \"ace_main\" >> \"versionStr\");\r\n\r\nACE_LOGINFO_1(\"ACE is version %1.\",_version);\r\n\r\n//CBA Versioning check - close main display if using incompatible version\r\nprivate _cbaVersionAr = getArray (configFile >> \"CfgPatches\" >> \"cba_main\" >> \"versionAr\");\r\nprivate _cbaRequiredAr = (getArray (configFile >> \"CfgSettings\" >> \"CBA\" >> \"Versioning\" >> \"ACE\" >> \"dependencies\" >> \"CBA\")) select 1;\r\nACE_LOGINFO_2(\"CBA is version %1 [min required %2]\",_cbaVersionAr,_cbaRequiredAr);\r\nif ([_cbaRequiredAr, _cbaVersionAr] call cba_versioning_fnc_version_compare) then {\r\n    private _errorMsg = format [\"CBA Version [%1] is outdated [required %2]\", _cbaVersionAr, _cbaRequiredAr];\r\n    ACE_LOGERROR(_errorMsg);\r\n    if (hasInterface) then {\r\n        [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\r\n    };\r\n};\r\n\r\n//private _addons = activatedAddons; // broken with High-Command module, see #2134\r\nprivate _addons = \"true\" configClasses (configFile >> \"CfgPatches\");//\r\n_addons = _addons apply {toLower configName _x};//\r\n_addons = _addons select {_x find \"ace_\" == 0};\r\n\r\n{\r\n    if (getText (configFile >> \"CfgPatches\" >> _x >> \"versionStr\") != _version) then {\r\n        private _errorMsg = format [\"File %1.pbo is outdated.\", _x];\r\n\r\n        ACE_LOGERROR(_errorMsg);\r\n\r\n        if (hasInterface) then {\r\n            [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\r\n        };\r\n    };\r\n    false\r\n} count _addons;\r\n\r\n///////////////\r\n// check dlls\r\n///////////////\r\n{\r\n    private _versionEx = _x callExtension \"version\";\r\n\r\n    if (_versionEx == \"\") then {\r\n        private _errorMsg = format [\"Extension %1.dll not installed.\", _x];\r\n\r\n        ACE_LOGERROR(_errorMsg);\r\n\r\n        if (hasInterface) then {\r\n            [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\r\n        };\r\n    } else {\r\n        // Print the current extension version\r\n        ACE_LOGINFO_2(\"Extension version: %1: %2\",_x,_versionEx);\r\n    };\r\n    false\r\n} count getArray (configFile >> \"ACE_Extensions\" >> \"extensions\");\r\n\r\n///////////////\r\n// check server version/addons\r\n///////////////\r\nif (isMultiplayer) then {\r\n    // don't check optional addons\r\n    _addons = _addons select {getNumber (configFile >> \"CfgPatches\" >> _x >> \"ACE_isOptional\") != 1};\r\n\r\n    if (isServer) then {\r\n        // send servers version of ACE to all clients\r\n        GVAR(ServerVersion) = _version;\r\n        GVAR(ServerAddons) = _addons;\r\n        publicVariable QGVAR(ServerVersion);\r\n        publicVariable QGVAR(ServerAddons);\r\n    } else {\r\n        // clients have to wait for the variables\r\n        [{\r\n            if (isNil QGVAR(ServerVersion) || isNil QGVAR(ServerAddons)) exitWith {};\r\n\r\n            (_this select 0) params [\"_version\", \"_addons\"];\r\n\r\n            if (_version != GVAR(ServerVersion)) then {\r\n                private _errorMsg = format [\"Client/Server Version Mismatch. Server: %1, Client: %2.\", GVAR(ServerVersion), _version];\r\n\r\n                ACE_LOGERROR(_errorMsg);\r\n\r\n                if (hasInterface) then {\r\n                    [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\r\n                };\r\n            };\r\n\r\n            _addons = _addons - GVAR(ServerAddons);\r\n            if !(_addons isEqualTo []) then {\r\n                _errorMsg = format [\"Client/Server Addon Mismatch. Client has extra addons: %1.\",_addons];\r\n\r\n                ACE_LOGERROR(_errorMsg);\r\n\r\n                if (hasInterface) then {\r\n                    [\"[ACE] ERROR\", _errorMsg, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\r\n                };\r\n            };\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n        }, 1, [_version,_addons]] call CBA_fnc_addPerFrameHandler;\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_checkPBOs","file":"common/functions/fnc_checkPBOs.sqf","text":"/*\r\n * Author: commy2\r\n * Used to execute the checkPBOs module without placing the module. Don't use this together with the module.\r\n * Checks PBO versions and compares to the one running on server.\r\n *\r\n * Arguments:\r\n * 0: Mode <NUMBER>\r\n *   0 = Warn once\r\n *   1 = Warn permanently\r\n *   2 = Kick\r\n * 1: Check all PBOs? (default: false) <BOOL>\r\n * 2: Whitelist (default: \"\") <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_mode\", [\"_checkAll\", false], [\"_whitelist\", \"\", [\"\"]]];\r\nTRACE_3(\"params\",_mode,_checkAll,_whitelist);\r\n\r\n//lowercase and convert whiteList String into array of strings:\r\n_whitelist = toLower _whitelist;\r\n_whitelist = _whitelist splitString \"[,\"\"']\";\r\nTRACE_1(\"Array\",_whitelist);\r\n\r\nACE_Version_CheckAll = _checkAll;\r\nACE_Version_Whitelist = _whitelist;\r\n\r\nif (!_checkAll) exitWith {}; //ACE is checked by FUNC(checkFiles)\r\n\r\nif (!isServer) then {\r\n    [{\r\n        if (isNil \"ACE_Version_ClientErrors\") exitWith {};\r\n\r\n        ACE_Version_ClientErrors params [\"_missingAddon\", \"_missingAddonServer\", \"_oldVersionClient\", \"_oldVersionServer\"];\r\n\r\n        (_this select 0) params [\"_mode\", \"_checkAll\", \"_whitelist\"];\r\n\r\n        // Display error message.\r\n        if (_missingAddon || {_missingAddonServer} || {_oldVersionClient} || {_oldVersionServer}) then {\r\n            private _text = \"[ACE] Version mismatch:<br/><br/>\";\r\n            private _error = format [\"ACE version mismatch: %1: \", profileName];\r\n\r\n            if (_missingAddon) then {\r\n                _text = _text + \"Detected missing addon on client<br/>\";\r\n                _error = _error + \"Missing file(s); \";\r\n            };\r\n            if (_missingAddonServer) then {\r\n                _text = _text + \"Detected missing addon on server<br/>\";\r\n                _error = _error + \"Additional file(s); \";\r\n            };\r\n            if (_oldVersionClient) then {\r\n                _text = _text + \"Detected old client version<br/>\";\r\n                _error = _error + \"Older version; \";\r\n            };\r\n            if (_oldVersionServer) then {\r\n                _text = _text + \"Detected old server version<br/>\";\r\n                _error = _error + \"Newer version; \";\r\n            };\r\n\r\n            //[QGVAR(systemChatGlobal), _error] call CBA_fnc_globalEvent;\r\n\r\n            ACE_LOGERROR(_error);\r\n\r\n            if (_mode < 2) then {\r\n                _text = composeText [lineBreak, parseText format [\"<t align='center'>%1</t>\", _text]];\r\n\r\n                private _rscLayer = \"ACE_RscErrorHint\" call BIS_fnc_rscLayer;\r\n                _rscLayer cutRsc [\"ACE_RscErrorHint\", \"PLAIN\", 0, true];\r\n\r\n                disableSerialization;\r\n                private _ctrlHint = uiNamespace getVariable \"ACE_ctrlErrorHint\";\r\n                _ctrlHint ctrlSetStructuredText _text;\r\n\r\n                if (_mode == 0) then {\r\n                    [{\r\n                        params [\"_rscLayer\"];\r\n                        TRACE_2(\"Hiding Error message after 10 seconds\",time,_rscLayer);\r\n                        _rscLayer cutFadeOut 0.2;\r\n                    }, [_rscLayer], 10] call CBA_fnc_waitAndExecute;\r\n                };\r\n            };\r\n\r\n            if (_mode == 2) then {\r\n                [{alive player}, { // To be able to show list if using checkAll\r\n                    params [\"_text\"];\r\n                    TRACE_2(\"Player is alive, showing msg and exiting\",time,_text);\r\n                    _text = composeText [parseText format [\"<t align='center'>%1</t>\", _text]];\r\n                    [\"[ACE] ERROR\", _text, {findDisplay 46 closeDisplay 0}] call FUNC(errorMessage);\r\n                }, [_text]] call CBA_fnc_waitUntilAndExecute;\r\n            };\r\n        };\r\n\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    }, 1, [_mode, _checkAll, _whitelist]] call CBA_fnc_addPerFrameHandler;\r\n};\r\n\r\nif (_checkAll) then {\r\n    0 spawn COMPILE_FILE(scripts\\checkVersionNumber); // @todo\r\n};\r\n"},{"name":"ace_common_fnc_claim","file":"common/functions/fnc_claim.sqf","text":"/*\r\n * Author: commy2\r\n * Unit claims the ownership over an object. This is used to prevent multiple players from draging the same ammo box or using up the same wheel when repairing etc.\r\n *\r\n * Arguments:\r\n * 0: Unit that claims another object. ObjNull to remove claim. <OBJECT>\r\n * 1: The object that gets claimed. <OBJECT>\r\n * 2: Lock the claimed object aswell? (optional: false) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", [\"_lockTarget\", false]];\r\n\r\nprivate _owner = _target getVariable [QGVAR(owner), objNull];\r\n\r\nif (!isNull _owner && {!isNull _unit} && {_unit != _owner}) then {\r\n    ACE_LOGERROR(\"Claiming already owned object.\");\r\n};\r\n\r\n// transfer this immediately\r\n_target setVariable [QGVAR(owner), _unit, true];\r\n\r\n// lock target object\r\nif (_lockTarget) then {\r\n    if (!isNull _unit) then {\r\n        [QGVAR(lockVehicle), _target, _target] call CBA_fnc_targetEvent;\r\n    } else {\r\n        [QGVAR(unlockVehicle), _target, _target] call CBA_fnc_targetEvent;\r\n    };\r\n};\r\n\r\n/*\r\nsystemChat str locked _target;\r\nsystemChat str (_target getVariable [QGVAR(lockStatus), locked _target]);\r\n*/\r\n"},{"name":"ace_common_fnc_codeToString","file":"common/functions/fnc_codeToString.sqf","text":"/*\r\n * Author: commy2\r\n * Removes the brackets around a code and returns the code as a string. It does nothing if the code is already a string.\r\n *\r\n * Arguments:\r\n * 0: Code <CODE, STRING>\r\n *\r\n * Return Value:\r\n * Code <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_code\"];\r\nif (_code isEqualType \"\") exitWith {_code};\r\n\r\n_code = str(_code);\r\n_code = _code select [1, count _code - 2];\r\n\r\n_code\r\n\r\n"},{"name":"ace_common_fnc_createOrthonormalReference","file":"common/functions/fnc_createOrthonormalReference.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Returns a orthonormal system of reference aligned with the supplied vector\r\n *\r\n * Arguments: \r\n * Vector to align the coordinate system with <ARRAY>\r\n *\r\n * Return Value:\r\n * 0: Vector Normalized <ARRAY>\r\n * 1: Normalized Cross Product Vector <ARRAY>\r\n * 2: Vector Cross Product <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n[_this] params [[\"_vector\", [0,0,1], [[]], 3]];\r\n\r\nprivate _v1 = vectorNormalized _this;\r\nprivate _v2 = vectorNormalized (_v1 vectorCrossProduct [0,0,1]);\r\nprivate _v3 = _v2 vectorCrossProduct _v1;\r\n\r\n[_v1, _v2, _v3]\r\n"},{"name":"ace_common_fnc_currentChannel","file":"common/functions/fnc_currentChannel.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the current radio / chat / marker channel.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * The current channel (\"group\", \"side\", \"global\", \"command\", \"vehicle\", \"direct\", \"custom_X\") <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define CHANNELS [\"global\", \"side\", \"command\", \"group\", \"vehicle\", \"direct\"]\r\n#define CHANNELS_LOCALIZED [localize \"str_channel_global\", localize \"str_channel_side\", localize \"str_channel_command\", localize \"str_channel_group\", localize \"str_channel_vehicle\", localize \"str_channel_direct\"]\r\n\r\nprivate _currentChannel = currentChannel;\r\n\r\nif (_currentChannel < count CHANNELS) then {\r\n    _currentChannel = CHANNELS select _currentChannel;\r\n} else {\r\n    _currentChannel = format [\"custom_%1\", _currentChannel - count CHANNELS - 1];\r\n};\r\n\r\n_currentChannel\r\n"},{"name":"ace_common_fnc_debug","file":"common/functions/fnc_debug.sqf","text":"/*\r\n * Author: Glowbal\r\n * Print logging messages through the ACE framework.\r\n *\r\n * Arguments:\r\n * 0: Message <ANY>\r\n * 1: Level (default: 2) <NUMBER>\r\n *\r\n * Return Value:\r\n * Message is Printed <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define DEFAULT_LOGGING_LEVEL -1\r\n#define DEFAULT_TEXT_DISPLAY -1\r\n\r\nparams [\"_msg\", [\"_level\", 2, [0]]];\r\n\r\nprivate _defaultLoglevel = missionNamespace getVariable [QGVAR(LOGLEVEL), DEFAULT_LOGGING_LEVEL];\r\n\r\nif (_defaultLoglevel < 0) exitWith {false};\r\n\r\nprivate _defaultLogDisplayLevel = [GVAR(LOGDISPLAY_LEVEL), DEFAULT_TEXT_DISPLAY] select isNil QGVAR(LOGDISPLAY_LEVEL);\r\n\r\nif (_level <= _defaultLoglevel) then {\r\n    private _prefix = [\"Unknown\", \"Error\", \"Warn\", \"Debug\", \"Info\"] select ([0, 1, 2, 3] find _level + 1);\r\n    private _message = format [\"[ACE %1] %2\", _prefix, _msg];\r\n\r\n    if (_level <= _defaultLogDisplayLevel) then {\r\n        systemChat _message;\r\n    };\r\n    diag_log _message;\r\n\r\n\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_common_fnc_debugModule","file":"common/functions/fnc_debugModule.sqf","text":"/*\r\n * Author: Glowbal\r\n * ?\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_entity\"];\r\n\r\nGVAR(LOGDISPLAY_LEVEL) = call compile (_entity getVariable [\"logDisplayLevel\",\"4\"]);\r\nGVAR(LOGLEVEL) = call compile (_entity getVariable [\"logLevel\",\"4\"]);\r\n"},{"name":"ace_common_fnc_defineVariable","file":"common/functions/fnc_defineVariable.sqf","text":"/*\r\n * Author: Glowbal\r\n * Define a variable for the ACE variable framework\r\n *\r\n * Arguments:\r\n * 0: Name <STRING>\r\n * 1: defaultValue <ANY>\r\n * 2: publicFlag <BOOL>\r\n * 3: category <STRING>\r\n * 4: type (default: 0) <NUMBER>\r\n * 5: persistentFlag (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_value\", \"_defaultGlobal\", \"_category\", [\"_code\", 0], [\"_persistent\", false]];\r\n\r\nif (isNil \"_defaultGlobal\") exitWith {};\r\n\r\nif (!(_name isEqualType \"\")) exitwith {\r\n    [format [\"Tried to the deinfe a variable with an invalid name: %1 Arguments: %2\", _name, _this]] call FUNC(debug);\r\n};\r\n\r\nif (isNil QGVAR(OBJECT_VARIABLES_STORAGE)) then {\r\n    GVAR(OBJECT_VARIABLES_STORAGE) = [];\r\n};\r\n\r\nGVAR(OBJECT_VARIABLES_STORAGE) pushBack [_name, _value, _defaultGlobal, _category, _code, _persistent];\r\n\r\nmissionNamespace setVariable [QGVAR(OBJECT_VARIABLES_STORAGE_) + _name, [_name, _value, _defaultGlobal, _category, _code, _persistent]];\r\n"},{"name":"ace_common_fnc_deprecateComponent","file":"common/functions/fnc_deprecateComponent.sqf","text":"/*\r\n * Author: Glowbal\r\n * Mark a component as deprecated and switches it to a new component if that is available\r\n *\r\n * Arguments:\r\n * 0: Component <Array>\r\n * 1: New component <Array>\r\n * 2: Version when the compent will be removed <String>\r\n *\r\n * Return Value:\r\n * Replaced by new component <Boolean>\r\n *\r\n * Public: No\r\n *\r\n * Example:\r\n * [[\"ace_sitting\", \"ace_sitting_enabled\"], [\"acex_sitting\", \"acex_sitting_enabled\"], \"3.7.0\"] call ace_common_fnc_deprecateComponent;\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_oldComponent\", \"_newComponent\", \"_version\"];\r\n\r\n_oldComponent params [\"_oldComponentName\", \"_oldSettingName\"];\r\n_newComponent params [\"_newComponentName\", \"_newSettingName\"];\r\n\r\nprivate _isReplacementAvailable = isClass (configFile >> \"CfgPatches\" >> _newComponentName);\r\nprivate _isDeprecatedLoaded = missionNamespace getvariable [_oldSettingName, false];\r\nprivate _isReplacementLoaded = missionNamespace getvariable [_newSettingName, false];\r\n\r\nif (_isDeprecatedLoaded && {_isReplacementAvailable} && {!_isReplacementLoaded}) then {\r\n    [_newSettingName, true, true, true] call FUNC(setSetting);\r\n};\r\n\r\nif (_isDeprecatedLoaded && {!_isReplacementLoaded}) then {\r\n    private _componentVersion = getText (configFile >> \"CfgPatches\" >> _oldComponentName >> \"version\");\r\n    ((_componentVersion splitString \".\") apply {parseNumber _x}) params [\"_componentMajor\", \"_componentMinor\", \"_componentPatch\"];\r\n    ((_version splitString \".\") apply {parseNumber _x}) params [\"_major\", \"_minor\", \"_patch\"];\r\n\r\n    switch (true) do {\r\n        case (_componentMajor >= _major && {_componentMinor >= _minor} && {_componentPatch >= _patch}): { // Removed from this version\r\n            private _message = format[\r\n                \"Component %1 is deprecated. It has been replaced by %2. The component %1 is no longer usable on this version. \", _oldComponentName, _newComponentName, _version];\r\n            systemChat format[\"ACE [ERROR] - %1\", _message];\r\n            ACE_LOGERROR(_message);\r\n        };\r\n        case (_componentMajor >= _major && {_componentMinor >= _minor-1}): { // Removed the next this version\r\n            private _message = format[\r\n                \"Component %1 is deprecated. It is replaced by %2. Please disable %1 and make use of %2. \"\r\n                + \"The component (%1) will no longer be available from version %3 and later.\", _oldComponentName, _newComponentName, _version];\r\n            systemChat format[\"ACE [WARNING] - %1\", _message];\r\n            ACE_LOGWARNING(_message);\r\n        };\r\n        case (_componentMajor == _major && {_componentMinor >= _minor - 2}): { // we are in a version leading up to removal\r\n            private _message = format[\r\n                \"Component %1 is deprecated. It is replaced by %2. Please disable %1 and make use of %2. \"\r\n                + \"The component (%1) will no longer be available from version %3 and later.\", _oldComponentName, _newComponentName, _version];\r\n            ACE_LOGWARNING(_message);\r\n        };\r\n        default {\r\n        };\r\n    };\r\n};\r\n\r\n_isReplacementAvailable;\r\n"},{"name":"ace_common_fnc_deviceKeyFindValidIndex","file":"common/functions/fnc_deviceKeyFindValidIndex.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Finds next valid index for the device array.\r\n *\r\n * Arguments:\r\n * 0: Offset from currentIndex (use 1 to find next valid after current) or a displayName string (default: 0)<STRING, NUMBER>\r\n *\r\n * Return Value:\r\n * The new index (-1 if no valid) <NUMBER>\r\n *\r\n * Example:\r\n * [] call ace_common_fnc_deviceKeyFindValidIndex\r\n * [\"kestral4500\"] call ace_common_fnc_deviceKeyFindValidIndex\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_searchOffsetOrName\", 0]];\r\n\r\nprivate _validIndex = -1;\r\n\r\nif (_searchOffsetOrName isEqualType \"\") then {\r\n    {\r\n        if (_x select 0 == _searchOffsetOrName) exitWith {\r\n            _validIndex = _forEachIndex;\r\n        };\r\n    } forEach GVAR(deviceKeyHandlingArray);\r\n} else {\r\n    if (count GVAR(deviceKeyHandlingArray) > 0) then {\r\n        _baseIndex = [GVAR(deviceKeyCurrentIndex) + _searchOffsetOrName, 0] select (GVAR(deviceKeyCurrentIndex) == -1);\r\n\r\n        for \"_offset\" from _baseIndex to (count GVAR(deviceKeyHandlingArray) - 1 + _baseIndex) do {\r\n            private _realIndex = _offset % (count GVAR(deviceKeyHandlingArray));\r\n\r\n            if ([] call ((GVAR(deviceKeyHandlingArray) select _realIndex) select 2)) exitWith {\r\n                _validIndex = _realIndex;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nGVAR(deviceKeyCurrentIndex) = _validIndex;\r\n\r\nGVAR(deviceKeyCurrentIndex)\r\n"},{"name":"ace_common_fnc_deviceKeyRegisterNew","file":"common/functions/fnc_deviceKeyRegisterNew.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Finds next valid index for the device array.\r\n *\r\n * Arguments:\r\n * 0: Localized Device Display Name <STRING>\r\n * 1: Image <STRING>\r\n * 2: Condtion Code (do they have the device) <CODE>\r\n * 3: Toggle Code (on home press) <CODE>\r\n * 4: Close Code (on ctrl-home press) <CODE>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [(localize \"STR_ACE_microdagr_itemName\"), QPATHTOF(images\\microDAGR_item.paa), _conditionCode, _toggleCode, _closeCode] call ace_common_fnc_deviceKeyRegisterNew\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_displayName\", \"_iconImage\", \"_conditionCode\", \"_toggleCode\", \"_closeCode\"];\r\n\r\nGVAR(deviceKeyHandlingArray) pushBack [_displayName, _iconImage, _conditionCode, _toggleCode, _closeCode];\r\n\r\n[] call FUNC(deviceKeyFindValidIndex);\r\n"},{"name":"ace_common_fnc_disableAI","file":"common/functions/fnc_disableAI.sqf","text":"/*\r\n * Author: Glowbal, KoffeinFlummi\r\n * Disables/Enables AI\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Disable AI <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [bob, true] call ace_common_fnc_disableAI\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_disable\", true, [false]]];\r\n\r\nif (!local _unit) exitWith {};\r\n\r\nif !([_unit] call EFUNC(common,isPlayer)) then {\r\n    if (_disable) then {\r\n        _unit disableAI \"MOVE\";\r\n        _unit disableAI \"TARGET\";\r\n        _unit disableAI \"AUTOTARGET\";\r\n        _unit disableAI \"FSM\";\r\n        _unit disableConversation true;\r\n    } else {\r\n        //Sanity check to make sure we don't enable unconsious AI\r\n        if (_unit getVariable [\"ace_isunconscious\", false] && alive _unit) exitWith {\r\n            ERROR(\"Enabling AI for unconsious unit\");\r\n        };\r\n\r\n        _unit enableAI \"MOVE\";\r\n        _unit enableAI \"TARGET\";\r\n        _unit enableAI \"AUTOTARGET\";\r\n        _unit enableAI \"FSM\";\r\n        _unit disableConversation false;\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_disableUserInput","file":"common/functions/fnc_disableUserInput.sqf","text":"/*\r\n * Author: commy2\r\n * Disables key input. ESC can still be pressed to open the menu.\r\n *\r\n * Arguments:\r\n * 0: True to disable key inputs, false to re-enable them <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_state\"];\r\n\r\nif (_state) then {\r\n    disableSerialization;\r\n\r\n    if (!isNull (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull])) exitWith {};\r\n    if (!isNil QGVAR(disableInputPFH)) exitWith {};\r\n\r\n    // end TFAR and ACRE2 radio transmissions\r\n    call FUNC(endRadioTransmission);\r\n\r\n    // Close map\r\n    if (visibleMap && {!(player getVariable [\"ACE_canSwitchUnits\", false])}) then {\r\n        openMap false;\r\n    };\r\n\r\n    closeDialog 0;\r\n    createDialog QGVAR(DisableMouse_Dialog);\r\n\r\n    private _dlg = uiNamespace getVariable QGVAR(dlgDisableMouse);\r\n\r\n    _dlg displayAddEventHandler [\"KeyDown\", {\r\n        params [\"\", \"_key\"];\r\n\r\n        if (_key == 1 && {alive player}) then {\r\n            createDialog ([\"RscDisplayInterrupt\", \"RscDisplayMPInterrupt\"] select isMultiplayer);\r\n\r\n            disableSerialization;\r\n\r\n            private _dlg = findDisplay 49;\r\n\r\n            for \"_index\" from 100 to 2000 do {\r\n                (_dlg displayCtrl _index) ctrlEnable false;\r\n            };\r\n\r\n            private _ctrl = _dlg displayctrl 103;\r\n            _ctrl ctrlSetEventHandler [\"buttonClick\", QUOTE(while {!isNull (uiNamespace getVariable [ARR_2(QUOTE(QGVAR(dlgDisableMouse)),displayNull)])} do {closeDialog 0}; failMission 'LOSER'; [false] call DFUNC(disableUserInput);)];\r\n            _ctrl ctrlEnable true;\r\n            _ctrl ctrlSetText \"ABORT\";\r\n            _ctrl ctrlSetTooltip \"Abort.\";\r\n\r\n            _ctrl = _dlg displayctrl ([104, 1010] select isMultiplayer);\r\n            _ctrl ctrlSetEventHandler [\"buttonClick\", QUOTE(closeDialog 0; player setDamage 1; [false] call DFUNC(disableUserInput);)];\r\n            _ctrl ctrlEnable (call {private _config = missionConfigFile >> \"respawnButton\"; !isNumber _config || {getNumber _config == 1}});\r\n            _ctrl ctrlSetText \"RESPAWN\";\r\n            _ctrl ctrlSetTooltip \"Respawn.\";\r\n        };\r\n\r\n        if (_key in actionKeys \"TeamSwitch\" && {teamSwitchEnabled}) then {\r\n            (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\r\n\r\n            private _acc = accTime;\r\n            teamSwitch;\r\n            setAccTime _acc;\r\n        };\r\n\r\n        if (_key in actionKeys \"CuratorInterface\" && {getAssignedCuratorLogic player in allCurators}) then {\r\n            (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\r\n            openCuratorInterface;\r\n        };\r\n\r\n        if (_key in actionKeys \"ShowMap\" && {player getVariable [\"ACE_canSwitchUnits\", false]}) then {\r\n            (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\r\n            openMap true;\r\n        };\r\n\r\n        if (isServer || {serverCommandAvailable \"#kick\"} || {player getVariable [\"ACE_isUnconscious\", false] && {(call FUNC(player)) getVariable [QEGVAR(medical,AllowChatWhileUnconscious), missionNamespace getVariable [QEGVAR(medical,AllowChatWhileUnconscious), false]]}}) then {\r\n            if (!(_key in (actionKeys \"DefaultAction\" + actionKeys \"Throw\")) && {_key in (actionKeys \"Chat\" + actionKeys \"PrevChannel\" + actionKeys \"NextChannel\")}) then {\r\n                _key = 0;\r\n            };\r\n        };\r\n\r\n        _key > 0\r\n    }];\r\n\r\n    _dlg displayAddEventHandler [\"KeyUp\", {true}];\r\n\r\n    GVAR(disableInputPFH) = [{\r\n        if (isNull (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) && {!visibleMap && isNull findDisplay 49 && isNull findDisplay 312 && isNull findDisplay 632}) then {\r\n            [GVAR(disableInputPFH)] call CBA_fnc_removePerFrameHandler;\r\n            GVAR(disableInputPFH) = nil;\r\n            [true] call FUNC(disableUserInput);\r\n        };\r\n    }, 0, []] call CBA_fnc_addPerFrameHandler;\r\n} else {\r\n    if (!isNil QGVAR(disableInputPFH)) then {\r\n        [GVAR(disableInputPFH)] call CBA_fnc_removePerFrameHandler;\r\n        GVAR(disableInputPFH) = nil;\r\n    };\r\n\r\n    (uiNamespace getVariable [QGVAR(dlgDisableMouse), displayNull]) closeDisplay 0;\r\n};\r\n"},{"name":"ace_common_fnc_displayIcon","file":"common/functions/fnc_displayIcon.sqf","text":"/*\r\n * Author: Glowbal\r\n * Draw progress bar and execute given function if succesful.\r\n * Finish/Failure/Conditional are all passed [args, elapsedTime, totalTime, errorCode]\r\n *\r\n * Arguments:\r\n * 0: icon ID <STRING>\r\n * 1: show <BOOL>\r\n * 2: Icon Path <STRING>\r\n * 3: Icon color <ARRAY>\r\n * 4: timeAlive. -1 = forever (default: 6) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"myID\", true, QPATHTOF(data\\icon_group.paa), [1,1,1,1], 0] call ace_gui_fnc_displayIcon;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// positions for the icon UI\r\n#define RIGHT_SIDE    (safezoneW + safezoneX)\r\n#define LEFT_SIDE     safezoneX\r\n#define TOP_SIDE      safeZoneY\r\n#define BOTTOM_SIDE   (safeZoneH + safezoneY)\r\n#define ICON_WIDTH    (2 * (((safezoneW / safezoneH) min 1.2) / 40))\r\n#define X_POS_ICONS   (RIGHT_SIDE - (1.5 * ICON_WIDTH))\r\n#define Y_POS_ICONS   (TOP_SIDE + (2.5 * ICON_WIDTH))\r\n#define DIFFERENCE_ICONS (1.1 * ICON_WIDTH)\r\n#define X_POS_ICONS_SECOND (RIGHT_SIDE - (4.4 * ICON_WIDTH))\r\n#define Y_POS_ICONS_SECOND (TOP_SIDE + (1.1 * ICON_WIDTH))\r\n\r\n// setting values\r\n#define TOP_RIGHT_DOWN    1\r\n#define TOP_RIGHT_LEFT    2\r\n#define TOP_LEFT_DOWN    3\r\n#define TOP_LEFT_RIGHT    4\r\n\r\n// other constants\r\n#define DEFAULT_TIME    6\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_iconId\", \"_show\", \"_icon\", \"_color\", [\"_timeAlive\", DEFAULT_TIME]];\r\n\r\nprivate _list = missionNamespace getVariable [QGVAR(displayIconList), []];\r\n\r\nprivate _refresh = {\r\n    // Refreshing of all icons..\r\n    private _allControls = missionNamespace getVariable [QGVAR(displayIconListControls), []];\r\n\r\n    {\r\n        ctrlDelete _x;\r\n        false\r\n    } count _allControls;\r\n\r\n    _allControls = [];\r\n\r\n    private _setting = missionNamespace getVariable [QGVAR(settingFeedbackIcons), 0];\r\n\r\n    if (_setting > 0) then {\r\n        {\r\n            _x params [\"\", \"_xicon\", \"_xcolor\"];\r\n\r\n            // +19000 because we want to make certain we are using free IDCs..\r\n            private _ctrl = (findDisplay 46) ctrlCreate [\"RscPicture\", _forEachIndex + 19000];\r\n\r\n            private _position = switch (_setting) do {\r\n                case TOP_RIGHT_DOWN: {[X_POS_ICONS, Y_POS_ICONS + (_forEachIndex * DIFFERENCE_ICONS), ICON_WIDTH, ICON_WIDTH]};\r\n                case TOP_RIGHT_LEFT: {[X_POS_ICONS_SECOND - ((_forEachIndex+3) * DIFFERENCE_ICONS), Y_POS_ICONS_SECOND - (ICON_WIDTH / 2), ICON_WIDTH, ICON_WIDTH]};\r\n                case TOP_LEFT_DOWN: {[LEFT_SIDE + (0.5 * ICON_WIDTH), Y_POS_ICONS + (_forEachIndex * DIFFERENCE_ICONS), ICON_WIDTH, ICON_WIDTH]};\r\n                case TOP_LEFT_RIGHT: {[LEFT_SIDE + (0.5 * ICON_WIDTH) - ((_forEachIndex+3) * DIFFERENCE_ICONS), Y_POS_ICONS_SECOND, ICON_WIDTH, ICON_WIDTH]};\r\n                default {[X_POS_ICONS, Y_POS_ICONS + (_forEachIndex * DIFFERENCE_ICONS), ICON_WIDTH, ICON_WIDTH]};\r\n            };\r\n\r\n            _ctrl ctrlSetPosition _position;\r\n            _ctrl ctrlSetText _xicon;\r\n            _ctrl ctrlSetTextColor _xcolor;\r\n            _ctrl ctrlCommit 0;\r\n            _allControls pushBack _ctrl;\r\n            false\r\n        } forEach (missionNamespace getVariable [QGVAR(displayIconList),[]]);\r\n    };\r\n\r\n    missionNamespace setVariable [QGVAR(displayIconListControls), _allControls];\r\n};\r\n\r\nif (_show) then {\r\n    if ({_x select 0 == _iconId} count _list == 0) then {\r\n        _list pushBack [_iconId, _icon, _color, CBA_missionTime];\r\n    } else {\r\n        {\r\n            if (_x select 0 == _iconId) exitWith {\r\n                _list set [_forEachIndex, [_iconId, _icon, _color, CBA_missionTime]];\r\n            };\r\n        } forEach _list;\r\n    };\r\n\r\n    missionNamespace setVariable [QGVAR(displayIconList), _list];\r\n    call _refresh;\r\n\r\n    if (_timeAlive >= 0) then {\r\n        [{\r\n            [_this select 0, false, \"\", [0,0,0], 0] call FUNC(displayIcon);\r\n        }, [_iconId], _timeAlive, _timeAlive] call CBA_fnc_waitAndExecute;\r\n    };\r\n\r\n} else {\r\n\r\n    if ({_x select 0 == _iconId} count _list == 1) then {\r\n        private _newList = [];\r\n\r\n        {\r\n            if (_x select 0 != _iconId) then {\r\n                _newList pushBack _x;\r\n            };\r\n            false\r\n        } count _list;\r\n\r\n        missionNamespace setVariable [QGVAR(displayIconList), _newList];\r\n        call _refresh;\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_displayText","file":"common/functions/fnc_displayText.sqf","text":"/*\r\n * Author: commy2\r\n * Display a message.\r\n *\r\n * Arguments:\r\n * 0: Message <STRING>\r\n * 1: Play a clicking sound (default: false) <BOOL>\r\n * 2: How long before hiding the message in seconds (default: 2) <NUMBER>\r\n * 3: Priority, higher priority messages will override lesser important ones (default: 0) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_text\", [\"_sound\", false], [\"_delay\", 2], [\"_priority\", 0]];\r\n\r\nif (isNil QGVAR(lastHint)) then {\r\n    GVAR(lastHint) = [0, 0];\r\n};\r\n\r\nif !(typeName _text in [\"STRING\", \"TEXT\"]) then {_text = str _text};\r\n\r\nGVAR(lastHint) params [\"_lastHintTime\", \"_lastHintPriority\"];\r\n\r\nprivate _time = CBA_missionTime;\r\n\r\nif (_time > _lastHintTime + _delay || {_priority >= _lastHintPriority}) then {\r\n    hintSilent _text;\r\n    if (_sound) then {playSound \"ACE_Sound_Click\"};\r\n    GVAR(lastHint) set [0, _time];\r\n    GVAR(lastHint) set [1, _priority];\r\n\r\n    [{if ((_this select 0) == GVAR(lastHint) select 0) then {hintSilent \"\"};}, [_time], _delay, 0] call CBA_fnc_waitAndExecute;\r\n};\r\n"},{"name":"ace_common_fnc_displayTextPicture","file":"common/functions/fnc_displayTextPicture.sqf","text":"/*\r\n * Author: commy2, Glowbal\r\n * Display a structured text with image.\r\n *\r\n * Arguments:\r\n * 0: Text <ANY>\r\n * 1: Image <STRING>\r\n * 2: Image color <ARRAY> (default: [1, 1, 1])\r\n * 3: Target Unit. Will only display if target is the player controlled object <OBJECT> (default: ACE_player)\r\n * 4: Size <NUMBER> (default: 2)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"text\", \"image\", [1, 1, 1], ACE_player, 2] call ace_common_fnc_displayTextPicture\r\n * [\"text\", \"image\", nil, nil, 3] call ace_common_fnc_displayTextPicture\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_text\", \"\"], [\"_image\", \"\", [\"\"]], [\"_imageColor\", [1,1,1], [[]]], [\"_target\", ACE_player, [objNull]], [\"_size\", 2, [0]]];\r\n\r\nif (_target != ACE_player) exitWith {};\r\n\r\nif (typeName _text != \"TEXT\") then {\r\n    if (_text isEqualType []) then {\r\n        if (count _text > 0) then {\r\n            {\r\n                if (_x isEqualType \"\" && {isLocalized _x}) then {\r\n                    _text set [_forEachIndex, localize _x];\r\n                };\r\n            } forEach _text;\r\n\r\n            _text = format _text;\r\n        };\r\n    };\r\n\r\n    if (_text isEqualType \"\" && {isLocalized _text}) then {\r\n        _text = localize _text;\r\n    };\r\n\r\n    _text = parseText format [\"<t align='center'>%1</t>\", _text];\r\n};\r\n\r\n_text = composeText [parseText format [\"<img size='2' align='center' color='%2' image='%1'/>\", _image, _imageColor call BIS_fnc_colorRGBtoHTML], lineBreak, _text];\r\n\r\n[_text, _size] call FUNC(displayTextStructured);\r\n"},{"name":"ace_common_fnc_displayTextStructured","file":"common/functions/fnc_displayTextStructured.sqf","text":"/*\r\n * Author: commy2, Glowbal\r\n * Display a structured text.\r\n *\r\n * Arguments:\r\n * 0: Text <ANY>\r\n * 1: Size of the textbox <NUMBER> (default: 1.5)\r\n * 2: Target Unit. Will only display if target is the player controlled object <OBJECT> (default: ACE_player)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n *\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_text\", \"\"], [\"_size\", 1.5, [0]], [\"_target\", ACE_player, [objNull]]];\r\n\r\nif (_target != ACE_player) exitWith {};\r\n\r\nif (typeName _text != \"TEXT\") then {\r\n    if (_text isEqualType []) then {\r\n        if (count _text > 0) then {\r\n            {\r\n                if (_x isEqualType \"\" && {isLocalized _x}) then {\r\n                    _text set [_foreachIndex, localize _x];\r\n                };\r\n            }foreach _text;\r\n            _text = format _text;\r\n        };\r\n    };\r\n    if (_text isEqualType \"\" && {isLocalized _text}) then {\r\n        _text = localize _text;\r\n    };\r\n    _text = composeText [lineBreak, parseText format [\"<t align='center'>%1</t>\", _text]];\r\n};\r\n\r\nprivate _isShown = ctrlShown (uiNamespace getVariable [\"ACE_ctrlHint\", controlNull]);\r\n\r\n(\"ACE_RscHint\" call BIS_fnc_rscLayer) cutRsc [\"ACE_RscHint\", \"PLAIN\", 0, true];\r\n\r\ndisableSerialization;\r\nprivate _ctrlHint = uiNamespace getVariable \"ACE_ctrlHint\";\r\n\r\n_ctrlHint ctrlSetBackgroundColor GVAR(displayTextColor);\r\n_ctrlHint ctrlSetTextColor GVAR(displayTextFontColor);\r\n/*\r\n// This does not function at the moment. Has been disabled until it fixed.\r\nprivate _xPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_X\", ((safezoneX + safezoneW) - (10 *(((safezoneW / safezoneH) min 1.2) / 40)) - 2.9 *(((safezoneW / safezoneH) min 1.2) / 40))];\r\nprivate _yPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_Y\", safeZoneY + 0.175 * safezoneH];\r\nprivate _wPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_W\", (10 *(((safezoneW / safezoneH) min 1.2) / 40))];\r\nprivate _hPos = profilenamespace getVariable [\"IGUI_GRID_ACE_displayText_H\", (2 *((((safezoneW / safezoneH) min 1.2) / 1.2) / 25))];\r\n*/\r\n\r\nprivate _xPos = ((safezoneX + safezoneW) - (10 *(((safezoneW / safezoneH) min 1.2) / 40)) - 2.9 *(((safezoneW / safezoneH) min 1.2) / 40));\r\nprivate _yPos = safeZoneY + 0.175 * safezoneH;\r\nprivate _wPos =  (10 *(((safezoneW / safezoneH) min 1.2) / 40));\r\nprivate _hPos = (2 *((((safezoneW / safezoneH) min 1.2) / 1.2) / 25));\r\n\r\n// Zeus Interface Open and Display would be under the \"CREATE\" list\r\nif (!isNull curatorCamera) then {\r\n    _xPos = _xPos min ((safezoneX + safezoneW - 12.5 * (((safezoneW / safezoneH) min 1.2) / 40)) - _wPos);\r\n};\r\n\r\nprivate _position = [_xPos, _yPos, _wPos, _size * _hPos];\r\n\r\n_ctrlHint ctrlSetPosition _position;\r\n_ctrlHint ctrlCommit 0;\r\n\r\n_ctrlHint ctrlSetStructuredText _text;\r\n_ctrlHint ctrlSetPosition _position;\r\n_ctrlHint ctrlCommit ([0.5, 0] select _isShown);\r\n"},{"name":"ace_common_fnc_doAnimation","file":"common/functions/fnc_doAnimation.sqf","text":"/*\r\n * Author: commy2\r\n * Execute an animation. This is used to not break things like the unconsciousness animation.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Animation <STRING>\r\n * 2: Priority of the animation. (default: 0) <NUMBER>\r\n *     0 = PlayMove\r\n *     1 = PlayMoveNow\r\n *     2 = SwitchMove (no transitional animation, doesn't overwrite priority 1)\r\n * 3: Force overwritting unconscious (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"AmovPercMstpSnonWnonDnon_exerciseKata\", 1] call ace_common_fnc_doAnimation\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_animation\", [\"_priority\", 0], [\"_force\", false]];\r\nTRACE_4(\"params\",_unit,_animation,_priority,_force);\r\n\r\n// don't overwrite more important animations\r\nif (_unit getVariable [\"ACE_isUnconscious\", false] && {(_animation != \"Unconscious\")} && {!_force}) exitWith {};\r\n\r\n// don't go unconscious if the unit isn't unconscious\r\nif (_animation == \"Unconscious\" && {!((_unit getVariable [\"ACE_isUnconscious\", false]) || (_unit getVariable [\"ACE_isDead\", false]))}) exitWith {};\r\n\r\n// switchMove \"\" no longer works in dev 1.37\r\nif (_animation == \"\") then {\r\n    _animation = [_unit] call FUNC(getDefaultAnim);\r\n};\r\n\r\n//if (_animation == animationState _unit) exitWith {};\r\n\r\nTRACE_2(\"\",local _unit,vehicle _unit);\r\nswitch (_priority) do {\r\n    case 0: {\r\n        if (_unit == vehicle _unit) then {\r\n            [QGVAR(playMove), [_unit, _animation], _unit] call CBA_fnc_targetEvent;\r\n        } else {\r\n            // Execute on all machines. PlayMove and PlayMoveNow are bugged: They have no global effects when executed on remote machines inside vehicles.\r\n            [QGVAR(playMove), [_unit, _animation]] call CBA_fnc_globalEvent;\r\n        };\r\n    };\r\n    case 1: {\r\n        if (_unit == vehicle _unit) then {\r\n            [QGVAR(playMoveNow), [_unit, _animation], _unit] call CBA_fnc_targetEvent;\r\n        } else {\r\n            // Execute on all machines. PlayMove and PlayMoveNow are bugged: They have no global effects when executed on remote machines inside vehicles.\r\n            [QGVAR(playMoveNow), [_unit, _animation]] call CBA_fnc_globalEvent;\r\n        };\r\n    };\r\n    case 2: {\r\n        // try playMoveNow first\r\n        if (_unit == vehicle _unit) then {\r\n            [QGVAR(playMoveNow), [_unit, _animation], _unit] call CBA_fnc_targetEvent;\r\n        } else {\r\n            // Execute on all machines. PlayMove and PlayMoveNow are bugged: They have no global effects when executed on remote machines inside vehicles.\r\n            [QGVAR(playMoveNow), [_unit, _animation]] call CBA_fnc_globalEvent;\r\n        };\r\n\r\n        // if animation doesn't respond, do switchMove\r\n        if (animationState _unit != _animation) then {\r\n            TRACE_1(\"did not respond to playMoveNow\",animationState _unit);\r\n            // Execute on all machines. SwitchMove has local effects.\r\n            [QGVAR(switchMove), [_unit, _animation]] call CBA_fnc_globalEvent;\r\n        };\r\n    };\r\n    default {};\r\n};\r\n"},{"name":"ace_common_fnc_dropBackpack","file":"common/functions/fnc_dropBackpack.sqf","text":"/*\r\n * Author: commy2\r\n * Drops a backback. Also returns the ground wepaon holder object of the dropped backpack.\r\n *\r\n * Arguments:\r\n * 0: Unit that has a backpack <OBJECT>\r\n *\r\n * Return Value:\r\n * Ground wepaon holder with backpack <OBJECT>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nprivate _backpackObject = backpackContainer _unit;\r\n\r\n_unit addBackpack \"ACE_FakeBackpack\";\r\nremoveBackpack _unit;\r\n\r\nobjectParent _backpackObject // return\r\n"},{"name":"ace_common_fnc_dumpArray","file":"common/functions/fnc_dumpArray.sqf","text":"/*\r\n * Author: ?\r\n * Dumps an array to the RPT, showing the depth of each element.\r\n *\r\n * Arguments:\r\n * 0: Array to be dumped <ARRAY>\r\n * 1: Depth <NUMBER><OPTIONAL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[0, [1,2], [[3]]]] call ace_common_fnc_dumpArray\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_var\", [\"_depth\", 0, [0]]];\r\n\r\nprivate _pad = \"\";\r\n\r\nfor \"_i\" from 0 to _depth do {\r\n    _pad = _pad + toString [9];\r\n};\r\n\r\n_depth = _depth + 1;\r\n\r\nif (IS_ARRAY(_var)) then {\r\n    if (_var isEqualTo []) then {\r\n        diag_log text format [\"%1[],\", _pad];\r\n    } else {\r\n        diag_log text format [\"%1[\", _pad];\r\n\r\n        {\r\n            [_x, _depth] call FUNC(dumpArray);\r\n            false\r\n        } count _var;\r\n\r\n        diag_log text format [\"%1],\", _pad];\r\n    };\r\n} else {\r\n    diag_log text format [\"%1%2\", _pad, _var];\r\n};\r\n"},{"name":"ace_common_fnc_dumpPerformanceCounters","file":"common/functions/fnc_dumpPerformanceCounters.sqf","text":"/*\r\n * Author: ?\r\n * Dumps performance counter statistics into Logs.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndiag_log text format [\"REGISTERED ACE PFH HANDLERS\"];\r\ndiag_log text format [\"-------------------------------------------\"];\r\n\r\nif (!isNil \"ACE_PFH_COUNTER\") then {\r\n    {\r\n        _x params [\"_pfh\", \"_parameters\"];\r\n\r\n        private _isActive = [\"ACTIVE\", \"REMOVED\"] select isNil {CBA_common_PFHhandles select (_pfh select 0)};\r\n\r\n        diag_log text format [\"Registered PFH: id=%1 [%2, delay %3], %4:%5\", _pfh select 0, _isActive, _parameters select 1, _pfh select 1, _pfh select 2];\r\n        false\r\n    } count ACE_PFH_COUNTER;\r\n};\r\n\r\ndiag_log text format [\"ACE COUNTER RESULTS\"];\r\ndiag_log text format [\"-------------------------------------------\"];\r\n\r\n{\r\n    private _counterEntry = _x;\r\n    private _iter = 0;\r\n    private _total = 0;\r\n    private _count = 0;\r\n    private _averageResult = 0;\r\n\r\n    if (count _counterEntry > 3) then {\r\n        // calc\r\n        {\r\n            if (_iter > 2) then {\r\n                _count = _count + 1;\r\n                private _delta = (_x select 1) - (_x select 0);\r\n\r\n                _total = _total + _delta;\r\n            };\r\n\r\n            _iter = _iter + 1;\r\n            false\r\n        } count _counterEntry;\r\n\r\n        // results\r\n        _averageResult = (_total / _count) * 1000;\r\n\r\n        // dump results\r\n        diag_log text format [\"%1: Average: %2s / %3 = %4ms\", _counterEntry select 0, _total, _count, _averageResult];\r\n    } else {\r\n        diag_log text format [\"%1: No results\", _counterEntry select 0];\r\n    };\r\n    false\r\n} count ACE_COUNTERS;\r\n\r\n/*\r\n// Dump PFH Trackers\r\ndiag_log text format[\"ACE_PERFORMANCE_EXCESSIVE_STEP_TRACKER\"];\r\ndiag_log text format[\"-------------------------------------------\"];\r\n{\r\n    private _delay = _x select 2;\r\n    //if(_delay > 0) then { _delay = _delay / 1000; };\r\n\r\n    diag_log text format[\"%1: %2s, delay=%3, handle=%4\",(_x select 0), _delay, (_x select 3), (_x select 4)];\r\n} forEach ACE_PERFORMANCE_EXCESSIVE_STEP_TRACKER;\r\n\r\n// Dump PFH Trackers\r\ndiag_log text format[\"ACE_PERFORMANCE_EXCESSIVE_FRAME_TRACKER\"];\r\ndiag_log text format[\"-------------------------------------------\"];\r\n{\r\n    private _delta = _x select 1;\r\n    //if(_delta > 0) then { _delta = _delta / 1000; };\r\n    diag_log text format[\"  DELTA: %1s\", _delta];\r\n} forEach ACE_PERFORMANCE_EXCESSIVE_FRAME_TRACKER;\r\n\r\n//{\r\n//\r\n//} forEach ACRE_EXCESSIVE_FRAME_TRACKER;\r\n\r\n*/\r\n"},{"name":"ace_common_fnc_endRadioTransmission","file":"common/functions/fnc_endRadioTransmission.sqf","text":"/*\r\n * Author: commy2\r\n *\r\n * End radio transmissions of addons TFAR and ACRE2. TFAR v0.9.7, ACRE Public Beta 2.0.3.571\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// ACRE\r\nif (isClass (configFile >> \"CfgPatches\" >> \"acre_main\")) then {\r\n    [-1] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\r\n    [0] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\r\n    [1] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\r\n    [2] call acre_sys_core_fnc_handleMultiPttKeyPressUp;\r\n};\r\n\r\n// TFAR\r\nif (isClass (configFile >> \"CfgPatches\" >> \"task_force_radio\")) then {\r\n    call TFAR_fnc_onSwTangentReleased;\r\n    call TFAR_fnc_onAdditionalSwTangentReleased;\r\n    call TFAR_fnc_onLRTangentReleased;\r\n    call TFAR_fnc_onAdditionalLRTangentReleased;\r\n    call TFAR_fnc_onDDTangentReleased;\r\n};\r\n"},{"name":"ace_common_fnc_eraseCache","file":"common/functions/fnc_eraseCache.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Deletes a cached result\r\n *\r\n * Arguments:\r\n * 0: Namespace to store the cache on <NAMESPACE>\r\n * 1: Cache uid <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_namespace\", \"_uid\"];\r\n\r\n_namespace setVariable [_uid, nil];\r\n"},{"name":"ace_common_fnc_errorMessage","file":"common/functions/fnc_errorMessage.sqf","text":"/*\r\n * Author: commy2, based on BIS_fnc_errorMsg and BIS_fnc_guiMessage by Karel Moricky (BI)\r\n * Stops simulation and opens a textbox with error message.\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nendLoadingScreen;\r\n\r\n// no message without player possible\r\nif (!hasInterface) exitWith {};\r\n\r\n// wait for display\r\nif (isNull (call BIS_fnc_displayMission)) exitWith {\r\n    [{\r\n        if (isNull (call BIS_fnc_displayMission)) exitWith {};\r\n\r\n        (_this select 0) call FUNC(errorMessage);\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n    }, 1, _this] call CBA_fnc_addPerFrameHandler;\r\n};\r\n\r\nparams [\"_textHeader\", \"_textMessage\", [\"_onOK\", {}], [\"_onCancel\", {}]];\r\n\r\nif (_textMessage isEqualType \"\") then {\r\n    _textMessage = parseText _textMessage;\r\n};\r\n\r\n(ARR_SELECT(_this,4,call BIS_fnc_displayMission)) createDisplay \"RscDisplayCommonMessagePause\";\r\n\r\nprivate _display = uiNamespace getVariable \"RscDisplayCommonMessage_display\";\r\nprivate _ctrlRscMessageBox =          _display displayCtrl 2351;\r\nprivate _ctrlBcgCommonTop =           _display displayCtrl 235100;\r\nprivate _ctrlBcgCommon =              _display displayCtrl 235101;\r\nprivate _ctrlText =                   _display displayCtrl 235102;\r\nprivate _ctrlBackgroundButtonOK =     _display displayCtrl 235103;\r\nprivate _ctrlBackgroundButtonMiddle = _display displayCtrl 235104;\r\nprivate _ctrlBackgroundButtonCancel = _display displayCtrl 235105;\r\nprivate _ctrlButtonOK =               _display displayCtrl 235106;\r\nprivate _ctrlButtonCancel =           _display displayCtrl 235107;\r\n\r\n_ctrlBcgCommonTop ctrlSetText _textHeader;\r\n\r\nprivate _ctrlButtonOKPos = ctrlPosition _ctrlButtonOK;\r\nprivate _ctrlBcgCommonPos = ctrlPosition _ctrlBcgCommon;\r\nprivate _bottomSpaceY = (_ctrlButtonOKPos select 1) - ((_ctrlBcgCommonPos select 1) + (_ctrlBcgCommonPos select 3));\r\n\r\nprivate _ctrlTextPos = ctrlPosition _ctrlText;\r\nprivate _marginX = (_ctrlTextPos select 0) - (_ctrlBcgCommonPos select 0);\r\nprivate _marginY = (_ctrlTextPos select 1) - (_ctrlBcgCommonPos select 1);\r\n\r\n_ctrlText ctrlSetStructuredText _textMessage;\r\nprivate _ctrlTextPosH = ctrlTextHeight _ctrlText;\r\n\r\n_ctrlBcgCommon ctrlSetPosition [\r\n    _ctrlBcgCommonPos select 0,\r\n    _ctrlBcgCommonPos select 1,\r\n    _ctrlBcgCommonPos select 2,\r\n    _ctrlTextPosH + _marginY * 2\r\n];\r\n_ctrlBcgCommon ctrlCommit 0;\r\n\r\n_ctrlText ctrlSetPosition [\r\n    (_ctrlBcgCommonPos select 0) + _marginX,\r\n    (_ctrlBcgCommonPos select 1) + _marginY,\r\n    (_ctrlBcgCommonPos select 2) - _marginX * 2,\r\n    _ctrlTextPosH\r\n];\r\n_ctrlText ctrlCommit 0;\r\n\r\nprivate _bottomPosY = (_ctrlBcgCommonPos select 1) + _ctrlTextPosH + (_marginY * 2) + _bottomSpaceY;\r\n\r\n{\r\n    private _xPos = ctrlPosition _x;\r\n\r\n    _xPos set [1, _bottomPosY];\r\n    _x ctrlSetPosition _xPos;\r\n    _x ctrlCommit 0;\r\n} forEach [\r\n    _ctrlBackgroundButtonOK,\r\n    _ctrlBackgroundButtonMiddle,\r\n    _ctrlBackgroundButtonCancel,\r\n    _ctrlButtonOK,\r\n    _ctrlButtonCancel\r\n];\r\n\r\nprivate _ctrlRscMessageBoxPos = ctrlPosition _ctrlRscMessageBox;\r\nprivate _ctrlRscMessageBoxPosH = _bottomPosY + (_ctrlButtonOKPos select 3);\r\n\r\n_ctrlRscMessageBox ctrlSetPosition [\r\n    0.5 - (_ctrlBcgCommonPos select 2) / 2,\r\n    0.5 - _ctrlRscMessageBoxPosH / 2,\r\n    (_ctrlBcgCommonPos select 2) + 0.5,\r\n    _ctrlRscMessageBoxPosH\r\n];\r\n\r\n_ctrlRscMessageBox ctrlEnable true;\r\n_ctrlRscMessageBox ctrlCommit 0;\r\n\r\nif (_onOK isEqualTo {}) then {\r\n    _ctrlButtonOK ctrlEnable false;\r\n    _ctrlButtonOK ctrlSetFade 0;\r\n    _ctrlButtonOK ctrlSetText \"\";\r\n    _ctrlButtonOK ctrlCommit 0;\r\n} else {\r\n    _ctrlButtonOK ctrlEnable true;\r\n    _ctrlButtonOK ctrlSetFade 0;\r\n    _ctrlButtonOK ctrlSetText localize \"STR_DISP_OK\";\r\n    _ctrlButtonOK ctrlCommit 0;\r\n\r\n    ctrlSetFocus _ctrlButtonOK;\r\n};\r\n\r\nif (_onCancel isEqualTo {}) then {\r\n    _ctrlButtonCancel ctrlEnable false;\r\n    _ctrlButtonCancel ctrlSetFade 0;\r\n    _ctrlButtonCancel ctrlSetText \"\";\r\n    _ctrlButtonCancel ctrlCommit 0;\r\n} else {\r\n    _ctrlButtonCancel ctrlEnable true;\r\n    _ctrlButtonCancel ctrlSetFade 0;\r\n    _ctrlButtonCancel ctrlSetText localize \"STR_DISP_CANCEL\";\r\n    _ctrlButtonCancel ctrlCommit 0;\r\n\r\n    ctrlSetFocus _ctrlButtonCancel;\r\n};\r\n\r\n_ctrlButtonOK ctrlAddEventHandler [\"buttonClick\", {(ctrlParent (_this select 0)) closeDisplay 1; true}];\r\n_ctrlButtonCancel ctrlAddEventHandler [\"buttonClick\", {(ctrlParent (_this select 0)) closeDisplay 2; true}];\r\n\r\nGVAR(errorOnOK) = _onOK;\r\nGVAR(errorOnCancel) = _onCancel;\r\n\r\n_display displayAddEventHandler [\"unload\", {call ([{}, GVAR(errorOnOK), GVAR(errorOnCancel)] select (_this select 1))}];\r\n_display displayAddEventHandler [\"keyDown\", {_this select 1 == 1}];\r\n"},{"name":"ace_common_fnc_execNextFrame","file":"common/functions/fnc_execNextFrame.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Executes a code on the next frame\r\n *\r\n * Arguments:\r\n * 0: Code to execute <CODE>\r\n * 1: Parameters to run the code with <ARRAY>\r\n *\r\n * Return Value:\r\n * PFH handler ID <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_execNextFrame\",\"3.8.0\",\"CBA_fnc_execNextFrame\");\r\n\r\n_this call CBA_fnc_execNextFrame;\r\n"},{"name":"ace_common_fnc_execPersistentFnc","file":"common/functions/fnc_execPersistentFnc.sqf","text":"/*\r\n * Author: commy2\r\n * Execute a function on every machine. Function will also be called upon JIP (postInit). The arguments are stored in (_this select 0), while the assigned namespace is stored in (_this select 1).\r\n *\r\n * Arguments:\r\n * 0: Function arguments <ARRAY>\r\n * 1: Function to execute, has to be defined on the remote machine first <STRING>\r\n * 2: Namespace to save that variable in <OBJECT, NAMESPACE>\r\n * 3: Name. Will overwrite previously defined functions with that name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n *\r\n * Deprecated\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_execPersistentFnc\",\"3.7.0\",\"ace_common_fnc_globalEvent\");\r\n\r\nGVAR(remoteFnc) = _this;\r\n\r\nparams [\"_arguments\", \"_function\", \"_unit\", \"_name\"];\r\nTRACE_4(\"params\", _arguments, _function, _unit, _name);\r\n\r\n_function = call compile _function;\r\n\r\n// execute function on every currently connected machine\r\n[[_arguments, _unit], _this select 1, 2] call FUNC(execRemoteFnc);\r\n\r\n// save persistent function for JIP\r\nprivate _persistentFunctions = _unit getVariable [\"ACE_PersistentFunctions\", []];\r\n\r\n// find index to overwrite function with the same name, add to end otherwise\r\nprivate _index = count _persistentFunctions;\r\n\r\n{\r\n    if (_x select 2 == _name) exitWith {\r\n        _index = _forEachIndex;\r\n    };\r\n} forEach _persistentFunctions;\r\n\r\n// set new value\r\n_persistentFunctions set [_index, [_arguments, _function, _name]];\r\n\r\n// broadcast variable\r\nif (typeName _unit == \"NAMESPACE\") then {\r\n    ACE_PersistentFunctions = _persistentFunctions;\r\n    publicVariable \"ACE_PersistentFunctions\";\r\n} else {\r\n    _unit setVariable [\"ACE_PersistentFunctions\", _persistentFunctions, true];\r\n};\r\n"},{"name":"ace_common_fnc_execRemoteFnc","file":"common/functions/fnc_execRemoteFnc.sqf","text":"/*\r\n * Author: commy2\r\n * Execute a function on a remote machine in mp.\r\n *\r\n * Arguments:\r\n * 0: Function arguments <ARRAY>\r\n * 1: Function to execute, has to be defined on the remote machine first <STRING>\r\n * 2: The function will be executed where this unit is local OR the mode were this function should be executed. (default: 2) <OBJECT, NUMBER>\r\n *     0 = execute on this machine only\r\n *     1 = execute on server\r\n *     2 = execute on all clients + server\r\n *     3 = execute on dedicated only\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n *\r\n * Deprecated\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_execRemoteFnc\",\"3.7.0\",\"ace_common_fnc_globalEvent\");\r\n\r\nGVAR(remoteFnc) = _this;\r\n\r\nparams [\"_arguments\", \"_function\", [\"_unit\", 2]];\r\nTRACE_3(\"params\", _arguments, _function, _unit);\r\n\r\n_function = call compile _function;\r\n\r\nif (_unit isEqualType 0) exitWith {\r\n    switch (_unit) do {\r\n        case 0 : {\r\n            _arguments call _function;\r\n        };\r\n        case 1 : {\r\n            if (isServer) then {\r\n                _arguments call _function;\r\n            } else {\r\n                publicVariableServer QGVAR(remoteFnc);\r\n            };\r\n        };\r\n        case 2 : {\r\n            _arguments call _function;\r\n\r\n            GVAR(remoteFnc) set [2, 0];\r\n            publicVariable QGVAR(remoteFnc);\r\n        };\r\n        case 3 : {\r\n            if (isDedicated) then {\r\n                _arguments call _function;\r\n            } else {\r\n                if (!isServer) then {publicVariableServer QGVAR(remoteFnc)};\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nif (local _unit) then {\r\n    _arguments call _function;\r\n} else {\r\n    if (isServer) then {\r\n        (owner _unit) publicVariableClient QGVAR(remoteFnc);\r\n    } else {\r\n        publicVariableServer QGVAR(remoteFnc);\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_executePersistent","file":"common/functions/fnc_executePersistent.sqf","text":"/*\r\n * Author: commy2\r\n * Execute all Persistent Functions\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\n{\r\n    if (isNil \"_x\") then {\r\n        ACE_LOGERROR_1(\"No arguments and function for remote function. ID: %1\",_forEachIndex);\r\n    } else {\r\n        if (_x isEqualType []) then {\r\n            [_x select 0, _target] call (_x select 1);\r\n        };\r\n    };\r\n} forEach (_target getVariable [\"ACE_PersistentFunctions\", []]);\r\n"},{"name":"ace_common_fnc_filter","file":"common/functions/fnc_filter.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2\r\n * Filters array and removes every element not fitting the condition\r\n *\r\n * Arguments:\r\n * 0: Array to be filtered.\r\n * 1: Code to be evaluated.\r\n *\r\n * Return Value:\r\n * Final array\r\n *\r\n * Public: Yes\r\n *\r\n * Deprecated\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_array\", [], [[]]], [\"_code\", {}, [{}]]];\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_filter\",\"3.7.0\",\"select CODE\");\r\n\r\nprivate _result = [];\r\n\r\n{\r\n    if (_x call _code) then {\r\n        _result pushBack _x;\r\n    };\r\n    false\r\n} count _array;\r\n\r\n_result\r\n"},{"name":"ace_common_fnc_findUnloadPosition","file":"common/functions/fnc_findUnloadPosition.sqf","text":"/*\r\n * Author: PabstMirror, ViperMaul\r\n * Find a safe place near a vehicle to unload something\r\n * Handles Normal Terrain, In Water or On Buildings (Pier, StaticShip)\r\n *\r\n * Arguments:\r\n * 0: Source Vehicle <OBJECT>\r\n * 1: Cargo Classname <STRING>\r\n * 2: Unloader (player) <OBJECT><OPTIONAL>\r\n * 3: Max Distance (meters) <NUMBER><OPTIONAL>\r\n * 4: Check Vehicle is Stable <BOOL><OPTIONAL>\r\n *\r\n * Return Value:\r\n * Unload PositionAGL (Can Be [] if no valid pos found) <ARRAY>\r\n *\r\n * Example:\r\n * [theCar, \"CAManBase\", player, 10, true] call ace_common_fnc_findUnloadPosition;\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n//Number of tests run (effects performance in worst case scenarior where nothing is found VERSUES reliably finding a pos):\r\n#define MAX_TESTS 75\r\n\r\n//Manual collision tests (count and radius):\r\n#define COL_TEST_COUNT 12\r\n\r\nparams [\"_vehicle\", \"_typeOfCargo\", [\"_theUnloader\", objNull], [\"_maxDistance\", 10], [\"_checkVehicleIsStable\", true]];\r\nTRACE_5(\"params\",_vehicle,_typeOfCargo,_theUnloader,_maxDistance,_checkVehicleIsStable);\r\n\r\nscopeName \"main\";\r\n\r\nif (_checkVehicleIsStable) then {\r\n    if (((vectorMagnitude (velocity _vehicle)) > 1.5) || {(!(_vehicle isKindOf \"Ship\")) && {(!isTouchingGround _vehicle) && {((getPos _vehicle) select 2) > 1.5}}}) then {\r\n        TRACE_4(\"bad vehicle state\",_vehicle,velocity _vehicle,isTouchingGround _vehicle,getPos _vehicle);\r\n        [] breakOut \"main\";\r\n    };\r\n};\r\n\r\nprivate _radiusOfItem = 1;\r\nif (_typeOfCargo isKindOf \"CAManBase\") then {\r\n    _radiusOfItem = 1.1;\r\n} else {\r\n    //`sizeOf` is unreliable, and does not work with object types that don't exist on map, so estimate size based on cargo size\r\n    if (isNumber (configFile >> \"CfgVehicles\" >> _typeOfCargo >> QEGVAR(cargo,size))) then {\r\n        _radiusOfItem = (((getNumber (configFile >> \"CfgVehicles\" >> _typeOfCargo >> QEGVAR(cargo,size))) ^ 0.35) max 0.75);\r\n    };\r\n};\r\n\r\nif (isNull _theUnloader) then {_theUnloader = _vehicle;};\r\n\r\n//Ideal unload pos is halfway between unloader and vehicle (at the unloader's height)\r\nprivate _originASL = ((getPosASL _theUnloader) vectorAdd (getPosASL _vehicle)) vectorMultiply 0.5;\r\n_originASL set [2, (getPosASL _theUnloader) select 2];\r\nprivate _originAGL = ASLtoAGL _originASL;\r\n\r\n//Do a manual search for empty pos (handles underwater, buildings or piers)\r\nTRACE_2(\"Checking for unload\",_originAGL,_radiusOfItem);\r\nprivate _rangeToCheck = 0;\r\nwhile {_rangeToCheck < _maxDistance} do {\r\n    private _roundDistance = random _rangeToCheck;\r\n    private _roundAngle = random 360;\r\n    private _roundAGL = _originAGL vectorAdd [(cos _roundAngle) * _roundDistance, (sin _roundAngle) * _roundDistance, 0];\r\n\r\n    private _roundPointIsValid = false;\r\n    if (((AGLtoASL _roundAGL) select 2) > 0) then {\r\n        //Shoot a ray down, and make sure we hit something solid like a building or the ground:\r\n        private _belowRoundArray = lineIntersectsSurfaces [(AGLtoASL _roundAGL) vectorAdd [0,0,0.5], (AGLtoASL _roundAGL) vectorAdd [0,0,-1]];\r\n        TRACE_4(\"Testing for solid\",_roundDistance,_roundAngle,_roundAGL,_belowRoundArray);\r\n        if (!(_belowRoundArray isEqualTo [])) then {\r\n            private _aboveBuilding = (_belowRoundArray select 0) select 2;\r\n            //Point is above something: Terrain(null) or Building\r\n            if ((isNull _aboveBuilding) || {_aboveBuilding isKindOf \"Building\"}) then {\r\n                //Get the real intersection point:\r\n                _roundAGL = ASLtoAGL ((_belowRoundArray select 0) select 0);\r\n                _roundPointIsValid = true;\r\n            };\r\n        };\r\n    } else {\r\n        //Underwater, just unload anywhere\r\n        TRACE_3(\"Under the sea\",_roundDistance,_roundAngle,_roundAGL);\r\n        _roundPointIsValid = true;\r\n    };\r\n\r\n    //Make sure point is valid and do a fast check for people in the way (which sometimes aren't caught by line scaning)\r\n    if (_roundPointIsValid && {(_roundAGL nearEntities [\"Man\", _radiusOfItem]) isEqualTo []}) then {\r\n        for \"_index\" from 0 to (COL_TEST_COUNT -1) do {\r\n            //Scan for colisions with objects with lineIntersectsSurfaces\r\n            private _angle = _index * (360 / COL_TEST_COUNT);\r\n            private _point1ASL = (AGLtoASL _roundAGL) vectorAdd [_radiusOfItem * cos _angle, _radiusOfItem * sin _angle, 0.1];\r\n            private _point2ASL = (AGLtoASL _roundAGL) vectorAdd [-_radiusOfItem * cos _angle, -_radiusOfItem * sin _angle, (_radiusOfItem + 0.5)];\r\n            private _testIntersections = lineIntersectsSurfaces [_point1ASL, _point2ASL];\r\n            if (((count _testIntersections) == 1) && {isNull ((_testIntersections select 0) select 2)}) then {\r\n                private _hitGroundASL = (_testIntersections select 0) select 0;\r\n                private _hitHeightOffset = ((AGLtoASL _roundAGL) select 2) - (_hitGroundASL select 2);\r\n                private _hit2dOffset = _roundAGL distance2D _hitGroundASL;\r\n                private _slope = _hitHeightOffset atan2 _hit2dOffset;\r\n                if (_slope < 25) then { //Ignore ground hit if slope is reasonable\r\n                    _testIntersections = [];\r\n                };\r\n            };\r\n            if (!(_testIntersections isEqualTo [])) exitWith {\r\n                TRACE_2(\"collision low/high\",_roundAGL,_testIntersections);\r\n                _roundPointIsValid = false;\r\n            };\r\n            _point1ASL = (AGLtoASL _roundAGL) vectorAdd [_radiusOfItem * cos _angle, _radiusOfItem * sin _angle, 0.5];\r\n            _point2ASL = (AGLtoASL _roundAGL) vectorAdd [-_radiusOfItem * cos _angle, -_radiusOfItem * sin _angle, 1];\r\n            _testIntersections = lineIntersectsSurfaces [_point1ASL, _point2ASL];\r\n            if (!(_testIntersections isEqualTo [])) exitWith {\r\n                TRACE_2(\"collision mid\",_roundAGL,_testIntersections);\r\n                _roundPointIsValid = false;\r\n            };\r\n        };\r\n        if (_roundPointIsValid) then {\r\n            TRACE_3(\"Valid point found\", _rangeToCheck,_roundAGL, (_originAGL distance _roundAGL));\r\n            //Raise it slightly so we don't sink through the floor:\r\n            (_roundAGL vectorAdd [0,0,0.05]) breakOut \"main\";\r\n        };\r\n    };\r\n    _rangeToCheck = _rangeToCheck + (_maxDistance / MAX_TESTS);\r\n};\r\n\r\nTRACE_1(\"no valid spots found\",_rangeToCheck);\r\n[] //return empty array\r\n"},{"name":"ace_common_fnc_firedEH","file":"common/functions/fnc_firedEH.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Unfied handling of weapon fire\r\n *\r\n * Arguments:\r\n * 0: unit - Object the event handler is assigned to <OBJECT>\r\n * 1: weapon - Fired weapon <STRING>\r\n * 2: muzzle - Muzzle that was used <STRING>\r\n * 3: mode - Current mode of the fired weapon <STRING>\r\n * 4: ammo - Ammo used <STRING>\r\n * 5: magazine - magazine name which was used <STRING>\r\n * 6: projectile - Object of the projectile that was shot <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nBEGIN_COUNTER(firedEH);\r\n\r\nparams [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\"];\r\nTRACE_7(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile);\r\n\r\nif (_unit isKindOf \"CAManBase\") then {\r\n    // The unit it on foot\r\n    if (_unit == ACE_player) then {\r\n        [\"ace_firedPlayer\", _this] call CBA_fnc_localEvent;\r\n    } else {\r\n        if ([_unit] call EFUNC(common,isPlayer)) then {\r\n            [\"ace_firedPlayerNonLocal\", _this] call CBA_fnc_localEvent;\r\n        } else {\r\n            [\"ace_firedNonPlayer\", _this] call CBA_fnc_localEvent;\r\n        };\r\n    };\r\n} else {\r\n    // The unit is a vehicle\r\n    private _vehicle = _unit;\r\n\r\n    // Get the gunner and turret path.\r\n    // Code based on FUNC(getGunner), extracted for efficency.\r\n    private _gunner = objNull;\r\n    private _turret = [];\r\n    {\r\n        if (_weapon in (_unit weaponsTurret _x)) exitWith {\r\n            _gunner = _unit turretUnit _x;\r\n            _turret = _x;\r\n        };\r\n        false\r\n    } count allTurrets [_unit, true];\r\n    // Ensure that at least the pilot is returned if there is no gunner\r\n    if (isManualFire _unit && {isNull _gunner}) then {\r\n        _gunner = effectiveCommander _unit;\r\n    };\r\n\r\n    if (_gunner == ACE_player) then {\r\n        [\"ace_firedPlayerVehicle\", _this] call CBA_fnc_localEvent;\r\n    } else {\r\n        if ([_gunner] call EFUNC(common,isPlayer)) then {\r\n            [\"ace_firedPlayerVehicleNonLocal\", _this] call CBA_fnc_localEvent;\r\n        } else {\r\n            [\"ace_firedNonPlayerVehicle\", _this] call CBA_fnc_localEvent;\r\n        };\r\n    };\r\n};\r\n\r\nEND_COUNTER(firedEH);\r\n"},{"name":"ace_common_fnc_fixCollision","file":"common/functions/fnc_fixCollision.sqf","text":"/*\r\n * Author: commy2\r\n * Attempt to fix PhysX collisions causing unreasonable impact forces and damage.\r\n *\r\n * Arguments:\r\n * Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// allowDamage requires local object\r\nif (!local _this) exitWith {};\r\n\r\n// prevent collision damage\r\n[_this, \"blockDamage\", \"fixCollision\", true] call FUNC(statusEffect_set);\r\n\r\n// re-allow damage after 2 seconds\r\n[{[_this, \"blockDamage\", \"fixCollision\", false] call FUNC(statusEffect_set);}, _this, 2] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_common_fnc_fixFloating","file":"common/functions/fnc_fixFloating.sqf","text":"/*\r\n * Author: commy2\r\n * Attempt to fix floating physx with disabled damage after setPosXXX commands.\r\n * Handles the \"fixFloating\" event\r\n *\r\n * Arguments:\r\n * PhysX object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\n\r\n// setHitPointDamage requires local object\r\nif (!local _object) exitWith {};\r\n//Ignore mans\r\nif (_object isKindOf \"CAManBase\") exitWith {};\r\n\r\n//We need to manually set allowDamage to true for setHitIndex to function\r\n[QGVAR(blockDamage), [_object, 0]] call CBA_fnc_localEvent;\r\n\r\n// save and restore hitpoints, see below why\r\nprivate _hitPointDamages = getAllHitPointsDamage _object;\r\n\r\n// get correct format for objects without hitpoints\r\nif (_hitPointDamages isEqualTo []) then {\r\n    _hitPointDamages = [[],[],[]];\r\n};\r\n\r\n// this prevents physx objects from floating when near other physx objects with allowDamage false\r\n_object setDamage damage _object;\r\n\r\n{\r\n    _object setHitIndex [_forEachIndex, _x];\r\n} forEach (_hitPointDamages select 2);\r\n\r\n//manually re-enable allowDamage to previous setting (ref statusEffect_funcs)\r\nprivate _effectVarName = format [QGVAR(effect_%1), \"blockDamage\"];\r\nprivate _effectNumber = _object getVariable [_effectVarName, 0];\r\n[QGVAR(blockDamage), [_object, _effectNumber]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_common_fnc_fixLoweredRifleAnimation","file":"common/functions/fnc_fixLoweredRifleAnimation.sqf","text":"/*\r\n * Author: commy2\r\n * Fixes the lowered rifle animation\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [ACE_player] call ace_common_fnc_fixLoweredRifleAnimation\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (currentWeapon _unit != \"\" && {currentWeapon _unit == primaryWeapon _unit} && {weaponLowered _unit} && {stance _unit == \"STAND\"} && {vehicle _unit == _unit}) then {\r\n    [_unit, \"amovpercmstpsraswrfldnon\", 0] call FUNC(doAnimation);\r\n};\r\n"},{"name":"ace_common_fnc_fixPosition","file":"common/functions/fnc_fixPosition.sqf","text":"/*\r\n * Author: commy2\r\n *\r\n * Fixes position of an object. E.g. moves object above ground and adjusts to terrain slope. Requires local object.\r\n *\r\n * Arguments:\r\n * Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// setVectorUp requires local object\r\nif (!local _this) exitWith {};\r\n\r\nif ((getText (configFile >> \"CfgVehicles\" >> (typeOf _this) >> \"simulation\")) == \"house\") then {\r\n    //Houses don't have gravity/physics, so make sure they are not floating\r\n    private _posAbove = (getPos _this) select 2;\r\n    TRACE_2(\"house\",_this,_posAbove);\r\n    if (_posAbove > 0.1) then {\r\n        private _newPosASL = (getPosASL _this) vectorDiff [0,0,_posAbove];\r\n        _this setPosASL _newPosASL;\r\n    };\r\n};\r\n\r\nprivate _position = getPos _this;\r\n\r\n// don't place the object below the ground\r\nif (_position select 2 < -0.1) then {\r\n    _position set [2, -0.1];\r\n    _this setPos _position;\r\n};\r\n\r\n// adjust position to sloped terrain, if placed on ground\r\nif (getPosATL _this select 2 == _position select 2) then {\r\n    _this setVectorUp surfaceNormal _position;\r\n};\r\n"},{"name":"ace_common_fnc_getAllDefinedSetVariables","file":"common/functions/fnc_getAllDefinedSetVariables.sqf","text":"/*\r\n * Author: Glowbal\r\n * Returns an 2d array of all variables that have been set on the object\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Limiting Category (default: \"\") <STRING>\r\n *\r\n * Return Value:\r\n * Variable Data <ARRAY>\r\n *   0: Name <STRING>\r\n *   1: typeName <STRING>\r\n *   2: value <ANY>\r\n *   3: publicFlag <BOOL>\r\n *   4: peristentFlag <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", [\"_category\", \"\"]];\r\n\r\nif (isNil QGVAR(OBJECT_VARIABLES_STORAGE)) exitWith {[]};\r\n\r\nprivate _return = [];\r\n\r\n{\r\n    private _val = _object getVariable (_x select 0);\r\n\r\n    if (!isNil \"_val\") then {\r\n        if (_category == \"\" || _category == _x select 3) then {\r\n            _return pushBack [_x select 0, typeName _val, _val, _x select 2, _x select 5];\r\n        };\r\n    };\r\n    false\r\n} count GVAR(OBJECT_VARIABLES_STORAGE);\r\n\r\n_return\r\n"},{"name":"ace_common_fnc_getAllGear","file":"common/functions/fnc_getAllGear.sqf","text":"/*\r\n * Author: bux578, commy2\r\n * Returns an array containing all items of a given unit\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n *  0: Headgear <STRING>\r\n *  1: Goggles <STRING>\r\n *  2: Uniform <STRING>\r\n *  3: Uniform Items <ARRAY>\r\n *  4: Vest <String>\r\n *  5: Vest Items <ARRAY>\r\n *  6: Backback <STRING>\r\n *  7: Backpack Items <ARRAY>\r\n *  8: Rifle <STRING>\r\n *  9: Rifle Items <ARRAY>\r\n * 10: Rifle Magazines <ARRAY>\r\n * 11: Launcher <STRING>\r\n * 12: Launcher Items <ARRAY>\r\n * 13: Launcher Magazines <ARRAY>\r\n * 14: Handgun <STRING>\r\n * 15: Handgun Items <ARRAY>\r\n * 16: Handgun Magazines <ARRAY>\r\n * 17: Assigned Items (map, compass, watch, etc.) <ARRAY>\r\n * 18: Binoculars <STRING>\r\n * 19: Binocular Magazine (E.g. Laserbatteries) <STRING>\r\n *\r\n * Public: Yes\r\n *\r\n * Note: Element 17 includes the Head Mounted Display (HMD)\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_showDeprecated\", true]];\r\n\r\nif (_showDeprecated) then {\r\n    ACE_DEPRECATED(\"ace_common_fnc_getAllGear\",\"3.7.0\",\"getUnitLoadout\");\r\n};\r\n\r\nif (isNull _unit) exitWith {[\r\n    \"\",\r\n    \"\",\r\n    \"\", [],\r\n    \"\", [],\r\n    \"\", [],\r\n    \"\", [\"\",\"\",\"\",\"\"], [],\r\n    \"\", [\"\",\"\",\"\",\"\"], [],\r\n    \"\", [\"\",\"\",\"\",\"\"], [],\r\n    [],\r\n    \"\",\r\n    \"\"\r\n]};\r\n\r\n[\r\n    headgear _unit,\r\n    goggles _unit,\r\n    uniform _unit, uniformItems _unit,\r\n    vest _unit, vestItems _unit,\r\n    backpack _unit, backpackItems _unit,\r\n    primaryWeapon _unit, primaryWeaponItems _unit, primaryWeaponMagazine _unit,\r\n    secondaryWeapon _unit, secondaryWeaponItems _unit, secondaryWeaponMagazine _unit,\r\n    handgunWeapon _unit, handgunItems _unit, handgunMagazine _unit,\r\n    assignedItems _unit,\r\n    binocular _unit,\r\n    [_unit] call CBA_fnc_binocularMagazine\r\n]\r\n"},{"name":"ace_common_fnc_getCaptivityStatus","file":"common/functions/fnc_getCaptivityStatus.sqf","text":"/*\r\n * Author: commy2\r\n * Return the captivity status of an unit.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Captivity Reasons, empty if not captive <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n//Now just a wrapper for FUNC(statusEffect_get) [No longer used in ace as of 3.5]\r\nACE_DEPRECATED(\"ace_common_fnc_getCaptivityStatus\",\"3.7.0\",\"ace_common_fnc_statusEffect_get\");\r\n\r\n([_unit, \"setCaptive\"] call FUNC(statusEffect_get)) select 1\r\n"},{"name":"ace_common_fnc_getChildren","file":"common/functions/fnc_getChildren.sqf","text":"/*\r\n * Author: commy2\r\n * Obtain children of a config entry\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Parent Entry Class Children <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_cfgClass\"];\r\n\r\nprivate _classes = format [\"configName inheritsFrom _x == '%1'\", _name] configClasses (configFile >> _cfgClass);\r\n\r\n_classes apply {configName _x} // return\r\n"},{"name":"ace_common_fnc_getConfigCommander","file":"common/functions/fnc_getConfigCommander.sqf","text":"/*\r\n * Author: commy2\r\n * Get the commander config of a vehicles turret.\r\n *\r\n * Arguments:\r\n * 0: vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Commander config <CONFIG>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\nprivate _turret = _vehicle call FUNC(getTurretCommander);\r\n\r\n[_config, _turret] call FUNC(getTurretConfigPath) // return\r\n"},{"name":"ace_common_fnc_getConfigGunner","file":"common/functions/fnc_getConfigGunner.sqf","text":"/*\r\n * Author: commy2\r\n * Get the gunner config of a vehicles turret.\r\n *\r\n * Arguments:\r\n * 0: vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Gunner config <CONFIG>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\nprivate _turret = _vehicle call FUNC(getTurretGunner);\r\n\r\n[_config, _turret] call FUNC(getTurretConfigPath) // return\r\n"},{"name":"ace_common_fnc_getConfigType","file":"common/functions/fnc_getConfigType.sqf","text":"/*\r\n * Author: commy2\r\n * Determins type of item. Can be CfgMagaines, CfgWeapons or CfgGlasses.\r\n *\r\n * Arguments:\r\n * 0: Item Classname <STRING>\r\n *\r\n * Return Value:\r\n * Config category (\"CfgWeapons\", \"CfgMagazines\", \"CfgGlasses\", \"\") <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_getConfigType\",\"3.8.0\",\"CBA_fnc_getItemConfig\");\r\n\r\nconfigName (configHierarchy (_item call CBA_fnc_getItemConfig) param [1, configNull])\r\n"},{"name":"ace_common_fnc_getConfigTypeObject","file":"common/functions/fnc_getConfigTypeObject.sqf","text":"/*\r\n * Author: commy2\r\n * Determins type of object. Can be CfgVehicles or CfgAmmo.\r\n *\r\n * Arguments:\r\n * 0: Object classname <STRING>\r\n *\r\n * Return Value:\r\n * Config category (\"CfgWeapons\", \"Cfgmagazines\", \"CfgGlasses\", \"\") <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_getConfigTypeObject\",\"3.8.0\",\"CBA_fnc_getObjectConfig\");\r\n\r\nconfigName (configHierarchy (_item call CBA_fnc_getObjectConfig) param [1, configNull])\r\n"},{"name":"ace_common_fnc_getDeathAnim","file":"common/functions/fnc_getDeathAnim.sqf","text":"/*\r\n * Author: Glowbal, PabstMirror\r\n * Get the death animation for the unit at current time\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * animation <STRING>\r\n *\r\n * Example:\r\n * [bob] call ace_common_fnc_getDeathAnim\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _returnAnimation = \"\";\r\n\r\nprivate _animationState = animationState _unit;\r\nprivate _unitAnimationCfg = configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _animationState;\r\n\r\n//If we're already in a terminal animation just return current\r\nif (getNumber (_unitAnimationCfg >> \"terminal\") == 1) exitWith {_animationState};\r\n\r\nprivate _unitActionsCfg = configFile >> \"CfgMovesBasic\" >> \"Actions\" >> getText (_unitAnimationCfg >> \"actions\");\r\n\r\nTRACE_2(\"Animation/Action\", configName _unitAnimationCfg, configName _unitActionsCfg);\r\n\r\nif (vehicle _unit != _unit) then {\r\n    private _interpolateArray = getArray (_unitAnimationCfg >> \"interpolateTo\");\r\n\r\n    for \"_index\" from 0 to (count _interpolateArray - 1) step 2 do {\r\n        private _indexAnimation = _interpolateArray select _index;\r\n\r\n        //No guarentee that first animation will be right so scan for the first \"terminal\" animation\r\n        //E.G.: interpolateTo[] = {\"passenger_apc_generic04still\",1,\"KIA_passenger_apc_generic04\",1};\r\n\r\n        if (getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _indexAnimation >> \"terminal\") == 1) exitWith {\r\n            _returnAnimation = _indexAnimation;\r\n        };\r\n    };\r\n} else {\r\n    _returnAnimation = getText (_unitActionsCfg >> \"die\");\r\n};\r\n\r\n//Fallback if nothing valid found:\r\nif (_returnAnimation == \"\") then {_returnAnimation = \"Unconscious\"};\r\n\r\n_returnAnimation\r\n"},{"name":"ace_common_fnc_getDefaultAnim","file":"common/functions/fnc_getDefaultAnim.sqf","text":"/*\r\n * Author: commy2\r\n * Get the Defualt animation for the unit\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * animation <STRING>\r\n *\r\n * Example:\r\n * [bob] call ace_common_fnc_getDefaultAnim;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _anim = toLower animationState _unit;\r\n\r\n// stance is broken for some animations.\r\nprivate _stance = stance _unit;\r\n\r\nif (_anim find \"ppne\" == 4) then {\r\n    _stance = \"PRONE\";\r\n};\r\n\r\nif (_anim find \"pknl\" == 4) then {\r\n    _stance = \"CROUCH\";\r\n};\r\n\r\nif (_anim find \"perc\" == 4) then {\r\n    _stance = \"STAND\";\r\n};\r\n\r\n_anim = format [\"AmovP%1M%2S%3W%4D%5\",\r\n    [\"erc\", \"knl\", \"pne\"] select ([\"STAND\", \"CROUCH\", \"PRONE\"] find _stance) max 0,\r\n    [\"stp\", \"run\"] select (vectorMagnitude velocity _unit > 1),\r\n    [[\"ras\", \"low\"] select weaponLowered _unit, \"non\"] select (currentWeapon _unit == \"\"),\r\n    [\"non\", \"rfl\", \"lnr\", \"pst\", \"bin\"] select ([\"\", primaryWeapon _unit, secondaryWeapon _unit, handgunWeapon _unit, binocular _unit] find currentWeapon _unit) max 0,\r\n    [\"non\", _anim select [count _anim - 1, 1]] select (_anim select [count _anim - 2, 2] in [\"df\", \"db\", \"dl\", \"dr\"])\r\n];\r\n\r\n[\"\", _anim] select isClass (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _anim)\r\n"},{"name":"ace_common_fnc_getDefinedVariable","file":"common/functions/fnc_getDefinedVariable.sqf","text":"/*\r\n * Author: Glowbal\r\n * Grabs a variable. If variable has not been set, attempts to use default defined value\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: Variable Name <STRING>\r\n *\r\n * Return Value:\r\n * Value of variable or default value, if the variable is undefined <ANY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_variable\", \"_defaultValue\"];\r\n\r\nprivate _value = _unit getVariable _variable;\r\n\r\nif (isNil \"_value\") then {\r\n    if (!isNil \"_defaultValue\") then {\r\n        _value = _defaultValue;\r\n    } else {\r\n        private _definedVariable = _variable call FUNC(getDefinedVariableInfo);\r\n\r\n        if (count _definedVariable > 1) then {\r\n            _value = _definedVariable select 1;\r\n        };\r\n    };\r\n\r\n    if (isNil \"_value\") then {\r\n        _value = 0;\r\n    };\r\n};\r\n\r\n_value\r\n"},{"name":"ace_common_fnc_getDefinedVariableDefault","file":"common/functions/fnc_getDefinedVariableDefault.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the variable default value\r\n *\r\n * Arguments:\r\n * 0: Variable Name <STRING>\r\n *\r\n * Return Value:\r\n * Default value of variable <ANY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_varName\"];\r\n\r\nprivate _variableDefinition = _varName call FUNC(getDefinedVariableInfo);\r\n\r\nif !(_variableDefinition isEqualTo []) exitWith {\r\n    _variableDefinition select 1;\r\n};\r\n\r\nnil\r\n"},{"name":"ace_common_fnc_getDefinedVariableInfo","file":"common/functions/fnc_getDefinedVariableInfo.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the variable Informations\r\n *\r\n * Arguments:\r\n * 0: Variable Name <STRING>\r\n *\r\n * Return Value:\r\n * Variable Metadata <ARRAY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_varName\"];\r\n\r\n+ (missionNamespace getVariable [format [QGVAR(OBJECT_VARIABLES_STORAGE_%1), _varName], []])\r\n"},{"name":"ace_common_fnc_getDisplayConfigName","file":"common/functions/fnc_getDisplayConfigName.sqf","text":"/*\r\n * Author: commy2\r\n * Get display classnames from config with given idd.\r\n *\r\n * Arguments:\r\n * 0: Display ID (idd) <NUMBER>\r\n *\r\n * Return Value:\r\n * Display Classnames <ARRAY>\r\n *\r\n * Public: Yes\r\n *\r\n * Note: Really slow due to iteration through whole config. Meant for debugging.\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_idd\"];\r\n\r\nprivate _configNames = [];\r\n\r\nfor \"_index\" from 0 to (count configFile - 1) do {\r\n    private _config = configFile select _index;\r\n\r\n    if (isClass _config && {isNumber (_config >> \"idd\")} && {getNumber (_config >> \"idd\") == _idd}) then {\r\n        _configNames pushBack configName _config;\r\n    };\r\n};\r\n\r\n_configNames\r\n"},{"name":"ace_common_fnc_getDoorTurrets","file":"common/functions/fnc_getDoorTurrets.sqf","text":"/*\r\n * Author: bux578\r\n * Returns all turret indecies of door gunners.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * All turret indecies of the Vehicle <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\nprivate _turrets = allTurrets [_vehicle, true];\r\n\r\nprivate _doorTurrets = [];\r\n\r\n{\r\n    private _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n\r\n    _config = [_config, _x] call FUNC(getTurretConfigPath);\r\n\r\n    if (getNumber (_config >> \"isCopilot\" == 0) && {count getArray (_config >> \"weapons\") > 0}) then {\r\n        _doorTurrets pushBack _x;\r\n    };\r\n    false\r\n} count _turrets;\r\n\r\n_doorTurrets\r\n"},{"name":"ace_common_fnc_getFirstObjectIntersection","file":"common/functions/fnc_getFirstObjectIntersection.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Returns the the first intersection with terrain between two positions. @todo rewrite using lineIntersectsSurfaces?\r\n *\r\n * Arguments:\r\n * 0: PositionASL <ARRAY>\r\n * 1: PositionATL <ARRAY>\r\n * 2: Accuracy <NUMBER>\r\n *\r\n * Return Value:\r\n * 0: Intersects <BOOL>\r\n * 1: Intersection Position ASL <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_source\", \"_destination\", \"_accuracy\"];\r\n\r\nprivate _result = [false, [0, 0, 0]];\r\n\r\nprivate _distance = _source vectorDistance _destination;\r\n\r\nif !(lineIntersectsWith [_source, _destination] isEqualTo []) then {\r\n    private _lower = 0;\r\n    private _upper = 1;\r\n    private _mid = 0.5;\r\n\r\n    private _dir = _source vectorFromTo _destination;\r\n\r\n    while {(_upper - _lower) * _distance > _accuracy} do {\r\n        _mid = _lower + (_upper - _lower) / 2;\r\n\r\n        if !(lineIntersectsWith [_source, _source vectorAdd (_dir vectorMultiply (_mid * _distance))] isEqualTo []) then {\r\n            _upper = _mid;\r\n        } else {\r\n            _lower = _mid;\r\n        };\r\n    };\r\n\r\n    _mid = _lower + (_upper - _lower) / 2;\r\n    _result = [true, _source vectorAdd (_dir vectorMultiply (_mid * _distance))];\r\n};\r\n\r\n_result\r\n"},{"name":"ace_common_fnc_getFirstTerrainIntersection","file":"common/functions/fnc_getFirstTerrainIntersection.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Returns the the first intersection with an object between two positions. @todo rewrite using lineIntersectsSurfaces?\r\n *\r\n * Arguments:\r\n * 0: PositionASL <ARRAY>\r\n * 1: PositionATL <ARRAY>\r\n * 2: Accuracy <NUMBER>\r\n *\r\n * Return Value:\r\n * 0: Intersects <BOOL>\r\n * 1: Intersection Position ASL <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_source\", \"_destination\", \"_accuracy\"];\r\n\r\nprivate _result = [false, [0, 0, 0]];\r\n\r\nprivate _distance = _source vectorDistance _destination;\r\n\r\nif (terrainIntersectASL [_source, _destination]) then {\r\n    private _lower = 0;\r\n    private _upper = 1;\r\n    private _mid = 0.5;\r\n\r\n    private _dir = _source vectorFromTo _destination;\r\n\r\n    while {(_upper - _lower) * _distance > _accuracy} do {\r\n        _mid = _lower + (_upper - _lower) / 2;\r\n\r\n        if (terrainIntersectASL [_source, _source vectorAdd (_dir vectorMultiply (_mid * _distance))]) then {\r\n            _upper = _mid;\r\n        } else {\r\n            _lower = _mid;\r\n        };\r\n    };\r\n\r\n    _mid = _lower + (_upper - _lower) / 2;\r\n    _result = [true, _source vectorAdd (_dir vectorMultiply (_mid * _distance))];\r\n};\r\n\r\n_result\r\n"},{"name":"ace_common_fnc_getForceWalkStatus","file":"common/functions/fnc_getForceWalkStatus.sqf","text":"/*\r\n * Author: PabstMirror, commy2\r\n * Returns reasons why the unit is forceWalk-ing.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Force Walk reasons <ARRAY>\r\n *\r\n * Example:\r\n * [ACE_Player] call ace_common_fnc_getForceWalkStatus\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n//Now just a wrapper for FUNC(statusEffect_get) [No longer used in ace as of 3.5]\r\nACE_DEPRECATED(\"ace_common_fnc_getForceWalkStatus\",\"3.7.0\",\"ace_common_fnc_statusEffect_get\");\r\n\r\n([_unit, \"forceWalk\"] call FUNC(statusEffect_get)) select 1\r\n"},{"name":"ace_common_fnc_getGunner","file":"common/functions/fnc_getGunner.sqf","text":"/*\r\n * Author: commy2\r\n * Returns gunner using specified weapon type in vehicle. Only works if all turrets have different weapons.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * Gunner <OBJECT>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]], [\"_weapon\", \"\", [\"\"]]];\r\n\r\n// on foot\r\nif (gunner _vehicle == _vehicle && {_weapon in weapons _vehicle || {toLower _weapon in [\"throw\", \"put\"]}}) exitWith {gunner _vehicle};\r\n\r\n// inside vehicle\r\nprivate _gunner = objNull;\r\n\r\n{\r\n    if (_weapon in (_vehicle weaponsTurret _x)) exitWith {\r\n        _gunner = _vehicle turretUnit _x;\r\n    };\r\n    false\r\n} count allTurrets [_vehicle, true];\r\n\r\n// ensure that at least the pilot is returned if there is no gunner\r\nif (isManualFire _vehicle && {isNull _gunner}) then {\r\n    _gunner = effectiveCommander _vehicle;\r\n};\r\n\r\n_gunner\r\n"},{"name":"ace_common_fnc_getInPosition","file":"common/functions/fnc_getInPosition.sqf","text":"/*\r\n * Author: commy2\r\n * Move unit into given vehicle position or switch to that position if the unit is already inside the vehicle.\r\n  *\r\n  * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Vehicle <OBJECT>\r\n * 2: Position (\"Driver\", \"Pilot\", \"Gunner\", \"Commander\", \"Copilot\", \"Turret\", \"FFV\", \"Codriver\", \"Cargo\") <STRING>\r\n * 3: Index (only applies to \"Turret\", \"FFV\", \"Codriver\", \"Cargo\") (default: next free index) <NUMBER>\r\n  *\r\n  * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define CANGETINDRIVER      (isNull (driver _vehicle)             || {!alive driver _vehicle})               && {!lockedDriver _vehicle}           && {getNumber (_config >> \"isUav\") != 1}\r\n#define CANGETINTURRETINDEX (isNull (_vehicle turretUnit _turret) || {!alive (_vehicle turretUnit _turret)}) && {!(_vehicle lockedTurret _turret)} && {getNumber (_config >> \"isUav\") != 1}\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_position\", [\"_index\", -1]];\r\n\r\n_position = toLower _position;\r\n\r\n// general\r\nif (!alive _vehicle || {locked _vehicle > 1}) exitWith {false};\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\nprivate _turret = [];\r\n\r\nprivate _isInside = vehicle _unit == _vehicle;\r\n\r\nprivate _script = {};\r\nprivate _enemiesInVehicle = false;   //Possible Side Restriction\r\n\r\n{\r\n    if (side _unit getFriend side _x < 0.6) exitWith {_enemiesInVehicle = true};\r\n    false\r\n} count crew _vehicle;\r\n\r\nswitch (_position) do {\r\n    case \"driver\" : {\r\n        if (CANGETINDRIVER) then {\r\n            _script = [\r\n                {_unit action [[\"GetInDriver\", \"MoveToDriver\"] select _isInside, _vehicle];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInDriver _vehicle; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n        };\r\n    };\r\n\r\n    case \"pilot\" : {\r\n        if (CANGETINDRIVER) then {\r\n            _script = [\r\n                {_unit action [[\"GetInPilot\", \"MoveToPilot\"] select _isInside, _vehicle];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInDriver _vehicle; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n            _position = \"driver\";\r\n        };\r\n    };\r\n\r\n    case \"gunner\" : {\r\n        _turret = [_vehicle] call FUNC(getTurretGunner);\r\n\r\n        if (CANGETINTURRETINDEX) then {\r\n            _script = [\r\n                {_unit action [[\"GetInGunner\", \"MoveToGunner\"] select _isInside, _vehicle];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInGunner _vehicle; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n        };\r\n    };\r\n\r\n    case \"commander\" : {\r\n        _turret = [_vehicle] call FUNC(getTurretCommander);\r\n\r\n        if (CANGETINTURRETINDEX) then {\r\n            _script = [\r\n                {_unit action [[\"GetInCommander\", \"MoveToCommander\"] select _isInside, _vehicle];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInCommander _vehicle; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n        };\r\n    };\r\n\r\n    case \"copilot\" : {\r\n        _turret = [_vehicle] call FUNC(getTurretCopilot);\r\n\r\n        if (CANGETINTURRETINDEX) then {\r\n            _script = [\r\n                {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n\r\n            _position = \"gunner\";  // I think. It's a turret after all and turrets supposedly return \"gunner\"\r\n        };\r\n    };\r\n\r\n    case \"turret\" : {\r\n        private _turrets = [_vehicle] call FUNC(getTurretsOther);\r\n\r\n        if (_index != -1 && {_turret = _turrets select _index; CANGETINTURRETINDEX}) then {\r\n            _script = [\r\n                {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n\r\n            _position = \"gunner\";\r\n        } else {\r\n            for \"_index\" from 0 to (count _turrets - 1) do {\r\n                _turret = _turrets select _index;\r\n                if (CANGETINTURRETINDEX) exitWith {\r\n                    _script = [\r\n                        {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\r\n                        {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\r\n                    ] select _enemiesInVehicle;\r\n\r\n                    _position = \"gunner\";\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    case \"ffv\" : {\r\n        private _turrets = [_vehicle] call FUNC(getTurretsFFV);\r\n\r\n        if (_index != -1 && {_turret = _turrets select _index; CANGETINTURRETINDEX}) then {\r\n            _script = [\r\n                {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n\r\n            _position = \"gunner\";  // I think. It's a turret after all and turrets supposedly return \"gunner\"\r\n        } else {\r\n            for \"_index\" from 0 to (count _turrets - 1) do {\r\n                _turret = _turrets select _index;\r\n                if (CANGETINTURRETINDEX) exitWith {\r\n                    _script = [\r\n                        {_unit action [[\"GetInTurret\", \"moveToTurret\"] select _isInside, _vehicle, _turret];},\r\n                        {if (_isInside) then {moveOut _unit}; _unit moveInTurret [_vehicle, _turret]; call _fnc_getInEH;}\r\n                    ] select _enemiesInVehicle;\r\n\r\n                    _position = \"gunner\";  // I think. It's a turret after all and turrets supposedly return \"gunner\"\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    case \"codriver\" : {\r\n        private _positions = [typeOf _vehicle] call FUNC(getVehicleCodriver);\r\n\r\n        {\r\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\r\n        } forEach crew _vehicle;\r\n\r\n        if (_index != -1 && {_index in _positions}) then {\r\n            _script = [\r\n                {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n\r\n            _position = \"cargo\";\r\n        } else {\r\n            _index = _positions select 0;\r\n            if (!isNil \"_index\") then {\r\n                _script = [\r\n                    {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\r\n                    {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\r\n                ] select _enemiesInVehicle;\r\n\r\n                _position = \"cargo\";\r\n            };\r\n        };\r\n    };\r\n\r\n    case \"cargo\" : {\r\n        private \"_positions\";\r\n        _positions = [typeOf _vehicle] call FUNC(getVehicleCargo);\r\n\r\n        {\r\n            if (alive _x) then {_positions deleteAt (_positions find (_vehicle getCargoIndex _x))};\r\n        } forEach crew _vehicle;\r\n\r\n        if (_index != -1 && {_index in _positions}) then {\r\n            _script = [\r\n                {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\r\n                {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\r\n            ] select _enemiesInVehicle;\r\n\r\n            _position = \"cargo\";\r\n        } else {\r\n            _index = _positions select 0;\r\n            if (!isNil \"_index\") then {\r\n                _script = [\r\n                    {_unit action [[\"GetInCargo\", \"MoveToCargo\"] select _isInside, _vehicle, _index];},\r\n                    {if (_isInside) then {moveOut _unit}; _unit moveInCargo [_vehicle, _index]; call _fnc_getInEH;}\r\n                ] select _enemiesInVehicle;\r\n\r\n                _position = \"cargo\";\r\n            };\r\n        };\r\n    };\r\n\r\n    default {};\r\n};\r\n\r\n// this will execute all config based event handlers. Not script based ones unfortunately, but atleast we don't use any.\r\nprivate _fnc_getInEH = {\r\n    // config based getIn EHs are assigned to the soldier, not the vehicle. Why Bis? Why?\r\n    private _config = configFile >> \"CfgVehicles\" >> typeOf _unit >> \"EventHandlers\";\r\n\r\n    if (isClass _config) then {\r\n        //getIn is local effects with global arguments. It doesn't trigger if the unit was already inside and only switched seats\r\n        if !(_isInside) then {\r\n            [_vehicle, _position, _unit, _turret] call compile getText (_config >> \"getIn\");\r\n        };\r\n    };\r\n};\r\n\r\n// if you want into the cargo and you can't, then check ffv turrets aswell\r\nif (_position == \"cargo\") exitWith {\r\n    if (_script isEqualTo {}) then {\r\n        [_unit, _vehicle, \"ffv\"] call FUNC(getInPosition);\r\n    } else {\r\n        call _script;\r\n    };\r\n};\r\n\r\ncall _script;\r\n\r\n/*\r\n  sleep 0.1;\r\n  if ((vehicle _unit) != _vehicle) then {\r\n    [\"fn_getInPosition.sqf - Side Restriction, failed to move _unit into vehicle\"] call bis_fnc_error;\r\n    _unit moveInAny _vehicle;  //attempt to fail gracefully\r\n  };\r\n*/\r\n"},{"name":"ace_common_fnc_getItemType","file":"common/functions/fnc_getItemType.sqf","text":"/*\r\n * Author: commy2\r\n * Returns item type of given classname.\r\n *\r\n * Arguments:\r\n * 0: Item <STRING>\r\n *\r\n * Return Value:\r\n * 0: Type (\"weapon\", \"item\", \"magazine\", \"\") <STRING>\r\n * 1: Item Description <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_item\"];\r\n\r\nprivate _config = _item call CBA_fnc_getItemConfig;\r\n\r\nif (isNull _config) exitWith {[\"\", \"\"]};\r\n\r\nprivate _cfgType = configName ((configHierarchy _config) param [1, configNull]);\r\n\r\nif (_cfgType == \"CfgGlasses\") exitWith {[\"item\", \"glasses\"]};\r\n\r\nprivate _config = configFile >> _cfgType >> _item;\r\nprivate _type = getNumber (_config >> \"type\");\r\nprivate _simulation = getText (_config >> \"simulation\");\r\n\r\nif (isNumber (_config >> \"ItemInfo\" >> \"type\")) then {\r\n    _type = getNumber (_config >> \"ItemInfo\" >> \"type\");\r\n};\r\n\r\nprivate _default = [\"item\", \"magazine\"] select (_cfgType == \"CfgMagazines\");\r\n\r\nswitch (true) do {\r\n    case (_type == 0): {[_default, \"unknown\"]};\r\n    case (_type == 2^0): {[\"weapon\", \"primary\"]};\r\n    case (_type == 2^1): {[\"weapon\", \"handgun\"]};\r\n    case (_type == 2^2): {[\"weapon\", \"secondary\"]};\r\n    case (_type  < 2^4): {[\"weapon\", \"unknown\"]};\r\n    case (_type == 2^4): {[\"magazine\", \"handgun\"]}; // handgun\r\n    case (_type == 2^8): {[\"magazine\", \"primary\"]}; // rifle\r\n    case (_type == 2^9): {[\"magazine\", \"secondary\"]}; // rpg, mg, mines\r\n    //case (_type  < 2^11): {[\"magazine\", \"unknown\"]};\r\n\r\n    case (_type == 101): {[\"item\", \"muzzle\"]};\r\n    case (_type == 201): {[\"item\", \"optics\"]};\r\n    case (_type == 301): {[\"item\", \"flashlight\"]};\r\n    case (_type == 302): {[\"item\", \"under\"]}; // czech for bipod item\r\n    case (_type == 401): {[\"item\", \"first_aid_kit\"]};\r\n    case (_type == 501): {[\"item\", \"fins\"]}; // not implemented\r\n    case (_type == 601): {[\"item\", \"breathing_bomb\"]}; // not implemented\r\n    case (_type == 603): {[\"item\", \"goggles\"]};\r\n    case (_type == 604): {[\"item\", \"scuba\"]}; // not implemented\r\n    case (_type == 605): {[\"item\", \"headgear\"]};\r\n    case (_type == 611): {[\"item\", \"radio\"]};\r\n    case (_type == 616): {[\"item\", \"hmd\"]};\r\n    case (_type == 617): {[\"item\", \"binocular\"]};\r\n    case (_type == 619): {[\"item\", \"medikit\"]};\r\n    case (_type == 620): {[\"item\", \"toolkit\"]};\r\n    case (_type == 621): {[\"item\", \"uav_terminal\"]};\r\n    case (_type == 701): {[\"item\", \"vest\"]};\r\n    case (_type == 801): {[\"item\", \"uniform\"]};\r\n\r\n    case (_type == 2^12): {\r\n        switch (toLower _simulation) do {\r\n            case (\"weapon\"): {[\"weapon\", \"binocular\"]};\r\n            case (\"binocular\"): {[\"weapon\", \"binocular\"]};\r\n            case (\"nvgoggles\"): {[\"item\", \"nvgoggles\"]};\r\n            case (\"itemminedetector\"): {[\"item\", \"minedetector\"]};\r\n            default {[_default, \"unknown\"]};\r\n        };\r\n    };\r\n\r\n    case (_type == 2^16): {[\"weapon\", \"vehicle\"]};\r\n    case (_type == 2^17): {\r\n        switch (toLower _simulation) do {\r\n            case (\"itemmap\"): {[\"item\", \"map\"]};\r\n            case (\"itemgps\"): {[\"item\", \"gps\"]};\r\n            case (\"itemradio\"): {[\"item\", \"radio\"]};\r\n            case (\"itemcompass\"): {[\"item\", \"compass\"]};\r\n            case (\"itemwatch\"): {[\"item\", \"watch\"]};\r\n            default {[_default, \"unknown\"]};\r\n        };\r\n    };\r\n    default {[_default, \"unknown\"]};\r\n};\r\n"},{"name":"ace_common_fnc_getLightProperties","file":"common/functions/fnc_getLightProperties.sqf","text":"/*\r\n * Author: commy2\r\n * Read properties of given vehicles light.\r\n *\r\n * Arguments:\r\n * 0: Object with lights <OBJECT>\r\n * 1: Light classname <STRING>\r\n *\r\n * Return Value:\r\n * 0: Light intensity <NUMBER>\r\n * 1: Light position <STRING>\r\n * 2: Light direction <STRING>\r\n * 3: Light inner angle <NUMBER>\r\n * 4: Light outer angle <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_light\"];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"Reflectors\" >> _light;\r\n\r\nprivate _intensity = getNumber (_config >> \"intensity\");\r\nprivate _position = getText (_config >> \"position\");\r\nprivate _direction = getText (_config >> \"direction\");\r\nprivate _innerAngle = getNumber (_config >> \"innerAngle\");\r\nprivate _outerAngle = getNumber (_config >> \"outerAngle\");\r\n\r\n[_intensity, _position, _direction, _innerAngle, _outerAngle]\r\n"},{"name":"ace_common_fnc_getLightPropertiesWeapon","file":"common/functions/fnc_getLightPropertiesWeapon.sqf","text":"/*\r\n * Author: commy2\r\n * Read properties of given flashlight.\r\n *\r\n * Arguments:\r\n * 0: Flashlight <STRING>\r\n *\r\n * Return Value:\r\n * 0: Light intensity <NUMBER>\r\n * 1: Light position <STRING>\r\n * 2: Light direction <STRING>\r\n * 3: Light inner angle <NUMBER>\r\n * 4: Light outer angle <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_weapon\"];\r\n\r\nprivate _config = configFile >> \"CfgWeapons\" >> _weapon >> \"ItemInfo\" >> \"FlashLight\";\r\n\r\nprivate _intensity = getNumber (_config >> \"intensity\");\r\nprivate _position = getText (_config >> \"position\");\r\nprivate _direction = getText (_config >> \"direction\");\r\nprivate _innerAngle = getNumber (_config >> \"innerAngle\");\r\nprivate _outerAngle = getNumber (_config >> \"outerAngle\");\r\n\r\n[_intensity, _position, _direction, _innerAngle, _outerAngle]\r\n"},{"name":"ace_common_fnc_getMapData","file":"common/functions/fnc_getMapData.sqf","text":"/*\r\n * Author: VKing, bux\r\n * Gets the current latitude and altitude offset for the map.\r\n *\r\n * Arguments:\r\n * 0: Map name (default: worldName) <STRING>\r\n *\r\n * Return Value:\r\n * 0: Latitude <NUMBER>\r\n * 1: Altitude <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n\r\nparams [\"_map\"];\r\n_map = toLower _map;\r\n\r\n// [latitude, altitude]\r\n\r\n// the more important ones\r\nif (_map in [\"tanoa\"]) exitWith { [-18, 0] };\r\nif (_map in [\"altis\"]) exitWith { [40, 0] };\r\nif (_map in [\"stratis\"]) exitWith { [40, 0] };\r\n\r\nif (_map in [\"abbottabad\"]) exitWith { [34, 1256] };    //Abbottabad elevation 1256m (Wikipedia)\r\nif (_map in [\"abel\"]) exitWith { [39, 0] };    //CWR2 Malden\r\nif (_map in [\"abramia\"]) exitWith { [60, 0] };\r\nif (_map in [\"af_kandahar_province\"]) exitWith { [42, 0] };\r\nif (_map in [\"angel\"]) exitWith { [38, 0] };\r\nif (_map in [\"anim_helvantis_v2\"]) exitWith { [50, 0] };\r\nif (_map in [\"australia\"]) exitWith { [-25, 0] };\r\nif (_map in [\"bootcamp_acr\"]) exitWith { [50, 0] };\r\nif (_map in [\"bornholm\"]) exitWith { [55, 0] };\r\nif (_map in [\"bozcaada\"]) exitWith { [40, 0] };\r\nif (_map in [\"cain\"]) exitWith { [40, 0] };    //CWR2 Kolgujev\r\nif (_map in [\"caribou\"]) exitWith { [68, 0] };\r\nif (_map in [\"cartercity\"]) exitWith { [43, 130] };    //Pecher, based on Grozny (1995 - 1996) elevation 130m (Wikipedia)\r\nif (_map in [\"catalina\"]) exitWith { [33, 0] };\r\nif (_map in [\"chernarus\", \"chernarus_summer\", \"chernarus_winter\"]) exitWith { [50, 0] };\r\nif (_map in [\"chernobylzone\", \"chernobylzonea2\"]) exitWith { [51, 0] };\r\nif (_map in [\"clafghan\"]) exitWith { [34, 640] };\r\nif (_map in [\"dakrong\"]) exitWith { [16, 0] };    //Unsung Mod\r\nif (_map in [\"desert_e\"]) exitWith { [40, 800] };\r\nif (_map in [\"desert_island\"]) exitWith { [40, 0] };    //CWR2 Desert Island   \r\nif (_map in [\"dya\"]) exitWith { [34, 110] };    //Diyala Iraq - default elevationOffset\r\nif (_map in [\"eden\"]) exitWith { [45, 0] };    //CWR2 Everon\r\nif (_map in [\"esseker\"]) exitWith { [43, 2000] };\r\nif (_map in [\"evergreen\"]) exitWith { [41, 0] };    //Burgazada, Turkey - default elevationOffset\r\nif (_map in [\"fallujah\"]) exitWith { [33, 0] };\r\nif (_map in [\"fata\"]) exitWith { [33, 1347] };\r\nif (_map in [\"gorgona\"]) exitWith { [43, 0] };\r\nif (_map in [\"hellskitchen\", \"hellskitchens\"]) exitWith { [32, 900] };    //Sangin summer, Sangin winter - Sangin elevation 888m (Wikipedia)\r\nif (_map in [\"hindukush\"]) exitWith { [36, 0] };\r\nif (_map in [\"imrali\", \"imralispring\"]) exitWith { [40, 0] };\r\nif (_map in [\"intro\"]) exitWith { [40, 0] };\r\nif (_map in [\"isladuala3\"]) exitWith { [-19, 0] };\r\nif (_map in [\"jacobi\"]) exitWith { [34, 2000] };    //default elevationOffset\r\nif (_map in [\"kapaulio\"]) exitWith { [0, 0] };\r\nif (_map in [\"kerama\"]) exitWith { [26, 0] };    //Kerama Islands, Japan - default elevationOffset\r\nif (_map in [\"kholm\"]) exitWith { [36, 0] };\r\nif (_map in [\"kidal\"]) exitWith { [18, 0] };    //Kidal, Mali - default elevationOffset\r\nif (_map in [\"koplic\"]) exitWith { [42, 0] };\r\nif (_map in [\"kunduz\"]) exitWith { [37, 0] };\r\nif (_map in [\"lingor\", \"lingor3\"]) exitWith { [-4, 0] };\r\nif (_map in [\"lost\", \"lostw\"]) exitWith { [60, 0] };\r\nif (_map in [\"malvinas\"]) exitWith { [-52, 0] };\r\nif (_map in [\"mcn_aliabad\"]) exitWith { [36, 0] };\r\nif (_map in [\"mef_alaska\"]) exitWith { [60, 5] };\r\nif (_map in [\"mountains_acr\"]) exitWith { [35, 2000] };\r\nif (_map in [\"namalsk\"]) exitWith { [65, 0] };\r\nif (_map in [\"napf\", \"napfwinter\"]) exitWith { [47, 0] };\r\nif (_map in [\"newyork_lumnuon\"]) exitWith { [41, 5] };    //Governer´s Island, New York - default elevationOffset\r\nif (_map in [\"noe\"]) exitWith { [45, 0] };    //CWR2 Nogova\r\nif (_map in [\"panthera3\"]) exitWith { [46, 0] };\r\nif (_map in [\"pianosa_aut\"]) exitWith { [43, 0] };    //Pianosa, Italy - default elevationOffset\r\nif (_map in [\"pja305\"]) exitWith { [0, 0] };    //G.O.S N'Ziwasogo\r\nif (_map in [\"pja306\"]) exitWith { [35, 0] };    //G.O.S Kalu Khan\r\nif (_map in [\"pja307\"]) exitWith { [17, 0] };    //F.S.F Daryah\r\nif (_map in [\"pja308\"]) exitWith { [36, 0] };    //G.O.S Gunkizli\r\nif (_map in [\"pja310\"]) exitWith { [36, 0] };    //G.O.S Al Rayak\r\nif (_map in [\"pja312\"]) exitWith { [16, 0] };    //G.O.S Song Bin Tanh\r\nif (_map in [\"porquerolles\"]) exitWith { [43, 0] };\r\nif (_map in [\"porto\"]) exitWith { [40, 0] };\r\nif (_map in [\"provinggrounds_pmc\"]) exitWith { [35, 100] };\r\nif (_map in [\"reshmaan\"]) exitWith { [35, 2000] };\r\nif (_map in [\"rungsat\"]) exitWith { [10, 0] };    //Unsung Mod\r\nif (_map in [\"sara\", \"sara_dbe1\"]) exitWith { [40, 0] };\r\nif (_map in [\"saralite\"]) exitWith { [40, 0] };\r\nif (_map in [\"sb3\"]) exitWith { [53, 25] };    //TrpUebPl Einfelde Nord (Munster North Training Area, Germany) - default elevationOffset\r\nif (_map in [\"sfp_sturko\"]) exitWith { [56, 0] };\r\nif (_map in [\"sfp_wamako\"]) exitWith { [14, 0] };\r\nif (_map in [\"shapur_baf\"]) exitWith { [35, 100] };\r\nif (_map in [\"sugarlake\"]) exitWith { [29, 0] };\r\nif (_map in [\"takistan\"]) exitWith { [35, 2000] };\r\nif (_map in [\"thirsk\"]) exitWith { [65, 0] };\r\nif (_map in [\"tilos\"]) exitWith { [36, 0] };\r\nif (_map in [\"utes\"]) exitWith { [50, 0] };\r\nif (_map in [\"vt5\"]) exitWith { [61, 100] };    //Vt5, Suomi Finland - default elevationOffset\r\nif (_map in [\"wake\"]) exitWith { [19, 0] };\r\nif (_map in [\"waziristan\"]) exitWith { [33, 0] };\r\nif (_map in [\"wintermap\"]) exitWith { [61, 0] };    //Nordkvingo - default elevationOffset\r\nif (_map in [\"wintertown\", \"wintertowna3\"]) exitWith { [39, 600] };    //U.S. state Kansas mean elevation 610m (Wikipedia)\r\nif (_map in [\"woodland_acr\"]) exitWith { [50, 0] };\r\nif (_map in [\"xcam_prototype\"]) exitWith { [35, 0] };\r\nif (_map in [\"zargabad\"]) exitWith { [35, 2000] };\r\n\r\n[] //Return empty array if we have no specific data for the map\r\n"},{"name":"ace_common_fnc_getMapGridData","file":"common/functions/fnc_getMapGridData.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Finds real x/y offset and map step for a 10 digit grid\r\n * Save time by preparing data one time at startup\r\n * Ideas from Nou's mapGridToPos and BIS_fnc_gridToPos\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_map_fnc_getMapGridData\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(mapGridData) = [];\r\n\r\n//--- Extract grid values from world config (Borrowed from BIS_fnc_gridToPos)\r\nprivate _cfgGrid = configFile >> \"CfgWorlds\" >> worldName >> \"Grid\";\r\nprivate _offsetX = getNumber (_cfgGrid >> \"offsetX\");\r\nprivate _offsetY = getNumber (_cfgGrid >> \"offsetY\");\r\nprivate _zoomMax = 1e99;\r\nprivate _formatX = \"\";\r\nprivate _formatY = \"\";\r\nprivate _stepX = 1e10;\r\nprivate _stepY = 1e10;\r\n\r\n{\r\n    private _zoom = getnumber (_x >> \"zoomMax\");\r\n    if (_zoom < _zoomMax) then {\r\n        _zoomMax = _zoom;\r\n        _formatX = getText (_x >> \"formatX\");\r\n        _formatY = getText (_x >> \"formatY\");\r\n        _stepX = getNumber (_x >> \"stepX\");\r\n        _stepY = getNumber (_x >> \"stepY\");\r\n    };\r\n    false\r\n} count configProperties [_cfgGrid, \"isClass _x\", false];\r\n\r\nprivate _letterGrid = false;\r\n\r\nif (toLower _formatX find \"a\" != -1) then {_letterGrid = true};\r\nif (toLower _formatY find \"a\" != -1) then {_letterGrid = true};\r\n\r\nif (_letterGrid) exitWith {\r\n    ACE_LOGWARNING_3(\"Map Grid Warning (%1) - Map uses letter grids [%2, %3]\",worldName,_formatX,_formatY);\r\n};\r\n\r\n//Start at [0, 500] and move north until we get a change in grid\r\nprivate _heightOffset = 500;\r\nprivate _startGrid = mapGridPosition [0, _heightOffset];\r\nprivate _originGrid = _startGrid;\r\n\r\nwhile {_startGrid == _originGrid} do {\r\n    _heightOffset = _heightOffset + 1;\r\n    _originGrid = mapGridPosition [0, _heightOffset];\r\n};\r\n\r\n//Calculate the real y offset\r\nprivate _realOffsetY = (parseNumber (_originGrid select [count _formatX, count _formatY])) * _stepY + _heightOffset - 1;\r\n\r\n//Calculate MGRS 10digit step - they should both be 1 meter:\r\n_stepXat5 = _stepX * 10 ^ ((count _formatX) - 5);\r\n_stepYat5 = -1 * _stepY * 10 ^ ((count _formatY) - 5);\r\n\r\nif (_stepYat5 < 0) then {\r\n    ACE_LOGWARNING_1(\"Map Grid Warning (%1) - Northing is reversed.\",worldName);\r\n};\r\n\r\nif (_stepXat5 != 1) then {\r\n    ACE_LOGWARNING_2(\"Map Grid Warning (%1) - MGRS 10 digit grid does not equal 1 meter: (%2) for x.\",worldName,_stepXat5);\r\n};\r\n\r\nif (_stepYat5 != 1 && {_stepYat5 != -1}) then {\r\n    ACE_LOGWARNING_2(\"Map Grid Warning (%1) - MGRS 10 digit grid does not equal 1 meter: (%2) for y.\",worldName,_stepXat5);\r\n};\r\n\r\nGVAR(mapGridData) = [_offsetX, _realOffsetY, _stepXat5, _stepYat5];\r\n"},{"name":"ace_common_fnc_getMapGridFromPos","file":"common/functions/fnc_getMapGridFromPos.sqf","text":"/*\r\n * Author: VKing, PabstMirror\r\n * Gets a 10-digit map grid for the given world position\r\n *\r\n * Arguments:\r\n * 0: Position (2D Position) <ARRAY>\r\n * 1: Return type; false for array of easting and northing, true for single string (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * 0: Easting <String>\r\n * 1: Northing <String>\r\n *\r\n * Example:\r\n * [getPos player] call ace_common_fnc_getMapGridFromPos\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_pos\", [\"_returnSingleString\", false]];\r\n\r\n//Fallback, when map data is weird (letters)\r\nif (GVAR(mapGridData) isEqualTo []) exitWith {\r\n    private _nativeGrid = mapGridPosition _pos;\r\n\r\n    if (_returnSingleString) then {\r\n        _nativeGrid\r\n    } else {\r\n        private _count = floor ((count _nativeGrid) / 2);\r\n        [_nativeGrid select [0, _count], _nativeGrid select [_count, _count]]\r\n    };\r\n};\r\n\r\nGVAR(mapGridData) params [\"_offsetX\", \"_realOffsetY\", \"_stepXat5\", \"_stepYat5\"];\r\n\r\nprivate _easting = floor (((_pos select 0) - _offsetX) / _stepXat5);\r\nprivate _northing = floor (((_pos select 1) - _realOffsetY) / _stepYat5);\r\n\r\n//Attempt to handle negative east/north (e.g.: moving west of map bounds)\r\nif (_easting > 0) then {\r\n    _easting = str _easting;\r\n    while {count _easting < 5} do {_easting = \"0\" + _easting};\r\n} else {\r\n    _easting = str abs _easting;\r\n    while {count _easting < 4} do {_easting = \"0\" + _easting};\r\n    _easting = \"-\" + _easting;\r\n};\r\n\r\nif (_northing > 0) then {\r\n    _northing = str _northing;\r\n    while {count _northing < 5} do {_northing = \"0\" + _northing};\r\n} else {\r\n    _northing = str abs _northing;\r\n    while {count _northing < 4} do {_northing = \"0\" + _northing};\r\n    _northing = \"-\" + _northing;\r\n};\r\n\r\nif (_returnSingleString) then {\r\n    _easting + _northing\r\n} else {\r\n    [_easting, _northing]\r\n}; // return\r\n"},{"name":"ace_common_fnc_getMapPosFromGrid","file":"common/functions/fnc_getMapPosFromGrid.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Gets position from grid cords\r\n *\r\n * Arguments:\r\n * 0: Grid Cords <STRING>\r\n * 1: Grid center (true), Grid Bottom Right (false) (default: true) <BOOL>\r\n *\r\n * Return values:\r\n * Position <ARRAY>\r\n *\r\n * Example:\r\n * [\"6900080085\"] call ace_common_fnc_getMapPosFromGrid\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_inputString\", [\"_getCenterOfGrid\", true]];\r\n\r\nif (count GVAR(mapGridData) == 0) exitWith {\r\n    ERROR(\"Map has bad data, falling back to BIS_fnc_gridToPos\");\r\n    (_this call BIS_fnc_gridToPos) select 0\r\n};\r\n\r\nGVAR(mapGridData) params [\"_offsetX\", \"_realOffsetY\", \"_stepXat5\", \"_stepYat5\"];\r\n\r\nprivate _countInput = count _inputString;\r\nprivate _countInputHalf = floor (_countInput / 2);\r\n\r\n//Split string, ignoring middle\r\nprivate _xPart = _inputString select [0, _countInputHalf];\r\nprivate _yPart = _inputString select [ceil (_countInput / 2), _countInputHalf];\r\n\r\nprivate _xPos = ((parseNumber _xPart) * _stepXat5 * 10 ^ (5 - _countInputHalf)) + _offsetX;\r\nprivate _yPos = ((parseNumber _yPart) * _stepYat5 * 10 ^ (5 - _countInputHalf)) + _realOffsetY;\r\n\r\nif (_getCenterOfGrid) then {\r\n    _xPos = _xPos + 0.5 * _stepXat5 * 10 ^ (5 - _countInputHalf);\r\n    _yPos = _yPos + 0.5 * _stepYat5 * 10 ^ (5 - _countInputHalf);\r\n};\r\n\r\n[_xPos, _yPos, 0]\r\n"},{"name":"ace_common_fnc_getMarkerType","file":"common/functions/fnc_getMarkerType.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Get the apropriate marker for a group.\r\n *\r\n * Arguments:\r\n * 0: Group\r\n *\r\n * Return Value:\r\n * Marker Type <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_group\"];\r\n\r\nprivate _leader = leader _group;\r\nprivate _vehicle = vehicle _leader;\r\nprivate _side = side _leader;\r\n\r\nif (_vehicle == _leader) exitWith {\r\n    if (\r\n        getNumber (configFile >> \"CfgVehicles\" >> typeOf _leader >> \"detectSkill\") > 20 ||\r\n        getNumber (configFile >> \"CfgVehicles\" >> typeOf _leader >> \"camouflage\") < 1 ||\r\n        getText   (configFile >> \"CfgVehicles\" >> typeOf _leader >> \"textsingular\") == \"diver\"\r\n    ) then {\r\n        [\"n_recon\", \"b_recon\", \"o_recon\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n    } else {\r\n        [\"n_inf\", \"b_inf\", \"o_inf\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n    };\r\n};\r\n\r\nif (getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"attendant\") == 1) exitWith {\r\n    [\"n_med\", \"b_med\", \"o_med\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\nif (\r\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportRepair\") > 0 ||\r\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportFuel\") > 0 ||\r\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportAmmo\") > 0 ||\r\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"ACE_canRepair\") > 0 ||\r\n    getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"ACE_fuelCapacityCargo\") > 0\r\n) exitWith {\r\n    [\"n_maint\", \"b_maint\", \"o_maint\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\nif (_vehicle isKindOf \"Plane\") exitWith {\r\n    [\"n_plane\", \"b_plane\", \"o_plane\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\nif (_vehicle isKindOf \"Air\") exitWith {\r\n    [\"n_air\", \"b_air\", \"o_air\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\nif (_vehicle isKindOf \"StaticMortar\") exitWith {\r\n    [\"n_mortar\", \"b_mortar\", \"o_mortar\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\nif (getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"artilleryScanner\") == 1) exitWith {\r\n    [\"n_art\", \"b_art\", \"o_art\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\nif (_vehicle isKindOf \"Car\") exitWith {\r\n    [\"n_motor_inf\", \"b_motor_inf\", \"o_motor_inf\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\nif (_vehicle isKindOf \"Tank\") exitWith {\r\n    if (getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"transportSoldier\") > 0) then {\r\n        [\"n_mech_inf\", \"b_mech_inf\", \"o_mech_inf\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n    } else {\r\n        [\"n_armor\", \"b_armor\", \"o_armor\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n    };\r\n};\r\n\r\nif (_vehicle isKindOf \"Ship\") exitWith {\r\n    [\"n_naval\", \"b_naval\", \"o_naval\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n};\r\n\r\n// generic marker\r\n[\"n_unknown\", \"b_unknown\", \"o_unknown\"] select (([\"GUER\", \"WEST\", \"EAST\"] find str _side) max 0)\r\n"},{"name":"ace_common_fnc_getMGRSdata","file":"common/functions/fnc_getMGRSdata.sqf","text":"/*\r\n * Author: VKing\r\n * Gets the current map's MGRS grid zone designator and 100km square.\r\n * Also gets longitude, latitude and altitude offset for the map.\r\n * Writes return values to GVAR(MGRS_data) if run on the current map.\r\n *\r\n * Arguments:\r\n * 0: Map name (default: worldName) <STRING>\r\n *\r\n * Return Value:\r\n * 0: Grid zone designator <STRING>\r\n * 1: 100km square <STRING>\r\n * 2: GZD + 100km sq. as a single string <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_map\", worldName]];\r\n\r\nprivate _long = getNumber (configFile >> \"CfgWorlds\" >> _map >> \"longitude\");\r\nprivate _lat =  getNumber (configFile >> \"CfgWorlds\" >> _map >> \"latitude\");\r\nprivate _altitude =  getNumber (configFile >> \"CfgWorlds\" >> _map >> \"elevationOffset\");\r\n\r\nprivate _mapData = _map call FUNC(getMapData);\r\nif (!(_mapData isEqualTo [])) then {\r\n    _lat = _mapData select 0;\r\n    _alt = _mapData select 1;\r\n};\r\nTRACE_2(\"Latitude and Altitude\",_lat,_alt);\r\n\r\nprivate _UTM = [_long, _lat] call BIS_fnc_posDegToUTM;\r\nprivate _easting = _UTM select 0;\r\nprivate _northing = _UTM select 1;\r\n//private _zone = _UTM select 2;\r\nTRACE_4(\"\",_UTM,_easting,_northing,_zone);\r\n\r\n/*\r\nprivate _band = switch (true) do {\r\n    case (_lat<-72): {\"C\"};\r\n    case (_lat<-64): {\"D\"};\r\n    case (_lat<-56): {\"E\"};\r\n    case (_lat<-48): {\"F\"};\r\n    case (_lat<-40): {\"G\"};\r\n    case (_lat<-32): {\"H\"};\r\n    case (_lat<-24): {\"J\"};\r\n    case (_lat<-16): {\"K\"};\r\n    case (_lat<-8): {\"L\"};\r\n    case (_lat<0): {\"M\"};\r\n    case (_lat>72): {\"X\"};\r\n    case (_lat>64): {\"W\"};\r\n    case (_lat>56): {\"V\"};\r\n    case (_lat>48): {\"U\"};\r\n    case (_lat>40): {\"T\"};\r\n    case (_lat>32): {\"S\"};\r\n    case (_lat>24): {\"R\"};\r\n    case (_lat>16): {\"Q\"};\r\n    case (_lat>8): {\"P\"};\r\n    case (_lat>=0): {\"N\"};\r\n};\r\n*/\r\n\r\nprivate _zone = 1 + (floor ((_long + 180) / 6));\r\nprivate _band = \"Z\";\r\n\r\nif (_lat <= -80) then {\r\n    _band = \"A\";\r\n} else {\r\n    if (_lat < 84) then {\r\n        _band = \"CDEFGHJKLMNPQRSTUVWXX\" select [(floor ((_lat / 8) + 10)), 1];\r\n    };\r\n};\r\n\r\nif (_map == \"VR\") then {_zone = 0; _band = \"RV\";};\r\n\r\nprivate _GZD = format [\"%1%2\",_zone,_band];\r\nTRACE_3(\"\",_zone,_band,_GZD);\r\n\r\nprivate [\"_metaE\", \"_metaN\", \"_letterE\", \"_letterN\"];\r\n\r\nprivate _set1 = [1,7,13,19,25,31,37,43,49,55];\r\nprivate _set2 = [2,8,14,20,26,32,38,44,50,56];\r\nprivate _set3 = [3,9,15,21,27,33,39,45,51,57];\r\nprivate _set4 = [4,10,16,22,28,34,40,46,52,58];\r\nprivate _set5 = [5,11,17,23,29,35,41,47,53,59];\r\nprivate _set6 = [6,12,18,24,30,36,42,48,54,60];\r\n\r\nswitch (true) do {\r\n    case (_zone in _set1): {_metaE = 1; _metaN = 1;};\r\n    case (_zone in _set2): {_metaE = 2; _metaN = 2;};\r\n    case (_zone in _set3): {_metaE = 3; _metaN = 1;};\r\n    case (_zone in _set4): {_metaE = 1; _metaN = 2;};\r\n    case (_zone in _set5): {_metaE = 2; _metaN = 1;};\r\n    case (_zone in _set6): {_metaE = 3; _metaN = 2;};\r\n};\r\nTRACE_2(\"\",_metaE,_metaN);\r\n\r\nswitch (true) do {\r\n    case (_zone == 0): {_letterE = \"E\"};\r\n    case (_easting > 800000): {LOG(\"E8\"); switch (_metaE) do {case 1: {_letterE=\"H\"}; case 2: {_letterE=\"R\"}; case 3: {_letterE=\"Z\"}; }; };\r\n    case (_easting > 700000): {LOG(\"E7\"); switch (_metaE) do {case 1: {_letterE=\"G\"}; case 2: {_letterE=\"Q\"}; case 3: {_letterE=\"Y\"}; }; };\r\n    case (_easting > 600000): {LOG(\"E6\"); switch (_metaE) do {case 1: {_letterE=\"F\"}; case 2: {_letterE=\"P\"}; case 3: {_letterE=\"X\"}; }; };\r\n    case (_easting > 500000): {LOG(\"E5\"); switch (_metaE) do {case 1: {_letterE=\"E\"}; case 2: {_letterE=\"N\"}; case 3: {_letterE=\"W\"}; }; };\r\n    case (_easting > 400000): {LOG(\"E4\"); switch (_metaE) do {case 1: {_letterE=\"D\"}; case 2: {_letterE=\"M\"}; case 3: {_letterE=\"V\"}; }; };\r\n    case (_easting > 300000): {LOG(\"E3\"); switch (_metaE) do {case 1: {_letterE=\"C\"}; case 2: {_letterE=\"L\"}; case 3: {_letterE=\"U\"}; }; };\r\n    case (_easting > 200000): {LOG(\"E2\"); switch (_metaE) do {case 1: {_letterE=\"B\"}; case 2: {_letterE=\"K\"}; case 3: {_letterE=\"T\"}; }; };\r\n    case (_easting > 100000): {LOG(\"E1\"); switch (_metaE) do {case 1: {_letterE=\"A\"}; case 2: {_letterE=\"J\"}; case 3: {_letterE=\"S\"}; }; };\r\n    default {_letterE=\"@\"};\r\n};\r\nTRACE_1(\"\",_letterE);\r\n\r\n_northing = _northing mod 2000000;\r\nTRACE_1(\"\",_northing);\r\n\r\nswitch (true) do {\r\n    case (_zone == 0): {_letterN = \"N\"};\r\n    case (_northing > 1900000): {LOG(\"N19\"); switch (_metaN) do {case 1: {_letterN = \"V\"}; case 2: {_letterN = \"E\"}; }; };\r\n    case (_northing > 1800000): {LOG(\"N18\"); switch (_metaN) do {case 1: {_letterN = \"U\"}; case 2: {_letterN = \"D\"}; }; };\r\n    case (_northing > 1700000): {LOG(\"N17\"); switch (_metaN) do {case 1: {_letterN = \"T\"}; case 2: {_letterN = \"C\"}; }; };\r\n    case (_northing > 1600000): {LOG(\"N16\"); switch (_metaN) do {case 1: {_letterN = \"S\"}; case 2: {_letterN = \"B\"}; }; };\r\n    case (_northing > 1500000): {LOG(\"N15\"); switch (_metaN) do {case 1: {_letterN = \"R\"}; case 2: {_letterN = \"A\"}; }; };\r\n    case (_northing > 1400000): {LOG(\"N14\"); switch (_metaN) do {case 1: {_letterN = \"Q\"}; case 2: {_letterN = \"V\"}; }; };\r\n    case (_northing > 1300000): {LOG(\"N13\"); switch (_metaN) do {case 1: {_letterN = \"P\"}; case 2: {_letterN = \"U\"}; }; };\r\n    case (_northing > 1200000): {LOG(\"N12\"); switch (_metaN) do {case 1: {_letterN = \"N\"}; case 2: {_letterN = \"T\"}; }; };\r\n    case (_northing > 1100000): {LOG(\"N11\"); switch (_metaN) do {case 1: {_letterN = \"M\"}; case 2: {_letterN = \"S\"}; }; };\r\n    case (_northing > 1000000): {LOG(\"N10\"); switch (_metaN) do {case 1: {_letterN = \"L\"}; case 2: {_letterN = \"R\"}; }; };\r\n    case (_northing >  900000): {LOG(\"N09\"); switch (_metaN) do {case 1: {_letterN = \"K\"}; case 2: {_letterN = \"Q\"}; }; };\r\n    case (_northing >  800000): {LOG(\"N08\"); switch (_metaN) do {case 1: {_letterN = \"J\"}; case 2: {_letterN = \"P\"}; }; };\r\n    case (_northing >  700000): {LOG(\"N07\"); switch (_metaN) do {case 1: {_letterN = \"H\"}; case 2: {_letterN = \"N\"}; }; };\r\n    case (_northing >  600000): {LOG(\"N06\"); switch (_metaN) do {case 1: {_letterN = \"G\"}; case 2: {_letterN = \"M\"}; }; };\r\n    case (_northing >  500000): {LOG(\"N05\"); switch (_metaN) do {case 1: {_letterN = \"F\"}; case 2: {_letterN = \"L\"}; }; };\r\n    case (_northing >  400000): {LOG(\"N04\"); switch (_metaN) do {case 1: {_letterN = \"E\"}; case 2: {_letterN = \"K\"}; }; };\r\n    case (_northing >  300000): {LOG(\"N03\"); switch (_metaN) do {case 1: {_letterN = \"D\"}; case 2: {_letterN = \"J\"}; }; };\r\n    case (_northing >  200000): {LOG(\"N02\"); switch (_metaN) do {case 1: {_letterN = \"C\"}; case 2: {_letterN = \"H\"}; }; };\r\n    case (_northing >  100000): {LOG(\"N01\"); switch (_metaN) do {case 1: {_letterN = \"B\"}; case 2: {_letterN = \"G\"}; }; };\r\n    case (_northing >       0): {LOG(\"N00\"); switch (_metaN) do {case 1: {_letterN = \"A\"}; case 2: {_letterN = \"F\"}; }; };\r\n};\r\nTRACE_1(\"\",_letterN);\r\n\r\nprivate _grid100km = _letterE + _letterN;\r\nTRACE_1(\"\",_grid100km);\r\n\r\nif (_map == worldName) then {\r\n    GVAR(MGRS_data) = [_GZD, _grid100km, _GZD + _grid100km];\r\n    GVAR(mapAltitude) = _altitude;\r\n    GVAR(mapLatitude) = _lat;\r\n    GVAR(mapLongitude) = _long;\r\n};\r\n\r\n[_GZD, _grid100km, _GZD + _grid100km]\r\n"},{"name":"ace_common_fnc_getName","file":"common/functions/fnc_getName.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the name of the object. Used to prevent issues with the name command.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n * 1: Use effective commander name when used on vehicles (default: false) <BOOL>\r\n * 2: Get Raw Name (Don't sanatize HTML tags `</>`) (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * Object Name <STRING>\r\n *\r\n * Example:\r\n * [player, false, true] call ace_common_fnc_getName;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_showEffective\", false], [\"_useRaw\", false]];\r\n\r\nprivate _name = \"\";\r\n\r\nif (_unit isKindOf \"CAManBase\") then {\r\n    _name = _unit getVariable [([\"ACE_Name\", \"ACE_NameRaw\"] select _useRaw), localize QUOTE(DOUBLES(STR,GVAR(Unknown)))];\r\n} else {\r\n    if (_showEffective) then {\r\n        _name = [effectiveCommander _unit, false, _useRaw] call FUNC(getName);\r\n    } else {\r\n        _name = getText (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"displayName\");\r\n    };\r\n};\r\n\r\n_name\r\n"},{"name":"ace_common_fnc_getNumberFromMissionSQM","file":"common/functions/fnc_getNumberFromMissionSQM.sqf","text":"/*\r\n * Author: commy2\r\n * Get a number from the mission.sqm file. Mission has to be saved in the Editor.\r\n * On non-existing entries, it might return 0 or the value of an entry with the same name of another calss.\r\n *\r\n * Arguments:\r\n * 0: Path of the entry in the mission.sqm <ARRAY>\r\n *\r\n * Return Value:\r\n * Entry value <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparseNumber (_this call FUNC(getStringFromMissionSQM)) // return\r\n"},{"name":"ace_common_fnc_getNumberMagazinesIn","file":"common/functions/fnc_getNumberMagazinesIn.sqf","text":"/*\r\n * Author: Glowbal\r\n * Count magazines of unit.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Magazine <STRING>\r\n *\r\n * Return Value:\r\n * Magazine amount <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_magazine\"];\r\n\r\nprivate _return = 0;\r\n\r\nif (_unit isKindOf \"CAManBase\") then {\r\n    _return = {_x == _magazine} count magazines _unit;\r\n} else {\r\n    {\r\n        _return = _return + {_x == _magazine} count magazines _x;\r\n        false\r\n    } count crew _unit;\r\n\r\n    _return = _return + ({_x == _magazine} count getMagazineCargo _unit);\r\n};\r\n\r\n_return\r\n"},{"name":"ace_common_fnc_getPitchBankYaw","file":"common/functions/fnc_getPitchBankYaw.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Returns pitch, bank, yaw for given vehicle in degrees.\r\n *\r\n * Arguments:\r\n * 0: Unit/Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * 0: pitch <NUMBER>\r\n * 1: bank <NUMBER>\r\n * 2: yaw <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\n(_vehicle call BIS_fnc_getPitchBank) + [getDir _vehicle]\r\n"},{"name":"ace_common_fnc_getReflectorsWithSelections","file":"common/functions/fnc_getReflectorsWithSelections.sqf","text":"/*\r\n * Author: commy2\r\n *\r\n * Returns all lighting hitpoints of any vehicle.\r\n * Note: These are actual selections that are affected by setHit and getHit, not getHitPointDamage or setHitpointDamage.\r\n * They behave like having an armor value of 0.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * 0: Light Hitpoints <ARRAY>\r\n * 1: Selections <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n\r\nprivate _hitpoints = [];\r\nprivate _selections = [];\r\n\r\n// iterate through all parents\r\nwhile {isClass _config} do {\r\n    private _class = _config >> \"Reflectors\";\r\n\r\n    for \"_i\" from 0 to (count _class - 1) do {\r\n        private _entry = _class select _i;\r\n        private _selection = getText (_entry >> \"hitpoint\");\r\n\r\n        if (!(_selection in _selections) && {!isNil {_vehicle getHit _selection}}) then {\r\n            _hitpoints pushBack configName _entry;\r\n            _selections pushBack _selection;\r\n        };\r\n    };\r\n\r\n    _config = inheritsFrom _config;\r\n};\r\n\r\n[_hitPoints, _selections]\r\n"},{"name":"ace_common_fnc_getSelectionsWithoutHitPoints","file":"common/functions/fnc_getSelectionsWithoutHitPoints.sqf","text":"/*\r\n * Author: commy2\r\n *\r\n * Returns all damageable selections without hitpoints of any vehicle.\r\n *\r\n * Arguments:\r\n * 0: A vehicle, not the classname (Object)\r\n *\r\n * Return Value:\r\n * The selections without hitpoints, i.e. reflectors. (Array)\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\nprivate _hitPointsFull = getAllHitPointsDamage _vehicle;\r\n\r\nprivate _allSelectionsWithoutHitpoints = [];\r\n\r\n{\r\n    if (_x == \"\") then {\r\n        _allSelectionsWithoutHitpoints pushBack (_hitPointsFull select 1 select _forEachIndex);\r\n    };\r\n} forEach (_hitPointsFull select 0);\r\n\r\n_allSelectionsWithoutHitpoints\r\n"},{"name":"ace_common_fnc_getSettingData","file":"common/functions/fnc_getSettingData.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Returns the metadata of a setting if it exists\r\n *\r\n * Arguments:\r\n * 0: Setting Name <STRING>\r\n *\r\n * Return Value:\r\n * Setting Data (Array)\r\n * 0: Name <STRING>\r\n * 1: Type Name <STRING>\r\n * 2: Is Client Settable <BOOL>\r\n * 3: Localized Name <STRING>\r\n * 4: Localized Description <STRING>\r\n * 5: Possible Values <ARRAY>\r\n * 6: Is Forced <BOOL>\r\n * 7: Default Value <ANY>\r\n * 8: Localized Category <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\"];\r\n\r\nscopeName \"main\";\r\n\r\n{\r\n    if (_x select 0 == _name) then {\r\n        _x breakOut \"main\";\r\n    };\r\n    false\r\n} count GVAR(settings);\r\n\r\n[]\r\n"},{"name":"ace_common_fnc_getStaminaBarControl","file":"common/functions/fnc_getStaminaBarControl.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the control of the Stamina Bar from Arma 1.54.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Stamina Bar control <CONTROL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(uiNamespace getVariable [QGVAR(dlgStaminaBar), displayNull]) displayCtrl IDC_STAMINA_BAR\r\n"},{"name":"ace_common_fnc_getStringFromMissionSQM","file":"common/functions/fnc_getStringFromMissionSQM.sqf","text":"/*\r\n * Author: commy2\r\n * Get a string from the mission.sqm file. Mission has to be saved in the Editor.\r\n * The string cannot contain the ; character.\r\n * If the entry does not exist, it might return an empty string or an entry with the same name of another class!\r\n *\r\n * Arguments:\r\n * 0: Path of the entry in the mission.sqm <ARRAY>\r\n *\r\n * Return Value:\r\n * Value of the entry. <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n[_this] params [\"_path\", [], [[]]];\r\n\r\nif (missionName == \"\") exitWith {\"\"};\r\n\r\nprivate _mission = toArray toLower loadFile \"mission.sqm\";\r\n_mission resize 65536;\r\n\r\n{\r\n    if (_x < 33) then {\r\n        _mission set [_forEachIndex, -1];\r\n    }\r\n} forEach _mission;\r\n\r\n_mission = toString (_mission - [-1]);\r\n\r\n{_path set [_forEachIndex, toLower _x]} forEach _path;\r\n\r\nfor \"_a\" from 0 to (count _path - 2) do {\r\n    private _class = format [\"class%1{\", _path select _a];\r\n    private _index = _mission find _class;\r\n    private _array = toArray _mission;\r\n\r\n    for \"_b\" from 0 to (_index + count toArray _class - 1) do {\r\n        _array set [_b, -1];\r\n    };\r\n\r\n    _array = _array - [-1];\r\n\r\n    _mission = toString _array;\r\n};\r\n\r\nprivate _entry = format [\"%1=\", _path select (count _path - 1)];\r\n_index = _mission find _entry;\r\n\r\nif (_index == -1) exitWith {\"\"};\r\n\r\n_array = toArray _mission;\r\n\r\nfor \"_b\" from 0 to (_index + count toArray _entry - 1) do {\r\n    _array set [_b, -1];\r\n};\r\n\r\n_mission = toString (_array - [-1]);\r\n\r\n_index = _mission find \";\";\r\n\r\n_mission = toArray _mission;\r\n_mission resize _index;\r\n\r\nformat [\"%1\", toString _mission] // return\r\n"},{"name":"ace_common_fnc_getTargetAzimuthAndInclination","file":"common/functions/fnc_getTargetAzimuthAndInclination.sqf","text":"/*\r\n * Author: commy2\r\n * Get players viewing direction and slope.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * 0: Azimuth <NUMBER>\r\n * 1: Inclination <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _position = ATLToASL positionCameraToWorld [0, 0, 0];\r\nprivate _direction = ATLToASL positionCameraToWorld [0, 0, 1];\r\n\r\nprivate _azimuth = ((_direction select 0) - (_position select 0)) atan2 ((_direction select 1) - (_position select 1));\r\nprivate _inclination = asin ((_direction select 2) - (_position select 2));\r\n\r\nif (_azimuth < 0) then {_azimuth = _azimuth + 360};\r\n\r\n[_azimuth, _inclination]\r\n"},{"name":"ace_common_fnc_getTargetDistance","file":"common/functions/fnc_getTargetDistance.sqf","text":"/*\r\n * Author: VKing\r\n * Get the distance to the next object the player is looking at. Used for laser distance measurements.\r\n *\r\n * Arguments:\r\n * 0: Measurement Accuracy (default: 1) <NUMBER>\r\n * 1: Maximum measure distance (default: 5000) <NUMBER>\r\n * 2: Minimum measure distance (default: 0) <NUMBER>\r\n *\r\n * Return Value:\r\n * Distance in meters <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_accuracy\",1], [\"_maxDistance\",5000], [\"_minDistance\",0]];\r\n\r\nprivate _camPosition = AGLToASL positionCameraToWorld [0, 0, 0];\r\nprivate _aimLinePos = AGLToASL positionCameraToWorld [0, 0, _maxDistance];\r\n\r\nprivate _LIS = lineIntersectsSurfaces [_camPosition, _aimLinePos];\r\n\r\nprivate _distance = 0;\r\nif (count _LIS > 0) then {\r\n    _distance = _camPosition vectorDistance ((_LIS select 0) select 0);\r\n} else {\r\n    _distance = _maxDistance;\r\n};\r\n\r\n_distance = _distance max _minDistance;\r\n\r\n_accuracy = _accuracy max 1;\r\n_distance = (round (_distance/_accuracy)) * _accuracy;\r\n\r\n_distance\r\n"},{"name":"ace_common_fnc_getTargetObject","file":"common/functions/fnc_getTargetObject.sqf","text":"/*\r\n * Author: commy2\r\n * Get the nearest object the player is looking at. Used for laser designator instead of cursorTarget.\r\n *\r\n * Arguments:\r\n * 0: Maximum search distance <NUMBER>\r\n *\r\n * Return Value:\r\n * Nearest object in line of sight, objNull if none are found <OBJECT>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_maxDistance\"];\r\n\r\nprivate _position = ATLToASL positionCameraToWorld [0, 0, 0];\r\n_position set [2, (_position select 2) - (getTerrainHeightASL _position min 0)];\r\n\r\nprivate _laser = ATLToASL positionCameraToWorld [0, 0, _maxDistance];\r\n_laser set [2, (_laser select 2) - (getTerrainHeightASL _laser min 0)];\r\n\r\nprivate _intersects = lineIntersectsObjs [_position, _laser, objNull, objNull, true, 2];\r\n\r\nif (_intersects isEqualTo []) exitWith {objNull};\r\n\r\n_intersects select 0 // return\r\n"},{"name":"ace_common_fnc_getTurnedOnLights","file":"common/functions/fnc_getTurnedOnLights.sqf","text":"/*\r\n * Author: commy2\r\n * Returns all turned on lights of any vehicle or streetlamp.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * All burning lights <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\nif (!isLightOn _vehicle) exitWith {[]};\r\n\r\nprivate _reflectorsWithSelections = [[_vehicle], FUNC(getReflectorsWithSelections), uiNamespace, format [QEGVAR(cache,%1_%2), QUOTE(DFUNC(getReflectorsWithSelections)), typeOf _vehicle], 1E11] call FUNC(cachedCall);\r\n//_reflectorsWithSelections = [_vehicle] call FUNC(getReflectorsWithSelections);\r\n\r\n_reflectorsWithSelections params [\"_lights\", \"_hitpoints\"];\r\n\r\nprivate _turnedOnLights = [];\r\n\r\n{\r\n    if (_vehicle getHit _x <= 0.9) then {\r\n        _turnedOnLights pushBack (_lights select _forEachIndex);\r\n    };\r\n} forEach _hitpoints;\r\n\r\n_turnedOnLights\r\n"},{"name":"ace_common_fnc_getTurretCommander","file":"common/functions/fnc_getTurretCommander.sqf","text":"/*\r\n * Author: commy2\r\n * Get the turret index of a vehicles commander.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Vehicle commander turrent indecies <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\nfullCrew [_vehicle, \"commander\", true] apply {_x select 3} param [0, []] // return\r\n"},{"name":"ace_common_fnc_getTurretConfigPath","file":"common/functions/fnc_getTurretConfigPath.sqf","text":"/*\r\n * Author: commy2\r\n * Get the config path of a vehicles turret.\r\n *\r\n * Arguments:\r\n * 0: Vehicle Config <CONFIG>\r\n * 1: Turret indecies <ARRAY>\r\n *\r\n * Return Value:\r\n * Turret config <CONFIG>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\", \"_turretIndex\"];\r\n\r\nfor \"_index\" from 0 to (count _turretIndex - 1) do {\r\n    _config = _config >> \"Turrets\";\r\n\r\n    private _offset = 0;\r\n    private _config2 = _config select 0;\r\n    private _foundClasses = 0;\r\n\r\n    for \"_a\" from 0 to (count _config - 1) do {\r\n        if (isClass _config2) then {\r\n            _foundClasses = _foundClasses + 1;\r\n        } else {\r\n            _offset = _offset + 1;\r\n        };\r\n        _config2 = _config select (_turretIndex select _index) + _offset;\r\n\r\n        if (_foundClasses == _turretIndex select _index) exitWith {};\r\n    };\r\n\r\n    _config = _config2;\r\n};\r\n\r\n_config\r\n"},{"name":"ace_common_fnc_getTurretCopilot","file":"common/functions/fnc_getTurretCopilot.sqf","text":"/*\r\n * Author: commy2\r\n * Get the turret index of a vehicles copilot.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Vehicle Copilot Turret indecies <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\nfullCrew [_vehicle, \"turret\", true] apply {_x select 3} select {\r\n    getNumber ([_vehicle, _x] call CBA_fnc_getTurret >> \"isCopilot\") == 1\r\n} param [0, []] // return\r\n"},{"name":"ace_common_fnc_getTurretDirection","file":"common/functions/fnc_getTurretDirection.sqf","text":"/*\r\n * Author: jaynus\r\n * Get the absolute turret direction for FOV/PIP turret.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Turret Position <ARRAY>\r\n *\r\n * Return Value:\r\n * 0: Position ASL <ARRAY>\r\n * 1: Direction <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_position\"];\r\n\r\nprivate _turret = [_vehicle, _position] call CBA_fnc_getTurret;\r\n\r\nprivate _pov = getText (_turret >> \"memoryPointGunnerOptics\");\r\nprivate _gunBeg = getText (_turret >> \"gunBeg\");\r\nprivate _gunEnd = getText (_turret >> \"gunEnd\");\r\n\r\nTRACE_3(\"\", _pov, _gunBeg, _gunEnd);\r\n\r\n// Pull the PIP pov or barrel direction, depending on how the model is set up\r\nprivate _povPos = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition _pov)); //@todo AGLToASL ?\r\nprivate _povDir = [0,0,0];\r\n\r\nif (_pov == \"pip0_pos\") then {\r\n    private _pipDir = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition \"pip0_dir\"));\r\n\r\n    _povDir = _pipDir vectorDiff _povPos;\r\n} else {\r\n    private _gunBeginPos = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition _gunBeg));\r\n    private _gunEndPos = ATLtoASL (_vehicle modelToWorldVisual (_vehicle selectionPosition _gunEnd));\r\n\r\n    _povDir = _gunBeginPos vectorDiff _gunEndPos;\r\n};\r\n\r\n[_povPos, _povDir]\r\n"},{"name":"ace_common_fnc_getTurretGunner","file":"common/functions/fnc_getTurretGunner.sqf","text":"/*\r\n * Author: commy2\r\n * Get the turret index of a vehicles gunner.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Vehicle Gunner Turret indecies <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\nfullCrew [_vehicle, \"gunner\", true] apply {_x select 3} param [0, []] // return\r\n"},{"name":"ace_common_fnc_getTurretIndex","file":"common/functions/fnc_getTurretIndex.sqf","text":"/*\r\n * Author: commy2\r\n * Get the turret index of a units current turret.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Turret Index <ARRAY>\r\n *\r\n * Example:\r\n * [ace_player] call ace_common_fnc_getTurretIndex\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nprivate _vehicle = vehicle _unit;\r\nif (_unit == _vehicle) exitWith {[]};\r\n\r\nscopeName \"main\"; \r\n\r\n{\r\n    if (_unit == (_vehicle turretUnit _x)) then {_x breakOut \"main\"};\r\n    nil\r\n} count allTurrets [_vehicle, true];\r\n\r\n[]\r\n"},{"name":"ace_common_fnc_getTurrets","file":"common/functions/fnc_getTurrets.sqf","text":"/*\r\n * Author: commy2\r\n * Get all turret indicies of a vehicle type.\r\n *\r\n * Arguments:\r\n * 0: Vehicle type <STRING>\r\n *\r\n * Return Value:\r\n * Turret Indecies <ARRAY>\r\n *\r\n * Public: No\r\n *\r\n * Note: It's advised to use allTurrets [_vehicle, true] instead whenever possible\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_getTurrets\",\"3.7.0\",\"allTurrets [_vehicle, true]\");\r\n\r\nparams [\"_type\"];\r\n\r\nprivate _varName = format [QGVAR(CachedTurrets_%1), _type];\r\nprivate _turrets = + (uiNamespace getVariable _varName);\r\n\r\nif (!isNil \"_turrets\") exitWith {_turrets};\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> _type;\r\n\r\n_turrets = [];\r\n\r\nprivate _fnc_addTurret = {\r\n    params [\"_config\", \"_path\"];\r\n\r\n    _config = _config >> \"Turrets\";\r\n\r\n    private _offset = 0;\r\n\r\n    for \"_index\" from 0 to (count _config - 1) do {\r\n        private _path2 = _path + [_index - _offset];\r\n        private _config2 = _config select _index;\r\n\r\n        if (isClass _config2) then {\r\n            _turrets pushBack _path2;\r\n            [_config2, _path2] call _fnc_addTurret;\r\n        } else {\r\n            _offset = _offset + 1;\r\n        };\r\n    };\r\n};\r\n\r\n[_config, []] call _fnc_addTurret;\r\n\r\nuiNamespace setVariable [_varName, _turrets];\r\n\r\n_turrets\r\n"},{"name":"ace_common_fnc_getTurretsFFV","file":"common/functions/fnc_getTurretsFFV.sqf","text":"/*\r\n * Author: commy2\r\n * Get the turret indices of ffv turrets.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Vehicle FFV Turret indecies <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\nfullCrew [_vehicle, \"turret\", true] select {_x select 4} apply {_x select 3} // return\r\n"},{"name":"ace_common_fnc_getTurretsOther","file":"common/functions/fnc_getTurretsOther.sqf","text":"/*\r\n * Author: commy2\r\n * Get the turret indices of other turrets (not gunner, commander, copilot or ffv).\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * Vehicle Other Turret indecies <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\nfullCrew [_vehicle, \"turret\", true] select {!(_x select 4)} apply {_x select 3} select {\r\n    getNumber ([_vehicle, _x] call CBA_fnc_getTurret >> \"isCopilot\") != 1\r\n} // return\r\n"},{"name":"ace_common_fnc_getUavControlPosition","file":"common/functions/fnc_getUavControlPosition.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Returns the seat position of a UAV that the unit is activly controling.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Position <STRING>\r\n *   \"\" = not connected to anything or activly controling\r\n *   \"DRIVER\"\r\n *   \"GUNNER\"\r\n *\r\n * Example:\r\n * [ACE_Player] call ace_common_fnc_getUavControlPosition\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nprivate _uav = getConnectedUAV _unit;\r\n\r\nif (isNull _uav) exitWith {\"\"};\r\n\r\nprivate _positionArray = UAVControl _uav;\r\nprivate _playerIndex = _positionArray find _unit;\r\n\r\nif (_playerIndex == -1) exitWith {\"\"};\r\n\r\n_positionArray select (_playerIndex + 1)\r\n"},{"name":"ace_common_fnc_getVehicleCargo","file":"common/functions/fnc_getVehicleCargo.sqf","text":"/*\r\n * Author: commy2\r\n * Get the vehicle cargo positions. Codrivers and ffv positions are not listed.\r\n *\r\n * Arguments:\r\n * 0: Vehicle type <STRING>\r\n *\r\n * Return Value:\r\n * Vehicle cargo positions <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> _vehicle;\r\n\r\nprivate _cargo = [];\r\nprivate _codrivers = getArray (_config >> \"cargoIsCoDriver\");\r\n\r\nfor \"_index\" from 0 to (getNumber (_config >> \"transportSoldier\") - 1) do {\r\n    if !(_index in _codrivers && {_vehicle isKindOf \"Car\"} && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\r\n        _cargo pushBack _index;\r\n    };\r\n};\r\n\r\n_cargo\r\n"},{"name":"ace_common_fnc_getVehicleCodriver","file":"common/functions/fnc_getVehicleCodriver.sqf","text":"/*\r\n * Author: commy2\r\n * Get the vehicle codriver positions.\r\n *\r\n * Arguments:\r\n * 0: Vehicle type <STRING>\r\n *\r\n * Return Value:\r\n * Vehicle codriver positions <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> _vehicle;\r\n\r\nprivate _cargo = [];\r\nprivate _codrivers = getArray (_config >> \"cargoIsCoDriver\");\r\n\r\nfor \"_index\" from 0 to (getNumber (_config >> \"transportSoldier\") - 1) do {\r\n    if (_index in _codrivers && {_vehicle isKindOf \"Car\"} && {!(_vehicle isKindOf \"Wheeled_APC_F\")}) then {\r\n        _cargo pushBack _index;\r\n    };\r\n};\r\n\r\n_cargo\r\n"},{"name":"ace_common_fnc_getVehicleCrew","file":"common/functions/fnc_getVehicleCrew.sqf","text":"/*\r\n * Author: commy2\r\n * Returns array of crew member objects.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Slot types filter (default: [\"driver\", \"commander\", \"gunner\", \"turret\", \"cargo\", \"ffv\"]) <ARRAY>\r\n *\r\n * Return Value:\r\n * Crew <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", [\"_types\", [\"driver\", \"commander\", \"gunner\", \"turret\", \"cargo\", \"ffv\"]]];\r\n\r\nprivate _crew = [];\r\n\r\n// iterate through all crew members\r\n{\r\n    // this unit is in a ffv position. check if we search for ffv.\r\n    if (_x select 4) then {\r\n        if (\"ffv\" in _types) then {\r\n            _crew pushBack (_x select 0);\r\n        };\r\n    } else {\r\n        // otherwise check if we search for that type. toLower, because fullCrew returns \"driver\" vs. \"Turret\".\r\n        if (toLower (_x select 1) in _types) then {\r\n            _crew pushBack (_x select 0);\r\n        };\r\n    };\r\n    false\r\n} count fullCrew _vehicle;\r\n\r\n_crew\r\n"},{"name":"ace_common_fnc_getVehicleUAVCrew","file":"common/functions/fnc_getVehicleUAVCrew.sqf","text":"/*\r\n * Author: commy2\r\n * Returns array of uav dummy ais.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * UAV Dummy Crew <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\n\r\ncrew _vehicle select {getText (configFile >> \"CfgVehicles\" >> typeOf _x >> \"simulation\") == \"UAVPilot\"} // return\r\n"},{"name":"ace_common_fnc_getVersion","file":"common/functions/fnc_getVersion.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the version number of the current ACE build.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * ACE Version <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ngetText (configFile >> \"CfgPatches\" >> \"ACE_main\" >> \"version\") // return\r\n"},{"name":"ace_common_fnc_getWeaponAzimuthAndInclination","file":"common/functions/fnc_getWeaponAzimuthAndInclination.sqf","text":"/*\r\n * Author: commy2\r\n * Get local players weapon direction and slope.\r\n *\r\n * Arguments:\r\n * 0: Weapon name <STRING>\r\n *\r\n * Return Value:\r\n * 0: Azimuth <NUMBER>\r\n * 1: Inclination <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_weapon\"];\r\n\r\nprivate _direction = ACE_player weaponDirection _weapon;\r\n\r\nprivate _azimuth = (_direction select 0) atan2 (_direction select 1);\r\nprivate _inclination = asin (_direction select 2);\r\n\r\nif (_azimuth < 0) then {_azimuth = _azimuth + 360};\r\n\r\n[_azimuth, _inclination]\r\n"},{"name":"ace_common_fnc_getWeaponIndex","file":"common/functions/fnc_getWeaponIndex.sqf","text":"/*\r\n * Author: commy2\r\n * Get the index of the weapon.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * Weapon index <NUMBER>\r\n *   0 = primary\r\n *   1 = secondary\r\n *   2 = handgun\r\n *  -1 = other\r\n *\r\n * Public: Yes\r\n */\r\n #include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\n\r\nif (_weapon == \"\") exitWith {-1};\r\n\r\n[\r\n    primaryWeapon _unit,\r\n    secondaryWeapon _unit,\r\n    handgunWeapon _unit\r\n] find _weapon // return\r\n"},{"name":"ace_common_fnc_getWeaponModes","file":"common/functions/fnc_getWeaponModes.sqf","text":"/*\r\n * Author: commy2\r\n * Get the available firing modes of a weapon. Will ignore the AI helper modes.\r\n *\r\n * Arguments:\r\n * 0: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * Firing Modes <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_weapon\", \"\", [\"\"]]];\r\n\r\nprivate _config = configFile >> \"CfgWeapons\" >> _weapon;\r\n\r\nprivate _modes = [];\r\n\r\n{\r\n    if (getNumber (_config >> _x >> \"showToPlayer\") == 1) then {\r\n        _modes pushBack _x;\r\n    };\r\n\r\n    if (_x == \"this\") then {\r\n        _modes pushBack _weapon;\r\n    };\r\n    false\r\n} count getArray (_config >> \"modes\");\r\n\r\n_modes\r\n"},{"name":"ace_common_fnc_getWeaponMuzzles","file":"common/functions/fnc_getWeaponMuzzles.sqf","text":"/*\r\n * Author: commy2\r\n * Get the muzzles of a weapon.\r\n *\r\n * Arguments:\r\n * 0: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * All weapon muzzles <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_weapon\", \"\", [\"\"]]];\r\n\r\nprivate _muzzles = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"muzzles\");\r\n\r\n{\r\n    if (_x == \"this\") then {\r\n        _muzzles set [_forEachIndex, configName (configFile >> \"CfgWeapons\" >> _weapon)];\r\n    };\r\n} forEach _muzzles;\r\n\r\n_muzzles\r\n"},{"name":"ace_common_fnc_getWeaponState","file":"common/functions/fnc_getWeaponState.sqf","text":"/*\r\n * Author: commy2\r\n * Return current state of the weapon. Attachments and magazines with ammo.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: weapon (optional, default: units current weapon) <STRING>\r\n *\r\n * Return Value:\r\n * 0: Attachements <ARRAY>\r\n * 1: Muzzles <ARRAY>\r\n * 2: Magazines <ARRAY>\r\n * 3: Ammo <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_weapon\", nil, [\"\"]]];\r\n\r\nif (isNil \"_weapon\") then {\r\n    _weapon = currentWeapon _unit;\r\n};\r\n\r\nprivate _attachments = [_unit weaponAccessories _weapon] param [0, [\"\",\"\",\"\",\"\"]];\r\n\r\nprivate _muzzles = _weapon call FUNC(getWeaponMuzzles);\r\n\r\n// get loaded magazines and ammo\r\nprivate _magazines = _muzzles apply {\"\"};\r\nprivate _ammo = _muzzles apply {0};\r\n\r\n{\r\n    if (_x select 2) then {\r\n        private _index = _muzzles find (_x select 4);\r\n\r\n        if (_index != -1) then {\r\n            _magazines set [_index, _x select 0];\r\n            _ammo set [_index, _x select 1];\r\n        };\r\n    };\r\n    false\r\n} count magazinesAmmoFull _unit;\r\n\r\n[_attachments, _muzzles, _magazines, _ammo]; \r\n"},{"name":"ace_common_fnc_getWeaponType","file":"common/functions/fnc_getWeaponType.sqf","text":"/*\r\n * Author: commy2\r\n * Check what kind of weapon the given class name is.\r\n *\r\n * Arguments:\r\n * 0: Weapons <STRING>\r\n *\r\n * Return Value:\r\n * Slot index <NUMBER>\r\n *   1 = primary\r\n *   2 = secondary\r\n *   3 = handgun\r\n *  -1 = other\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_weapon\"];\r\n\r\nprivate _type = [getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"type\")] call FUNC(binarizeNumber);\r\n\r\nprivate _index = 0;\r\n\r\nwhile {!(_type select _index) && {_index < 16}} do {\r\n    _index = _index + 1;\r\n};\r\n\r\n[-1, 1, 3, 2] select (([0, 1, 2] find _index) + 1) // return\r\n"},{"name":"ace_common_fnc_getWindDirection","file":"common/functions/fnc_getWindDirection.sqf","text":"/*\r\n * Author: commy2\r\n * Get the compass direction the wind is blowing from.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Wind cardinal direction <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nlocalize ([\r\n    LSTRING(S),\r\n    LSTRING(SSW),\r\n    LSTRING(SW),\r\n    LSTRING(WSW),\r\n    LSTRING(W),\r\n    LSTRING(WNW),\r\n    LSTRING(NW),\r\n    LSTRING(NNW),\r\n    LSTRING(N),\r\n    LSTRING(NNE),\r\n    LSTRING(NE),\r\n    LSTRING(ENE),\r\n    LSTRING(E),\r\n    LSTRING(ESE),\r\n    LSTRING(SE),\r\n    LSTRING(SSE),\r\n    LSTRING(S)\r\n] select (round (windDir / 360 * 16))) // return\r\n"},{"name":"ace_common_fnc_getZoom","file":"common/functions/fnc_getZoom.sqf","text":"/*\r\n * Author: commy2\r\n * Returns a value depending on current zoom level.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Zoom <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!hasInterface) exitWith {0};\r\n\r\n(0.5 - ((worldToScreen positionCameraToWorld [0, 1, 1]) select 1)) * (getResolution select 5) \r\n"},{"name":"ace_common_fnc_globalEvent","file":"common/functions/fnc_globalEvent.sqf","text":"#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\", \"_eventArgs\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\n[_eventName, _eventArgs] call CBA_fnc_globalEvent;\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_globalEvent\",\"3.8.0\",\"CBA_fnc_globalEvent\");\r\n"},{"name":"ace_common_fnc_goKneeling","file":"common/functions/fnc_goKneeling.sqf","text":"/*\r\n * Author: commy2\r\n * Move unit to kneeling position (only if not yet prone).\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// Animation changes even inside vehicle post-1.60\r\nif (stance _unit == \"PRONE\" || {vehicle ACE_player != ACE_player}) exitWith {};\r\n\r\n[\r\n    _unit,\r\n    [\"AmovPknlMstpSnonWnonDnon\", \"AmovPknlMstpSlowWrflDnon\", \"AmovPknlMstpSrasWlnrDnon\", \"AmovPknlMstpSlowWpstDnon\", \"AmovPknlMstpSoptWbinDnon\"] select (([\"\", primaryWeapon _unit, secondaryWeapon _unit, handgunWeapon _unit, binocular _unit] find currentWeapon _unit) max 0)\r\n] call FUNC(doAnimation);\r\n"},{"name":"ace_common_fnc_hadamardProduct","file":"common/functions/fnc_hadamardProduct.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Returns the Hadamard Product of two vectors.\r\n * (x hadamard y) = [x1*y1, x2*y2, x3*y3]\r\n *\r\n * Arguments:\r\n * 0: Vector 1 <ARRAY>\r\n * 1: Vector 2 <ARRAY>\r\n *\r\n * Return Value:\r\n * Hadamard Product <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vector1\", \"_vector2\"];\r\n\r\nprivate _newVector = [];\r\n\r\nfor \"_i\" from 0 to ((count _vector1 min count _vector2) - 1) do {\r\n    _newVector pushBack ((_vector1 select _i) * (_vector2 select _i));\r\n};\r\n\r\n_newVector\r\n"},{"name":"ace_common_fnc_handleEngine","file":"common/functions/fnc_handleEngine.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Blocks turning on the vehicles engine if set by the status effect handler.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Engine state <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\", \"_engineOn\"];\r\n\r\nif (local _vehicle && {_engineOn} && {_vehicle getVariable [QGVAR(blockEngine), false]}) then {\r\n    _vehicle engineOn false;\r\n};\r\n"},{"name":"ace_common_fnc_handleModifierKey","file":"common/functions/fnc_handleModifierKey.sqf","text":"/*\r\n * Author: commy2\r\n * Handles key down event for modifier key.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public : No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (_this select 3) then {ACE_modifier = 1};\r\n\r\nfalse\r\n"},{"name":"ace_common_fnc_handleModifierKeyUp","file":"common/functions/fnc_handleModifierKeyUp.sqf","text":"/*\r\n * Author: commy2\r\n * Handles key up event for modifier key.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public : No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_modifier = 0;\r\n\r\nfalse\r\n"},{"name":"ace_common_fnc_handleScrollWheel","file":"common/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: commy2\r\n * Handles MouseZChanged event.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public : No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n{\r\n    [_this select 1] call _x;\r\n    false\r\n} count ((missionNamespace getVariable [\"ACE_EventHandler_ScrollWheel\", [-1, [], []]]) select 2);\r\n\r\nnil\r\n"},{"name":"ace_common_fnc_hasHatch","file":"common/functions/fnc_hasHatch.sqf","text":"/*\r\n * Author: commy2\r\n * Check if unit is in a vehicle position where it can turn in or out.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Unit has a hatch? <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nprivate _vehicle = vehicle _unit;\r\n\r\nif (_unit == _vehicle) exitWith {false};\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n\r\nif (getNumber (_config >> \"hideProxyInCombat\") != 1) exitWith {false};\r\n\r\nif (_unit == driver _vehicle) exitWith {\r\n    getNumber (_config >> \"forceHideDriver\") == 0; // return\r\n};\r\n\r\nprivate _turret = [_unit] call FUNC(getTurretIndex);\r\n\r\nif (_turret isEqualTo []) exitWith {false};\r\n\r\nprivate _turretConfig = [_config, _turret] call FUNC(getTurretConfigPath);\r\n\r\ngetNumber (_turretConfig >> \"forceHideGunner\") == 0; // return\r\n"},{"name":"ace_common_fnc_hashCreate","file":"common/functions/fnc_hashCreate.sqf","text":"/*\r\n * Author: ?\r\n * Returns an empty hash structure\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Empty Hash Structure <ARRAY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n[[],[]]\r\n"},{"name":"ace_common_fnc_hashGet","file":"common/functions/fnc_hashGet.sqf","text":"/*\r\n * Author: ?\r\n * Returns value attached to key in given hash.\r\n *\r\n * Arguments:\r\n * 0: Hash <ARRAY>\r\n * 1: Key <STRING>\r\n *\r\n * Return Value:\r\n * Value <ANY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_hash\", \"_key\"];\r\n\r\nERRORDATA(2);\r\nprivate _val = nil;\r\ntry {\r\n    if(VALIDHASH(_hash)) then {\r\n        private _index = (_hash select 0) find _key;\r\n        if(_index != -1) then {\r\n            _val = (_hash select 1) select _index;\r\n            if(IS_STRING(_val) && {_val == \"ACREHASHREMOVEDONOTUSETHISVAL\"}) then {\r\n                _val = nil;\r\n            };\r\n        };\r\n    } else {\r\n        ERROR(\"Input hash is not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\n\r\nif (isNil \"_val\") exitWith { nil };\r\n\r\n_val\r\n"},{"name":"ace_common_fnc_hashHasKey","file":"common/functions/fnc_hashHasKey.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// diag_log text format[\"%1 HASH HAS KEY: %2\", diag_tickTime, _this];\r\n\r\nparams [\"_hash\", \"_key\"];\r\n\r\nERRORDATA(2);\r\nprivate _val = false;\r\ntry {\r\n    if(VALIDHASH(_hash)) then {\r\n        private _index = (_hash select 0) find _key;\r\n        if(_index != -1) then {\r\n            _val = true;\r\n        };\r\n    } else {\r\n        ERROR(\"Input hash is not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\n_val\r\n"},{"name":"ace_common_fnc_hashListCreateHash","file":"common/functions/fnc_hashListCreateHash.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_hashList\"];\r\n\r\nERRORDATA(1);\r\nprivate _hashKeys = [];\r\ntry {\r\n    if(VALIDHASH(_hashList)) then {\r\n        _hashKeys = (_hashList select 0);\r\n    } else {\r\n        ERROR(\"Input hashlist is not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\n[_hashKeys, []];\r\n"},{"name":"ace_common_fnc_hashListCreateList","file":"common/functions/fnc_hashListCreateList.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_keys\"];\r\n\r\n[_keys,[]];\r\n"},{"name":"ace_common_fnc_hashListPush","file":"common/functions/fnc_hashListPush.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_hashList\", \"_value\"];\r\n\r\nERRORDATA(2);\r\ntry {\r\n    if(VALIDHASH(_hashList)) then {\r\n        [_hashList, (count (_hashList select 1)), _value] call FUNC(hashListSet);\r\n    } else {\r\n        ERROR(\"Input hashlist in push not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\n"},{"name":"ace_common_fnc_hashListSelect","file":"common/functions/fnc_hashListSelect.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_hashList\", \"_index\"];\r\n\r\nERRORDATA(2);\r\nprivate _hash = nil;\r\ntry {\r\n    if(VALIDHASH(_hashList)) then {\r\n        _hashList params [\"_keys\", \"_hashes\"];\r\n\r\n        if(_index < (count _hashes)) then {\r\n            private _values = _hashes select _index;\r\n\r\n            _hash = [_keys, _values, 1];\r\n        } else {\r\n            ERROR(\"Index of hashlist is out of range\");\r\n        };\r\n    } else {\r\n        ERROR(\"Input hashlist is not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\n\r\nif (isNil \"_hash\") exitWith { nil };\r\n_hash;\r\n"},{"name":"ace_common_fnc_hashListSet","file":"common/functions/fnc_hashListSet.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_hashList\", \"_index\", \"_value\"];\r\n\r\nERRORDATA(3);\r\ntry {\r\n    if(VALIDHASH(_hashList)) then {\r\n        if(VALIDHASH(_value)) then {\r\n            _value params [\"\", \"_vals\"];\r\n\r\n            (_hashList select 1) set[_index, _vals];\r\n        } else {\r\n            ERROR(\"Set hash in hashlist is not valid\");\r\n        };\r\n    } else {\r\n        ERROR(\"Input hashlist is not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\n"},{"name":"ace_common_fnc_hashRem","file":"common/functions/fnc_hashRem.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_hash\", \"_key\"];\r\n\r\nERRORDATA(2);\r\nprivate _val = nil;\r\ntry {\r\n    if(VALIDHASH(_hash)) then {\r\n        private _index = (_hash select 0) find _key;\r\n        if(_index != -1) then {\r\n            (_hash select 1) set[_index, \"ACREHASHREMOVEDONOTUSETHISVAL\"];\r\n            // is this hash is not part of a hash list?\r\n            // if it is we need to leave the keys intact.\r\n            if((count _hash) == 2) then {\r\n                // if this is a standalone hash then we can clean it up\r\n                (_hash select 0) set[_index, \"ACREHASHREMOVEDONOTUSETHISVAL\"];\r\n                _hash set[0, ((_hash select 0) - [\"ACREHASHREMOVEDONOTUSETHISVAL\"])];\r\n                _hash set[1, ((_hash select 1) - [\"ACREHASHREMOVEDONOTUSETHISVAL\"])];\r\n            };\r\n        };\r\n    } else {\r\n        ERROR(\"Input hash is not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\ntrue\r\n"},{"name":"ace_common_fnc_hashSet","file":"common/functions/fnc_hashSet.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// diag_log text format[\"%1 HASH SET: %2\", diag_tickTime, _this];\r\n\r\nparams [\"_hash\", \"_key\", \"_val\"];\r\n\r\nERRORDATA(3);\r\ntry {\r\n    if(VALIDHASH(_hash)) then {\r\n        private _index = (_hash select 0) find _key;\r\n        if(_index == -1) then {\r\n            _index = (_hash select 0) find \"ACREHASHREMOVEDONOTUSETHISVAL\";\r\n            if(_index == -1) then {\r\n                _index = (count (_hash select 0));\r\n            };\r\n            (_hash select 0) set[_index, _key];\r\n        };\r\n        (_hash select 1) set[_index, _val];\r\n    } else {\r\n        ERROR(\"Input hash is not valid\");\r\n    };\r\n} catch {\r\n    HANDLECATCH;\r\n};\r\n"},{"name":"ace_common_fnc_hasItem","file":"common/functions/fnc_hasItem.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if unit has item\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Item Classname <STRING>\r\n *\r\n * Return Value:\r\n * has Item <BOOL>\r\n *\r\n * Public: yes\r\n *\r\n * Note: Case sensitive\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_item\", \"\", [\"\"]]];\r\n\r\n_item in items _unit // return\r\n"},{"name":"ace_common_fnc_hasMagazine","file":"common/functions/fnc_hasMagazine.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if given unit has a magazine of given classname\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Magazine Classname <STRING>\r\n *\r\n * Return Value:\r\n * has Magazine <BOOL>\r\n *\r\n * Public: yes\r\n *\r\n * Note: Case sensitive\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_magazine\", \"\", [\"\"]]];\r\n\r\n_magazine in magazines _unit // return\r\n"},{"name":"ace_common_fnc_headBugFix","file":"common/functions/fnc_headBugFix.sqf","text":"/*\r\n * Author: rocko\r\n * Fixes animation issues that may get you stuck\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n *\r\n * Note: Has to be spawned not called\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _unit = ACE_player;\r\nprivate _anim = animationState _unit;\r\n\r\n[QGVAR(headbugFixUsed), [profileName, _anim]] call CBA_fnc_serverEvent;\r\n[QGVAR(headbugFixUsed), [profileName, _anim]] call CBA_fnc_localEvent;\r\n\r\nif (_unit != vehicle _unit  || {!([_unit, objNull, [\"isNotSitting\"]] call FUNC(canInteractWith))}) exitWith {false};\r\n\r\nprivate _pos = getPosATL _unit;\r\nprivate _dir = getDir _unit;\r\n\r\ntitleCut [\"\", \"BLACK\"];\r\n[_unit, \"headBugFix\"] call FUNC(hideUnit);\r\n\r\n// create invisible headbug fix vehicle\r\nprivate _dummy = createVehicle [\"ACE_Headbug_Fix\", _pos, [], 0, \"NONE\"];\r\n_dummy setDir _dir;\r\n_unit moveInAny _dummy;\r\nsleep 0.1; // @todo\r\n\r\nunassignVehicle _unit;\r\n_unit action [\"Eject\", vehicle _unit];\r\n_unit setDir _dir;\r\n_unit setPosATL _pos;\r\nsleep 1.0;\r\n\r\ndeleteVehicle _dummy;\r\n\r\n[_unit, \"headBugFix\"] call FUNC(unhideUnit);\r\ntitleCut [\"\", \"PLAIN\"];\r\ntrue\r\n"},{"name":"ace_common_fnc_hideUnit","file":"common/functions/fnc_hideUnit.sqf","text":"/*\r\n * Author: SilentSpike (based on muteUnit)\r\n * Globally hides a unit. This allows the handling of more than one reason to hide an object globally.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Reason to hide the unit <STRING>\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Example:\r\n * [ACE_Player, \"SpectatorMode\"] call ace_common_fnc_hideUnit\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_reason\"];\r\n\r\nif (isNull _unit) exitWith {};\r\n\r\nprivate _setHiddenReasons = _unit getVariable [QGVAR(setHiddenReasons), []];\r\n\r\nif !(_reason in _setHiddenReasons) then {\r\n    _setHiddenReasons pushBack _reason;\r\n    _unit setVariable [QGVAR(setHiddenReasons), _setHiddenReasons, true];\r\n};\r\n\r\nif !(isObjectHidden _unit) then {\r\n    [QGVAR(hideObjectGlobal), [_unit, true]] call CBA_fnc_serverEvent;\r\n};\r\n"},{"name":"ace_common_fnc_insertionSort","file":"common/functions/fnc_insertionSort.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Sorts an array of numbers\r\n *\r\n * Arguments:\r\n * 0: array <ARRAY>\r\n * 1: ascending (optional) <BOOL>\r\n *\r\n * Return Value:\r\n * sortedArray (ARRAY)\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_list\", [\"_ascending\", true]];\r\n\r\n_list = + _list; // copy array to not alter the original one\r\n\r\nfor \"_i\" from 1 to (count _list - 1) do {\r\n    private _tmp = _list select _i;\r\n    _j = _i;\r\n\r\n    while {_j >= 1 && {_tmp < _list select (_j - 1)}} do {\r\n        _list set [_j, _list select (_j - 1)];\r\n        _j = _j - 1;\r\n    };\r\n\r\n    _list set [_j, _tmp];\r\n};\r\n\r\nif (!_ascending) then {\r\n    reverse _list;\r\n};\r\n\r\n_list\r\n"},{"name":"ace_common_fnc_interpolateFromArray","file":"common/functions/fnc_interpolateFromArray.sqf","text":"/*\r\n * Author: commy2\r\n * Interpolates between two set points in a curve.\r\n *\r\n * Arguments:\r\n * 0: List of numbers to interpolate from <ARRAY>\r\n * 1: Value / index <NUMBER>\r\n *\r\n * Return Value:\r\n * Interpolation result <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_array\", \"_value\"];\r\n\r\nprivate _min = _array select floor _value;\r\nprivate _max = _array select ceil _value;\r\n\r\n_min + (_max - _min) * (_value % 1) // return\r\n"},{"name":"ace_common_fnc_inTransitionAnim","file":"common/functions/fnc_inTransitionAnim.sqf","text":"/*\r\n * Author: commy2\r\n * Check if given unit is in a transitional animation\r\n *\r\n * Arguments:\r\n * 0: A soldier <Object>\r\n *\r\n * Return Value:\r\n * <Bool>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ngetNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> animationState (_this select 0) >> \"looped\") == 0 // return\r\n"},{"name":"ace_common_fnc_isAutoWind","file":"common/functions/fnc_isAutoWind.sqf","text":"/*\r\n * Author: commy2\r\n * Check if wind is set on auto.\r\n *\r\n * Arguments\r\n * None\r\n *\r\n * Return Value:\r\n * This mission has automatic wind? <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n[\"Mission\", \"Intel\", \"windForced\"] call FUNC(getNumberFromMissionSQM) != 1 // return\r\n"},{"name":"ace_common_fnc_isAwake","file":"common/functions/fnc_isAwake.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if unit is awake. Will be false when death or unit is unconscious.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * if unit is awake <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n!(_unit getVariable [\"ACE_isUnconscious\", false]) && alive _unit && !(_unit getVariable [\"ACE_isDead\", false]) // return\r\n"},{"name":"ace_common_fnc_isEngineer","file":"common/functions/fnc_isEngineer.sqf","text":"/*\r\n * Author: marc_book, edited by commy2\r\n * Checks if a unit is an engineer.\r\n *\r\n * Arguments:\r\n * 0: unit to be checked <OBJECT>\r\n *\r\n * Return Value:\r\n * is the unit an engineer <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_common_fnc_isEngineer\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _isEngineer = _unit getVariable [\"ACE_isEngineer\", getNumber (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"engineer\") == 1];\r\n//Handle ace_repair modules setting this to a number\r\nif (_isEngineer isEqualType 0) then {_isEngineer = _isEngineer > 0};\r\n\r\n_isEngineer\r\n"},{"name":"ace_common_fnc_isEOD","file":"common/functions/fnc_isEOD.sqf","text":"/*\r\n * Author: Garth de Wet (LH)\r\n * Checks whether the passed unit is an explosive specialist.\r\n * Either through config entry: \"canDeactivateMines\"\r\n * or\r\n * unit setVariable [\"ACE_isEOD\", true]\r\n *\r\n * Arguments:\r\n * 0: Unit to check if is a specialist <OBJECT>\r\n *\r\n * Return Value:\r\n * is the unit an EOD <BOOL>\r\n *\r\n * Example:\r\n * isSpecialist = [player] call FUNC(isEOD);\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n_unit getVariable [\"ACE_isEOD\", getNumber (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"canDeactivateMines\") == 1] // return\r\n"},{"name":"ace_common_fnc_isFeatureCameraActive","file":"common/functions/fnc_isFeatureCameraActive.sqf","text":"/*\r\n * Author: Sniperwolf572\r\n * Checks if one of the following common feature cameras is active:\r\n *\r\n * - Curator\r\n * - ACE Spectator\r\n * - Arsenal camera (BIS_fnc_arsenal)\r\n * - Establishing shot (BIS_fnc_establishingShot)\r\n * - Splendid camera (BIS_fnc_camera)\r\n * - Animation viewer (BIS_fnc_animViewer)\r\n * - Classic camera (BIS_fnc_cameraOld)\r\n *\r\n * Arguments:\r\n * 0: None <NIL>\r\n *\r\n * Return Value:\r\n * A feature camera is active <BOOL>\r\n *\r\n * Example:\r\n * [] call ace_common_fnc_isFeatureCameraActive\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n!(\r\n    isNull curatorCamera && // Curator\r\n    {isNull (GETMVAR(EGVAR(spectator,camera),objNull))} && // ACE Spectator\r\n    {isNull (GETUVAR(BIS_fnc_arsenal_cam, objNull))} && // Arsenal camera\r\n    {isNull (GETMVAR(BIS_fnc_establishingShot_fakeUAV, objNull))} && // Establishing shot camera\r\n    {isNull (GETMVAR(BIS_fnc_camera_cam, objNull))} && // Splendid camera\r\n    {isNull (GETUVAR(BIS_fnc_animViewer_cam, objNull))} && // Animation viewer camera\r\n    {isNull (GETMVAR(BIS_DEBUG_CAM, objNull))} // Classic camera\r\n) // return\r\n"},{"name":"ace_common_fnc_isInBuilding","file":"common/functions/fnc_isInBuilding.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit is in a building. Will return true if the unit is sitting in a bush.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Is the unit in a building? <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define CHECK_DISTANCE 10\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nprivate _position = eyePos _unit;\r\n\r\nprivate _intersections = 0;\r\n\r\nif (lineIntersects [_position, _position vectorAdd [0, 0, +CHECK_DISTANCE]]) then {\r\n  _intersections = _intersections + 1;\r\n};\r\n\r\nif (lineIntersects [_position, _position vectorAdd [+CHECK_DISTANCE, 0, 0]]) then {\r\n  _intersections = _intersections + 1;\r\n};\r\n\r\nif (lineIntersects [_position, _position vectorAdd [-CHECK_DISTANCE, 0, 0]]) then {\r\n  _intersections = _intersections + 1;\r\n};\r\n\r\nif (lineIntersects [_position, _position vectorAdd [0, +CHECK_DISTANCE, 0]]) then {\r\n  _intersections = _intersections + 1;\r\n};\r\n\r\nif (lineIntersects [_position, _position vectorAdd [0, -CHECK_DISTANCE, 0]]) then {\r\n  _intersections = _intersections + 1;\r\n};\r\n\r\n_intersections > 3\r\n"},{"name":"ace_common_fnc_isModLoaded","file":"common/functions/fnc_isModLoaded.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check in cfgPatches if modification is loaded\r\n *\r\n * Arguments:\r\n * 0: Mod Name or Classname of the mod in cfgPatches <STRING>\r\n *\r\n * Return Value:\r\n * if modification is loaded <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_modName\", \"\", [\"\"]]];\r\n\r\nisClass (configFile >> \"CfgPatches\" >> _modName) // return\r\n"},{"name":"ace_common_fnc_isPlayer","file":"common/functions/fnc_isPlayer.sqf","text":"/*\r\n * Author: bux578, commy2, akalegman\r\n * Checks if a unit is a player / curator controlled unit.\r\n * This now includes both local and non-local remote controlled zeus units. (Remotes from another zeus machine)\r\n *\r\n * Arguments:\r\n * 0: unit to be checked <OBJECT>\r\n * 1: exclude remote controlled units <BOOL>\r\n *\r\n * Return Value:\r\n * Is unit a player? <BOOL>\r\n *\r\n * Example:\r\n * [cursorTarget, false] call ace_common_fnc_isPlayer;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_excludeRemoteControlled\", false]];\r\n\r\n(isPlayer _unit) || {(!_excludeRemoteControlled) && {!isNull (_unit getVariable [\"bis_fnc_moduleRemoteControl_owner\", objNull])}}\r\n"},{"name":"ace_common_fnc_isUnderwater","file":"common/functions/fnc_isUnderwater.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if unit's head is underwater\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * If unit's head is underwater <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nprivate _return = false;\r\n\r\nif (surfaceIsWater getPosASL _unit) then {\r\n    private _pos = _unit modelToWorldVisual (_unit selectionPosition \"head\");\r\n\r\n    if (_pos select 2 < 0) then {\r\n        _return = true;\r\n    };\r\n};\r\n\r\n_return\r\n"},{"name":"ace_common_fnc_lightIntensityFromObject","file":"common/functions/fnc_lightIntensityFromObject.sqf","text":"/*\r\n * Author: commy2\r\n * Calculate light intensity object 1 recieves from object 2\r\n *\r\n * Arguments:\r\n * 0: Object that recieves light <OBJECT>\r\n * 1: Object that emits light <OBJECT>\r\n *\r\n * Return Value:\r\n * Brightest light level\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_lightSource\"];\r\n\r\nprivate _unitPos = _unit modelToWorld (_unit selectionPosition \"spine3\");\r\nprivate _lightLevel = 0;\r\n\r\nif (_lightSource isKindOf \"CAManBase\") then {\r\n    // handle persons with flashlights\r\n\r\n    private _weapon = currentWeapon _lightSource;\r\n\r\n    if !(_lightSource isFlashlightOn _weapon) exitWith {};\r\n\r\n    private _flashlight = (_lightSource weaponAccessories _weapon) select 1;\r\n\r\n    if (getNumber (configFile >> \"CfgWeapons\" >> _flashlight >> \"ACE_laserpointer\") == 1) exitWith {_lightLevel = 0};\r\n\r\n    private _properties = [[_flashlight], FUNC(getLightPropertiesWeapon), uiNamespace, format [QEGVAR(cache,%1_%2), QUOTE(DFUNC(getLightPropertiesWeapon)), _flashlight], 1E11] call FUNC(cachedCall);\r\n    //_properties = [_flashlight] call FUNC(getLightPropertiesWeapon);\r\n\r\n    private _innerAngle = (_properties select 3) / 2;\r\n    private _outerAngle = (_properties select 4) / 2;\r\n\r\n    private _position = _lightSource modelToWorld (_lightSource selectionPosition \"rightHand\");\r\n    private _direction = _lightSource weaponDirection _weapon;\r\n\r\n    private _directionToUnit = _position vectorFromTo _unitPos;\r\n\r\n    private _distance = _unitPos distance _position;\r\n    private _angle = acos (_direction vectorDotProduct _directionToUnit);\r\n\r\n    _lightLevel = (linearConversion [0, 30, _distance, 1, 0, true]) * (linearConversion [_innerAngle, _outerAngle, _angle, 1, 0, true]);\r\n\r\n} else {\r\n    // handle any object, strcutures, cars, tanks, etc. @todo campfires, burning vehicles\r\n\r\n    private _lights = _lightSource call FUNC(getTurnedOnLights);\r\n\r\n    {\r\n        private _properties = [[_lightSource, _x], FUNC(getLightProperties), uiNamespace, format [QEGVAR(cache,%1_%2_%3), QUOTE(DFUNC(getLightProperties)), typeOf _lightSource, _x], 1E11] call FUNC(cachedCall);\r\n        //_properties = [_lightSource, _x] call FUNC(getLightProperties);\r\n\r\n        // @todo intensity affects range?\r\n        //_properties params [\"_intensity\"];\r\n\r\n        private _innerAngle = (_properties select 3) / 2;\r\n        private _outerAngle = (_properties select 4) / 2;\r\n\r\n        // get world position and direction\r\n        private _position = _lightSource modelToWorld (_lightSource selectionPosition (_properties select 1));\r\n        private _direction = _lightSource modelToWorld (_lightSource selectionPosition (_properties select 2));\r\n\r\n        _direction = _position vectorFromTo _direction;\r\n        private _directionToUnit = _position vectorFromTo _unitPos;\r\n\r\n        private _distance = _unitPos distance _position;\r\n        private _angle = acos (_direction vectorDotProduct _directionToUnit);\r\n\r\n        _lightLevel = _lightLevel max ((linearConversion [0, 30, _distance, 1, 0, true]) * (linearConversion [_innerAngle, _outerAngle, _angle, 1, 0, true]));\r\n\r\n        //systemChat  format [\"%1 %2\", (linearConversion [0, 30, _distance, 1, 0, true]), (linearConversion [_innerAngle, _outerAngle, _angle, 1, 0, true])];\r\n\r\n    } forEach _lights;\r\n\r\n    // handle campfires\r\n    if (inflamed _lightSource) then {\r\n        private _distance = _unitPos distance position _lightSource;\r\n\r\n        _lightLevel = _lightLevel max linearConversion [0, 30, _distance, 0.5, 0, true];\r\n    };\r\n\r\n};\r\n\r\n_lightLevel\r\n"},{"name":"ace_common_fnc_loadPerson","file":"common/functions/fnc_loadPerson.sqf","text":"/*\r\n * Author: Glowbal\r\n * Loads a specified unit into any nearby vehicle\r\n *\r\n * Arguments:\r\n * 0: Unit that will load <OBJECT>\r\n * 1: Unit to be loaded <OBJECT>\r\n *\r\n * Return Value:\r\n * the vehicle that the unitToBeloaded has been loaded in. Returns ObjNull if function failed <OBJECT>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define GROUP_SWITCH_ID QFUNC(loadPerson)\r\n\r\nparams [\"_caller\", \"_unit\"];\r\n\r\nprivate _vehicle = objNull;\r\n\r\nif (!([_caller, _unit, [\"isNotDragging\", \"isNotCarrying\"]] call FUNC(canInteractWith)) || {_caller == _unit}) exitWith {_vehicle};\r\n\r\nprivate _nearVehicles = nearestObjects [_unit, [\"Car\", \"Air\", \"Tank\", \"Ship_F\"], 10];\r\n\r\n{\r\n    TRACE_1(\"\",_x);\r\n    if ((_x emptyPositions \"cargo\" > 0) || {_x emptyPositions \"gunner\" > 0}) exitWith {\r\n        _vehicle = _x;\r\n    };\r\n} forEach _nearVehicles;\r\n\r\nif (!isNull _vehicle) then {\r\n    [_unit, true, GROUP_SWITCH_ID, side group _caller] call FUNC(switchToGroupSide);\r\n    [\"ace_loadPersonEvent\", [_unit, _vehicle, _caller], _unit] call CBA_fnc_targetEvent;\r\n};\r\n\r\n_vehicle\r\n"},{"name":"ace_common_fnc_loadPersonLocal","file":"common/functions/fnc_loadPersonLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Load a person, local\r\n *\r\n * Arguments:\r\n * 0: unit to be loaded <OBJECT>\r\n * 1: vehicle that will beloaded <OBJECT>\r\n * 2: caller that will load <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_caller\"];\r\n\r\nif (!alive _unit) then {\r\n    // _unit = [_unit, _caller] call FUNC(makeCopyOfBody); //func does not exist\r\n};\r\n\r\nprivate _slotsOpen = false;\r\n\r\nif (_vehicle emptyPositions \"cargo\" > 0) then {\r\n    _unit moveInCargo _vehicle;\r\n    _slotsOpen = true;\r\n} else {\r\n    if (_vehicle emptyPositions \"gunner\" > 0) then {\r\n        _unit moveInGunner _vehicle;\r\n        _slotsOpen = true;\r\n    };\r\n};\r\n\r\nif (_slotsOpen) then {\r\n    private _loaded = _vehicle getVariable [QGVAR(loaded_persons),[]];\r\n    _loaded pushBack _unit;\r\n\r\n    _vehicle setVariable [QGVAR(loaded_persons), _loaded, true];\r\n\r\n    if !([_unit] call FUNC(isAwake)) then {\r\n        [{\r\n            (_this select 0) params [\"_unit\", \"_vehicle\"];\r\n\r\n            // wait until the unit is in the vehicle\r\n            if (vehicle _unit != _vehicle) exitWith {\r\n                // kill this pfh if either one is deleted\r\n                if (isNull _unit || isNull _vehicle) then {\r\n                    [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n                };\r\n            };\r\n\r\n            _unit setVariable [QEGVAR(medical,vehicleAwakeAnim), [_vehicle, animationState _unit]];\r\n\r\n            [_unit, [_unit] call FUNC(getDeathAnim), 1, true] call FUNC(doAnimation);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n        }, 0.5, [_unit, _vehicle]] call CBA_fnc_addPerFrameHandler;\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_loadSettingsFromProfile","file":"common/functions/fnc_loadSettingsFromProfile.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Load the user setable settings from the user profile.\r\n * Config < Server UserConfig < Mission Config < Client settings\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Iterate through settings\r\n{\r\n    _x params [\"_name\", \"\", \"_isClientSetable\", \"\", \"\", \"\", \"_isForced\"];\r\n\r\n    // If setting is user setable\r\n    if (_isClientSetable) then {\r\n        // If setting is not forced\r\n        if !(_isForced) then {\r\n            private _profileValue = profileNamespace getVariable _name;\r\n\r\n            // If the setting is stored on the profile\r\n            if !(isNil \"_profileValue\") then {\r\n                // If the profile variable has the correct type\r\n                if (_profileValue isEqualType (missionNamespace getVariable _name)) then {\r\n                    // Load the setting from the profile\r\n                    missionNamespace setVariable [_name, _profileValue];\r\n                };\r\n            };\r\n        };\r\n    };\r\n    false\r\n} count GVAR(settings);\r\n"},{"name":"ace_common_fnc_loadSettingsLocalizedText","file":"common/functions/fnc_loadSettingsLocalizedText.sqf","text":"/*\r\n * Author: Glowbal\r\n * Parse all settings and load the localized displayName and description for all text\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _fnc_parseConfigForDisplayNames = {\r\n    params [\"_optionEntry\"];\r\n\r\n    if !(isClass _optionEntry) exitWith {false};\r\n\r\n    private _values = getArray (_optionEntry >> \"values\");\r\n\r\n    _x set [3, getText (_optionEntry >> \"displayName\")];\r\n    _x set [4, getText (_optionEntry >> \"description\")];\r\n    _x set [5, _values];\r\n    _x set [8, getText (_optionEntry >> \"category\")];\r\n\r\n    {\r\n        private _text = _x;\r\n\r\n        if (_text isEqualType \"\" && {count _text > 1} && {_text select [0, 1] == \"$\"}) then {\r\n            _text = localize (_text select [1]); //chop off the leading $\r\n            _values set [_forEachIndex, _text];\r\n        };\r\n    } forEach _values;\r\n\r\n    if (!(_values isEqualTo [])) then {\r\n        if (_typeOf != \"SCALAR\") then {\r\n            ACE_LOGWARNING_2(\"Setting [%1] has values[] but is not SCALAR (%2)\", _name, _typeOf);\r\n        } else {\r\n            private _value = missionNamespace getVariable [_name, -1];\r\n            if ((_value < 0) || {_value >= (count _values)}) then {\r\n                ACE_LOGWARNING_3(\"Setting [%1] out of bounds %2 (values[] count is %3)\", _name, _value, count _values);\r\n            };\r\n        };\r\n    };\r\n    true\r\n};\r\n\r\n// Iterate through settings\r\n{\r\n    _x params [\"_name\", \"_typeOf\"];\r\n\r\n    if !([configFile >> \"ACE_Settings\" >> _name] call _fnc_parseConfigForDisplayNames) then {\r\n        if !([configFile >> \"ACE_ServerSettings\" >> _name] call _fnc_parseConfigForDisplayNames) then {\r\n            if !([missionConfigFile >> \"ACE_Settings\" >> _name] call _fnc_parseConfigForDisplayNames) then {\r\n                ACE_LOGWARNING_1(\"Setting found, but couldn't localize [%1] (server has but we don't?)\",_name);\r\n            };\r\n        };\r\n    };\r\n    false\r\n} count GVAR(settings);\r\n"},{"name":"ace_common_fnc_loadSettingsOnServer","file":"common/functions/fnc_loadSettingsOnServer.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Load the parameters on the server.\r\n * Config < Server UserConfig < Mission Config\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(settings) = [];\r\n\r\nprivate _fnc_parseConfigForSettings = {\r\n    params [\"_config\"];\r\n\r\n    private _countOptions = count _config;\r\n\r\n    for \"_index\" from 0 to (_countOptions - 1) do {\r\n        private _optionEntry = _config select _index;\r\n        [_optionEntry] call FUNC(setSettingFromConfig);\r\n    };\r\n\r\n    // Check if all settings should be forced\r\n    if (GVAR(forceAllSettings)) then {\r\n        {\r\n            _x set [6, true];\r\n            false\r\n        } count GVAR(settings);\r\n    };\r\n};\r\n\r\n// Order is this way because:\r\n// ACE_Settings should never force any setting by default. Loading it first ensures that all settings from ACE_Settings exist.\r\n// This way, ACE_ServerSettings will override ACE_Settings, even if no force is used.\r\n// Mission settings will override the server config settings, if no force is used.\r\n// This ensures that all settings are of their correct type, in case an outdated or corrupt server config is used , as well as have their correct localized display name and description\r\n\r\n// Regular config\r\n[configFile >> \"ACE_Settings\"] call _fnc_parseConfigForSettings;\r\n\r\n// Server config\r\n[configFile >> \"ACE_ServerSettings\"] call _fnc_parseConfigForSettings;\r\n\r\n// mission side settings\r\n[missionConfigFile >> \"ACE_Settings\"] call _fnc_parseConfigForSettings;\r\n\r\n// Publish all setting values\r\n{\r\n    publicVariable (_x select 0);\r\n    false\r\n} count GVAR(settings);\r\n"},{"name":"ace_common_fnc_localEvent","file":"common/functions/fnc_localEvent.sqf","text":"#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\", \"_eventArgs\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\n[_eventName, _eventArgs] call CBA_fnc_localEvent;\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_localEvent\",\"3.8.0\",\"CBA_fnc_localEvent\");\r\n"},{"name":"ace_common_fnc_map","file":"common/functions/fnc_map.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2\r\n * Applies given code to every element in an array, LIKE SOMETHING SQF SHOULD HAVE BY DEFAULT. <- :kappa:\r\n *\r\n * Arguments:\r\n * 0: Array to be thingied.\r\n * 1: Code to be applied to every element.\r\n *\r\n * Return Value:\r\n * Final array\r\n *\r\n * Public: Yes\r\n *\r\n * Deprecated\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_array\", [], [[]]], [\"_code\", {}, [{}]]];\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_map\",\"3.7.0\",\"apply\");\r\n\r\n// copy array to not alter the original one\r\n_array = + _array;\r\n\r\n{\r\n    _array set [_forEachIndex, _x call _code];\r\n} forEach _array;\r\n\r\n_array\r\n"},{"name":"ace_common_fnc_moduleCheckPBOs","file":"common/functions/fnc_moduleCheckPBOs.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Initializes the check-PBOs module.\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(checkPBOsAction),     \"Action\"    ] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(checkPBOsCheckAll),   \"CheckAll\"  ] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(checkPBOsWhitelist),  \"Whitelist\" ] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO_1(\"Check-PBOs Module Initialized. Mode: %1.\",GVAR(checkPBOsAction));\r\n"},{"name":"ace_common_fnc_moduleLSDVehicles","file":"common/functions/fnc_moduleLSDVehicles.sqf","text":"/*\r\n * Author: KoffeinFlummi, joko // Jonas\r\n * Nothing to see here, move along.\r\n *\r\n * Arguments:\r\n * Whatever the module provides. (I dunno.)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\nif (isNil QGVAR(LSD_Vehicles)) then {\r\n    GVAR(LSD_Vehicles) = [];\r\n};\r\n\r\n{\r\n    _hSCount = count (getArray (configFile >> \"CfgVehicles\" >> typeOf _x >> \"hiddenSelections\"));\r\n    if (_hSCount > 0) then {\r\n        GVAR(LSD_Vehicles) pushBack [_x, _hSCount];\r\n    };\r\n    nil\r\n} count _units;\r\n\r\nif (isNil QGVAR(LSD_Colors)) then {\r\n    GVAR(LSD_Colors) = [\r\n        \"#(argb,8,8,3)color(1,0,0,1,co)\",\r\n        \"#(argb,8,8,3)color(1,0.5,0,1,co)\",\r\n        \"#(argb,8,8,3)color(1,1,0,1,co)\",\r\n        \"#(argb,8,8,3)color(0,1,0,1,co)\",\r\n        \"#(argb,8,8,3)color(0,0,1,1,co)\",\r\n        \"#(argb,8,8,3)color(0.2,0,0.5,1,co)\",\r\n        \"#(argb,8,8,3)color(0.5,0,1,1,co)\"\r\n    ];\r\n};\r\n\r\nif (isNil QGVAR(LSD_PFH)) then {\r\n    GVAR(LSD_PFH) = [{\r\n        (_this select 0) params [\"_index\"];\r\n        {\r\n            _x params [\"_vehicle\", \"_hSCount\"];\r\n            for \"_i\" from 0 to (_hSCount - 1) do {\r\n                _vehicle setObjectTexture [_i, GVAR(LSD_Colors) select _index];\r\n            };\r\n            nil\r\n        } count GVAR(LSD_Vehicles);\r\n\r\n        _index = ((_index + 1) % 7) mod count GVAR(LSD_Colors);\r\n        (_this select 0) set [0, _index];\r\n\r\n    }, 0.02, [0]] call CBA_fnc_addPerFrameHandler;\r\n};\r\nACE_LOGINFO(\"WEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEED.\");\r\n"},{"name":"ace_common_fnc_monitor","file":"common/functions/fnc_monitor.sqf","text":"/*\r\n * Author: commy2\r\n * hint retun value of given function every frame\r\n *\r\n * Arguments:\r\n * <CODE>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isNil QGVAR(MonitorFnc)) then {\r\n    [GVAR(MonitorFnc)] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\nGVAR(MonitorFnc) = [{\r\n    hintSilent str (call (_this select 0));\r\n}, 0, _this] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_common_fnc_muteUnit","file":"common/functions/fnc_muteUnit.sqf","text":"/*\r\n * Author: commy2\r\n * Mutes the unit. It won't trigger auto generated chat messages either.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Reason to mute the unit <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_reason\"];\r\n\r\nif (isNull _unit) exitWith {};\r\n\r\n// add reason to mute to the unit\r\nprivate _muteUnitReasons = _unit getVariable [QGVAR(muteUnitReasons), []];\r\n\r\nif !(_reason in _muteUnitReasons) then {\r\n    _muteUnitReasons pushBack _reason;\r\n    _unit setVariable [QGVAR(muteUnitReasons), _muteUnitReasons, true];\r\n};\r\n\r\nprivate _speaker = speaker _unit;\r\n\r\nif (_speaker == \"ACE_NoVoice\") exitWith {};\r\n\r\n[QGVAR(setSpeaker), [_unit, \"ACE_NoVoice\"]] call CBA_fnc_globalEvent;\r\n\r\n_unit setVariable [\"ACE_OriginalSpeaker\", _speaker, true];\r\n"},{"name":"ace_common_fnc_muteUnitHandleInitPost","file":"common/functions/fnc_muteUnitHandleInitPost.sqf","text":"/*\r\n * Author: commy2\r\n * Applies speaker changes on init post. Used because setSpeaker is broken on init.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// setSpeaker gets overwritten after init on remote units; if unit is muted, setSpeaker again\r\nif (count (_unit getVariable [QGVAR(muteUnitReasons), []]) > 0) then {\r\n    [QGVAR(setSpeaker), [_unit, \"ACE_NoVoice\"]] call CBA_fnc_localEvent;\r\n};\r\n"},{"name":"ace_common_fnc_muteUnitHandleRespawn","file":"common/functions/fnc_muteUnitHandleRespawn.sqf","text":"/*\r\n * Author: commy2\r\n * Applies speaker changes on respawn. Used because speaker is respawning breaks the speaker on non-local clients. Also resets the public object variable (broken for JIP clients, that join after respawn)\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// setVariable is broken on JIP after respawn\r\n_unit setVariable [QGVAR(muteUnitReasons), _unit getVariable [QGVAR(muteUnitReasons), []], true];\r\n\r\n// fix mp issues with respawning and the speaker\r\n[QGVAR(setSpeaker), [_unit, speaker _unit]] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_common_fnc_numberToDigits","file":"common/functions/fnc_numberToDigits.sqf","text":"/*\r\n * Author: commy2\r\n * Transforms a number to an array of the correspondending digits.\r\n *\r\n * Arguments:\r\n * 0: Number to 'digitize' <NUMBER>\r\n * 1: Set the minimal length of the returned array. Useful for getting left hand zeroes. <NUMBER>, optional\r\n *\r\n * Return Value:\r\n * Digits. The maximum count is six digits. <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_number\", \"_minLength\"];\r\n\r\n_number = _number min 999999;\r\n_number = str _number;\r\n\r\nprivate _length = count _number;\r\n\r\nif (isNil \"_minLength\") then {_minLength = _length};\r\n\r\n_minLength = _minLength min 6;\r\n\r\nwhile {_length < _minLength} do {\r\n    _number = \"0\" + _number;\r\n    _length = _length + 1;\r\n};\r\n\r\nprivate _digits = [];\r\n\r\nfor \"_x\" from 0 to (_length - 1) do {\r\n    _digits pushBack parseNumber (_number select [_x, 1]);\r\n};\r\n\r\n_digits\r\n"},{"name":"ace_common_fnc_numberToDigitsString","file":"common/functions/fnc_numberToDigitsString.sqf","text":"/*\r\n * Author: commy2\r\n * Transforms a number to an string of the correspondending digits.\r\n *\r\n * Arguments:\r\n * 0: Number to 'digitize' <NUMBER>\r\n * 1: Set the minimal length of the returned string. Useful for getting left hand zeroes. (Number, optional)\r\n *\r\n * Return Value:\r\n * Digits. The maximum length is six digits. <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_number\", \"_minLength\"];\r\n\r\n_number = _number min 999999;\r\n_number = str _number;\r\n\r\nprivate _length = count _number;\r\n\r\nif (isNil \"_minLength\") then {_minLength = _length};\r\n\r\n_minLength = _minLength min 6;\r\n\r\nwhile {_length < _minLength} do {\r\n    _number = \"0\" + _number;\r\n    _length = _length + 1;\r\n};\r\n\r\n_number\r\n"},{"name":"ace_common_fnc_numberToString","file":"common/functions/fnc_numberToString.sqf","text":"/*\r\n * Author: commy2\r\n * Converts a number to a string without losing as much precission as str or format.\r\n *\r\n * Arguments:\r\n * 0: A number <NUMBER>\r\n *\r\n * Return Value:\r\n * The number as string <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_number\"];\r\n\r\nprivate _decimals = str (abs _number mod 1);\r\n_decimals = toArray _decimals;\r\n_decimals deleteAt 0;\r\n\r\nif (_number < 0) exitWith {\r\n    format [\"-%1%2\", floor abs _number, toString _decimals];\r\n};\r\nformat [\"%1%2\", floor _number, toString _decimals];\r\n"},{"name":"ace_common_fnc_objectEvent","file":"common/functions/fnc_objectEvent.sqf","text":"#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\", \"_eventTarget\", \"_eventArgs\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\n[_eventName, _eventArgs, _eventTargets] call CBA_fnc_targetEvent;\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_objectEvent\",\"3.8.0\",\"CBA_fnc_targetEvent\");\r\n"},{"name":"ace_common_fnc_onAnswerRequest","file":"common/functions/fnc_onAnswerRequest.sqf","text":"/*\r\n * Author: Glowbal\r\n * N/A\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_id\", \"_accepted\"];\r\n\r\nprivate _info = _unit getVariable _id;\r\n\r\nif (!isNil \"_info\") then {\r\n    _info params [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\r\n\r\n    private _replyParams = [_info, _accepted];\r\n    [QGVAR(requestCallback), _replyParams, _caller] call CBA_fnc_targetEvent;\r\n    _unit setVariable [_id, nil];\r\n};\r\n\r\nGVAR(RECIEVE_REQUEST_ID_KEY_BINDING) = nil;\r\n\r\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT)) then {\r\n    _unit removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT);\r\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = nil;\r\n};\r\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE)) then {\r\n    _unit removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE);\r\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = nil;\r\n};\r\n"},{"name":"ace_common_fnc_owned","file":"common/functions/fnc_owned.sqf","text":"/*\r\n * Author: commy2\r\n * Counterpart of ace_common_fnc_claim. Check if the given object is claimed by another unit.\r\n *\r\n * Arguments:\r\n * 0: Any object. <OBJECT>\r\n *\r\n * Return Value:\r\n * Is this object claimed by someone?\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\n!isNull (_target getVariable [QGVAR(owner), objNull])\r\n"},{"name":"ace_common_fnc_parseList","file":"common/functions/fnc_parseList.sqf","text":"/*\r\n * Author: Glowbal, Jonpas\r\n * Makes a list from a string using comma as a delimiter, optionally trim or remove whitespace and check each for object existence.\r\n *\r\n * Arguments:\r\n * 0: List <STRING>\r\n * 1: Remove or Trim Whitespace <BOOL> (default: false (trim))\r\n * 2: Check Nil <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * Parsed List <ARRAY>\r\n *\r\n * Example:\r\n * [\"text\", true, false] call ace_common_fnc_parseList\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_list\", [\"_removeWhitespace\", false], [\"_checkNil\", false]];\r\n\r\n// Split using comma delimiter\r\n_list = _list splitString \",\";\r\nTRACE_1(\"Splitted List\",_list);\r\n\r\n// Remove or Trim Whitespace\r\nprivate _whitespaceList = [];\r\n\r\n{\r\n    if (_removeWhitespace) then {\r\n        _whitespaceList pushBack ([_x] call FUNC(stringRemoveWhiteSpace));\r\n    } else {\r\n        _whitespaceList pushBack ([_x] call CBA_fnc_trim);\r\n    };\r\n    false\r\n} count _list;\r\n\r\n_list = _whitespaceList;\r\nTRACE_1(\"Whitespace List\",_list);\r\n\r\n// Check for object existence\r\nif (_checkNil) then {\r\n    private _nilCheckedList = [];\r\n\r\n    {\r\n        if !(isNil _x) then {\r\n            _nilCheckedList pushBack (missionNamespace getVariable _x);\r\n        };\r\n        false\r\n    } count _list;\r\n\r\n    _list = _nilCheckedList;\r\n};\r\n\r\nTRACE_1(\"Final List\",_list);\r\n\r\n_list\r\n"},{"name":"ace_common_fnc_player","file":"common/functions/fnc_player.sqf","text":"/*\r\n * Author: bux578, commy2\r\n * Returns the player or curator controlled unit.\r\n * Use this in INIT and RESPAWN eh scripts, because ACE_player isn't reset yet.\r\n *\r\n * Arguments:\r\n * NONE.\r\n *\r\n * Return Value:\r\n * Player controlled unit <OBJECT>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nmissionNamespace getVariable [\"bis_fnc_moduleRemoteControl_unit\", player]\r\n"},{"name":"ace_common_fnc_playerSide","file":"common/functions/fnc_playerSide.sqf","text":"/*\r\n * Author: commy2\r\n * Return the current side of the player\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * current local side <SIDE>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nside group ACE_player\r\n"},{"name":"ace_common_fnc_positionToASL","file":"common/functions/fnc_positionToASL.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Converts Arma \"Position\" to ASL\r\n *\r\n * Arguments:\r\n * 0: position x <Number>\r\n * 1: position y <Number>\r\n * 2: position z <Number>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (surfaceIsWater _this) then {\r\n    _this\r\n} else {\r\n    ATLtoASL _this\r\n};\r\n"},{"name":"ace_common_fnc_progressBar","file":"common/functions/fnc_progressBar.sqf","text":"/*\r\n * Author: commy2, Glowbal, PabstMirror\r\n * Draw progress bar and execute given function if succesful.\r\n * Finish/Failure/Conditional are all passed [_args, _elapsedTime, _totalTime, _errorCode]\r\n *\r\n * Arguments:\r\n * 0: NUMBER - Total Time (in game \"time\" seconds)\r\n * 1: ARRAY - Arguments, passed to condition, fail and finish\r\n * 2: CODE or STRING - On Finish: Code called or STRING raised as event.\r\n * 3: CODE or STRING - On Failure: Code called or STRING raised as event.\r\n * 4: STRING - (Optional) Localized Title\r\n * 5: CODE - (Optional) Code to check each frame\r\n * 6: ARRAY - (Optional) Exceptions for checking EFUNC(common,canInteractWith)\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [5, [], {Hint \"Finished!\"}, {hint \"Failure!\"}, \"My Title\"] call ace_common_fnc_progressBar\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_totalTime\", \"_args\", \"_onFinish\", \"_onFail\", [\"_localizedTitle\", \"\"], [\"_condition\", {true}], [\"_exceptions\", []]];\r\n\r\nprivate _player = ACE_player;\r\n\r\n//Open Dialog and set the title\r\ncloseDialog 0;\r\ncreateDialog QGVAR(ProgressBar_Dialog);\r\n\r\n(uiNamespace getVariable QGVAR(ctrlProgressBarTitle)) ctrlSetText _localizedTitle;\r\n\r\n//Adjust position based on user setting:\r\nprivate _ctrlPos = ctrlPosition (uiNamespace getVariable QGVAR(ctrlProgressBarTitle));\r\n_ctrlPos set [1, ((0 + 29 * GVAR(settingProgressBarLocation)) * ((((safezoneW / safezoneH) min 1.2) / 1.2) / 25) + (safezoneY + (safezoneH - (((safezoneW / safezoneH) min 1.2) / 1.2))/2))];\r\n\r\n(uiNamespace getVariable QGVAR(ctrlProgressBG)) ctrlSetPosition _ctrlPos;\r\n(uiNamespace getVariable QGVAR(ctrlProgressBG)) ctrlCommit 0;\r\n(uiNamespace getVariable QGVAR(ctrlProgressBar)) ctrlSetPosition _ctrlPos;\r\n(uiNamespace getVariable QGVAR(ctrlProgressBar)) ctrlCommit 0;\r\n(uiNamespace getVariable QGVAR(ctrlProgressBarTitle)) ctrlSetPosition _ctrlPos;\r\n(uiNamespace getVariable QGVAR(ctrlProgressBarTitle)) ctrlCommit 0;\r\n\r\n[{\r\n    (_this select 0) params [\"_args\", \"_onFinish\", \"_onFail\", \"_condition\", \"_player\", \"_startTime\", \"_totalTime\", \"_exceptions\"];\r\n\r\n    private _elapsedTime = CBA_missionTime - _startTime;\r\n    private _errorCode = -1;\r\n\r\n    // this does not check: target fell unconscious, target died, target moved inside vehicle / left vehicle, target moved outside of players range, target moves at all.\r\n    if (isNull (uiNamespace getVariable [QGVAR(ctrlProgressBar), controlNull])) then {\r\n        _errorCode = 1;\r\n    } else {\r\n        if (ACE_player != _player || !alive _player) then {\r\n            _errorCode = 2;\r\n        } else {\r\n            if !([_args, _elapsedTime, _totalTime, _errorCode] call _condition) then {\r\n                _errorCode = 3;\r\n            } else {\r\n                if !([_player, objNull, _exceptions] call EFUNC(common,canInteractWith)) then {\r\n                    _errorCode = 4;\r\n                } else {\r\n                    if (_elapsedTime >= _totalTime) then {\r\n                        _errorCode = 0;\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n\r\n    if (_errorCode != -1) then {\r\n        //Error or Success, close dialog and remove PFEH\r\n\r\n        //Only close dialog if it's the progressBar:\r\n        if (!isNull (uiNamespace getVariable [QGVAR(ctrlProgressBar), controlNull])) then {\r\n            closeDialog 0;\r\n        };\r\n\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n        if (_errorCode == 0) then {\r\n            if (_onFinish isEqualType \"\") then {\r\n                [_onFinish, [_args, _elapsedTime, _totalTime, _errorCode]] call CBA_fnc_localEvent;\r\n            } else {\r\n                [_args, _elapsedTime, _totalTime, _errorCode] call _onFinish;\r\n            };\r\n        } else {\r\n            if (_onFail isEqualType \"\") then {\r\n                [_onFail, [_args, _elapsedTime, _totalTime, _errorCode]] call CBA_fnc_localEvent;\r\n            } else {\r\n                [_args, _elapsedTime, _totalTime, _errorCode] call _onFail;\r\n            };\r\n        };\r\n    } else {\r\n        //Update Progress Bar (ratio of elepased:total)\r\n        (uiNamespace getVariable QGVAR(ctrlProgressBar)) progressSetPosition (_elapsedTime / _totalTime);\r\n    };\r\n}, 0, [_args, _onFinish, _onFail, _condition, _player, CBA_missionTime, _totalTime, _exceptions]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_common_fnc_readSettingFromModule","file":"common/functions/fnc_readSettingFromModule.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Reads a setting value from a module, set it and force it. Logs if the setting is missing from the module.\r\n * Must be called on the server, effect is global.\r\n *\r\n * Arguments:\r\n * 0: Module <OBJECT>\r\n * 1: ACE_Parameter name <STRING>\r\n * 2: Module parameter name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_settingName\", \"_moduleVariable\"];\r\n\r\n// Check if the parameter is defined in the module\r\nif (isNil {_logic getVariable _moduleVariable}) exitWith {\r\n    ACE_LOGWARNING_2(\"Warning in %1 module: %2 setting is missing. Probably an obsolete version of the module is used in the mission.\",typeOf _logic,_moduleVariable);\r\n};\r\n\r\nprivate _value = _logic getVariable _moduleVariable;\r\nif (_value isEqualTo -1) then {\r\n    //3den missions will save modules with value = 0 as -1\r\n    //If the setting has a \"values\" array, we should be able to assume that -1 is not a valid number as it would not be a valid index for the array\r\n    if (isArray (configFile >> \"ACE_Settings\" >> _settingName >> \"values\")) then {\r\n        ACE_LOGWARNING_2(\"Module For Setting [%1] is saved as (-1), switching to (0) - missionVersion [%2]\",_settingName,missionVersion);\r\n        _value = 0;\r\n    };\r\n};\r\n\r\n// Set the setting globally and force it\r\n[_settingName, _value, true, true] call FUNC(setSetting);\r\n"},{"name":"ace_common_fnc_readSettingsFromParamsArray","file":"common/functions/fnc_readSettingsFromParamsArray.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Read settins from paramsArray that have a ACE_setting = 1.\r\n * Happens before modules but after all other configs (for force priority)\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_common_fnc_readSettingsFromParamsArray\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//paramsArray is a normal variable not a command\r\nprivate _paramsArray = missionnamespace getVariable [\"paramsArray\", []];\r\n\r\nTRACE_1(\"Reading missionConfigFile params\",_paramsArray);\r\n\r\n{\r\n    private _config = (missionConfigFile >> \"params\") select _forEachIndex;\r\n    if ((getNumber (_config >> \"ACE_setting\")) > 0) then {\r\n        private _settingName = configName _config;\r\n        private _settingValue = _x;\r\n        private _title = getText (_config >> \"title\");\r\n\r\n        TRACE_3(\"ace_setting\",_title,_settingName,_settingValue);\r\n\r\n        // Check if the variable is already defined\r\n        if (isNil _settingName) exitWith {\r\n            ACE_LOGERROR_1(\"readSettingsFromParamsArray - param [%1] is not an ace_setting\", _settingName);\r\n        };\r\n\r\n        private _settingData = [_settingName] call FUNC(getSettingData);\r\n        _settingData params [\"\", \"_typeName\", \"\", \"\", \"\", \"\", \"_isForced\"];\r\n\r\n        // Check if it's already forced and quit\r\n        if (_isForced) exitWith {ACE_LOGWARNING_1(\"readSettingsFromParamsArray - param [%1] is already set and forced\", _settingName);};\r\n\r\n        // The setting is not forced, so update the value\r\n        // Read entry and cast it to the correct type from the existing variable\r\n        private _validValue = false;\r\n        switch (true) do {\r\n            case (_typeName == \"SCALAR\"): {_validValue = true;};\r\n            case (_typeName == \"BOOL\"): {\r\n                _settingValue = _settingValue > 0;\r\n                _validValue = true;\r\n            };\r\n            //TODO: Handle ARRAY,COLOR,STRING??? (bool/scalar covers most important settings)\r\n        };\r\n\r\n        if (!_validValue) exitWith {\r\n            ACE_LOGWARNING_3(\"readSettingsFromParamsArray - param [%1] type not valid [%2] - expected type [%3]\", _settingName,_settingValue,_typeName);\r\n        };\r\n\r\n        // Update the variable globaly and Force\r\n        [_settingName, _settingValue, true, true] call FUNC(setSetting);\r\n    };\r\n} forEach _paramsArray;\r\n"},{"name":"ace_common_fnc_receiveRequest","file":"common/functions/fnc_receiveRequest.sqf","text":"/*\r\n * Author: Glowbal\r\n * N/A\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\r\n\r\n_requestID = (\"ace_recieveRequest_f_id_\"+_requestID);\r\n\r\n_target setVariable [_requestID, _this];\r\n\r\nif (isLocalized _requestMessage) then {\r\n    _requestMessage = format [localize _requestMessage, [_caller, false, true] call FUNC(getName)];\r\n} else {\r\n    _requestMessage = format [_requestMessage, [_caller, false, true] call FUNC(getName)];\r\n};\r\n\r\nhint format [\"%1\", _requestMessage]; // @todo ?\r\n\r\nif !(isNil QGVAR(RECIEVE_REQUEST_TIME_OUT_SCRIPT)) then {\r\n    terminate GVAR(RECIEVE_REQUEST_TIME_OUT_SCRIPT);\r\n};\r\n\r\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT)) then {\r\n    _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT);\r\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = nil;\r\n};\r\n\r\nif (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE)) then {\r\n    _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE);\r\n    GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = nil;\r\n};\r\n\r\nGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = _target addAction [\"Accept\", compile format[\"[player,'%1', true] call FUNC(onAnswerRequest);\", _requestID]];\r\nGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = _target addAction [\"Decline\", compile format[\"[player,'%1', false] call FUNC(onAnswerRequest);\", _requestID]];\r\n\r\nGVAR(RECIEVE_REQUEST_ID_KEY_BINDING) = _requestID;\r\n\r\nGVAR(RECIEVE_REQUEST_TIME_OUT_SCRIPT) = [CBA_missionTime, _target, _requestID] spawn { // @todo\r\n    params [\"_time\", \"_target\", \"_requestID\"];\r\n\r\n    _time = _time + 40;\r\n\r\n    private _id = _target getVariable _requestID;\r\n\r\n    waitUntil {\r\n        _id = _target getVariable _requestID;\r\n\r\n        (CBA_missionTime > _time || isNil \"_id\")\r\n    };\r\n\r\n    _target setVariable [_requestID, nil];\r\n\r\n    GVAR(RECIEVE_REQUEST_ID_KEY_BINDING) = nil;\r\n\r\n    if (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT)) then {\r\n        _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT);\r\n        GVAR(RECIEVE_REQUEST_ADD_ACTION_ACCEPT) = nil;\r\n    };\r\n\r\n    if (!isNil QGVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE)) then {\r\n        _target removeAction GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE);\r\n        GVAR(RECIEVE_REQUEST_ADD_ACTION_DECLINE) = nil;\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_removeActionEventHandler","file":"common/functions/fnc_removeActionEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Remove an addAction event from a unit.\r\n *\r\n * Arguments:\r\n * 0: Unit the action is assigned to <OBJECT>\r\n * 1: Name of the action, e.g. \"DefaultAction\" <STRING>\r\n * 2: ID of the action <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_action\", \"_id\"];\r\n\r\nif (_id == -1) exitWith {};\r\n\r\nprivate _name = format [\"ACE_Action_%1\", _action];\r\nprivate _actionsVar = _unit getVariable [_name, [-1, [-1, [], []], objNull]];\r\n\r\n_actionsVar params [\"_actionID\", \"_actionsArray\"];\r\n_actionsArray params [\"_currentID\", \"_actionIDs\", \"_actions\"];\r\n\r\nif (_unit != _actionsVar select 2) exitWith {};\r\n\r\n_id = _actionIDs find _id;\r\n\r\nif (_id == -1) exitWith {};\r\n\r\n_actionIDs set [_id, -1];\r\n_actionIDs = _actionIDs - [-1];\r\n\r\n_actions set [_id, []];\r\n_actions = _actions - [[]];\r\n\r\nif (count _actions == 0) then {\r\n    _unit removeAction _actionID;\r\n    _actionID = -1;\r\n};\r\n\r\n_unit setVariable [_name, [_actionID, [_currentID, _actionIDs, _actions], _unit], false];\r\n"},{"name":"ace_common_fnc_removeActionMenuEventHandler","file":"common/functions/fnc_removeActionMenuEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Remove an addAction menu event from a unit.\r\n *\r\n * Arguments:\r\n * 0: Unit the action is assigned to <OBJECT>\r\n * 1: Name of the action, e.g. \"DefaultAction\" <STRING>\r\n * 2: ID of the action <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_action\", \"_id\"];\r\n\r\nif (_id == -1) exitWith {};\r\n\r\nprivate _name = format [\"ACE_ActionMenu_%1\", _action];\r\nprivate _actionsVar = _unit getVariable [_name, [-1, [-1, [], []]]];\r\n\r\n_actionsVar params [\"_currentID\", \"_actionIDs\", \"_actions\"];\r\n\r\n_id = _actionIDs find _id;\r\n\r\nif (_id == -1) exitWith {};\r\n\r\n_action = _actions select _id;\r\n\r\n_action params [\"_actionID\", \"_nameVar\"];\r\n\r\nmissionNamespace setVariable [_nameVar, nil];\r\n\r\n_actionIDs deleteAt _id;\r\n_actions deleteAt _id;\r\n\r\n_unit removeAction _actionID;\r\n\r\n_unit setVariable [_name, [_currentID, _actionIDs, _actions], false];\r\n"},{"name":"ace_common_fnc_removeAllEventHandlers","file":"common/functions/fnc_removeAllEventHandlers.sqf","text":"#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\nCBA_events_eventNamespace setVariable [_eventName,nil];\r\nCBA_events_eventHashes setVariable [_eventName,nil];\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_removeAllEventHandlers\",\"3.8.0\",\"N/A (remove events individually w/ CBA_fnc_removeEventHandler)\");\r\n"},{"name":"ace_common_fnc_removeBinocularMagazine","file":"common/functions/fnc_removeBinocularMagazine.sqf","text":"/*\r\n * Author: commy2\r\n * Removes the magazine of the units rangefinder.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * player call ace_common_fnc_removeBinocularMagazine\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_removeBinocularMagazine\",\"3.8.0\",\"CBA_fnc_removeBinocularMagazine\");\r\n\r\n_this call CBA_fnc_removeBinocularMagazine\r\n"},{"name":"ace_common_fnc_removeCanInteractWithCondition","file":"common/functions/fnc_removeCanInteractWithCondition.sqf","text":"/*\r\n * Author: commy2\r\n * Remove a condition that gets checked by ace_common_fnc_canInteractWith.\r\n *\r\n * Arguments:\r\n * 0: The conditions id. <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_conditionName\"];\r\n\r\n_conditionName = toLower _conditionName;\r\n\r\nprivate _conditions = missionNamespace getVariable [QGVAR(InteractionConditions), [[],[]]];\r\n\r\n_conditions params [\"_conditionNames\", \"_conditionFuncs\"];\r\n\r\nprivate _index = _conditionNames find _conditionName;\r\n\r\nif (_index == -1) exitWith {};\r\n\r\n_conditionNames deleteAt _index;\r\n_conditionFuncs deleteAt _index;\r\n\r\nGVAR(InteractionConditions) = _conditions;\r\n"},{"name":"ace_common_fnc_removeEventHandler","file":"common/functions/fnc_removeEventHandler.sqf","text":"#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\", \"_eventCode\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\n[_eventName, _eventCode] call CBA_fnc_removeEventHandler;\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_removeEventHandler\",\"3.8.0\",\"CBA_fnc_removeEventHandler\");\r\n"},{"name":"ace_common_fnc_removeMapMarkerCreatedEventHandler","file":"common/functions/fnc_removeMapMarkerCreatedEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Remove a map marker creation event handler.\r\n *\r\n * Arguments:\r\n * 0: ID of the event handler <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_id\"];\r\n\r\nprivate _actionsVar = missionNamespace getVariable [\"ACE_EventHandler_MapMarker\", [-1, [], []]];\r\n\r\n_actionsVar params [\"_currentId\", \"_actionIDs\", \"_actions\"];\r\n\r\n_id = _actionIDs find _id;\r\n\r\nif (_id == -1) exitWith {};\r\n\r\n_actionIDs set [_id, -1];\r\n_actionIDs = _actionIDs - [-1];\r\n\r\n_actions set [_id, []];//{}\r\n_actions = _actions - [[]];//[{}]\r\n\r\nmissionNamespace setVariable [\"ACE_EventHandler_MapMarker\", [_currentId, _actionIDs, _actions]];\r\n"},{"name":"ace_common_fnc_removeScrollWheelEventHandler","file":"common/functions/fnc_removeScrollWheelEventHandler.sqf","text":"/*\r\n * Author: commy2\r\n * Remove a scroll wheel event handler.\r\n *\r\n * Arguments:\r\n * 0: ID of the event handler <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_id\"];\r\n\r\nprivate _actionsVar = missionNamespace getVariable [\"ACE_EventHandler_ScrollWheel\", [-1, [], []]];\r\n\r\n_actionsVar params [\"_currentId\", \"_actionIDs\", \"_actions\"];\r\n\r\n_id = _actionIDs find _id;\r\n\r\nif (_id == -1) exitWith {};\r\n\r\n_actionIDs set [_id, -1];\r\n_actionIDs = _actionIDs - [-1];\r\n\r\n_actions set [_id, []];//{}\r\n_actions = _actions - [[]];//[{}]\r\n\r\nmissionNamespace setVariable [\"ACE_EventHandler_ScrollWheel\", [_currentId, _actionIDs, _actions]];\r\n"},{"name":"ace_common_fnc_removeSpecificMagazine","file":"common/functions/fnc_removeSpecificMagazine.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Removes a magazine from the unit that has an specific ammo count\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Magazine <STRING>\r\n * 2: Ammo count <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_magazineType\", \"\", [\"\"]], [\"_ammoCount\", 0, [0]]];\r\n\r\nprivate _isRemoved = false;\r\n\r\n// Check uniform\r\nprivate _magazines = magazinesAmmoCargo uniformContainer _unit select {_x select 0 == _magazineType};\r\nprivate _index = _magazines find [_magazineType, _ammoCount];\r\n\r\nif (_index > -1) exitWith {\r\n    {\r\n        _unit removeItemFromUniform (_x select 0);\r\n        false\r\n    } count _magazines;\r\n\r\n    {\r\n        if (!_isRemoved && (_x isEqualTo [_magazineType,_ammoCount])) then {\r\n            _isRemoved = true;\r\n        } else {\r\n            (uniformContainer _unit) addMagazineAmmoCargo [_x select 0, 1, _x select 1];\r\n        };\r\n        false\r\n    } count _magazines;\r\n};\r\n\r\n// Check vest\r\n_magazines = magazinesAmmoCargo vestContainer _unit select {_x select 0 == _magazineType};\r\n_index = _magazines find [_magazineType, _ammoCount];\r\n\r\nif (_index > -1) exitWith {\r\n    {\r\n        _unit removeItemFromVest (_x select 0);\r\n        false\r\n    } count _magazines;\r\n\r\n    {\r\n        if (!_isRemoved && (_x isEqualTo [_magazineType,_ammoCount])) then {\r\n            _isRemoved = true;\r\n        } else {\r\n            (vestContainer _unit) addMagazineAmmoCargo [_x select 0, 1, _x select 1];\r\n        };\r\n        false\r\n    } count _magazines;\r\n};\r\n\r\n// Check backpack\r\n_magazines = magazinesAmmoCargo backpackContainer _unit select {_x select 0 == _magazineType};\r\n_index = _magazines find [_magazineType, _ammoCount];\r\n\r\nif (_index > -1) exitWith {\r\n    {\r\n        _unit removeItemFromBackpack (_x select 0);\r\n        false\r\n    } count _magazines;\r\n\r\n    {\r\n        if (!_isRemoved && (_x isEqualTo [_magazineType,_ammoCount])) then {\r\n            _isRemoved = true;\r\n        } else {\r\n            (backpackContainer _unit) addMagazineAmmoCargo [_x select 0, 1, _x select 1];\r\n        };\r\n        false\r\n    } count _magazines;\r\n};\r\n"},{"name":"ace_common_fnc_removeSyncedEventHandler","file":"common/functions/fnc_removeSyncedEventHandler.sqf","text":"/*\r\n * Author: jaynus\r\n * Remove a synced event handler\r\n *\r\n * Arguments:\r\n * 0: Name <STRING>\r\n *\r\n * Return Value:\r\n * Boolean of success\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\"];\r\n\r\nif (!HASH_HASKEY(GVAR(syncedEvents),_name)) exitWith {\r\n    ACE_LOGERROR_1(\"Synced event key [%1] not found (removeSyncedEventHandler).\", _name);\r\n    false\r\n};\r\n\r\nprivate _data = HASH_GET(GVAR(syncedEvents),_name);\r\n_data params [\"\", \"\", \"\", \"_eventId\"];\r\n\r\n[_eventId] call CBA_fnc_removeEventHandler;\r\nHASH_REM(GVAR(syncedEvents),_name);\r\n"},{"name":"ace_common_fnc_requestCallback","file":"common/functions/fnc_requestCallback.sqf","text":"/*\r\n * Author: Glowbal\r\n * N/A\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_info\", \"_accepted\"];\r\n\r\n_info params [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\r\n\r\n[_caller, _target, _accepted] call compile _callBack;\r\n"},{"name":"ace_common_fnc_requestSyncedEvent","file":"common/functions/fnc_requestSyncedEvent.sqf","text":"/*\r\n * Author: jaynus\r\n * Send a request to synchronize an event name from the client->server. Execute on client only.\r\n *\r\n * Arguments:\r\n * 0: eventName <STRING>\r\n *\r\n * Return Value:\r\n * Boolean of success\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\"];\r\n\r\n// Only JIP machines on initialization send this off, requesting sync on events with the serverCommand\r\nif (isServer) exitWith {false};\r\n\r\n[\"ACEs\", [_eventName, ACE_player]] call CBA_fnc_serverEvent;\r\n"},{"name":"ace_common_fnc_resetAllDefaults","file":"common/functions/fnc_resetAllDefaults.sqf","text":"/*\r\n * Author: Glowbal\r\n * reset all variables that have been defined\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n_unit setVariable [\"ACE_isDead\", nil, true];\r\n_unit setVariable [\"ACE_isUnconscious\", nil, true];\r\n\r\nif (isPlayer _unit) then {\r\n    [true] call FUNC(setVolume);\r\n\r\n    if !(isNil QGVAR(DISABLE_USER_INPUT_COLLECTION)) then {\r\n        // clear all disable user input\r\n        {\r\n            [_x, false] call FUNC(setDisableUserInputStatus);\r\n            false\r\n        } count GVAR(DISABLE_USER_INPUT_COLLECTION);\r\n    };\r\n};\r\n\r\n{\r\n    if !(_x select 4) then {\r\n        _unit setVariable [_x select 0, nil, _x select 3];\r\n    };\r\n    false\r\n} count ([_unit] call FUNC(getAllDefinedSetVariables));\r\n"},{"name":"ace_common_fnc_restoreVariablesJIP","file":"common/functions/fnc_restoreVariablesJIP.sqf","text":"/*\r\n * Author: commy2\r\n * Called from respawn eventhandler. Resets all public object namespace variables that are added via FUNC(setVariableJIP).\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _respawnVariables = _unit getVariable [\"ACE_respawnVariables\", []];\r\n\r\n// yes those\r\n_respawnVariables pushBack \"ACE_PersistentFunctions\";\r\n\r\n{\r\n    _unit setVariable [_x, _unit getVariable _x, true];\r\n    false\r\n} count _respawnVariables;\r\nnil\r\n"},{"name":"ace_common_fnc_runAfterSettingsInit","file":"common/functions/fnc_runAfterSettingsInit.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Executes code after setting are initilized.\r\n *\r\n * Arguments:\r\n * 0: Code to execute <CODE>\r\n * 1: Parameters to run the code with <ANY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [{if (GVAR(setting) then {x} else {y};}, []] call ace_common_fnc_runAfterSettingsInit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_func\", \"_params\"];\r\n\r\nif (GVAR(settingsInitFinished)) then {\r\n    //Setting Already Finished, Direct Run the code\r\n    _params call _func;\r\n} else {\r\n    //Waiting on settings, throw it on the delayed run array\r\n    GVAR(runAtSettingsInitialized) pushBack [_func, _params];\r\n};\r\n"},{"name":"ace_common_fnc_sanitizeString","file":"common/functions/fnc_sanitizeString.sqf","text":"/*\r\n * Author: esteldunedain, based on Killzone-Kid code\r\n * Removes quotation marks to avoid exploits and optionally html tags from text to avoid conflicts with structured text.\r\n *\r\n * Arguments:\r\n * 0: Source string <STRING>\r\n * 1: Remove html tags (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * Sanitized string <STRING>\r\n *\r\n * Example:\r\n * [\"<CoolGroup>CoolGuy\", true] call ace_common_fnc_sanitizeString;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_string\", [\"_removeTags\", false]];\r\n\r\nprivate _array = [];\r\n\r\n{\r\n    switch _x do {\r\n        case 60 : { // less than symbol: `<`\r\n            if (_removeTags) then {\r\n                _array append toArray \"&lt;\";\r\n            } else {\r\n                _array pushBack _x;\r\n            };\r\n        };\r\n        case 62 : { // greater than symbol: `>`\r\n            if (_removeTags) then {\r\n                _array append toArray \"&gt;\";\r\n            } else {\r\n                _array pushBack _x;\r\n            };\r\n        };\r\n\r\n        case 34 : {\r\n        };\r\n\r\n        case 39 : {\r\n        };\r\n\r\n        default {\r\n            _array pushBack _x;\r\n        };\r\n    };\r\n    false\r\n} count toArray _string;\r\n\r\ntoString _array // return\r\n"},{"name":"ace_common_fnc_sendRequest","file":"common/functions/fnc_sendRequest.sqf","text":"/*\r\n * Author: Glowbal\r\n * Send a request to an unit and execute code based upon results.\r\n *\r\n * Arguments:\r\n * 0: caller <OBJECT>\r\n * 1: target <OBJECT>\r\n * 2: requestID (STRING)\r\n * 3: requestMessage Will be localized for other target object. (STRING)\r\n * 4: callback Code called upon accept or decline. (CODE)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_requestID\", \"_requestMessage\", \"_callBack\"];\r\n\r\nif (isPlayer _target) then {\r\n    // Pass request on to target locality for player accept/decline.\r\n    [QGVAR(receiveRequest), [_caller, _target, _requestID, _requestMessage, _callBack], _target] call CBA_fnc_targetEvent;\r\n} else {\r\n    // accept it, since it's an AI.\r\n    [_caller, _target, true] call compile _callBack;\r\n};\r\n"},{"name":"ace_common_fnc_serverEvent","file":"common/functions/fnc_serverEvent.sqf","text":"#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\", \"_eventArgs\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\n[_eventName, _eventArgs] call CBA_fnc_serverEvent;\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_serverEvent\",\"3.8.0\",\"CBA_fnc_serverEvent\");\r\n"},{"name":"ace_common_fnc_serverLog","file":"common/functions/fnc_serverLog.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Log a RPT messaged on just the server\r\n *\r\n * Arguments:\r\n * 0: Text to display <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"x happened\"] call ace_common_fnc_serverLog;\r\n *\r\n * Public: no\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_msg\", \"\", [\"\"]]];\r\n\r\nif (isServer) then {\r\n    diag_log text _msg;\r\n} else {\r\n    [QGVAR(serverLog), _this] call CBA_fnc_serverEvent;\r\n};\r\n"},{"name":"ace_common_fnc_setAllGear","file":"common/functions/fnc_setAllGear.sqf","text":"/*\r\n * Author: bux578, commy2\r\n * Applies gear to unit. It must be called in the machine in which the unit is local.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: All Gear based on return value of ACE_common_fnc_getAllGear <ARRAY>\r\n * 2: Remove all attachments from weapons? (default: false) <BOOL>\r\n * 3: Remove all items from prefilled backpacks? (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, gear_array, true, true] call ace_common_fnc_setAllGear\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_setAllGear\",\"3.7.0\",\"setUnitLoadout\");\r\n\r\nparams [\"_unit\", \"_allGear\", [\"_clearAttachments\", false], [\"_clearBackpack\", false]];\r\n\r\nif (!local _unit) exitWith {\r\n    ACE_LOGWARNING_1(\"setAllGear - %1 has to be local.\",_unit);\r\n};\r\n\r\n// remove all starting gear of a player\r\nremoveAllWeapons _unit;\r\nremoveGoggles _unit;\r\nremoveHeadgear _unit;\r\nremoveVest _unit;\r\nremoveUniform _unit;\r\nremoveAllAssignedItems _unit;\r\nremoveBackpack _unit;\r\n\r\n_allGear params [\r\n    \"_headgear\", \"_goggles\",\r\n    \"_uniform\", \"_uniformitems\",\r\n    \"_vest\", \"_vestitems\",\r\n    \"_backpack\", \"_backpackitems\",\r\n    \"_primaryweapon\", \"_primaryweaponitems\", \"_primaryweaponmagazine\",\r\n    \"_secondaryweapon\", \"_secondaryweaponitems\", \"_secondaryweaponmagazine\",\r\n    \"_handgunweapon\", \"_handgunweaponitems\", \"_handgunweaponmagazine\",\r\n    \"_assigneditems\",\r\n    \"_binocular\",\r\n    \"_binocularmagazine\"\r\n];\r\n\r\n// start restoring the items\r\nif (_headgear != \"\") then {_unit addHeadgear _headgear};\r\nif (_goggles != \"\") then {_unit addGoggles _goggles};\r\n\r\n// ensure all weapons being loaded\r\n_unit addBackpack \"ACE_FakeBackpack\";\r\n\r\n// primaryWeapon\r\nif (_primaryweapon != \"\") then {\r\n    {\r\n        _unit addMagazine _x;\r\n        false\r\n    } count _primaryweaponmagazine;\r\n\r\n    _unit addWeapon _primaryweapon;\r\n\r\n    if (_clearAttachments) then {\r\n        removeAllPrimaryWeaponItems _unit;\r\n    };\r\n\r\n    {\r\n        if (_x != \"\") then {\r\n            _unit addPrimaryWeaponItem _x;\r\n        };\r\n        false\r\n    } count _primaryweaponitems;\r\n};\r\n\r\n// secondaryWeapon\r\nif (_secondaryweapon != \"\") then {\r\n    {\r\n        _unit addMagazine _x;\r\n        false\r\n    } count _secondaryweaponmagazine;\r\n\r\n    _unit addWeapon _secondaryweapon;\r\n\r\n    if (_clearAttachments) then {\r\n        //removeAllSecondaryWeaponItems _unit;\r\n        {\r\n            _unit removeSecondaryWeaponItem _x;\r\n            false\r\n        } count secondaryWeaponItems _unit;\r\n    };\r\n\r\n    {\r\n        if (_x != \"\") then {\r\n            _unit addSecondaryWeaponItem _x;\r\n        };\r\n        false\r\n    } count _secondaryweaponitems;\r\n};\r\n\r\n// handgun\r\nif (_handgunweapon != \"\") then {\r\n    {\r\n        _unit addMagazine _x;\r\n        false\r\n    } count _handgunweaponmagazine;\r\n\r\n    _unit addWeapon _handgunweapon;\r\n\r\n    if (_clearAttachments) then {\r\n        removeAllHandgunItems _unit;\r\n    };\r\n\r\n    {\r\n        if (_x != \"\") then {\r\n            _unit addHandgunItem _x;\r\n        };\r\n        false\r\n    } count _handgunweaponitems;\r\n};\r\n\r\n// binocular\r\n_unit addWeapon _binocular;\r\n_unit addMagazine _binocularmagazine;\r\n\r\n// done with dummy backpack. now remove\r\nremoveBackpack _unit;\r\n\r\n// uniform\r\nif (_uniform != \"\") then {\r\n    _unit forceAddUniform _uniform;\r\n};\r\n\r\n{\r\n    _unit addItemToUniform _x;\r\n    false\r\n} count _uniformitems;\r\n\r\n// vest\r\nif (_vest != \"\") then {\r\n    _unit addVest _vest;\r\n};\r\n\r\n{\r\n    _unit addItemToVest _x;\r\n    false\r\n} count _vestitems;\r\n\r\n// backpack\r\nif (_backpack != \"\") then {\r\n    _unit addBackpack _backpack;\r\n\r\n    if (_clearBackpack) then {\r\n        private _backpackObject = unitBackpack _unit;\r\n\r\n        clearMagazineCargoGlobal _backpackObject;\r\n        clearWeaponCargoGlobal _backpackObject;\r\n        clearItemCargoGlobal _backpackObject;\r\n    };\r\n\r\n    {\r\n        _unit addItemToBackpack _x;\r\n        false\r\n    } count _backpackitems;\r\n};\r\n\r\n// assigned items\r\n_assignedItems deleteAt (_assignedItems find _binocular);\r\n\r\n{\r\n    _unit linkItem _x;\r\n    false\r\n} count _assignedItems;\r\n\r\nnil\r\n"},{"name":"ace_common_fnc_setApproximateVariablePublic","file":"common/functions/fnc_setApproximateVariablePublic.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Publish a variable if it's different enough from the previously published value.\r\n *\r\n * Arguments:\r\n * 0: Object the variable should be assigned to <OBJECT>\r\n * 1: Name of the variable <STRING>\r\n * 2: Value of the variable <ANY>\r\n * 3: Absolute tolerance <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing.\r\n *\r\n * Example:\r\n * [player, \"balls\", 2, 0.1] call ace_common_fnc_setApproximateVariablePublic;\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_varName\", \"_value\", \"_tolerance\"];\r\nTRACE_4(\"params\",_object,_varName,_value,_tolerance);\r\n\r\n// Set exact new value locally\r\n_object setVariable [_varName, _value];\r\n\r\n// Exit if in SP - \"duh\"\r\nif (!isMultiplayer) exitWith {};\r\n\r\n// If new value is not different\r\nprivate _oldVarName = format [\"ACE_oldValue_%1\", _varName];\r\nprivate _oldValue = _object getVariable [_oldVarName, -100000];\r\n\r\n// Exit if new value is not different enough from the old onedifferent\r\nif (abs(_value - _oldValue) < _tolerance) exitWith {};\r\n\r\n// Publish the new value:\r\n_object setVariable [_varName, _value, true];\r\n_object setVariable [_oldVarName, _value];\r\n\r\nTRACE_2(\"Published variable:\", _varName, _value);\r\n"},{"name":"ace_common_fnc_setCaptivityStatus","file":"common/functions/fnc_setCaptivityStatus.sqf","text":"/*\r\n * Author: commy2\r\n * Set the captivity status of an unit. This allows the handling of more than one reason to set a unit captive.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: The reason of the captivity <STRING>\r\n * 2: Is the reason still valid? True for setting this reason, false for removing it <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_reason\", \"_status\"];\r\n\r\n//Now just a wrapper for FUNC(statusEffect_set) [No longer used in ace as of 3.5]\r\nACE_DEPRECATED(\"ace_common_fnc_setCaptivityStatus\",\"3.7.0\",\"ace_common_fnc_statusEffect_set\");\r\n\r\n[_unit, \"setCaptive\", _reason, _status] call FUNC(statusEffect_set);\r\n"},{"name":"ace_common_fnc_setDefinedVariable","file":"common/functions/fnc_setDefinedVariable.sqf","text":"/*\r\n * Author: Glowbal\r\n * setVariable value\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: variableName <STRING>\r\n * 2: value <ANY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_variable\", \"_value\", \"_global\"];\r\n\r\nif (isNil \"_global\") then {\r\n    private _definedVariable = [_variable] call FUNC(getDefinedVariableInfo);\r\n\r\n    _definedVariable params [\"\", \"\",  [\"_global\", false]];\r\n};\r\n\r\nif (!isNil \"_value\") exitWith {\r\n    _unit setVariable [_variable, _value, _global];\r\n};\r\n\r\n_unit setVariable [_variable, nil, _global];\r\n"},{"name":"ace_common_fnc_setDisableUserInputStatus","file":"common/functions/fnc_setDisableUserInputStatus.sqf","text":"/*\r\n * Author: Glowbal\r\n * Disables the user input. Works stacked.\r\n *\r\n * Arguments:\r\n * 0: id <STRING>\r\n * 1: disable <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_id\", \"_disable\"];\r\n\r\nif (isNil QGVAR(DISABLE_USER_INPUT_COLLECTION)) then {\r\n    GVAR(DISABLE_USER_INPUT_COLLECTION) = [];\r\n};\r\n\r\nif (_disable) then {\r\n    GVAR(DISABLE_USER_INPUT_COLLECTION) pushBack _id;\r\n    [true] call FUNC(disableUserInput);\r\n} else {\r\n    GVAR(DISABLE_USER_INPUT_COLLECTION) = GVAR(DISABLE_USER_INPUT_COLLECTION) - [_id];\r\n    if (GVAR(DISABLE_USER_INPUT_COLLECTION) isEqualTo []) then {\r\n        [false] call FUNC(disableUserInput);\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_setForceWalkStatus","file":"common/functions/fnc_setForceWalkStatus.sqf","text":"/*\r\n * Author: Pabst Mirror (from captivity by commy2)\r\n * Sets the forceWalk status of an unit. This allows the handling of more than one reason to set forceWalk.\r\n * Unit will force walk until all reasons are removed.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Reason for forcing walking <STRING>\r\n * 2: Is the reason still valid.  True to force walk, false to remove restriction. <BOOL>\r\n *\r\n * Returns:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_Player, \"BrokenLeg\", true] call FUNC(setForceWalkStatus)\r\n *\r\n * Public: Yes\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_reason\", \"_status\"];\r\n\r\n//Now just a wrapper for FUNC(statusEffect_set) [No longer used in ace as of 3.5]\r\nACE_DEPRECATED(\"ace_common_fnc_setForceWalkStatus\",\"3.7.0\",\"ace_common_fnc_statusEffect_set\");\r\n\r\n[_unit, \"forceWalk\", _reason, _status] call FUNC(statusEffect_set);\r\n"},{"name":"ace_common_fnc_setHearingCapability","file":"common/functions/fnc_setHearingCapability.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handle set volume calls. Will use the lowest available volume setting.\r\n *\r\n * Arguments:\r\n * 0: id <STRING>\r\n * 1: settings <NUMBER>\r\n * 2: add [true] OR remove [false] (default: true) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"earwax\", 0.5, true] call ace_common_fnc_setHearingCapability\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_id\", \"_setting\", [\"_add\", true]];\r\n\r\nprivate _exists = false;\r\nprivate _lowestVolume = 1;\r\n\r\nGVAR(setHearingCapabilityMap) = GVAR(setHearingCapabilityMap) select {\r\n    _x params [\"_xID\", \"_xSetting\"];\r\n    if (_id == _xID) then {\r\n        _exists = true;\r\n        if (_add) then {\r\n            _x set [1, _setting];\r\n            _lowestVolume = _lowestVolume min _setting;\r\n            true\r\n        } else {\r\n            false\r\n        };\r\n    } else {\r\n        _lowestVolume = _lowestVolume min _xSetting;\r\n        true\r\n    };\r\n};\r\n\r\nif (!_exists && _add) then {\r\n    _lowestVolume = _lowestVolume min _setting;\r\n    GVAR(setHearingCapabilityMap) pushBack [_id, _setting];\r\n};\r\n\r\n// in game sounds\r\n0 fadeSound _lowestVolume;\r\n0 fadeRadio _lowestVolume;\r\n0 fadeMusic _lowestVolume;\r\n\r\n// Set Radio mod variables.\r\nACE_player setVariable [\"tf_globalVolume\", _lowestVolume];\r\nif (!isNil \"acre_api_fnc_setGlobalVolume\") then { [_lowestVolume^0.33] call acre_api_fnc_setGlobalVolume; };\r\n"},{"name":"ace_common_fnc_setName","file":"common/functions/fnc_setName.sqf","text":"/*\r\n * Author: commy2\r\n * Sets the name variable of the object. Used to prevent issues with the name command.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (isNull _unit || {!alive _unit}) exitWith {};\r\n\r\nif (_unit isKindOf \"CAManBase\") then {\r\n    private _sanitizedName = [name _unit, true] call FUNC(sanitizeString);\r\n    private _rawName = [name _unit, false] call FUNC(sanitizeString);\r\n\r\n    _unit setVariable [\"ACE_Name\", _sanitizedName, true];\r\n    _unit setVariable [\"ACE_NameRaw\", _rawName, true];\r\n};\r\n"},{"name":"ace_common_fnc_setParameter","file":"common/functions/fnc_setParameter.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Sets the value of an ACE_Parameter and makes it public.\r\n *\r\n * Arguments:\r\n * 0: Parameter name <STRING>\r\n * 1: Value\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n *\r\n * Deprecated\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_value\"];\r\n\r\n// Hack to keep backward compatibility for the moment\r\nif (typeName (missionNamespace getVariable _name) == \"BOOL\") then {\r\n    if (_value isEqualType 0) then {\r\n        _value = _value > 0;\r\n    };\r\n};\r\n\r\nmissionNamespace setVariable [_name, _value];\r\npublicVariable _name;\r\n"},{"name":"ace_common_fnc_setPitchBankYaw","file":"common/functions/fnc_setPitchBankYaw.sqf","text":"/*\r\n * Author: Bohemia Interactive edit by KoffeinFlummi\r\n * Sets the value of an ACE_Parameter and makes it public.\r\n *\r\n * Arguments:\r\n * 0: Unit/Vehicle <OBJECT>\r\n * 1: Pitch <NUMBER>\r\n * 2: Yaw <NUMBER>\r\n * 3: Bank <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_aroundX\", \"_aroundY\", \"_aroundZ\"];\r\n\r\n_aroundZ = - _aroundZ;\r\n\r\nprivate _dirX = 0;\r\nprivate _dirY = 1;\r\nprivate _dirZ = 0;\r\nprivate _upX = 0;\r\nprivate _upY = 0;\r\nprivate _upZ = 1;\r\n\r\nif (_aroundX != 0) then {\r\n    _dirY = cos _aroundX;\r\n    _dirZ = sin _aroundX;\r\n    _upY = -sin _aroundX;\r\n    _upZ = cos _aroundX;\r\n};\r\n\r\nif (_aroundY != 0) then {\r\n    _dirX = _dirZ * sin _aroundY;\r\n    _dirZ = _dirZ * cos _aroundY;\r\n    _upX = _upZ * sin _aroundY;\r\n    _upZ = _upZ * cos _aroundY;\r\n};\r\n\r\nif (_aroundZ != 0) then {\r\n    private _dirXTemp = _dirX;\r\n    _dirX = (_dirXTemp* cos _aroundZ) - (_dirY * sin _aroundZ);\r\n    _dirY = (_dirY * cos _aroundZ) + (_dirXTemp * sin _aroundZ);\r\n\r\n    private _upXTemp = _upX;\r\n    _upX = (_upXTemp * cos _aroundZ) - (_upY * sin _aroundZ);\r\n    _upY = (_upY * cos _aroundZ) + (_upXTemp * sin _aroundZ);\r\n};\r\n\r\nprivate _dir = [_dirX, _dirY, _dirZ];\r\nprivate _up = [_upX, _upY, _upZ];\r\n\r\n_object setVectorDirAndUp [_dir,_up];\r\n"},{"name":"ace_common_fnc_setProne","file":"common/functions/fnc_setProne.sqf","text":"/*\r\n * Author: Glowbal\r\n * Force a unit to go prone\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n[\r\n    _unit,\r\n    [\"amovppnemstpsnonwnondnon\", \"amovppnemstpsraswrfldnon\", \"amovppnemstpsraswlnrdnon\", \"amovppnemstpsraswpstdnon\"] select (([primaryWeapon _unit, secondaryWeapon _unit, handgunWeapon _unit] find currentWeapon _unit) + 1)\r\n] call FUNC(doAnimation);\r\n"},{"name":"ace_common_fnc_setSetting","file":"common/functions/fnc_setSetting.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Change the value of an existing setting if it was not previously forced. Force if neccesary.\r\n * If executed on clients it has local effect.\r\n * If executed on server it can have global effect if the last parameter is set to true.\r\n *\r\n * Arguments:\r\n * 0: Setting name <STRING>\r\n * 1: Value <ANY>\r\n * 2: Force it? (default: false) <BOOL>\r\n * 3: Broadcast the change to all clients (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"ace_map_gestures_enabled\", true, false, true] call ace_common_fnc_setSetting\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_value\", [\"_force\", false], [\"_broadcastChanges\", false]];\r\n\r\nprivate _settingData = [_name] call FUNC(getSettingData);\r\n\r\n// Exit if the setting does not exist\r\nif (_settingData isEqualTo []) exitWith {\r\n    ACE_LOGERROR_1(\"SetSetting [%1] setting does not exist\", _name);\r\n};\r\n\r\n_settingData params [\"\", \"_typeName\", \"_isClientSetable\", \"\", \"\", \"\", \"_isForced\"];\r\n\r\n// Exit if the setting is already forced\r\nif (_isForced) exitWith {\r\n    ACE_LOGINFO_1(\"SetSetting [%1] Trying to set forced setting\", _name);\r\n};\r\n\r\n//This does NOT broadcast changes to GVAR(settings), so clients would not get updated force status\r\nif ((missionNamespace getVariable [QEGVAR(modules,serverModulesRead), false]) && {!(_isForced isEqualTo _force)}) then {\r\n    ACE_LOGWARNING_3(\"SetSetting [%1] attempting to broadcast a change to force (%2 to %3)\", _name, _isForced, _force);\r\n};\r\n\r\n// If the type is not equal, try to cast it\r\nprivate _failed = false;\r\nif (typeName _value != _settingData select 1) then {\r\n    _failed = true;\r\n    if ((_typeName == \"BOOL\") && {_value isEqualType 0}) then {\r\n        // If value is not 0 or 1 consider it invalid and don't set anything\r\n        if (_value isEqualTo 0) then {\r\n            _value = false;\r\n            _failed = false;\r\n        };\r\n        if (_value isEqualTo 1) then {\r\n            _value = true;\r\n            _failed = false;\r\n        };\r\n    };\r\n    if ((_typeName == \"COLOR\") && {_value isEqualType []}) then {\r\n        _failed = false;\r\n    };\r\n};\r\n\r\nif (_failed) exitWith {ACE_LOGERROR_3(\"SetSetting [%1] bad data type expected %2 got %3\", _name, _typeName, typeName _value);};\r\n\r\n// Force it if it was required\r\n_settingData set [6, _force];\r\n\r\n// Exit if the value didn't change\r\nif (_value isEqualTo (missionNamespace getVariable _name)) exitWith {};\r\n\r\n// Update the variable\r\nTRACE_2(\"Variable Updated\",_name,_value);\r\nmissionNamespace setVariable [_name, _value];\r\n\r\nif (isServer && {_broadcastChanges}) then {\r\n    // Publicize the new value\r\n    publicVariable _name;\r\n\r\n    // Raise event globally, this publicizes eventual changes in _force status so clients can update it locally\r\n    [\"ace_settingChanged\", [_name, _value, _force]] call CBA_fnc_globalEvent;\r\n} else {\r\n    // Raise event locally\r\n    [\"ace_settingChanged\", [_name, _value, _force]] call CBA_fnc_localEvent;\r\n};\r\n"},{"name":"ace_common_fnc_setSettingFromConfig","file":"common/functions/fnc_setSettingFromConfig.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Load a setting from config if it was not previosuly forced. Force if neccesary.\r\n *\r\n * Arguments:\r\n * 0: Config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_optionEntry\"];\r\n\r\nprivate _fnc_getValueWithType = {\r\n    params [\"_optionEntry\", \"_typeName\"];\r\n\r\n    private _valueConfig = (_optionEntry >> \"value\");\r\n    private _value = if (isNumber (_optionEntry >> \"value\")) then {getNumber (_optionEntry >> \"value\")} else {0};\r\n    TRACE_3(\"_fnc_getValueWithType:\", configName _optionEntry, _typeName, _value);\r\n    if (_typeName == \"BOOL\") exitWith {\r\n        _value > 0\r\n    };\r\n    if (_typeName == \"STRING\") exitWith {\r\n        getText (_optionEntry >> \"value\")\r\n    };\r\n    if (_typeName == \"ARRAY\") exitWith {\r\n        getArray (_optionEntry >> \"value\")\r\n    };\r\n    if (_typeName == \"COLOR\") exitWith {\r\n        getArray (_optionEntry >> \"value\")\r\n    };\r\n    _value\r\n};\r\n\r\nprivate _name = configName _optionEntry;\r\n\r\n// Check if the variable is already defined\r\nif (isNil _name) then {\r\n    // That setting was not loaded yet\r\n\r\n    // Get type from config\r\n    private _typeName = getText (_optionEntry >> \"typeName\");\r\n    if (_typeName == \"\") then {\r\n        _typeName = \"SCALAR\";\r\n    };\r\n\r\n    // Read entry and cast it to the correct type\r\n    private _value = [_optionEntry, _typeName] call _fnc_getValueWithType;\r\n\r\n    // Init the variable\r\n    missionNamespace setVariable [_name, _value];\r\n\r\n    // Add the setting to a list on the server\r\n    // Set the variable to not forced\r\n    /*private _settingData = [\r\n        name,\r\n        typeName,\r\n        isClientSettable,\r\n        localizedName,\r\n        localizedDescription,\r\n        possibleValues,\r\n        isForced,\r\n        defaultValue,\r\n        category\r\n    ];*/\r\n    private _settingData = [\r\n        _name,\r\n        _typeName,\r\n        (getNumber (_optionEntry >> \"isClientSettable\")) > 0,\r\n        \"\", //getText (_optionEntry >> \"displayName\"), //No need to broadcast, handeled by fnc_loadSettingsLocalizedText\r\n        \"\", //getText (_optionEntry >> \"description\"), //No need to broadcast, handeled by fnc_loadSettingsLocalizedText\r\n        [], //getArray (_optionEntry >> \"values\"), //No need to broadcast, handeled by fnc_loadSettingsLocalizedText\r\n        getNumber (_optionEntry >> \"force\") > 0,\r\n        _value,\r\n        \"\" //getText (_optionEntry >> \"category\")   //No need to broadcast, handeled by fnc_loadSettingsLocalizedText\r\n    ];\r\n\r\n    //Strings in the values array won't be localized from the config, so just do that now:\r\n    /*private _values = _settingData select 5;\r\n\r\n    {\r\n        private _text = _x;\r\n        if (((typeName _text) == \"STRING\") && {(count _text) > 1} && {(_text select [0,1]) == \"$\"}) then {\r\n            _text = localize (_text select [1, ((count _text) - 1)]); //chop off the leading $\r\n            _values set [_forEachIndex, _text];\r\n        };\r\n    } forEach _values;*/\r\n\r\n\r\n    GVAR(settings) pushBack _settingData;\r\n\r\n} else {\r\n    // The setting already exists.\r\n\r\n    // Check if it's already forced and quit\r\n    private _settingData = [_name] call FUNC(getSettingData);\r\n    if (_settingData select 6) exitWith {};\r\n\r\n    // The setting is not forced, so update the value\r\n\r\n    // Read entry and cast it to the correct type from the existing variable\r\n    private _value = [_optionEntry, _settingData select 1] call _fnc_getValueWithType;\r\n\r\n    // Update the variable\r\n    missionNamespace setVariable [_name, _value];\r\n\r\n    // Force the setting if requested\r\n    if (getNumber (_optionEntry >> \"force\") > 0) then {\r\n        _settingData set [6, true];\r\n    };\r\n};\r\n"},{"name":"ace_common_fnc_setVariableJIP","file":"common/functions/fnc_setVariableJIP.sqf","text":"/*\r\n * Author: commy2\r\n * Sets a public object namespace variable that gets reset with the same value after respawn, so JIP clients keep the value.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n * 1: Variable name <STRING>\r\n * 2: Any value <ANY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_varName\", \"_value\"];\r\n\r\nprivate _respawnVariables = _unit getVariable [\"ACE_respawnVariables\", []];\r\n\r\nif !(_varName in _respawnVariables) then {\r\n    _respawnVariables pushBack _varName;\r\n    _unit setVariable [\"ACE_respawnVariables\", _respawnVariables, true];\r\n};\r\n\r\n_unit setVariable [_varName, _value, true];\r\n"},{"name":"ace_common_fnc_setVariablePublic","file":"common/functions/fnc_setVariablePublic.sqf","text":"/*\r\n * Author: commy2 and CAA-Picard and joko and PabstMirror\r\n * Publish a variable, but wait a certain amount of time before allowing it to be published it again.\r\n *\r\n * Arguments:\r\n * 0: Object the variable should be assigned to <OBJECT>\r\n * 1: Name of the variable <STRING>\r\n * 2: Value of the variable <ANY>\r\n * 3: Embargo delay <NUMBER> (Optional. Default: 1)\r\n *\r\n * Return Value:\r\n * Nothing.\r\n *\r\n * Example:\r\n * [player, \"balls\", 2, 1] call ace_common_fnc_setVariablePublic;\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_varName\", \"_value\", [\"_delay\", 1]];\r\nTRACE_4(\"params\",_object,_varName,_value,_delay);\r\n\r\n// set value locally\r\n_object setVariable [_varName, _value];\r\n\r\n// Exit if in SP - \"duh\"\r\nif (!isMultiplayer) exitWith {};\r\n\r\n// If we are on embargo, exit\r\nif (_object isEqualTo (_object getVariable [format [\"ACE_onEmbargo_%1\", _varName], objNull])) exitWith {};\r\n\r\n// Publish Now and set last update time:\r\n_object setVariable [_varName, _value, true];\r\n_object setVariable [format [\"ACE_onEmbargo_%1\", _varName], _object];\r\n\r\nTRACE_2(\"Starting Embargo\", _varName, _delay);\r\n\r\n[{\r\n    params [\"_object\", \"_varName\", \"_value\"];\r\n    if (isNull _object) exitWith {TRACE_1(\"objNull\",_this);};\r\n\r\n    _object setVariable [format [\"ACE_onEmbargo_%1\", _varName], nil]; //Remove Embargo\r\n    private _curValue = _object getVariable _varName;\r\n\r\n    TRACE_4(\"End of embargo\", _object, _varName, _value, _curValue);\r\n\r\n    //If value at start of embargo doesn't equal current, then broadcast and start new embargo\r\n    if (!(_value isEqualTo _curValue)) then {\r\n        _this call FUNC(setVariablePublic);\r\n    };\r\n}, _this, _delay] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_common_fnc_setVolume","file":"common/functions/fnc_setVolume.sqf","text":"/*\r\n * Author: Glowbal\r\n * Sets the volume of the game, including third party radio modifications such as TFAR and ACRE.\r\n *\r\n * Arguments:\r\n * 0: setVolume (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n *\r\n * Note: Uses player\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define MUTED_LEVEL 0.2\r\n#define NORMAL_LEVEL 1\r\n#define NO_SOUND    0\r\n\r\nparams [[\"_setVolume\", false]];\r\n\r\nif (_setVolume) then {\r\n    // Vanilla Game\r\n    2 fadeSound NORMAL_LEVEL;\r\n\r\n    // TFAR\r\n    player setVariable [\"tf_voiceVolume\", NORMAL_LEVEL, true];\r\n    player setVariable [\"tf_globalVolume\", NORMAL_LEVEL];\r\n    player setVariable [\"tf_unable_to_use_radio\", false];\r\n\r\n    // ACRE2\r\n    if (!isNil \"acre_api_fnc_setGlobalVolume\") then { [NORMAL_LEVEL^0.33] call acre_api_fnc_setGlobalVolume; };\r\n    player setVariable [\"acre_sys_core_isDisabled\", false, true];\r\n\r\n} else {\r\n    // Vanilla Game\r\n    2 fadeSound MUTED_LEVEL;\r\n\r\n    // TFAR\r\n    player setVariable [\"tf_voiceVolume\", NO_SOUND, true];\r\n    player setVariable [\"tf_globalVolume\", MUTED_LEVEL];\r\n    player setVariable [\"tf_unable_to_use_radio\", true];\r\n\r\n    // ACRE2\r\n    if (!isNil \"acre_api_fnc_setGlobalVolume\") then { [MUTED_LEVEL^0.33] call acre_api_fnc_setGlobalVolume; };\r\n    player setVariable [\"acre_sys_core_isDisabled\", true, true];\r\n\r\n};\r\n"},{"name":"ace_common_fnc_showHud","file":"common/functions/fnc_showHud.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Allows multiple sources to not overwrite showHud command\r\n * Bitwise AND Logic (a single false in a mask will make it false)\r\n *\r\n * Arguments:\r\n * 0: Source ID <STRING><OPTIONAL>\r\n * 1: Show Hud Bool Array (8 to set, empty to remove) <ARRAY><OPTIONAL>\r\n * - [hud, info, radar, compass, direction, menu, group, cursors]\r\n * - hud: Boolean - show scripted HUD (same as normal showHUD true/false)\r\n * - info: Boolean - show vehicle + soldier info (hides weapon info from the HUD as well)\r\n * - radar: Boolean - show vehicle radar\r\n * - compass: Boolean - show vehicle compass\r\n * - direction: Boolean - show tank direction indicator (not present in vanilla Arma 3)\r\n * - menu: Boolean - show commanding menu (hides HC related menus)\r\n * - group: Boolean - show group info bar (hides squad leader info bar)\r\n * - cursors: Boolean - show HUD weapon cursors (connected with scripted HUD)\r\n *\r\n * Return Value:\r\n * Resulting ShowHud Array <ARRAY>\r\n *\r\n * Example:\r\n * [\"hideHud\", [false, true, true, true, true, true, true, false]] call ace_common_fnc_showHud; //This is equivalent to the old showHud false\r\n * [] call ace_common_fnc_showHud; //sets `showHud` and returns the result array used\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!hasInterface) exitWith {[-1]};\r\n\r\nparams [[\"_reason\", \"\", [\"\"]], [\"_mask\", [], [[]], [0,8]]];\r\n\r\nif (isArray (missionConfigFile >> \"showHUD\")) then {\r\n    //(showHud = 0;) is fine - the array is the problem\r\n    ACE_LOGWARNING(\"showHUD[] in Description.ext breaks the showHud command\");\r\n};\r\n\r\nif (_reason != \"\") then {\r\n    _reason = toLower _reason;\r\n    if (_mask isEqualTo []) then {\r\n        TRACE_2(\"Setting\", _reason, _mask);\r\n        [GVAR(showHudHash), _reason] call FUNC(hashRem);\r\n    } else {\r\n        TRACE_2(\"Removing\", _reason, _mask);\r\n        [GVAR(showHudHash), _reason, _mask] call FUNC(hashSet);\r\n    };\r\n};\r\n\r\nGVAR(showHudHash) params [\"_reasons\", \"_masks\"];\r\nprivate _resultMask = [];\r\n\r\nfor \"_index\" from 0 to 7 do {\r\n    private _set = true; //Default to true\r\n    {\r\n        if (!(_x select _index)) exitWith {\r\n            _set = false; //Any false will make it false\r\n        };\r\n    } forEach _masks;\r\n    _resultMask pushBack _set;\r\n};\r\n\r\nTRACE_2(\"showHud\", _resultMask, _reasons);\r\nshowHud _resultMask;\r\n\r\n_resultMask\r\n"},{"name":"ace_common_fnc_showUser","file":"common/functions/fnc_showUser.sqf","text":"/*\r\n * Author: commy2\r\n * hint the Variable ACE_isUsedBy from the input Object every frame\r\n *\r\n * Arguments:\r\n * <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isNil QGVAR(showUserPFH)) then {\r\n    [GVAR(showUserPFH)] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\nGVAR(showUserPFH) = [{\r\n    hintSilent str ((_this select 0) getVariable [\"ACE_isUsedBy\", objNull]);\r\n}, 0, _this] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_common_fnc_statusEffect_addType","file":"common/functions/fnc_statusEffect_addType.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Adds a status effect that will be handled.\r\n *\r\n * Arguments:\r\n * 0: Status Effect Name, this should match a corresponding event name <STRING>\r\n * 1: Send event globaly <BOOL>\r\n * 2: Common Effect Reaons to pre-seed durring init <ARRAY>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [\"setCaptive\", true, []] call ace_common_fnc_statusEffect_addType\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_name\", \"\", [\"\"]], [\"_isGlobal\", false, [false]], [\"_commonReasonsArray\", [], [[]]]];\r\nTRACE_3(\"params\",_name,_isGlobal,_commonReasonsArray);\r\n\r\nif (_name == \"\") exitWith {ACE_LOGERROR_1(\"addStatusEffect - Bad Name %1\", _this)};\r\nif (_name in GVAR(statusEffect_Names)) exitWith {ACE_LOGWARNING_1(\"addStatusEffect - Effect Already Added (note, will not update global bit) %1\", _this)};\r\n\r\nGVAR(statusEffect_Names) pushBack _name;\r\nGVAR(statusEffect_isGlobal) pushBack _isGlobal;\r\n\r\n//We add reasons at any time, but more efficenet to add all common ones at one time during init\r\nif (isServer && {!(_commonReasonsArray isEqualTo [])}) then {\r\n    //Switch case to lower:\r\n    _commonReasonsArray = _commonReasonsArray apply { toLower _x };\r\n    missionNamespace setVariable [(format [QGVAR(statusEffects_%1), _name]), _commonReasonsArray, true];\r\n};\r\n"},{"name":"ace_common_fnc_statusEffect_get","file":"common/functions/fnc_statusEffect_get.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Retrives list of current status effects\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\r\n * 1: Effect Name <STRING>\r\n *\r\n * Return Value:\r\n * Effect status <ARRAY>\r\n *  0: is activly set (if false, the effect is ignored and never modified) <BOOL>\r\n *  1: reasons why it is set true (list of strings, count of 0 = false, 1+ = true) <ARRAY>\r\n *\r\n * Example:\r\n * [player, \"forceWalk\"] call ace_common_fnc_statusEffect_get\r\n *\r\n * Public: Yes\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_object\", objNull, [objNull]], [\"_effectName\", \"\", [\"\"]]];\r\nTRACE_2(\"params\",_object,_effectName);\r\n\r\nif (isNull _object) exitWith {\r\n    TRACE_1(\"null\",_object);\r\n    [false, []]\r\n};\r\n\r\n[_object, false] call FUNC(statusEffect_resetVariables); //Check for mismatch\r\n\r\n//List of reasons\r\nprivate _statusReasons = missionNamespace getVariable [(format [QGVAR(statusEffects_%1), _effectName]), []];\r\nif (_statusReasons isEqualTo []) exitWith {\r\n    TRACE_1(\"no reasons - bad effect?\",_statusReasons);\r\n    [false, []]\r\n};\r\n\r\n//Get Effect Number\r\nprivate _effectVarName = format [QGVAR(effect_%1), _effectName];\r\nprivate _effectNumber = _object getVariable [_effectVarName, -1];\r\nTRACE_2(\"current\",_effectVarName,_effectNumber);\r\n\r\nif (_effectNumber == -1) exitWith { //Nil array - no effect\r\n    [false, []]\r\n};\r\nif (_effectNumber == 0) exitWith { //empty array - false effect\r\n    [true, []]\r\n};\r\n\r\n//if no change: skip sending publicVar and events\r\nprivate _effectBoolArray = [_effectNumber, count _statusReasons] call FUNC(binarizeNumber);\r\nTRACE_2(\"bitArray\",_statusIndex,_effectBoolArray);\r\n\r\nprivate _activeEffects = [];\r\n{\r\n    if (_x) then {\r\n        _activeEffects pushBack (_statusReasons select _forEachIndex);\r\n    };\r\n} forEach _effectBoolArray;\r\n\r\n//non-empty array - true effect\r\n[true, _activeEffects]\r\n"},{"name":"ace_common_fnc_statusEffect_localEH","file":"common/functions/fnc_statusEffect_localEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles locality switch, runs a respawn check and then reapplies all effect events.\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, true] call ace_common_fnc_statusEffect_localEH\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_isLocal\"];\r\nTRACE_2(\"params\",_object,_isLocal);\r\n\r\n//Only run this after the settings are initialized  \r\n//Need to wait for all EH to be installed (local event will happen between pre and post init)\r\nif !(GVAR(settingsInitFinished)) exitWith {\r\n    TRACE_1(\"pushing to runAtSettingsInitialized\", _this);\r\n    GVAR(runAtSettingsInitialized) pushBack [FUNC(statusEffect_localEH), _this];\r\n};\r\n\r\nif (!_isLocal) exitWith {TRACE_1(\"object no longer local\", _this)};\r\nif (isNull _object) exitWith {TRACE_1(\"object null\", _this)};\r\n\r\n //Reset any variables because of respawn\r\n[_object, false] call FUNC(statusEffect_resetVariables);\r\n\r\n//Send all Variables to client\r\n[_object, \"\"] call FUNC(statusEffect_sendEffects);\r\n"},{"name":"ace_common_fnc_statusEffect_resetVariables","file":"common/functions/fnc_statusEffect_resetVariables.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Resets all effect numbers to 0 when an object respawns (but does not apply the effect event).\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, true] call ace_common_fnc_statusEffect_resetVariables\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_object\", objNull, [objNull]], [\"_setObjectRef\", false, [false]]];\r\nTRACE_2(\"params\",_object,_setObjectRef);\r\n\r\nif (isNull _object) exitWith {};\r\n\r\nprivate _objectRef = _object getVariable QGVAR(statusEffect_object);\r\nTRACE_2(\"testing\",_object,_objectRef);\r\n\r\n// If nothing was ever set, or objects match, exit (always true unless respawned)\r\nif (isNil \"_objectRef\") exitWith {\r\n    if (_setObjectRef) then {\r\n        _object setVariable [QGVAR(statusEffect_object), _object, true]; //explicitly set new object ref\r\n    };\r\n};\r\nif (_object == _objectRef) exitWith {};\r\n\r\n//Mismatch, so if effect has ever been defined, reset to 0\r\n{\r\n    private _effectVarName = format [QGVAR(effect_%1), _x];\r\n    private _effectNumber = _object getVariable [_effectVarName, -1];\r\n    if (_effectNumber != -1) then {\r\n        TRACE_2(\"forced reset defined array on object mismatch\",_x,_effectNumber);\r\n        _object setVariable [_effectVarName, 0, true]; //This always resets to 0 (not -1/nil)!\r\n    };\r\n} forEach GVAR(statusEffect_Names);\r\n\r\n_object setVariable [QGVAR(statusEffect_object), _object, true];\r\n"},{"name":"ace_common_fnc_statusEffect_respawnEH","file":"common/functions/fnc_statusEffect_respawnEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles the Respawn Event Handler to reset effects.\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, objNull] call ace_common_fnc_statusEffect_respawnEH\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\nTRACE_1(\"params\",_object);\r\n\r\n//Only run this after the settings are initialized  \r\n//Need to wait for all EH to be installed (local event will happen between pre and post init)\r\nif !(GVAR(settingsInitFinished)) exitWith {\r\n    TRACE_1(\"pushing to runAtSettingsInitialized\", _this);\r\n    GVAR(runAtSettingsInitialized) pushBack [FUNC(statusEffect_respawnEH), _this];\r\n};\r\n\r\nif (!local _object) exitWith {TRACE_1(\"object no longer local\", _this)};\r\nif (isNull _object) exitWith {TRACE_1(\"object null\", _this)};\r\n\r\n //Reset any variables on \"real\" respawn\r\n[_object, false] call FUNC(statusEffect_resetVariables);\r\n\r\n//Send all Variables to client\r\n[_object, \"\"] call FUNC(statusEffect_sendEffects);\r\n"},{"name":"ace_common_fnc_statusEffect_sendEffects","file":"common/functions/fnc_statusEffect_sendEffects.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Sends all status effects for an object (can be run on non-local objects)\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n * 1: Effect name (or \"\" to send all) <STRING>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, \"\"] call ace_common_fnc_statusEffect_sendEffects\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_object\", objNull, [objNull]], [\"_effectName\", \"\", [\"\"]]];\r\nTRACE_2(\"params\",_object,_effectName);\r\n\r\nif (isNull _object) exitWith {};\r\n\r\n{\r\n    if ((_effectName == \"\") || {_effectName == _x}) then {\r\n        private _effectVarName = format [QGVAR(effect_%1), _x];\r\n        private _effectNumber = _object getVariable [_effectVarName, -1];\r\n\r\n        //We only do anything if the effect has been defined at some point in the game for this unit\r\n        TRACE_2(\"checking if event is nil\",_x,_effectNumber);\r\n        if (_effectNumber != -1) then {\r\n            private _eventName = format [QGVAR(%1), _x];\r\n            if (GVAR(statusEffect_isGlobal) select _forEachIndex) then {\r\n                TRACE_2(\"Sending Global Event\", _object, _effectNumber);\r\n                [_eventName, [_object, _effectNumber]] call CBA_fnc_globalEvent;\r\n            } else {\r\n                TRACE_2(\"Sending Target Event\", _object, _effectNumber);\r\n                [_eventName, [_object, _effectNumber], _object] call CBA_fnc_targetEvent;\r\n            };\r\n        };\r\n    };\r\n} forEach GVAR(statusEffect_Names);\r\n"},{"name":"ace_common_fnc_statusEffect_set","file":"common/functions/fnc_statusEffect_set.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Adds or removes an id to a status effect and will send an event to apply.\r\n *\r\n * Arguments:\r\n * 0: vehicle that it will be attached to (player or vehicle) <OBJECT>\r\n * 1: Effect Name <STRING>\r\n * 2: Unique Reason ID <STRING>\r\n * 3: Is Set (true adds/false removes) <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, \"setCaptive\", \"reason1\", true] call ace_common_fnc_statusEffect_set\r\n *\r\n * Public: Yes\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_object\", objNull, [objNull]], [\"_effectName\", \"\", [\"\"]], [\"_ID\", \"\", [\"\"]], [\"_set\", true, [false]]];\r\nTRACE_4(\"params\",_object,_effectName,_ID,_set);\r\n\r\n//Only run this after the settings are initialized\r\nif !(GVAR(settingsInitFinished)) exitWith {\r\n    TRACE_1(\"pushing to runAtSettingsInitialized\", _this);\r\n    GVAR(runAtSettingsInitialized) pushBack [FUNC(statusEffect_set), _this];\r\n};\r\n\r\nif (isNull _object) exitWith {TRACE_1(\"null\",_object);};\r\n\r\n[_object, true] call FUNC(statusEffect_resetVariables); //Check for mismatch, and set object ref\r\n\r\n//check ID case and set globaly if not already set:\r\n_ID = toLower _ID;\r\nprivate _statusReasons = missionNamespace getVariable [(format [QGVAR(statusEffects_%1), _effectName]), []];\r\nprivate _statusIndex = _statusReasons find _ID;\r\nif (_statusIndex == -1) then {\r\n    TRACE_2(\"ID not in global reasons, adding\",_statusReasons,_ID);\r\n    _statusIndex = _statusReasons pushBack _ID;\r\n    missionNamespace setVariable [(format [QGVAR(statusEffects_%1), _effectName]), _statusReasons, true];\r\n};\r\n\r\nprivate _effectVarName = format [QGVAR(effect_%1), _effectName];\r\nprivate _effectNumber = _object getVariable [_effectVarName, -1];\r\nTRACE_2(\"current\",_effectVarName,_effectNumber);\r\n\r\nif ((_effectNumber == -1) && {!_set}) exitWith {\r\n    //Optimization for modules that always set an ID to false even if never set true\r\n    TRACE_2(\"Set False on nil array, exiting\",_set,_effectNumber);\r\n};\r\n\r\nif (_effectNumber == -1) then {_effectNumber = 0}; //reset (-1/nil) to 0\r\n\r\n//if no change: skip sending publicVar and events\r\nprivate _effectBoolArray = [_effectNumber, count _statusReasons] call FUNC(binarizeNumber);\r\nTRACE_2(\"bitArray\",_statusIndex,_effectBoolArray);\r\nif (_set isEqualTo (_effectBoolArray select _statusIndex)) exitWith {\r\n    TRACE_2(\"No Change, exiting\",_set,_effectBoolArray select _statusIndex);\r\n};\r\n\r\nTRACE_2(\"Setting to new value\",_set,_effectBoolArray select _statusIndex);\r\n_effectBoolArray set [_statusIndex, _set];\r\n_effectNumber = _effectBoolArray call FUNC(toBitmask); //Convert array back to number\r\n\r\nTRACE_2(\"Saving globaly\",_effectVarName,_effectNumber);\r\n_object setVariable [_effectVarName, _effectNumber, true];\r\n\r\n[_object, _effectName] call FUNC(statusEffect_sendEffects);\r\n"},{"name":"ace_common_fnc_stringCompare","file":"common/functions/fnc_stringCompare.sqf","text":"/*\r\n * Author: bovine3dom\r\n * Determines whether one string matches another and how many characters match. Case insensitive.\r\n *\r\n * Arguments:\r\n * 0: stringA <STRING>\r\n * 1: stringB <STRING>\r\n *\r\n * Return Value:\r\n * Number of matching characters >NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_string\", \"_searchTerm\"];\r\n\r\n_string = toLower _string; // removes case sensitivity\r\n_searchTerm = toLower _searchTerm;\r\n\r\nprivate _arraySearchTerm = toArray _searchTerm; // splits string into array of unicode decimals\r\nprivate _arrayString = toArray _string;\r\nprivate _sizeSearchTerm = count _arraySearchTerm; // We only measure the array once\r\nprivate _sizeString = count _arrayString;\r\n\r\nprivate _matchingCharacters = 0;\r\nprivate _searchIterator = 0;\r\nprivate _targetIterator = 0;\r\n\r\nwhile {_searchIterator < _sizeSearchTerm && _targetIterator < _sizeString} do { // Prevents us from going out of bounds\r\n    if (_arraySearchTerm select _searchIterator == _arrayString select _targetIterator) then { // If we have a match, start looking for the next character in the search term\r\n        _matchingCharacters = _matchingCharacters + 1;\r\n        _searchIterator = _searchIterator + 1\r\n    };\r\n\r\n    _targetIterator = _targetIterator + 1; // Look at the next character in the string\r\n};\r\n\r\n_matchingCharacters\r\n"},{"name":"ace_common_fnc_stringRemoveWhiteSpace","file":"common/functions/fnc_stringRemoveWhiteSpace.sqf","text":"/*\r\n * Author: Glowbal\r\n * Removes white spaces from string\r\n *\r\n * Arguments:\r\n * 0: stringA <STRING>\r\n * 1: stringB <STRING>\r\n *\r\n * Return Value:\r\n * copy of string <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_string\"];\r\n\r\n(_string splitString \" \") joinString \"\"\r\n"},{"name":"ace_common_fnc_stringToColoredText","file":"common/functions/fnc_stringToColoredText.sqf","text":"/*\r\n * Author: commy2\r\n * Create a centered, colored text.\r\n *\r\n * Arguments:\r\n * 0: Text <ANY>\r\n * 1: Color <ARRAY>\r\n *\r\n * Return Value:\r\n * Text <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_string\", \"_color\"];\r\n\r\n_string = format [\"%1\", _string];\r\n\r\n_color = (\r\n    [255 * (_color select 0), 2] call FUNC(toHex)\r\n) + (\r\n    [255 * (_color select 1), 2] call FUNC(toHex)\r\n) + (\r\n    [255 * (_color select 2), 2] call FUNC(toHex)\r\n);\r\n\r\nparseText format [\"<t align='center' color='#%2' >%1</t>\", _string, _color]\r\n"},{"name":"ace_common_fnc_switchToGroupSide","file":"common/functions/fnc_switchToGroupSide.sqf","text":"/*\r\n * Author: Glowbal\r\n * Stack group switches. Will always trace back to original group.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: switch <BOOLEAN>\r\n * 2: id <STRING>\r\n * 3: side <SIDE>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull], [\"_switch\", false], [\"_id\", \"\"], [\"_side\", side _unit]];\r\n\r\nprivate _previousGroupsList = _unit getVariable [QGVAR(previousGroupSwitchTo), []];\r\n\r\nif (_switch) then {\r\n    // go forward\r\n    private _previousGroup = group _unit;\r\n    private _originalSide = side group _unit;\r\n\r\n    if (count units _previousGroup == 1 && _originalSide == _side) exitWith {\r\n        [format [\"Current group has only 1 member and is of same side as switch. Not switching unit %1\", _id]] call FUNC(debug);\r\n    };\r\n\r\n    private _newGroup = createGroup _side;\r\n    [_unit] joinSilent _newGroup;\r\n\r\n    _previousGroupsList pushBack [_previousGroup, _originalSide, _id, true];\r\n    _unit setVariable [QGVAR(previousGroupSwitchTo), _previousGroupsList, true];\r\n} else {\r\n    // go one back\r\n    {\r\n        if (_id == (_x select 2)) exitWith {\r\n            _x set [ 3, false];\r\n            _previousGroupsList set [_forEachIndex, _x];\r\n            [format[\"found group with ID: %1\", _id]] call FUNC(debug);\r\n        };\r\n    } forEach _previousGroupsList;\r\n\r\n    reverse _previousGroupsList;\r\n\r\n    {\r\n        if (_x select 3) exitWith {}; // stop at first id set to true\r\n        if !(_x select 3) then {\r\n            private _currentGroup = group _unit;\r\n            if (!isNull (_x select 0)) then {\r\n                [_unit] joinSilent (_x select 0);\r\n            } else {\r\n                private _newGroup = createGroup (_x select 1);\r\n                [_unit] joinSilent _newGroup;\r\n            };\r\n            if (count units _currentGroup == 0) then {\r\n                deleteGroup _currentGroup;\r\n            };\r\n            _previousGroupsList set [_forEachIndex, objNull];\r\n        };\r\n    } forEach _previousGroupsList;\r\n\r\n    _previousGroupsList = _previousGroupsList - [objNull];\r\n    reverse _previousGroupsList;    // we have to reverse again, to ensure the list is in the right order.\r\n\r\n    _unit setVariable [QGVAR(previousGroupSwitchTo), _previousGroupsList, true];\r\n};\r\n"},{"name":"ace_common_fnc_syncedEvent","file":"common/functions/fnc_syncedEvent.sqf","text":"/*\r\n * Author: jaynus\r\n * Call and propegate a synced event\r\n *\r\n * Arguments:\r\n * 0: Name <STRING>\r\n * 1: Arguments <ARRAY>\r\n * 2: TTL <NUMBER, CODE> [Optional] for this specific event call\r\n *\r\n * Return Value:\r\n * Boolean of success <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_args\", [\"_ttl\", 0]];\r\n\r\nif (!HASH_HASKEY(GVAR(syncedEvents),_name)) exitWith {\r\n    ACE_LOGERROR_1(\"Synced event key [%1] not found (syncedEvent).\", _name);\r\n    false\r\n};\r\n\r\nprivate _eventData = [_name, _args, _ttl];\r\n\r\n[\"ACEe\", _eventData] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_common_fnc_syncedEventPFH","file":"common/functions/fnc_syncedEventPFH.sqf","text":"/*\r\n * Author: ?\r\n *\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {false};\r\n\r\n// Walk through the local synced events and clean up anything thats already EOL\r\n// @TODO: This should be iteration limited to prevent FPS lag\r\n\r\n{\r\n    private _name = _x;\r\n\r\n    private _data = HASH_GET(GVAR(syncedEvents),_name);\r\n    _data params [\"_eventTime\", \"_eventLog\", \"_globalEventTTL\"];\r\n\r\n    private _newEventLog = [];\r\n\r\n    // @TODO: This should be iteration limited to prevent FPS lag\r\n    {\r\n        private _eventEntry = _x;\r\n        private _ttlReturn = true;\r\n\r\n        if (_globalEventTTL isEqualType {}) then {\r\n            _ttlReturn = [_eventTime, _eventEntry] call _globalEventTTL;\r\n        } else {\r\n            _ttlReturn = call {_globalEventTTL < 1 || {diag_tickTime < (_eventEntry select 0) + _globalEventTTL}};\r\n        };\r\n\r\n        if (_ttlReturn) then {\r\n            // Do event based TTL check\r\n            _eventEntry params [\"_time\", \"\", \"_eventTTL\"];\r\n\r\n            if (_eventTTL isEqualType {}) then {\r\n                _ttlReturn = [_eventTime, _eventEntry] call _eventTTL;\r\n            } else {\r\n                _ttlReturn = call {_eventTTL < 1 || {diag_tickTime < _time + _eventTTL}};\r\n            };\r\n        };\r\n\r\n        // Finally drop it if the TTL check fails\r\n        if (_ttlReturn) then {\r\n            _newEventLog pushBack _x;\r\n        };\r\n        false\r\n    } count _eventLog;\r\n\r\n    _data set [1, _newEventLog];\r\n    false\r\n} count (GVAR(syncedEvents) select 0);\r\n\r\n// @TODO: Next, detect if we had a new request from a JIP player, and we need to continue syncing events\r\n"},{"name":"ace_common_fnc_targetEvent","file":"common/functions/fnc_targetEvent.sqf","text":"#include \"script_component.hpp\"\r\n\r\nparams [\"_eventName\", \"_eventTargets\", \"_eventArgs\"];\r\n\r\nprivate _newName = getText (configFile >> \"ACE_newEvents\" >> _eventName);\r\nif (_newName != \"\") then {\r\n    TRACE_2(\"Switching Names\",_eventName,_newName);\r\n    _eventName = _newName;\r\n};\r\n\r\n[_eventName,_eventArgs,_eventTargets] call CBA_fnc_targetEvent;\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_targetEvent\",\"3.8.0\",\"CBA_fnc_targetEvent\");\r\n"},{"name":"ace_common_fnc_throttledPublicVariable","file":"common/functions/fnc_throttledPublicVariable.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Schedules the publishment of an object variable to reduce network overhead\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>.\r\n * 1: Variable name <STRING>\r\n * 2: Maximum delay <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_varName\", \"_maxDelay\"];\r\n\r\n// Create the publish scheduler PFH the first time\r\nif (isNil QGVAR(publishSchedId)) then {\r\n    GVAR(publishVarNames) = [];\r\n    GVAR(publishNextTime) = 1e7;\r\n\r\n    GVAR(publishSchedId) = [{\r\n        if (diag_tickTime > GVAR(publishNextTime)) then {\r\n            {\r\n                _x params [_unit, _varName];\r\n                _unit setVariable [_varName, _unit getVariable _varName, true];\r\n                false\r\n            } count GVAR(publishVarNames);\r\n\r\n            GVAR(publishVarNames) = [];\r\n            GVAR(publishNextTime) = 1e7;\r\n        };\r\n    }, 0, []] call CBA_fnc_addPerFrameHandler;\r\n};\r\n\r\n// If the variable is not on the list\r\nif (GVAR(publishVarNames) find [_unit, _varName] == -1) exitWith {\r\n    GVAR(publishVarNames) pushBack [_unit, _varName];\r\n    GVAR(publishNextTime) = GVAR(publishNextTime) min (diag_tickTime + _maxDelay);\r\n};\r\n\r\n// If the variable is on the list\r\nGVAR(publishNextTime) = GVAR(publishNextTime) min (diag_tickTime + _maxDelay);\r\n"},{"name":"ace_common_fnc_toBin","file":"common/functions/fnc_toBin.sqf","text":"/*\r\n * Author: commy2\r\n * Converts number to binary number\r\n *\r\n * Arguments:\r\n * A number <NUMBER>\r\n *\r\n * Return Value:\r\n * A binary number as string <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_number\", [\"_minLength\", 1]];\r\n\r\nprivate _sign = [\"\", \"-\"] select (_number < 0);\r\n\r\n_number = round abs _number;\r\nprivate _bin = [\"\", \"0\"] select (_number == 0);\r\n\r\nwhile {_number > 0} do {\r\n    private _rest = str (_number mod 2);\r\n    _number = floor (_number / 2);\r\n    _bin = _rest + _bin;\r\n};\r\n\r\nwhile {count toArray _bin < _minLength} do {\r\n    _bin = \"0\" + _bin;\r\n};\r\n\r\n_sign + _bin // return\r\n"},{"name":"ace_common_fnc_toBitmask","file":"common/functions/fnc_toBitmask.sqf","text":"/*\r\n * Author: commy2\r\n * Convert an array of booleans into a number.\r\n *\r\n * Arguments:\r\n * N: Booleans <ARRAY>\r\n *\r\n * Return Value:\r\n * Bitmask <NUMBER>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _result = 0;\r\n\r\n{\r\n    if (_x) then {_result = _result + 2 ^ _forEachIndex};\r\n} forEach _this;\r\n\r\n_result\r\n"},{"name":"ace_common_fnc_toHex","file":"common/functions/fnc_toHex.sqf","text":"/*\r\n * Author: commy2, esteldunedain\r\n * Converts number to hexadecimal number\r\n *\r\n * Arguments:\r\n * A number between 0 and 255 <NUMBER>\r\n *\r\n * Return Value:\r\n * A hexadecimal number as string <STRING>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_number\"];\r\n\r\n_number = ((round abs _number) max 0) min 255;\r\n\r\nif (isNil QGVAR(hexArray)) then {\r\n    GVAR(hexArray) = [];\r\n\r\n    private _minLength = 2;\r\n\r\n    for [{_i = 0;}, {_i < 256}, {_i = _i + 1}] do {\r\n        private _num = _i;\r\n        private _hex = [\"\", \"0\"] select (_i == 0);\r\n\r\n        while {_num > 0} do {\r\n            private _rest = _num mod 16;\r\n            _rest = switch _rest do {\r\n                case 10 : {\"A\"};\r\n                case 11 : {\"B\"};\r\n                case 12 : {\"C\"};\r\n                case 13 : {\"D\"};\r\n                case 14 : {\"E\"};\r\n                case 15 : {\"F\"};\r\n                default {str _rest};\r\n            };\r\n            _num = floor (_num / 16);\r\n            _hex = _rest + _hex;\r\n        };\r\n\r\n        while {count toArray _hex < _minLength} do {\r\n            _hex = \"0\" + _hex;\r\n        };\r\n\r\n        GVAR(hexArray) pushBack _hex;\r\n    };\r\n};\r\n\r\nGVAR(hexArray) select _number // return\r\n"},{"name":"ace_common_fnc_toNumber","file":"common/functions/fnc_toNumber.sqf","text":"/*\r\n * Author: Garth de Wet (LH)\r\n * Takes a string/number and returns the number.\r\n *\r\n * Arguments:\r\n * 0: Value to attempt to convert to number or if number simply return number. <STRING, NUMBER>\r\n *\r\n * Return Value:\r\n * <NUMBER>\r\n *\r\n * Example:\r\n * number = [\"102\"] call ace_common_fnc_toNumber;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_value\"];\r\n\r\nif (_value isEqualType 0) exitWith {_value};\r\n\r\nparseNumber _value // return\r\n"},{"name":"ace_common_fnc_translateToModelSpace","file":"common/functions/fnc_translateToModelSpace.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_matrix\", \"_offset\"];\r\n\r\nprivate _origin = getPosASL _object;\r\n\r\n_matrix params [\"_xVec\", \"_yVec\", \"_zVec\"];\r\n\r\n_offset params [\"_x\", \"_y\", \"_z\"];\r\n\r\n(_xVec vectorMultiply _x) vectorAdd (_yVec vectorMultiply _y) vectorAdd (_zVec vectorMultiply _z) vectorAdd _origin // return\r\n"},{"name":"ace_common_fnc_translateToWeaponSpace","file":"common/functions/fnc_translateToWeaponSpace.sqf","text":"/*\r\n * Author: ?\r\n * ?\r\n *\r\n * Arguments:\r\n * ?\r\n *\r\n * Return Value:\r\n * ?\r\n *\r\n * Public: ?\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_matrix\", \"_offset\"];\r\n\r\nprivate _origin = getPosASL _object;\r\n\r\n_matrix params [\"_xVec\", \"_yVec\", \"_zVec\"];\r\n\r\n_offset = _offset vectorDiff _origin;\r\n\r\n_offset params [\"_x\", \"_y\", \"_z\"];\r\n\r\n[\r\n    ((_xVec select 0) * _x) + ((_xVec select 1) * _y) + ((_xVec select 2) * _z),\r\n    ((_yVec select 0) * _x) + ((_yVec select 1) * _y) + ((_yVec select 2) * _z),\r\n    ((_zVec select 0) * _x) + ((_zVec select 1) * _y) + ((_zVec select 2) * _z)\r\n] // return\r\n"},{"name":"ace_common_fnc_unhideUnit","file":"common/functions/fnc_unhideUnit.sqf","text":"/*\r\n * Author: SilentSpike (based on unmuteUnit)\r\n * Globally unhides a unit. Only unhides if the last reason was removed.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Reason to unhide the unit <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_Player, \"SpectatorMode\"] call ace_common_fnc_unhideUnit\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_reason\"];\r\n\r\nif (isNull _unit) exitWith {};\r\n\r\nprivate _setHiddenReasons = _unit getVariable [QGVAR(setHiddenReasons), []];\r\n\r\nif (_reason in _setHiddenReasons) then {\r\n    _setHiddenReasons deleteAt (_setHiddenReasons find _reason);\r\n    _unit setVariable [QGVAR(setHiddenReasons), _setHiddenReasons, true];\r\n};\r\n\r\nif (_setHiddenReasons isEqualTo []) then {\r\n    [QGVAR(hideObjectGlobal), [_unit,false]] call CBA_fnc_serverEvent;\r\n};\r\n"},{"name":"ace_common_fnc_uniqueElements","file":"common/functions/fnc_uniqueElements.sqf","text":"/*\r\n * Author: Glowbal\r\n * Make a copy of an array with only the unique elements.\r\n *\r\n * Arguments:\r\n * 0: array <ARRAY>\r\n *\r\n * Return Value:\r\n * Copy of original array <ARRAY>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_array\", [], [[]]]];\r\n\r\n_array arrayIntersect _array // return\r\n"},{"name":"ace_common_fnc_unloadPerson","file":"common/functions/fnc_unloadPerson.sqf","text":"/*\r\n * Author: Glowbal\r\n * Unload a person from a vehicle\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Returns true if succesfully unloaded person <BOOL>\r\n *\r\n * Example:\r\n * [hurtGuy] call ace_common_fnc_unloadPerson\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define GROUP_SWITCH_ID QFUNC(loadPerson)\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _vehicle = vehicle _unit;\r\n\r\nif (_vehicle == _unit) exitWith {false};\r\n\r\nif (speed _vehicle > 1 || {((getPos _vehicle) select 2) > 2}) exitWith {false};\r\n\r\nif (!isNull _vehicle) then {\r\n    [\"ace_unloadPersonEvent\", [_unit, _vehicle], [_unit]] call CBA_fnc_targetEvent;\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_common_fnc_unloadPersonLocal","file":"common/functions/fnc_unloadPersonLocal.sqf","text":"/*\r\n * Author: ViperMaul\r\n * Unload a person from a vehicle, local\r\n *\r\n * Arguments:\r\n * 0: unit to unload <OBJECT>\r\n * 1: Vehicle <OBJECT>\r\n * 2: Unloader (player) <OBJECT><OPTIONAL>\r\n *\r\n * Return Value:\r\n * Returns true if succesfully unloaded person <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define GROUP_SWITCH_ID QFUNC(loadPerson)\r\n\r\nparams [\"_unit\", \"_vehicle\", [\"_unloader\", objNull]];\r\nTRACE_3(\"params\",_unit,_vehicle,_unloader);\r\n\r\n//This covers testing vehicle stability and finding a safe position\r\nprivate _emptyPos = [_vehicle, (typeOf _unit), _unloader] call EFUNC(common,findUnloadPosition);\r\nTRACE_1(\"findUnloadPosition\",_emptyPos);\r\n\r\nif (count _emptyPos != 3) exitwith {\r\n    ACE_LOGWARNING_4(\"Could not find unload pos %1-ASL: %2 isTouchingGround: %3 Speed: %4\",_vehicle, getPosASL _vehicle, isTouchingGround _vehicle, speed _vehicle);\r\n    if ((!isNull _unloader) && {[_unloader] call FUNC(isPlayer)}) then {\r\n        //display text saying there are no safe places to exit the vehicle\r\n        [QGVAR(displayTextStructured), [localize LSTRING(NoRoomToUnload)], [_unloader]] call CBA_fnc_targetEvent;\r\n    };\r\n    false\r\n};\r\n\r\nunassignVehicle _unit;\r\n[_unit] orderGetIn false;\r\n\r\nTRACE_1(\"Ejecting\", alive _unit);\r\n\r\n_unit action [\"Eject\", vehicle _unit];\r\n\r\n[{\r\n    params [\"_unit\", \"_emptyPos\"];\r\n\r\n    _unit setPosASL AGLToASL _emptyPos;\r\n\r\n    if !([_unit] call FUNC(isAwake)) then {\r\n        TRACE_1(\"Check if isAwake\", [_unit] call FUNC(isAwake));\r\n\r\n        if (driver _unit == _unit) then {\r\n            private _anim = [_unit] call FUNC(getDeathAnim);\r\n\r\n            [_unit, _anim, 1, true] call FUNC(doAnimation);\r\n\r\n            [{\r\n                _unit = _this select 0;\r\n                _anim = _this select 1;\r\n                if ((_unit getVariable \"ACE_isUnconscious\") and (animationState _unit != _anim)) then {\r\n                    [_unit, _anim, 2, true] call FUNC(doAnimation);\r\n                };\r\n            }, [_unit, _anim], 0.5] call CBA_fnc_waitAndExecute;\r\n        };\r\n    };\r\n}, [_unit, _emptyPos], 0.5] call CBA_fnc_waitAndExecute;\r\n\r\n[_unit, false, GROUP_SWITCH_ID, side group _unit] call FUNC(switchToGroupSide);\r\n\r\nprivate _loaded = _vehicle getvariable [QGVAR(loaded_persons),[]];\r\n_loaded deleteAt (_loaded find _unit);\r\n\r\n_vehicle setvariable [QGVAR(loaded_persons), _loaded, true];\r\n\r\ntrue\r\n"},{"name":"ace_common_fnc_unmuteUnit","file":"common/functions/fnc_unmuteUnit.sqf","text":"/*\r\n * Author: commy2\r\n * Unmutes the unit. Only unmutes if the last reason was removed.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Reason to unmute the unit. <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_reason\"];\r\n\r\nif (isNull _unit) exitWith {};\r\n\r\n// remove reason to mute to the unit\r\nprivate _muteUnitReasons = _unit getVariable [QGVAR(muteUnitReasons), []];\r\n\r\nif (_reason in _muteUnitReasons) then {\r\n    _muteUnitReasons deleteAt (_muteUnitReasons find _reason);\r\n    _unit setVariable [QGVAR(muteUnitReasons), _muteUnitReasons, true];\r\n};\r\n\r\n// don't unmute if there is another mute reason!\r\nif (count _muteUnitReasons > 0) exitWith {};\r\n\r\nprivate _speaker = _unit getVariable [\"ACE_OriginalSpeaker\", \"\"];\r\n\r\nif (_speaker == \"\") exitWith {};\r\n\r\n[QGVAR(setSpeaker), [_unit, _speaker], _unit] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_common_fnc_useItem","file":"common/functions/fnc_useItem.sqf","text":"/*\r\n * Author: Glowbal\r\n * Use item\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: item <STRING>\r\n *\r\n * Return Value:\r\n * if item has been used. <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_item\", [\"_vehicleUsage\", false]];\r\n\r\nprivate _return = false;\r\n\r\nif !(_vehicleUsage) then {\r\n    if (_item != \"\") then {\r\n        if (_item in items _unit) then {\r\n            _unit removeItem _item;\r\n            _return = true;\r\n        } else {\r\n            if (_item in assignedItems _unit) then {\r\n                _unit unlinkItem _item;\r\n                _return = true;\r\n            };\r\n        };\r\n    };\r\n//} else {\r\n    // @todo implement shared item functionality for with vehicles.\r\n};\r\n\r\n_return\r\n"},{"name":"ace_common_fnc_useMagazine","file":"common/functions/fnc_useMagazine.sqf","text":"/*\r\n * Author: Glowbal\r\n * Use magazine\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: magazine <STRING>\r\n *\r\n * Return Value:\r\n * if magazine has been used. <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_magazine\", [\"_vehicleUsage\", false]];\r\n\r\nprivate _return = false;\r\n\r\nif !(_vehicleUsage) then {\r\n    if (_magazine != \"\") then {\r\n        _unit removeMagazine _magazine;\r\n        _return = true;\r\n    };\r\n\r\n    [format [\"fnc_useMagazine: %1 | %2\", _this, _return]] call FUNC(debug);\r\n//} else {\r\n    // @todo implement shared magazine functionality\r\n};\r\n\r\n_return\r\n"},{"name":"ace_common_fnc_waitAndExecute","file":"common/functions/fnc_waitAndExecute.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Executes a code once with a given game time delay, using a PFH\r\n *\r\n * Arguments:\r\n * 0: Code to execute <CODE>\r\n * 1: Parameters to run the code with <ARRAY>\r\n * 2: Delay in seconds before executing the code <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [{(_this select 0) setVelocity [0,0,200];}, [player], 10] call ace_common_fnc_waitAndExecute\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_waitAndExecute\",\"3.8.0\",\"CBA_fnc_waitAndExecute\");\r\n\r\n_this call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_common_fnc_waitUntilAndExecute","file":"common/functions/fnc_waitUntilAndExecute.sqf","text":"/*\r\n * Author: joko // Jonas\r\n * Executes a code once with after the Condition is True, using a PFH\r\n *\r\n * Arguments:\r\n * 0: Condition <CODE>\r\n * 1: Code to execute <CODE>\r\n * 2: Parameters to run the code with <ARRAY,ANY,NIL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [{(_this select 0) == vehicle (_this select 0)}, {(_this select 0) setDamage 1;}, [ACE_player]] call ace_common_fnc_waitUntilAndExecute\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_common_fnc_waitUntilAndExecute\",\"3.8.0\",\"CBA_fnc_waitUntilAndExecute\");\r\n\r\n_this call CBA_fnc_waitUntilAndExecute;\r\n\r\nnil\r\n"},{"name":"ace_common_fnc_waveHeightAt","file":"common/functions/fnc_waveHeightAt.sqf","text":"/*\r\n * Author: jaynus\r\n * Gets the wave height at a specific location. Uses a logic, so may be performance iffy\r\n *\r\n * Arguments:\r\n * 0: Position ASL to get height at\r\n *\r\n * Return Value:\r\n * Wave height in meters\r\n *\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_position\"];\r\n\r\nif (isNil QGVAR(waveHeightLogic)) then {\r\n    GVAR(waveHeightLogic) = \"Logic\" createVehicleLocal [0,0,0];\r\n};\r\n\r\nGVAR(waveHeightLogic) setPosASL _position;\r\n\r\n(getPosASLW GVAR(waveHeightLogic) select 2) - (getPosASL GVAR(waveHeightLogic) select 2)\r\n"},{"name":"ace_common_fnc_worldToScreenBounds","file":"common/functions/fnc_worldToScreenBounds.sqf","text":"/*\r\n * Author: zGuba 2011\r\n * Function helper for framing objects on screen.\r\n *\r\n * Arguments:\r\n * 0: object <OBJECT>\r\n * 1: margins 3D <ARRAY>\r\n *   0: X <NUMBER>\r\n *   1: Y <NUMBER>\r\n *   2: Z <NUMBER>\r\n * 2: offset 3D <ARRAY>\r\n *   0: X <NUMBER>\r\n *   1: Y <NUMBER>\r\n *   2: Z <NUMBER>\r\n *\r\n * Return Value:\r\n * 0: Minimal X <NUMMBER>\r\n * 1: Minimal Y <NUMMBER>\r\n * 2: Maximal X <NUMMBER>\r\n * 3: Maximal Y <NUMMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_margins\", \"_offsets\"];\r\n\r\nprivate _minX = 10;\r\nprivate _minY = 10;\r\nprivate _maxX = -10;\r\nprivate _maxY = -10;\r\n\r\nprivate _bounds = boundingBox _object;\r\n_margins params [\"_marginsX\", \"_marginsY\", \"_marginsZ\"];\r\n_offsets params [\"_offsetsX\", \"_offsetsY\", \"_offsetsZ\"];\r\n\r\n_bounds params [\"_boundsMin\", \"_boundsMax\"];\r\n_boundsMin params [\"_boundsMinX\", \"_boundsMinY\", \"_boundsMinZ\"];\r\n_boundsMax params [\"_boundsMaxX\", \"_boundsMaxY\", \"_boundsMaxZ\"];\r\n\r\n_boundsMinX = _boundsMinX - _marginsX + _offsetsX;\r\n_boundsMinY = _boundsMinY - _marginsY + _offsetsY;\r\n_boundsMinZ = _boundsMinZ - _marginsZ + _offsetsZ;\r\n\r\n_boundsMaxX = _boundsMaxX + _marginsX + _offsetsX;\r\n_boundsMaxY = _boundsMaxY + _marginsY + _offsetsY;\r\n_boundsMaxZ = _boundsMaxZ + _marginsZ + _offsetsZ;\r\n\r\nprivate _boundsCorners = [\r\n    [_boundsMinX, _boundsMinY, _boundsMinZ],\r\n    [_boundsMinX, _boundsMinY, _boundsMaxZ],\r\n    [_boundsMinX, _boundsMaxY, _boundsMinZ],\r\n    [_boundsMinX, _boundsMaxY, _boundsMaxZ],\r\n    [_boundsMaxX, _boundsMinY, _boundsMinZ],\r\n    [_boundsMaxX, _boundsMinY, _boundsMaxZ],\r\n    [_boundsMaxX, _boundsMaxY, _boundsMinZ],\r\n    [_boundsMaxX, _boundsMaxY, _boundsMaxZ]\r\n];\r\n\r\n{\r\n    private _ppos = worldToScreen (_object modelToWorld _x);\r\n\r\n    if (count _ppos >= 2) then {\r\n        _ppos params [\"_pposX\", \"_pposY\"];\r\n\r\n        if (_pposX < _minX) then {_minX = _pposX};\r\n        if (_pposX > _maxX) then {_maxX = _pposX};\r\n        if (_pposY < _minY) then {_minY = _pposY};\r\n        if (_pposY > _maxY) then {_maxY = _pposY};\r\n    }; //else - what to do if it is offscreen?\r\n    false\r\n} count _boundsCorners;\r\n\r\n[_minX, _minY, _maxX, _maxY]\r\n"}],"concertina_wire":[{"name":"ace_concertina_wire_fnc_deploy","file":"concertina_wire/functions/fnc_deploy.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n *\r\n * Deploys the concertina wire\r\n *\r\n * Arguments:\r\n * 0: wire coil <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_2(_wirecoil,_unit);\r\n\r\nprivate [\"_wireNoGeo\", \"_dir\", \"_pos\", \"_wireNoGeoPos\"];\r\n\r\n_wireNoGeo = \"ACE_ConcertinaWireNoGeo\" createVehicle [0,0,0];\r\n{\r\n    _wireNoGeo animate [_x, 1];\r\n} count WIRE_FAST;\r\n\r\nGVAR(placer) = _unit;\r\n_dir = getDir _unit;\r\n_pos = getPosASL _unit;\r\n_wireNoGeoPos = _pos vectorAdd [1.1 * sin(_dir), 1.1 * cos(_dir), 0];\r\n\r\n_wireNoGeo setDir _dir;\r\n_wireNoGeo setPosASL _wireNoGeoPos;\r\n\r\ndeleteVehicle _wirecoil;\r\n\r\n_unit setVariable [QGVAR(wireDeployed), false];\r\n\r\nGVAR(deployPFH) = [{\r\n    params [\"_args\", \"_idPFH\"];\r\n    _args params [\"_wireNoGeo\", \"_wireNoGeoPos\", \"_unit\"];\r\n\r\n    private [\"_range\", \"_posStart\", \"_posEnd\", \"_dirVect\", \"_dir\", \"_anim\", \"_wire\"];\r\n    _posStart = (_wireNoGeo modelToWorldVisual (_wireNoGeo selectionPosition \"start\")) call EFUNC(common,positionToASL);\r\n    _posEnd = (getPosASL _unit) vectorAdd (vectorDir _unit);\r\n    _dirVect = _posStart vectorDiff _posEnd;\r\n    _dir = _dirVect call CBA_fnc_vectDir;\r\n    _range = vectorMagnitude _dirVect;\r\n    _anim = 0 max (1 - (_range / 12));\r\n\r\n    if (!(alive _unit) || _range >= 12 || (_unit getVariable [QGVAR(wireDeployed), false])) exitWith {\r\n        _wire = \"ACE_ConcertinaWire\" createvehicle [0, 0, 0];\r\n        {\r\n            _wire animate [_x, _anim];\r\n        } count WIRE_FAST;\r\n\r\n        [{\r\n            params [\"_args\", \"_idPFH\"];\r\n            _args params [\"_wireNoGeo\", \"_wire\", \"_anim\", \"_dir\", \"_wireNoGeoPos\"];\r\n            if (_wire animationPhase \"wire_2\" == _anim) then {\r\n                deleteVehicle _wireNoGeo;\r\n                _wire setDir _dir;\r\n                _wire setPosASL _wireNoGeoPos;\r\n                [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n            };\r\n        }, 0, [_wireNoGeo, _wire, _anim, _dir, _wireNoGeoPos]] call CBA_fnc_addPerFrameHandler;\r\n\r\n        [_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(Common,removeActionEventHandler);\r\n        call EFUNC(interaction,hideMouseHint);\r\n\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    _wireNoGeo setDir _dir;\r\n    {\r\n        _wireNoGeo animate [_x, _anim];\r\n    } count WIRE_FAST;\r\n}, 0, [_wireNoGeo, _wireNoGeoPos, _unit]] call CBA_fnc_addPerFrameHandler;\r\n\r\n[localize \"STR_ACE_ROLLWIRE\", \"\", \"\"] call EFUNC(interaction,showMouseHint);\r\n\r\nGVAR(placer) setVariable [QGVAR(Deploy),\r\n    [GVAR(placer), \"DefaultAction\",\r\n    {GVAR(deployPFH) != -1},\r\n    {GVAR(placer) setVariable [QGVAR(wireDeployed), true]}\r\n] call EFUNC(common,AddActionEventHandler)];\r\n"},{"name":"ace_concertina_wire_fnc_dismount","file":"concertina_wire/functions/fnc_dismount.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Start dismounting the concertina wire\r\n *\r\n * Arguments:\r\n * 0: wire <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// If the cursorMenu is open, the loading bar will fail. If we execute the function one frame later, it will work fine\r\nif (uiNamespace getVariable [QEGVAR(interact_menu,cursorMenuOpened),false]) exitWith {\r\n    [{\r\n        _this call FUNC(dismount);\r\n    }, _this] call CBA_fnc_execNextFrame;\r\n};\r\nparams [\"_wire\", \"_unit\"];\r\n\r\nprivate [\"_config\", \"_delay\"];\r\n_config = (configFile >> \"CfgVehicles\" >> typeOf _unit);\r\n_delay = if (getNumber(_config >> \"engineer\") == 1 || getNumber(_config >> \"canDeactivateMines\") == 1) then {60} else {120};\r\n\r\n// TODO: Animation?\r\n\r\n[\r\n    _delay,\r\n    [_wire],\r\n    {(_this select 0) call FUNC(dismountSuccess)},\r\n    {},\r\n    localize \"STR_ACE_UNROLLWIRE\",\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_concertina_wire_fnc_dismountSuccess","file":"concertina_wire/functions/fnc_dismountSuccess.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n *\r\n * Dismounts the concertina wire\r\n *\r\n * Arguments:\r\n * 0: wire <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_1(_wire);\r\n\r\n{\r\n    _wire animate [_x, 1];\r\n} count WIRE_FAST;\r\n\r\n[{\r\n    params [\"_args\", \"_idPFH\"];\r\n    _args params [\"_wire\"];\r\n\r\n    if (_wire animationPhase \"wire_2\" == 1) then {\r\n         private [\"_dir\", \"_pos\", \"_wirecoil\"];\r\n\r\n        _dir = getDir _wire;\r\n        _pos = getPosASL _wire;\r\n\r\n        _wirecoil = \"ACE_ConcertinaWireCoil\" createvehicle [0, 0, 0];\r\n\r\n        deleteVehicle _wire;\r\n\r\n        _wirecoil setDir _dir;\r\n        _wirecoil setPosASL _pos;\r\n        _wirecoil setVelocity [0, 0, 0];\r\n\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n}, 0, [_wire]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_concertina_wire_fnc_handleDamage","file":"concertina_wire/functions/fnc_handleDamage.sqf","text":"/*\r\n * Author: Ruthberg\r\n *\r\n * Handles wire damage\r\n *\r\n * Arguments:\r\n * 0: wire <OBJECT>\r\n * 1: selectionName <STRING>\r\n * 2: damage <NUMBER>\r\n * 3: source <OBJECT>\r\n * 4: projectile <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_wire\", \"\", \"_damage\", \"_source\", \"\"];\r\nif (_damage < 0.5) exitWith { 0 };\r\n\r\nif (!(isNull _source)) then {\r\n    _wire setVariable [QGVAR(lastDamager), _source];\r\n};\r\n\r\n_damage\r\n"},{"name":"ace_concertina_wire_fnc_handleKilled","file":"concertina_wire/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: Rocko\r\n *\r\n * Handles wire and vehicle damage\r\n *\r\n * Arguments:\r\n * 0: wire <OBJECT>\r\n * 1: killer (vehicle) <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_wire\", \"_killer\"];\r\nTRACE_2(\"params\",_wire,_killer);\r\n\r\nprivate [\"_distance\", \"_vehicle\"];\r\n\r\nif (isNull _killer) then {\r\n    _killer = _wire getVariable [\"ace_concertina_wire_lastDamager\", objNull];\r\n    if (isNull _killer) then {\r\n        private _midPoint = ((_wire selectionPosition \"start\") vectorAdd (_wire selectionPosition \"deploy\")) vectorMultiply 0.5;\r\n        {\r\n            if ((vectorMagnitude velocity _x) > 0) exitWith {_killer = _x};\r\n        } forEach (nearestObjects [(_wire modelToWorld _midPoint), [\"Car\"], 8]);\r\n    };\r\n};\r\nif (isNull _killer || {_killer == _wire} || {_killer == gunner (vehicle _killer)}) exitWith {};\r\n\r\n_distance = _wire distance _killer;\r\nif (_distance > 14 || {_distance < 2}) exitWith {}; // Fix if shooting wire\r\n\r\n_vehicle = vehicle _killer;\r\n\r\n[QGVAR(vehicleDamage), [_wire, _vehicle], [_vehicle]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_concertina_wire_fnc_vehicleDamage","file":"concertina_wire/functions/fnc_vehicleDamage.sqf","text":"/*\r\n * Author: Rocko\r\n * Handles vehicle damage from hitting wire\r\n *\r\n * Arguments:\r\n * 0: wire <OBJECT>\r\n * 1: vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_wire\", \"_vehicle\"];\r\n\r\nprivate [\"_type\", \"_mode\", \"_anim\", \"_parts\", \"_selectionPart\", \"_selection\", \"_pos_w\", \"_dir_w\"];\r\n\r\n_type = typeOf _wire;\r\n_mode = switch (_type) do {\r\ncase \"ACE_ConcertinaWire\": { 0 };\r\ncase \"Land_Razorwire_F\": { 1 };\r\n    default { -1 };\r\n};\r\n\r\nif (_mode == -1) exitWith {};\r\n\r\n// _mode = 0 = Single Coil\r\n// _mode = 1 = Triple Coil\r\n\r\n// --------------------------------\r\n// L              M               R\r\n//                                4.54929 (4)\r\n//              6.13564 (6)\r\n//9.78744 (10)\r\n\r\n_type = typeOf _wire;\r\n_anim = _wire animationPhase \"wire_2\";\r\n_pos_w = getPos _wire;\r\n_dir_w = getDir _wire;\r\n\r\nif (_mode == 0) then {\r\n    private [\"_x\", \"_y\", \"_found\", \"_wireCheckPosAr\", \"_no\"];\r\n    _pos_w params [\"_x\",\"_y\"];\r\n\r\n    // Check if two Single coils are placed next to each other (i.e playes have built a big wire obstacle)\r\n    _wireCheckPosAr = [\r\n    [_x + (sin (_dir_w+90) * 1.5),_y + (cos (_dir_w+90) * 1.5)],\r\n    [(_x-(sin _dir_w)) + (sin (_dir_w+90) * 1.5),(_y-(cos _dir_w)) + (cos (_dir_w+90) * 1.5)],\r\n    [_x + (sin (_dir_w-90) * 1.5),_y + (cos (_dir_w-90) * 1.5)],\r\n    [(_x-(sin _dir_w)) + (sin (_dir_w-90) * 1.5),(_y-(cos _dir_w)) + (cos (_dir_w-90) * 1.5)]\r\n    ];\r\n    {\r\n        _found = false;\r\n        _no = nearestObjects [_x, [typeOf _wire], 3];     //diag_log _no; diag_log \".....\";\r\n        _no = _no - [_wire];                            //diag_log _no;\r\n        if (count _no > 0) exitWith {\r\n            _found = true;                                //diag_log \"found\";\r\n        };\r\n    } forEach _wireCheckPosAr;\r\n    // Double coil found!\r\n    if (_found) then {\r\n        _mode = 1;\r\n    } else {\r\n        // Randomly make a single coil also catch tanks, if speed is high\r\n        if (_vehicle isKindOf \"Tank\" && {20 > random 100} && {speed _vehicle > 30}) then {\r\n            _mode = 1;\r\n        } else {\r\n            if !(_vehicle isKindOf \"Tank\") then {\r\n                _mode = 1;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nif (_mode == 1) then {\r\n    switch (true) do {\r\n    case (_vehicle isKindOf \"Tank\"): {\r\n            _parts = [\"ltrack\",\"rtrack\"];\r\n        };\r\n    case (_vehicle isKindOf \"Wheeled_APC\" || {_vehicle isKindOf \"Car\"}): {\r\n            _parts = [\"lfwheel\",\"lf2wheel\",\"lmwheel\",\"lbwheel\",\"rfwheel\",\"rf2wheel\",\"rmwheel\",\"rbwheel\"];\r\n        };\r\n    };\r\n} else {\r\n    switch (true) do {\r\n    case (_vehicle isKindOf \"Wheeled_APC\" || {_vehicle isKindOf \"Car\"}): {\r\n            _parts = [\"lfwheel\",\"lf2wheel\",\"lmwheel\",\"lbwheel\",\"rfwheel\",\"rf2wheel\",\"rmwheel\",\"rbwheel\"];\r\n        };\r\n    };\r\n};\r\n\r\nif (canMove _vehicle) then {\r\n    {\r\n        _selectionPart = \"hit\" + _x;\r\n        if (isText(configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"hitpoints\" >> _selectionPart >> \"name\")) then {\r\n            _selection = getText(configFile >> \"CfgVehicles\" >> typeOf _vehicle  >> \"hitpoints\" >> _selectionPart >> \"name\");\r\n            // TODO: Only the tires that have touched the wire should burst.\r\n            _vehicle setHit [_selection, 1];\r\n        };\r\n    } forEach _parts;\r\n};\r\n\r\nif (_mode == 1) then {\r\n    if (_vehicle isKindOf \"StaticWeapon\") exitWith {};\r\n    [{\r\n        PARAMS_2(_vehicle,_wire);\r\n\r\n        _vehicle setVelocity ((velocity _vehicle) vectorMultiply 0.75);\r\n\r\n        private [\"_vPos\", \"_vDir\"];\r\n        // Set vehicle back in front of wire, since the wire will make the vehicle jump, and a wire with no geometry lod is undestructible and not recognizeable\r\n        _vPos = getPosASL _vehicle;\r\n        _vDir = getDir _vehicle;\r\n        _vehicle setPosASL (_vPos vectorAdd [-0.35 * sin(_vDir), -0.35 * cos(_vDir), 0]);\r\n        // TODO: Needs to be placed in safe distance to wire, so we do not constantly re-spawn new wires\r\n    }, [_vehicle, _wire], 0.1] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n//TODO: Create broken geoless wire (two version)\r\n//TODO: Make wire remains stop vehicles\r\n"}],"dagr":[{"name":"ace_dagr_fnc_handleRangeFinderData","file":"dagr/functions/fnc_handleRangeFinderData.sqf","text":"/*\r\n * Author: Rosuto, Ruthberg\r\n * Handles incoming data packets from the Vectronix Vector LRF\r\n *\r\n * Arguments:\r\n * 0: Slope distance (Meters) <NUMBER>\r\n * 1: Azimuth (Degrees) <NUMBER>\r\n * 2: Inclination (Degrees) <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [1000, 45, 1] call ace_dagr_fnc_handleRangeFinderData\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define EMP_RF_ACC 5 // Rangefinder Accuracy\r\n\r\nPARAMS_3(_slopeDistance,_azimuth,_inclination);\r\n\r\nif (GVAR(vectorConnected)) then {\r\n    GVAR(LAZPOS) = (eyePos player) vectorAdd ([_slopeDistance, _azimuth, _inclination] call CBA_fnc_polar2vect);\r\n    GVAR(LAZDIST) = _slopeDistance * cos(_inclination);\r\n    GVAR(LAZDIST) = floor (GVAR(LAZDIST) / EMP_RF_ACC) *  EMP_RF_ACC;\r\n    GVAR(LAZHEADING) = _azimuth;\r\n    GVAR(noVectorData) = false;\r\n};\r\n"},{"name":"ace_dagr_fnc_menuInit","file":"dagr/functions/fnc_menuInit.sqf","text":"/*\r\n * Author: Rosuto, Ruthberg\r\n * Creates the DAGR menu dialog\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __dsp (uiNamespace getVariable \"DAGR_MENU\")\r\n#define __F1 266874\r\n#define __F2 266875\r\n#define __F3 266876\r\n#define __Option0 2668777\r\n#define __Option1 2668778\r\n#define __Option2 2668779\r\n#define __Option3 2668780\r\n#define __Option4 2668781\r\n#define __Selection0 2668783\r\n#define __Selection1 2668784\r\n#define __Selection2 2668785\r\n#define __Selection3 2668786\r\n#define __Selection4 2668787\r\n#define __mainText 2668782\r\n#define __PSelection1 2668788\r\n#define __PSelection2 2668789\r\n#define __PSelection3 2668790\r\n#define __PSelection4 2668791\r\n#define __PSelection5 2668792\r\n#define __PSelection6 2668793\r\n#define __PSelection7 2668794\r\n#define __PSelection8 2668795\r\n\r\n135471 cutText [\"\", \"PLAIN\"];\r\ncloseDialog 0;\r\ncreateDialog \"DAGR_MENU\";\r\n\r\nGVAR(menu) = \"main\";\r\nGVAR(selection) = 0;\r\nGVAR(numSelections) = 5;\r\nGVAR(tmpUpdateRate) = GVAR(updateInterval);\r\nGVAR(edit) = false;\r\nGVAR(add) = false;\r\nGVAR(pointer) = 0;\r\nGVAR(digit1) = 0;\r\nGVAR(digit2) = 0;\r\nGVAR(digit3) = 0;\r\nGVAR(digit4) = 0;\r\nGVAR(digit5) = 0;\r\nGVAR(digit6) = 0;\r\nGVAR(digit7) = 0;\r\nGVAR(digit8) = 0;\r\n\r\nGVAR(busy) = false;\r\nGVAR(busyTimer) = 0;\r\n\r\nGVAR(showNoWaypointsFound) = false;\r\nGVAR(showInfoUpdatin) = false;\r\nGVAR(showDeleting) = false;\r\nGVAR(showOutOfSpace) = false;\r\n\r\nGVAR(PWR) = false;\r\nGVAR(menuRun) = true;\r\n[{\r\n    if (!dialog || GVAR(PWR) || !GVAR(menuRun)) exitWith {\r\n        closeDialog 266860;\r\n        GVAR(menuRun) = false;\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    if (GVAR(MENU_B)) then {\r\n        GVAR(menu) = \"main\";\r\n        GVAR(selection) = 0;\r\n        GVAR(numSelections) = 5;\r\n    };\r\n\r\n    if (!GVAR(add) && !GVAR(edit)) then {\r\n        if (GVAR(DOWN)) then {\r\n            GVAR(selection) = (GVAR(numSelections) + GVAR(selection) + 1);\r\n        };\r\n        if (GVAR(UP)) then {\r\n            GVAR(selection) = (GVAR(numSelections) + GVAR(selection) - 1);\r\n        };\r\n        GVAR(selection) = if (GVAR(numSelections) > 0) then { GVAR(selection) % GVAR(numSelections) } else { 0 };\r\n    };\r\n\r\n    if (GVAR(LEFT)) then {\r\n        GVAR(pointer) = (8 + GVAR(pointer) - 1);\r\n    };\r\n    if (GVAR(RIGHT)) then {\r\n        GVAR(pointer) = (8 + GVAR(pointer) + 1);\r\n    };\r\n    GVAR(pointer) = GVAR(pointer) % 8;\r\n\r\n    (__dsp displayCtrl __PSelection1) ctrlSetText \"\";\r\n    (__dsp displayCtrl __PSelection2) ctrlSetText \"\";\r\n    (__dsp displayCtrl __PSelection3) ctrlSetText \"\";\r\n    (__dsp displayCtrl __PSelection4) ctrlSetText \"\";\r\n    (__dsp displayCtrl __PSelection5) ctrlSetText \"\";\r\n    (__dsp displayCtrl __PSelection6) ctrlSetText \"\";\r\n    (__dsp displayCtrl __PSelection7) ctrlSetText \"\";\r\n    (__dsp displayCtrl __PSelection8) ctrlSetText \"\";\r\n\r\n    (__dsp displayCtrl __Selection0) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Selection1) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Selection2) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Selection3) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Selection4) ctrlSetText \"\";\r\n\r\n    (__dsp displayCtrl __F1) ctrlSetText \"\";\r\n    (__dsp displayCtrl __F2) ctrlSetText \"\";\r\n    (__dsp displayCtrl __F3) ctrlSetText \"\";\r\n\r\n    (__dsp displayCtrl __mainText) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Option0) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Option1) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Option2) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Option3) ctrlSetText \"\";\r\n    (__dsp displayCtrl __Option4) ctrlSetText \"\";\r\n\r\n    switch (GVAR(menu)) do {\r\n        case \"main\": {\r\n            if (GVAR(SEL)) then {\r\n                 switch (GVAR(selection)) do {\r\n                    case 0: {\r\n                        GVAR(displaySelection) = \"DATA\";\r\n                        GVAR(vectorConnected) = false;\r\n                        if (!GVAR(busy)) then {\r\n                            GVAR(busy) = true;\r\n                            GVAR(busyTimer) = CBA_missionTime;\r\n                        };\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Acquiring Data.\";\r\n                        if (CBA_missionTime - GVAR(busyTimer) > 0.5) then {\r\n                            (__dsp displayCtrl __mainText) ctrlSetText \"Acquiring Data..\";\r\n                        };\r\n                        if (CBA_missionTime - GVAR(busyTimer) > 1.0) then {\r\n                            (__dsp displayCtrl __mainText) ctrlSetText \"Acquiring Data...\";\r\n                        };\r\n                        if (CBA_missionTime - GVAR(busyTimer) > 1.5) then {\r\n                            (__dsp displayCtrl __mainText) ctrlSetText \"Position Acquired\";\r\n                        };\r\n                        if (CBA_missionTime - GVAR(busyTimer) > 3.0) then {\r\n                            GVAR(busy) = false;\r\n                        };\r\n                    };\r\n                    case 1: {\r\n                        if (GVAR(numWaypoints) < 1) then {\r\n                            (__dsp displayCtrl __mainText) ctrlSetText \"No Waypoints Found\";\r\n                            if (!GVAR(busy)) then {\r\n                                GVAR(showNoWaypointsFound) = true;\r\n                                GVAR(busy) = true;\r\n                                GVAR(busyTimer) = CBA_missionTime;\r\n                            };\r\n                        } else {\r\n                            GVAR(menu) = \"goto_wp\"; GVAR(numSelections) = GVAR(numWaypoints); GVAR(selection) = 0;\r\n                        };\r\n                    };\r\n                    case 2: { GVAR(menu) = \"wp_list\"; GVAR(numSelections) = GVAR(numWaypoints); GVAR(selection) = 0 };\r\n                    case 3: { GVAR(menu) = \"connect\"; GVAR(numSelections) = 1; };\r\n                    case 4: { GVAR(menu) = \"options\"; GVAR(numSelections) = 2; };\r\n                 };\r\n            };\r\n            if (GVAR(busy) && GVAR(showNoWaypointsFound)) then {\r\n                if (CBA_missionTime - GVAR(busyTimer) > 2) then {\r\n                    GVAR(showNoWaypointsFound) = false;\r\n                    GVAR(busy) = false;\r\n                };\r\n            };\r\n            if (!GVAR(busy)) then {\r\n                (__dsp displayCtrl __Option0) ctrlSetText \"DATA VIEW\";\r\n                (__dsp displayCtrl __Option1) ctrlSetText \"GOTO WP\";\r\n                (__dsp displayCtrl __Option2) ctrlSetText \"WP LIST\";\r\n                (__dsp displayCtrl __Option3) ctrlSetText \"CONNECT TO\";\r\n                (__dsp displayCtrl __Option4) ctrlSetText \"OPTIONS\";\r\n                (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\r\n            };\r\n        };\r\n        case \"goto_wp\": {\r\n            if (!GVAR(busy)) then {\r\n                (__dsp displayCtrl __Option0) ctrlSetText GVAR(wpString0);\r\n                (__dsp displayCtrl __Option1) ctrlSetText GVAR(wpString1);\r\n                (__dsp displayCtrl __Option2) ctrlSetText GVAR(wpString2);\r\n                (__dsp displayCtrl __Option3) ctrlSetText GVAR(wpString3);\r\n                (__dsp displayCtrl __Option4) ctrlSetText GVAR(wpString4);\r\n                if (GVAR(numSelections) > 0) then {\r\n                    (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\r\n                };\r\n            };\r\n            if (GVAR(SEL)) then {\r\n                GVAR(vectorConnected) = false;\r\n                GVAR(displaySelection) = \"WP\";\r\n                switch (GVAR(selection)) do {\r\n                    case 0: { DAGR_WP_INFO = GVAR(wp0); };\r\n                    case 1: { DAGR_WP_INFO = GVAR(wp1); };\r\n                    case 2: { DAGR_WP_INFO = GVAR(wp2); };\r\n                    case 3: { DAGR_WP_INFO = GVAR(wp3); };\r\n                    case 4: { DAGR_WP_INFO = GVAR(wp4); };\r\n                };\r\n                if (!GVAR(busy)) then {\r\n                    GVAR(showInfoUpdating) = true;\r\n                    GVAR(busy) = true;\r\n                    GVAR(busyTimer) = CBA_missionTime;\r\n                };\r\n            };\r\n            if (GVAR(busy) && GVAR(showInfoUpdating)) then {\r\n                (__dsp displayCtrl __mainText) ctrlSetText \"Info Update.\";\r\n                if (CBA_missionTime - GVAR(busyTimer) > 1) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Info Update..\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 1.2) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Info Update...\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 1.4) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Info Updated\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 2.9) then {\r\n                    GVAR(showInfoUpdating) = false;\r\n                    GVAR(busy) = false;\r\n                };\r\n            };\r\n        };\r\n        case \"wp_list\": {\r\n            if (!GVAR(add) && !GVAR(edit)) then {\r\n                if (!GVAR(busy)) then {\r\n                    (__dsp displayCtrl __Option0) ctrlSetText GVAR(wpString0);\r\n                    (__dsp displayCtrl __Option1) ctrlSetText GVAR(wpString1);\r\n                    (__dsp displayCtrl __Option2) ctrlSetText GVAR(wpString2);\r\n                    (__dsp displayCtrl __Option3) ctrlSetText GVAR(wpString3);\r\n                    (__dsp displayCtrl __Option4) ctrlSetText GVAR(wpString4);\r\n                    (__dsp displayCtrl __F1) ctrlSetText \"Add\";\r\n                    (__dsp displayCtrl __F2) ctrlSetText \"Edit\";\r\n                    (__dsp displayCtrl __F3) ctrlSetText \"Delete\";\r\n                    if (GVAR(numSelections) > 0) then {\r\n                        (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\r\n                    };\r\n                };\r\n                if (GVAR(F3) && GVAR(numWaypoints) > 0) then {\r\n                    if (!GVAR(busy)) then {\r\n                        switch (GVAR(selection)) do {\r\n                            case 0: {\r\n                                GVAR(wpString0) = GVAR(wpString1);\r\n                                GVAR(wp0) = GVAR(wp1);\r\n                                GVAR(wpString1) = GVAR(wpString2);\r\n                                GVAR(wp1) = GVAR(wp2);\r\n                                GVAR(wpString2) = GVAR(wpString3);\r\n                                GVAR(wp2) = GVAR(wp3);\r\n                                GVAR(wpString3) = GVAR(wpString4);\r\n                                GVAR(wp3) = GVAR(wp4);\r\n                                GVAR(wpString4) = \"\";\r\n                                GVAR(wp4) = \"\";\r\n                            };\r\n                            case 1: {\r\n                                GVAR(wpString1) = GVAR(wpString2);\r\n                                GVAR(wp1) = GVAR(wp2);\r\n                                GVAR(wpString2) = GVAR(wpString3);\r\n                                GVAR(wp2) = GVAR(wp3);\r\n                                GVAR(wpString3) = GVAR(wpString4);\r\n                                GVAR(wp3) = GVAR(wp4);\r\n                                GVAR(wpString4) = \"\";\r\n                                GVAR(wp4) = \"\";\r\n                            };\r\n                            case 2: {\r\n                                GVAR(wpString2) = GVAR(wpString3);\r\n                                GVAR(wp2) = GVAR(wp3);\r\n                                GVAR(wpString3) = GVAR(wpString4);\r\n                                GVAR(wp3) = GVAR(wp4);\r\n                                GVAR(wpString4) = \"\";\r\n                                GVAR(wp4) = \"\";\r\n                            };\r\n                            case 3: {\r\n                                GVAR(wpString3) = GVAR(wpString4);\r\n                                GVAR(wp3) = GVAR(wp4);\r\n                                GVAR(wpString4) = \"\";\r\n                                GVAR(wp4) = \"\";\r\n                            };\r\n                            case 4: {\r\n                                GVAR(wpString4) = \"\";\r\n                                GVAR(wp4) = \"\";\r\n                            };\r\n                        };\r\n                        GVAR(numWaypoints) = GVAR(numWaypoints) - 1;\r\n                        GVAR(numSelections) = GVAR(numWaypoints);\r\n                        GVAR(showDeleting) = true;\r\n                        GVAR(busy) = true;\r\n                        GVAR(busyTimer) = CBA_missionTime;\r\n                    };\r\n                };\r\n                if (GVAR(busy) && GVAR(showDeleting)) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Deleting.\";\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 1) then {\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Deleting..\";\r\n                    };\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.2) then {\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Deleting...\";\r\n                    };\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.4) then {\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Waypoint Deleted\";\r\n                    };\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 2.9) then {\r\n                        GVAR(showDeleting) = false;\r\n                        GVAR(busy) = false;\r\n                    };\r\n                };\r\n                if (GVAR(F1)) then {\r\n                    if (GVAR(numWaypoints) == 5) then {\r\n                        if (!GVAR(busy)) then {\r\n                            GVAR(showOutOfSpace) = true;\r\n                            GVAR(busy) = true;\r\n                            GVAR(busyTimer) = CBA_missionTime;\r\n                        };\r\n                    } else {\r\n                        GVAR(digit1) = 0;\r\n                        GVAR(digit2) = 0;\r\n                        GVAR(digit3) = 0;\r\n                        GVAR(digit4) = 0;\r\n                        GVAR(digit5) = 0;\r\n                        GVAR(digit6) = 0;\r\n                        GVAR(digit7) = 0;\r\n                        GVAR(digit8) = 0;\r\n                        GVAR(pointer) = 0;\r\n                        GVAR(add) = true;\r\n                    };\r\n                };\r\n                if (GVAR(busy) && GVAR(showOutOfSpace)) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Out of Space\";\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 2.5) then {\r\n                        GVAR(showOutOfSpace) = false;\r\n                        GVAR(busy) = false;\r\n                    };\r\n                };\r\n                if (GVAR(F2) && GVAR(numWaypoints) > 0) then {\r\n                    GVAR(pointer) = 0;\r\n                    GVAR(edit) = true;\r\n                    GVAR(add) = false;\r\n                    switch (GVAR(selection)) do {\r\n                        case 0: {\r\n                            GVAR(digit1) = floor (GVAR(wp0) / 10000000);\r\n                            GVAR(digit2) = floor (GVAR(wp0) / 1000000 - GVAR(digit1) *10);\r\n                            GVAR(digit3) = floor (GVAR(wp0) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\r\n                            GVAR(digit4) = floor (GVAR(wp0) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\r\n                            GVAR(digit5) = floor (GVAR(wp0) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\r\n                            GVAR(digit6) = floor (GVAR(wp0) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\r\n                            GVAR(digit7) = floor (GVAR(wp0) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\r\n                            GVAR(digit8) = floor (GVAR(wp0) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\r\n                        };\r\n                        case 1: {\r\n                            GVAR(digit1) = floor (GVAR(wp1) / 10000000);\r\n                            GVAR(digit2) = floor (GVAR(wp1) / 1000000 - GVAR(digit1) *10);\r\n                            GVAR(digit3) = floor (GVAR(wp1) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\r\n                            GVAR(digit4) = floor (GVAR(wp1) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\r\n                            GVAR(digit5) = floor (GVAR(wp1) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\r\n                            GVAR(digit6) = floor (GVAR(wp1) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\r\n                            GVAR(digit7) = floor (GVAR(wp1) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\r\n                            GVAR(digit8) = floor (GVAR(wp1) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\r\n                        };\r\n                        case 2: {\r\n                            GVAR(digit1) = floor (GVAR(wp2) / 10000000);\r\n                            GVAR(digit2) = floor (GVAR(wp2) / 1000000 - GVAR(digit1) *10);\r\n                            GVAR(digit3) = floor (GVAR(wp2) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\r\n                            GVAR(digit4) = floor (GVAR(wp2) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\r\n                            GVAR(digit5) = floor (GVAR(wp2) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\r\n                            GVAR(digit6) = floor (GVAR(wp2) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\r\n                            GVAR(digit7) = floor (GVAR(wp2) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\r\n                            GVAR(digit8) = floor (GVAR(wp2) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\r\n                        };\r\n                        case 3: {\r\n                            GVAR(digit1) = floor (GVAR(wp3) / 10000000);\r\n                            GVAR(digit2) = floor (GVAR(wp3) / 1000000 - GVAR(digit1) *10);\r\n                            GVAR(digit3) = floor (GVAR(wp3) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\r\n                            GVAR(digit4) = floor (GVAR(wp3) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\r\n                            GVAR(digit5) = floor (GVAR(wp3) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\r\n                            GVAR(digit6) = floor (GVAR(wp3) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\r\n                            GVAR(digit7) = floor (GVAR(wp3) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\r\n                            GVAR(digit8) = floor (GVAR(wp3) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\r\n                        };\r\n                        case 4: {\r\n                            GVAR(digit1) = floor (GVAR(wp4) / 10000000);\r\n                            GVAR(digit2) = floor (GVAR(wp4) / 1000000 - GVAR(digit1) *10);\r\n                            GVAR(digit3) = floor (GVAR(wp4) / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\r\n                            GVAR(digit4) = floor (GVAR(wp4) / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\r\n                            GVAR(digit5) = floor (GVAR(wp4) / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\r\n                            GVAR(digit6) = floor (GVAR(wp4) / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\r\n                            GVAR(digit7) = floor (GVAR(wp4) / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\r\n                            GVAR(digit8) = floor (GVAR(wp4) - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\r\n                        };\r\n                    };\r\n                };\r\n            } else {\r\n                if (!GVAR(busy)) then {\r\n                    (__dsp displayCtrl __F1) ctrlSetText \"Save\";\r\n                    (__dsp displayCtrl __F2) ctrlSetText \"Vector\";\r\n                    (__dsp displayCtrl __F3) ctrlSetText \"Cancel\";\r\n                    GVAR(output) = str GVAR(digit1) + str GVAR(digit2) + str GVAR(digit3) + str GVAR(digit4) + str GVAR(digit5) + str GVAR(digit6) + str GVAR(digit7) + str GVAR(digit8);\r\n                    (__dsp displayCtrl __mainText) ctrlSetText GVAR(output);\r\n                    (__dsp displayCtrl __PSelection1 + GVAR(pointer)) ctrlSetText QPATHTOF(UI\\DAGR_PSelection.paa);\r\n                };\r\n                if (GVAR(F1)) then {\r\n                    if (!GVAR(busy)) then {\r\n                        if (GVAR(add)) then {\r\n                            switch (GVAR(numWaypoints)) do {\r\n                                case 0: { GVAR(wpString0) = GVAR(output); GVAR(wp0) = parseNumber GVAR(output); };\r\n                                case 1: { GVAR(wpString1) = GVAR(output); GVAR(wp1) = parseNumber GVAR(output); };\r\n                                case 2: { GVAR(wpString2) = GVAR(output); GVAR(wp2) = parseNumber GVAR(output); };\r\n                                case 3: { GVAR(wpString3) = GVAR(output); GVAR(wp3) = parseNumber GVAR(output); };\r\n                                case 4: { GVAR(wpString4) = GVAR(output); GVAR(wp4) = parseNumber GVAR(output); };\r\n                            };\r\n                            GVAR(numWaypoints) = GVAR(numWaypoints) + 1;\r\n                            GVAR(numSelections) = GVAR(numWaypoints);\r\n                            GVAR(selection) = 0;\r\n                        };\r\n                        if (GVAR(edit)) then {\r\n                            switch (GVAR(selection)) do {\r\n                                case 0: { GVAR(wpString0) = GVAR(output); GVAR(wp0) = parseNumber GVAR(output); };\r\n                                case 1: { GVAR(wpString1) = GVAR(output); GVAR(wp1) = parseNumber GVAR(output); };\r\n                                case 2: { GVAR(wpString2) = GVAR(output); GVAR(wp2) = parseNumber GVAR(output); };\r\n                                case 3: { GVAR(wpString3) = GVAR(output); GVAR(wp3) = parseNumber GVAR(output); };\r\n                                case 4: { GVAR(wpString4) = GVAR(output); GVAR(wp4) = parseNumber GVAR(output); };\r\n                            };\r\n                        };\r\n                        GVAR(busy) = true;\r\n                        GVAR(busyTimer) = CBA_missionTime;\r\n                    };\r\n                    (__dsp displayCtrl __F1) ctrlSetText \"\";\r\n                    (__dsp displayCtrl __F2) ctrlSetText \"\";\r\n                    (__dsp displayCtrl __F3) ctrlSetText \"\";\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Saving.\";\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 1) then {\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Saving..\";\r\n                    };\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.2) then {\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Saving...\";\r\n                    };\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 1.4) then {\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Waypoint Saved\";\r\n                    };\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 2.9) then {\r\n                        GVAR(edit) = false;\r\n                        GVAR(add) = false;\r\n                        GVAR(busy) = false;\r\n                    };\r\n                };\r\n                if (GVAR(F2)) then {\r\n                    private [\"_grid\", \"_gridVector\"];\r\n                    _grid = toArray GVAR(vectorGrid);\r\n                    _grid deleteAt 4;\r\n                    _grid = toString _grid;\r\n                    _gridVector = parseNumber _grid;\r\n                    GVAR(digit1) = floor(_gridVector / 10000000);\r\n                    GVAR(digit2) = floor(_gridVector / 1000000 - GVAR(digit1) *10);\r\n                    GVAR(digit3) = floor(_gridVector / 100000 - GVAR(digit2) * 10 - GVAR(digit1) * 100);\r\n                    GVAR(digit4) = floor(_gridVector / 10000 - GVAR(digit3) * 10 - GVAR(digit2) * 100 - GVAR(digit1) * 1000);\r\n                    GVAR(digit5) = floor(_gridVector / 1000 - GVAR(digit4) * 10 - GVAR(digit3) * 100 - GVAR(digit2) * 1000 - GVAR(digit1) * 10000);\r\n                    GVAR(digit6) = floor(_gridVector / 100 - GVAR(digit5) * 10 - GVAR(digit4) * 100 - GVAR(digit3) * 1000 - GVAR(digit2) * 10000 - GVAR(digit1) * 100000);\r\n                    GVAR(digit7) = floor(_gridVector / 10- GVAR(digit6) * 10 - GVAR(digit5) * 100 - GVAR(digit4) * 1000 - GVAR(digit3) * 10000 - GVAR(digit2) * 100000 - GVAR(digit1) * 1000000);\r\n                    GVAR(digit8) = floor(_gridVector - GVAR(digit7) * 10 - GVAR(digit6) * 100 - GVAR(digit5) * 1000 - GVAR(digit4) * 10000 - GVAR(digit3) * 100000 - GVAR(digit2) * 1000000 - GVAR(digit1) * 10000000);\r\n                };\r\n                if (GVAR(F3)) then {\r\n                    if (!GVAR(busy)) then {\r\n                        GVAR(busy) = true;\r\n                        GVAR(busyTimer) = CBA_missionTime;\r\n                    } else {\r\n                        (__dsp displayCtrl __F1) ctrlSetText \"Save\";\r\n                        (__dsp displayCtrl __F2) ctrlSetText \"Vector\";\r\n                        (__dsp displayCtrl __F3) ctrlSetText \"Cancel\";\r\n                        GVAR(output) = str GVAR(digit1) + str GVAR(digit2) + str GVAR(digit3) + str GVAR(digit4) + str GVAR(digit5) + str GVAR(digit6) + str GVAR(digit7) + str GVAR(digit8);\r\n                        (__dsp displayCtrl __mainText) ctrlSetText GVAR(output);\r\n                    };\r\n                    if (CBA_missionTime - GVAR(busyTimer) > 0.1) then {\r\n                        GVAR(add) = false;\r\n                        GVAR(edit) = false;\r\n                        GVAR(busy) = false;\r\n                    };\r\n                };\r\n                if (GVAR(UP)) then {\r\n                    switch (GVAR(pointer) + 1) do {\r\n                        case 1: { GVAR(digit1) = (10 + GVAR(digit1) + 1) % 10 };\r\n                        case 2: { GVAR(digit2) = (10 + GVAR(digit2) + 1) % 10 };\r\n                        case 3: { GVAR(digit3) = (10 + GVAR(digit3) + 1) % 10 };\r\n                        case 4: { GVAR(digit4) = (10 + GVAR(digit4) + 1) % 10 };\r\n                        case 5: { GVAR(digit5) = (10 + GVAR(digit5) + 1) % 10 };\r\n                        case 6: { GVAR(digit6) = (10 + GVAR(digit6) + 1) % 10 };\r\n                        case 7: { GVAR(digit7) = (10 + GVAR(digit7) + 1) % 10 };\r\n                        case 8: { GVAR(digit8) = (10 + GVAR(digit8) + 1) % 10 };\r\n                    };\r\n                };\r\n                if (GVAR(DOWN)) then {\r\n                    switch (GVAR(pointer) + 1) do {\r\n                        case 1: { GVAR(digit1) = (10 + GVAR(digit1) - 1) % 10 };\r\n                        case 2: { GVAR(digit2) = (10 + GVAR(digit2) - 1) % 10 };\r\n                        case 3: { GVAR(digit3) = (10 + GVAR(digit3) - 1) % 10 };\r\n                        case 4: { GVAR(digit4) = (10 + GVAR(digit4) - 1) % 10 };\r\n                        case 5: { GVAR(digit5) = (10 + GVAR(digit5) - 1) % 10 };\r\n                        case 6: { GVAR(digit6) = (10 + GVAR(digit6) - 1) % 10 };\r\n                        case 7: { GVAR(digit7) = (10 + GVAR(digit7) - 1) % 10 };\r\n                        case 8: { GVAR(digit8) = (10 + GVAR(digit8) - 1) % 10 };\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        case \"connect\": {\r\n            if (!GVAR(busy)) then {\r\n                (__dsp displayCtrl __Option0) ctrlSetText \"Vector 21\";\r\n                (__dsp displayCtrl __Selection0) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\r\n            };\r\n            if (GVAR(SEL)) then {\r\n                if (!GVAR(busy)) then {\r\n                    GVAR(busy) = true;\r\n                    GVAR(busyTimer) = CBA_missionTime;\r\n                };\r\n                (__dsp displayCtrl __mainText) ctrlSetText \"Connecting.\";\r\n                if (CBA_missionTime - GVAR(busyTimer) > 0.2) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Connecting..\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 0.4) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Connecting...\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 0.6) then {\r\n                    if (({_x isKindOf  [\"ACE_Vector\", configFile >> \"CfgWeapons\"]} count (weapons ACE_player)) > 0) then {\r\n                        GVAR(displaySelection) = \"VECTOR\";\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"Vector Connected\";\r\n                        GVAR(vectorConnected) = true;\r\n                    } else {\r\n                        (__dsp displayCtrl __mainText) ctrlSetText \"No Device Found\";\r\n                        GVAR(vectorConnected) = false;\r\n                    };\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 3.1) then {\r\n                    GVAR(busy) = false;\r\n                    if (GVAR(vectorConnected)) then {\r\n                        GVAR(menu) = \"main\"; GVAR(numSelections) = 5;\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        case \"options\": {\r\n            (__dsp displayCtrl __Option0) ctrlSetText \"Signal Delay\";\r\n            (__dsp displayCtrl __Option1) ctrlSetText (if (GVAR(useDegrees)) then { \"Direction: Deg\" } else { \"Direction: MIL\" });\r\n            (__dsp displayCtrl (__Selection0 + GVAR(selection))) ctrlSetText QPATHTOF(UI\\DAGR_Selection.paa);\r\n            if (GVAR(SEL)) then {\r\n                GVAR(vectorConnected) = false;\r\n                switch (GVAR(selection)) do {\r\n                    case 0: { GVAR(menu) = \"update_rate\"; GVAR(numSelections) = 1; GVAR(tmpUpdateRate) = GVAR(updateInterval); };\r\n                    case 1: { GVAR(useDegrees) = !GVAR(useDegrees); };\r\n                };\r\n            }\r\n        };\r\n        case \"update_rate\": {\r\n            if (GVAR(F1)) then {\r\n                GVAR(updateInterval) = GVAR(tmpUpdateRate);\r\n                if (!GVAR(busy)) then {\r\n                    GVAR(busy) = true;\r\n                    GVAR(busyTimer) = CBA_missionTime;\r\n                };\r\n                (__dsp displayCtrl __mainText) ctrlSetText \"Updating.\";\r\n                if (CBA_missionTime - GVAR(busyTimer) > 0.2) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Updating..\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 0.4) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Updating...\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 0.6) then {\r\n                    (__dsp displayCtrl __mainText) ctrlSetText \"Update Success\";\r\n                };\r\n                if (CBA_missionTime - GVAR(busyTimer) > 2.1) then {\r\n                    GVAR(busy) = false;\r\n                    GVAR(menu) = \"options\"; GVAR(numSelections) = 2;\r\n                };\r\n            };\r\n            if (GVAR(F3)) then {\r\n                GVAR(menu) = \"options\"; GVAR(numSelections) = 2;\r\n            };\r\n            if (GVAR(DOWN)) then {\r\n                GVAR(tmpUpdateRate) = GVAR(tmpUpdateRate) - 0.1;\r\n            };\r\n            if (GVAR(UP)) then {\r\n                GVAR(tmpUpdateRate) = GVAR(tmpUpdateRate) + 0.1;\r\n            };\r\n            GVAR(tmpUpdateRate) = 0.1 max GVAR(tmpUpdateRate) min 2.0;\r\n            if (!GVAR(busy)) then {\r\n                (__dsp displayCtrl __mainText) ctrlSetText (Str(GVAR(tmpUpdateRate) * 1000) + \"ms\");\r\n                (__dsp displayCtrl __F1) ctrlSetText \"Save\";\r\n                (__dsp displayCtrl __F3) ctrlSetText \"Cancel\";\r\n            };\r\n        };\r\n    };\r\n\r\n    if (!GVAR(busy)) then {\r\n        GVAR(F3) = false;\r\n        GVAR(F2) = false;\r\n        GVAR(F1) = false;\r\n        GVAR(MENU_B) = false;\r\n        GVAR(SEL) = false;\r\n        DAGR_NEXT = false;\r\n        GVAR(RIGHT) = false;\r\n        GVAR(LEFT) = false;\r\n        GVAR(UP) = false;\r\n        GVAR(DOWN) = false;\r\n        GVAR(PWR) = false;\r\n    };\r\n}, 0, []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_dagr_fnc_outputData","file":"dagr/functions/fnc_outputData.sqf","text":"/*\r\n * Author: Rosuto\r\n * DAGR data output loop\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n135471 cutRsc [\"DAGR_DISPLAY\", \"plain down\"];\r\n\r\n#define __display (uiNameSpace getVariable \"DAGR_DISPLAY\")\r\n\r\n#define __gridControl (__display displayCtrl 266851)\r\n#define __speedControl (__display displayCtrl 266852)\r\n#define __elevationControl (__display displayCtrl 266853)\r\n#define __headingControl (__display displayCtrl 266854)\r\n#define __timeControl (__display displayCtrl 266855)\r\n#define __background (__display displayCtrl 266856)\r\n\r\n__background ctrlSetText QPATHTOF(UI\\dagr_gps.paa);\r\n\r\nif (GVAR(outputPFH) != -1) exitWith {};\r\n\r\nGVAR(outputPFH) = [{\r\n    private[\"_dagrElevation\", \"_dagrGrid\", \"_dagrHeading\", \"_dagrSpeed\", \"_dagrTime\", \"_elevation\", \"_gridArray\", \"_speed\"];\r\n\r\n    // Abort Condition\r\n    if !(GVAR(run) && [ACE_player, \"ACE_DAGR\"] call EFUNC(common,hasItem)) exitWith {\r\n        GVAR(outputPFH) = -1;\r\n        135471 cutText [\"\", \"PLAIN\"];\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    // GRID\r\n    _gridArray = [(getPos ACE_player), false] call EFUNC(common,getMapGridFromPos);\r\n    _gridArray params [\"_gridArrayX\",\"_gridArrayY\"];\r\n    _dagrGrid = format [\"%1 %2\", ((_gridArrayX) select [0,4]), ((_gridArrayY) select [0,4])];\r\n\r\n    // SPEED\r\n    _speed = speed (vehicle ACE_player);\r\n    _speed = floor (_speed * 10) / 10;\r\n    _speed = abs(_speed);\r\n    _dagrspeed = str _speed + \"kph\";\r\n\r\n    // Elevation\r\n    _elevation = getPosASL ACE_player;\r\n    _elevation = floor ((_elevation select 2) + EGVAR(common,mapAltitude));\r\n    _dagrElevation = str _elevation + \"m\";\r\n\r\n    // Heading\r\n    _dagrHeading = if (!GVAR(useDegrees)) then {\r\n        floor (DEG_TO_MIL(direction (vehicle ACE_player)))\r\n    } else {\r\n        floor (direction (vehicle ACE_player))\r\n    };\r\n\r\n    // Time\r\n    _dagrTime = [daytime, \"HH:MM\"] call bis_fnc_timeToString;\r\n\r\n    // Output\r\n    __gridControl ctrlSetText format [\"%1\", _dagrGrid];\r\n    __speedControl ctrlSetText format [\"%1\", _dagrSpeed];\r\n    __elevationControl ctrlSetText format [\"%1\", _dagrElevation];\r\n    __headingControl ctrlSetText (if (!GVAR(useDegrees)) then { format [\"%1\", _dagrHeading] } else { format [\"%1 �\", _dagrHeading] });\r\n    __timeControl ctrlSetText format [\"%1\", _dagrTime];\r\n\r\n}, GVAR(updateInterval), []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_dagr_fnc_outputVector","file":"dagr/functions/fnc_outputVector.sqf","text":"﻿/*\r\n * Author: Rosuto\r\n * DAGR vector output loop\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_xGrid\", \"_yGrid\", \"_dagrGrid\", \"_bearing\", \"_dagrDist\", \"_dagrElevation\", \"_dagrTime\", \"_elevation\", \"_xCoord\", \"_yCoord\"];\r\n\r\n135471 cutRsc [\"DAGR_DISPLAY\", \"plain down\"];\r\n\r\n#define __display (uiNameSpace getVariable \"DAGR_DISPLAY\")\r\n\r\n#define __gridControl (__display displayCtrl 266851)\r\n#define __speedControl (__display displayCtrl 266858)\r\n#define __elevationControl (__display displayCtrl 266853)\r\n#define __headingControl (__display displayCtrl 266854)\r\n#define __timeControl (__display displayCtrl 266855)\r\n#define __background (__display displayCtrl 266856)\r\n\r\n__background ctrlSetText QPATHTOF(UI\\dagr_vector.paa);\r\n\r\nif (GVAR(noVectorData)) exitWith {};\r\nGVAR(LAZPOS) params [\"_lazPosX\", \"_lazPosY\", \"_lazPosZ\"];\r\n\r\n// Incase grids go neg due to 99-00 boundry\r\nif (_lazPosX < 0) then { _lazPosX = _lazPosX + 99999;};\r\nif (_lazPosY < 0) then {_lazPosY = _lazPosY + 99999;};\r\n\r\n// Find laser position\r\n_xGrid = toArray Str(round _lazPosX);\r\n\r\nwhile {count _xGrid < 5} do {\r\n    _xGrid = [48] + _xGrid;\r\n};\r\n_xGrid resize 4;\r\n_xGrid = toString _xGrid;\r\n_xGrid = parseNumber _xGrid;\r\n\r\n_yGrid = toArray Str(round _lazPosY);\r\nwhile {count _yGrid < 5} do {\r\n    _yGrid = [48] + _yGrid;\r\n};\r\n_yGrid resize 4;\r\n_yGrid = toString _yGrid;\r\n_yGrid = parseNumber _yGrid;\r\n\r\n_xCoord = switch true do {\r\n    case (_xGrid >= 1000): { \"\" + Str(_xGrid) };\r\n    case (_xGrid >= 100): { \"0\" + Str(_xGrid) };\r\n    case (_xGrid >= 10): { \"00\" + Str(_xGrid) };\r\n    default             { \"000\" + Str(_xGrid) };\r\n};\r\n\r\n_yCoord = switch true do {\r\n    case (_yGrid >= 1000): { \"\" + Str(_yGrid) };\r\n    case (_yGrid >= 100): { \"0\" + Str(_yGrid) };\r\n    case (_yGrid >= 10): { \"00\" + Str(_yGrid) };\r\n    default             { \"000\" + Str(_yGrid) };\r\n};\r\n\r\n_dagrGrid = _xCoord + \" \" + _yCoord;\r\n\r\n// Find target elevation\r\n_elevation = floor ((_lazPosZ) + EGVAR(common,mapAltitude));\r\n_dagrElevation = str _elevation + \"m\";\r\n\r\n// Time\r\n_dagrTime = [daytime, \"HH:MM\"] call bis_fnc_timeToString;\r\n\r\n// Bearing\r\n_bearing = GVAR(LAZHEADING);\r\nif (_bearing >= 360) then {_bearing = _bearing - 360;};\r\nif (!GVAR(useDegrees)) then {_bearing = DEG_TO_MIL(_bearing)};\r\n_bearing = floor (_bearing);\r\n\r\n// Distance\r\n_dagrDist = str GVAR(LAZDIST) + \"m\";\r\n\r\n// Put grid into variable so DAGR menu can access it\r\nGVAR(vectorGrid) = _dagrGrid;\r\n\r\n// OUTPUT\r\n__gridControl ctrlSetText format [\"%1\", _dagrGrid];\r\n__speedControl ctrlSetText format [\"%1\", _dagrDist];\r\n__elevationControl ctrlSetText format [\"%1\", _dagrElevation];\r\n__headingControl ctrlSetText (if (!GVAR(useDegrees)) then { format [\"%1\", _bearing] } else { format [\"%1°\", _bearing] });\r\n__timeControl ctrlSetText format [\"%1\", _dagrTime];\r\n"},{"name":"ace_dagr_fnc_outputWP","file":"dagr/functions/fnc_outputWP.sqf","text":"﻿/*\r\n * Author: Rosuto\r\n * DAGR waypoint output loop\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n135471 cutRsc [\"DAGR_DISPLAY\", \"plain down\"];\r\n\r\n#define __display (uiNameSpace getVariable \"DAGR_DISPLAY\")\r\n\r\n#define __gridControl (__display displayCtrl 266851)\r\n#define __speedControl (__display displayCtrl 266858)\r\n#define __elevationControl (__display displayCtrl 266857)\r\n#define __headingControl (__display displayCtrl 266854)\r\n#define __timeControl (__display displayCtrl 266859)\r\n#define __background (__display displayCtrl 266856)\r\n\r\n__background ctrlSetText QPATHTOF(UI\\dagr_wp.paa);\r\n\r\nif (GVAR(outputPFH) != -1) exitWith {};\r\n\r\nGVAR(outputPFH) = [{\r\n    private[\"_MYpos\", \"_WPpos\", \"_bearing\", \"_dagrDistance\", \"_dagrGrid\", \"_dagrHeading\", \"_distance\", \"_gridArray\"];\r\n\r\n    // Abort Condition\r\n    if !(GVAR(run) && [ACE_player, \"ACE_DAGR\"] call EFUNC(common,hasItem)) exitWith {\r\n        GVAR(outputPFH) = -1;\r\n        135471 cutText [\"\", \"PLAIN\"];\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    // GRID\r\n    _gridArray = [(getPos ACE_player), false] call EFUNC(common,getMapGridFromPos);\r\n    _gridArray params [\"_gridArrayX\",\"_gridArrayY\"];\r\n    _dagrGrid = format [\"%1 %2\", (_gridArrayX select [0,4]), (_gridArrayY select [0,4])];\r\n\r\n    // WP Grid\r\n    _xGrid2 = floor (DAGR_WP_INFO / 10000);\r\n    _yGrid2 = DAGR_WP_INFO - _xGrid2 * 10000;\r\n\r\n    _xCoord2 = switch true do {\r\n        case (_xGrid2 >= 1000): { \"\" + Str(_xGrid2) };\r\n        case (_xGrid2 >= 100): { \"0\" + Str(_xGrid2) };\r\n        case (_xGrid2 >= 10): { \"00\" + Str(_xGrid2) };\r\n        default             { \"000\" + Str(_xGrid2) };\r\n    };\r\n\r\n    _yCoord2 = switch true do {\r\n        case (_yGrid2 >= 1000): { \"\" + Str(_yGrid2) };\r\n        case (_yGrid2 >= 100): { \"0\" + Str(_yGrid2) };\r\n        case (_yGrid2 >= 10): { \"00\" + Str(_yGrid2) };\r\n        default             { \"000\" + Str(_yGrid2) };\r\n    };\r\n\r\n    _dagrGrid2 = _xCoord2 + \" \" + _yCoord2;\r\n\r\n    // Distance\r\n    _WPpos = [_dagrGrid2, true] call EFUNC(common,getMapPosFromGrid);\r\n    _MYpos = [_dagrGrid, true] call EFUNC(common,getMapPosFromGrid);\r\n    _distance = _MYpos distance _WPpos;\r\n    _distance = floor (_distance * 10) / 10;\r\n    _dagrDistance = str _distance + \"m\";\r\n\r\n    // Heading\r\n    _dagrHeading = floor (if (GVAR(useDegrees)) then {\r\n        direction (vehicle ACE_player)\r\n    } else {\r\n        DEG_TO_MIL(direction (vehicle ACE_player))\r\n    });\r\n\r\n    // WP Heading\r\n    _bearing = floor ((_WPpos vectorDiff _MYpos) call CBA_fnc_vectDir);\r\n\r\n    // Output\r\n    __gridControl ctrlSetText format [\"%1\", _dagrGrid];\r\n    __speedControl ctrlSetText format [\"%1\", _bearing];\r\n    __elevationControl ctrlSetText format [\"%1\", _dagrGrid2];\r\n    __headingControl ctrlSetText (if (!GVAR(useDegrees)) then { format [\"%1\", _dagrHeading] } else { format [\"%1°\", _dagrHeading] });\r\n    __timeControl ctrlSetText format [\"%1\", _dagrDistance];\r\n\r\n}, GVAR(updateInterval), []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_dagr_fnc_toggleOverlay","file":"dagr/functions/fnc_toggleOverlay.sqf","text":"/*\r\n * Author: Rosuto, Ruthberg\r\n * Toggles the DAGR overlay\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(run) = !GVAR(run);\r\n\r\nif (GVAR(run)) then {\r\n    if (GVAR(menuRun) && dialog) then {\r\n        GVAR(menuRun) = false;\r\n        closeDialog 0;\r\n    };\r\n    GVAR(hidden) = true;\r\n    [{\r\n        params [\"_args\", \"_idPFH\"];\r\n        _args params [\"_vehicle\"];\r\n        if (!GVAR(run) || (!alive ACE_player) || (vehicle ACE_player != _vehicle)) exitWith {\r\n            GVAR(run) = false;\r\n            135471 cutText [\"\", \"PLAIN\"];\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n        if (cameraView == \"GUNNER\") then {\r\n            if (!GVAR(hidden)) then {\r\n                GVAR(hidden) = true;\r\n                135471 cutText [\"\", \"PLAIN\"];\r\n            };\r\n        } else {\r\n            if (GVAR(hidden)) then {\r\n                GVAR(hidden) = false;\r\n                switch (toUpper GVAR(displaySelection)) do {\r\n                    case \"WP\" : {\r\n                        call FUNC(outputWP);\r\n                    };\r\n                    case \"VECTOR\" : {\r\n                        call FUNC(outputVector);\r\n                    };\r\n                    case \"DATA\" : {\r\n                        call FUNC(outputData);\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    }, 0.1, [vehicle ACE_player]] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"}],"disarming":[{"name":"ace_disarming_fnc_canBeDisarmed","file":"disarming/functions/fnc_canBeDisarmed.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Checks the conditions for being able to disarm a unit\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Be Disarmed <BOOL>\r\n *\r\n * Example:\r\n * [cursorTarget] call ace_disarming_fnc_canBeDisarmed\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_animationStateCfgMoves\", \"_putDownAnim\"];\r\n\r\nparams [\"_target\"];\r\n\r\n//Check animationState for putDown anim\r\n//This ensures the unit doesn't have to actualy do any animation to drop something\r\n//This should always be true for the 3 possible status effects that allow disarming\r\n_animationStateCfgMoves = getText (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> (animationState _target) >> \"actions\");\r\nif (_animationStateCfgMoves == \"\") exitWith { false };\r\n_putDownAnim = getText (configFile >> \"CfgMovesBasic\" >> \"Actions\" >> _animationStateCfgMoves >> \"PutDown\");\r\nif (_putDownAnim != \"\") exitWith { false };\r\n\r\n\r\n(alive _target) &&\r\n{(abs (speed _target)) < 1} &&\r\n{(vehicle _target) == _target} &&\r\n{(_target getVariable [\"ACE_isUnconscious\", false]) ||\r\n    {_target getVariable [QEGVAR(captives,isHandcuffed), false]} ||\r\n    {_target getVariable [QEGVAR(captives,isSurrendering), false]}}\r\n"},{"name":"ace_disarming_fnc_canPlayerDisarmUnit","file":"disarming/functions/fnc_canPlayerDisarmUnit.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Checks the conditions for being able to disarm a unit\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Be Disarm Target <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_disarming_fnc_canPlayerDisarmUnit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\"];\r\n\r\n([_target] call FUNC(canBeDisarmed)) &&\r\n{([_player, _target, []] call EFUNC(common,canInteractWith))}\r\n"},{"name":"ace_disarming_fnc_disarmDropItems","file":"disarming/functions/fnc_disarmDropItems.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Makes a unit drop items\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n * 2: classnamess <ARRAY>\r\n * 3: Do Not Drop Ammo <BOOL><OPTIONAL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, cursorTarget, [\"ace_bandage\"]] call ace_disarming_fnc_disarmDropItems\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define TIME_MAX_WAIT 5\r\n\r\nprivate [\"_fncSumArray\", \"_return\", \"_holder\", \"_dropPos\", \"_targetMagazinesStart\", \"_holderMagazinesStart\", \"_xClassname\", \"_xAmmo\", \"_targetMagazinesEnd\", \"_holderMagazinesEnd\", \"_holderItemsStart\", \"_targetItemsStart\", \"_addToCrateClassnames\", \"_addToCrateCount\", \"_index\", \"_holderItemsEnd\", \"_targetItemsEnd\", \"_holderIsEmpty\"];\r\n\r\nparams [\"_caller\", \"_target\", \"_listOfItemsToRemove\", [\"_doNotDropAmmo\", false, [false]]]; //By default units drop all weapon mags when dropping a weapon\r\n\r\n_fncSumArray = {\r\n    _return = 0;\r\n    {_return = _return + _x;} count (_this select 0);\r\n    _return\r\n};\r\n\r\n//Sanity Checks\r\nif (!([_target] call FUNC(canBeDisarmed))) exitWith {\r\n    [_caller, _target, \"Debug: Cannot disarm target\"] call FUNC(eventTargetFinish);\r\n};\r\nif (_doNotDropAmmo && {({_x in _listOfItemsToRemove} count (magazines _target)) > 0}) exitWith {\r\n    [_caller, _target, \"Debug: Trying to drop magazine with _doNotDropAmmo flag\"] call FUNC(eventTargetFinish);\r\n};\r\n\r\n_holder = objNull;\r\n\r\n//If not dropping ammo, don't use an existing container\r\nif (!_doNotDropAmmo) then {\r\n    {\r\n        if ((_x getVariable [QGVAR(disarmUnit), objNull]) == _target) exitWith {\r\n            _holder = _x;\r\n        };\r\n    } count ((getpos _target) nearObjects [DISARM_CONTAINER, 3]);\r\n};\r\n\r\n//Create a new weapon holder\r\nif (isNull _holder) then {\r\n    _dropPos = _target modelToWorld [0.4, 0.75, 0]; //offset someone unconscious isn't lying over it\r\n    _dropPos set [2, ((getPosASL _target) select 2)];\r\n    _holder = createVehicle [DISARM_CONTAINER, _dropPos, [], 0, \"CAN_COLLIDE\"];\r\n    _holder setPosASL _dropPos;\r\n    _holder setVariable [QGVAR(disarmUnit), _target, true];\r\n};\r\n\r\n//Verify holder created\r\nif (isNull _holder) exitWith {\r\n    [_caller, _target, \"Debug: Null Holder\"] call FUNC(eventTargetFinish);\r\n};\r\n//Make sure only one drop operation at a time (using PFEH system as a queue)\r\nif (_holder getVariable [QGVAR(holderInUse), false]) exitWith {\r\n    [{\r\n        _this call FUNC(disarmDropItems);\r\n    }, _this] call CBA_fnc_execNextFrame;\r\n};\r\n_holder setVariable [QGVAR(holderInUse), true];\r\n\r\n\r\n//Remove Magazines\r\n_targetMagazinesStart = magazinesAmmo _target;\r\n_holderMagazinesStart = magazinesAmmoCargo _holder;\r\n\r\n{\r\n    EXPLODE_2_PVT(_x,_xClassname,_xAmmo);\r\n    if ((_xClassname in _listOfItemsToRemove) && {(getNumber (configFile >> \"CfgMagazines\" >> _xClassname >> \"ACE_isUnique\")) == 0}) then {\r\n        _holder addMagazineAmmoCargo [_xClassname, 1, _xAmmo];\r\n        _target removeMagazine _xClassname;\r\n    };\r\n} forEach _targetMagazinesStart;\r\n\r\n_targetMagazinesEnd = magazinesAmmo _target;\r\n_holderMagazinesEnd = magazinesAmmoCargo _holder;\r\n\r\n//Verify Mags dropped from unit:\r\nif (({((_x select 0) in _listOfItemsToRemove) && {(getNumber (configFile >> \"CfgMagazines\" >> (_x select 0) >> \"ACE_isUnique\")) == 0}} count _targetMagazinesEnd) != 0) exitWith {\r\n    _holder setVariable [QGVAR(holderInUse), false];\r\n    [_caller, _target, \"Debug: Didn't Remove Magazines\"] call FUNC(eventTargetFinish);\r\n};\r\n//Verify holder has mags unit had\r\nif (!([_targetMagazinesStart, _targetMagazinesEnd, _holderMagazinesStart, _holderMagazinesEnd] call FUNC(verifyMagazinesMoved))) then {\r\n    ERR = [_targetMagazinesStart, _targetMagazinesEnd, _holderMagazinesStart, _holderMagazinesEnd];\r\n    _holder setVariable [QGVAR(holderInUse), false];\r\n    [_caller, _target, \"Debug: Crate Magazines not in holder\"] call FUNC(eventTargetFinish);\r\n};\r\n\r\n//Remove Items, Assigned Items and NVG\r\n_holderItemsStart = getitemCargo _holder;\r\n_targetItemsStart = (assignedItems _target) + (items _target) - (weapons _target);\r\nif ((headgear _target) != \"\") then {_targetItemsStart pushBack (headgear _target);};\r\nif ((goggles _target) != \"\") then {_targetItemsStart pushBack (goggles _target);};\r\n\r\n\r\n_addToCrateClassnames = [];\r\n_addToCrateCount = [];\r\n{\r\n    if (_x in _listOfItemsToRemove) then {\r\n        if (_x in (items _target)) then {\r\n            _target removeItem _x;\r\n        } else {\r\n            _target unlinkItem _x;\r\n        };\r\n        _index = _addToCrateClassnames find _x;\r\n        if (_index != -1) then {\r\n            _addToCrateCount set [_index, ((_addToCrateCount select _index) + 1)];\r\n        } else {\r\n            _addToCrateClassnames pushBack _x;\r\n            _addToCrateCount pushBack 1;\r\n        };\r\n    };\r\n} forEach _targetItemsStart;\r\n\r\n//Add the items to the holder (combined to reduce addItemCargoGlobal calls)\r\n{\r\n    _holder addItemCargoGlobal [(_addToCrateClassnames select _forEachIndex), (_addToCrateCount select _forEachIndex)];\r\n} forEach _addToCrateClassnames;\r\n\r\n_holderItemsEnd = getitemCargo _holder;\r\n_targetItemsEnd = (assignedItems _target) + (items _target) - (weapons _target);\r\nif ((headgear _target) != \"\") then {_targetItemsEnd pushBack (headgear _target);};\r\nif ((goggles _target) != \"\") then {_targetItemsEnd pushBack (goggles _target);};\r\n\r\n//Verify Items Added\r\nif (((count _targetItemsStart) - (count _targetItemsEnd)) != ([_addToCrateCount] call _fncSumArray)) exitWith {\r\n    _holder setVariable [QGVAR(holderInUse), false];\r\n    [_caller, _target, \"Debug: Items Not Removed From Player\"] call FUNC(eventTargetFinish);\r\n};\r\nif ((([_holderItemsEnd select 1] call _fncSumArray) - ([_holderItemsStart select 1] call _fncSumArray)) != ([_addToCrateCount] call _fncSumArray)) exitWith {\r\n    _holder setVariable [QGVAR(holderInUse), false];\r\n    [_caller, _target, \"Debug: Items Not Added to Holder\"] call FUNC(eventTargetFinish);\r\n};\r\n\r\n//Script drop uniforms/vest if empty\r\nif (((uniform _target) != \"\") && {(uniform _target) in _listOfItemsToRemove} && {(uniformItems _target) isEqualTo []}) then {\r\n    _holder addItemCargoGlobal [(uniform _target), 1];\r\n    removeUniform _target;\r\n};\r\nif (((vest _target) != \"\") && {(vest _target) in _listOfItemsToRemove} && {(vestItems _target) isEqualTo []}) then {\r\n    _holder addItemCargoGlobal [(vest _target), 1];\r\n    removeVest _target;\r\n};\r\n\r\n\r\n//If holder is still empty, it will be 'garbage collected' while we wait for the drop 'action' to take place\r\n//So add a dummy item and just remove at the end\r\n_holderIsEmpty = ([_holder] call FUNC(getAllGearContainer)) isEqualTo [[],[]];\r\nif (_holderIsEmpty) then {\r\n    TRACE_1(\"Debug: adding dummy item to holder\",_holder);\r\n    _holder addItemCargoGlobal [DUMMY_ITEM, 1];\r\n};\r\n\r\n//Start the PFEH to do the actions (which could take >1 frame)\r\n[{\r\n    private [\"_needToRemoveWeapon\", \"_needToRemoveMagazines\", \"_needToRemoveBackpack\", \"_needToRemoveVest\", \"_needToRemoveUniform\", \"_error\", \"_magsToPickup\", \"_index\", \"_magazinesInHolder\"];\r\n\r\n    PARAMS_2(_args,_pfID);\r\n    EXPLODE_8_PVT(_args,_caller,_target,_listOfItemsToRemove,_holder,_holderIsEmpty,_maxWaitTime,_doNotDropAmmo,_startingMagazines);\r\n\r\n    _needToRemoveWeapon = ({_x in _listOfItemsToRemove} count (weapons _target)) > 0;\r\n    _needToRemoveMagazines = ({_x in _listOfItemsToRemove} count (magazines _target)) > 0;\r\n    _needToRemoveBackpack = ((backPack _target) != \"\") && {(backPack _target) in _listOfItemsToRemove};\r\n    _needToRemoveVest = ((vest _target) != \"\") && {(vest _target) in _listOfItemsToRemove};\r\n    _needToRemoveUniform = ((uniform _target) != \"\") && {(uniform _target) in _listOfItemsToRemove};\r\n\r\n    if ((CBA_missionTime < _maxWaitTime) && {[_target] call FUNC(canBeDisarmed)} && {_needToRemoveWeapon || _needToRemoveMagazines || _needToRemoveBackpack}) then {\r\n        //action drop weapons (keeps loaded magazine and attachements)\r\n        {\r\n            if (_x in _listOfItemsToRemove) then {\r\n                _target action [\"DropWeapon\", _holder, _x];\r\n            };\r\n        } forEach (weapons _target);\r\n\r\n        //Drop magazine (keeps unique ID)\r\n        {\r\n            if (_x in _listOfItemsToRemove) then {\r\n                _target action [\"DropMagazine\", _holder, _x];\r\n            };\r\n        } forEach (magazines _target);\r\n\r\n        //Drop backpack (Keeps variables for ACRE/TFR)\r\n        if (_needToRemoveBackpack) then {_target action [\"DropBag\", _holder, (backPack _target)];};\r\n    } else {\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n\r\n        if (_doNotDropAmmo) then {\r\n            _error = false;\r\n\r\n            _magsToPickup = +_startingMagazines;\r\n            {\r\n                _index = _magsToPickup find _x;\r\n                if (_index == -1) exitWith {_error = true; ERROR(\"More mags than when we started?\")};\r\n                _magsToPickup deleteAt _index;\r\n            } forEach (magazinesAmmo _target);\r\n\r\n            _magazinesInHolder = magazinesAmmoCargo _holder;\r\n            {\r\n                _index = _magazinesInHolder find _x;\r\n                if (_index == -1) exitWith {_error = true; ERROR(\"Missing mag not in holder\")};\r\n                _magazinesInHolder deleteAt _index;\r\n            } forEach _magsToPickup;\r\n\r\n            //No Error (all the ammo in the container is ammo we should have);\r\n            if ((!_error) && {_magazinesInHolder isEqualTo []}) then {\r\n                {\r\n                    _target addMagazine _x;\r\n                } forEach (magazinesAmmoCargo _holder);\r\n                clearMagazineCargoGlobal _holder;\r\n            };\r\n        };\r\n\r\n        //If we added a dummy item, remove it now\r\n        if (_holderIsEmpty && {!((getItemCargo _holder) isEqualTo [[DUMMY_ITEM],[1]])}) exitWith {\r\n            _holder setVariable [QGVAR(holderInUse), false];\r\n            [_caller, _target, \"Debug: Holder should only have dummy item\"] call FUNC(eventTargetFinish);\r\n        };\r\n        if (_holderIsEmpty) then {\r\n            TRACE_1(\"Debug: removing dummy item from holder\",_holder);\r\n            clearItemCargoGlobal _holder;\r\n        };\r\n        //Verify we didn't timeout waiting on drop action\r\n        if (CBA_missionTime >= _maxWaitTime)  exitWith {\r\n            _holder setVariable [QGVAR(holderInUse), false];\r\n            [_caller, _target, \"Debug: Drop Actions Timeout\"] call FUNC(eventTargetFinish);\r\n        };\r\n        //If target lost disarm status:\r\n        if (!([_target] call FUNC(canBeDisarmed))) exitWith {\r\n            _holder setVariable [QGVAR(holderInUse), false];\r\n            [_caller, _target, \"Debug: Target cannot be disarmed\"] call FUNC(eventTargetFinish);\r\n        };\r\n        if (_needToRemoveVest && {!((vestItems _target) isEqualTo [])}) exitWith {\r\n            _holder setVariable [QGVAR(holderInUse), false];\r\n            [_caller, _target, \"Debug: Vest Not Empty\"] call FUNC(eventTargetFinish);\r\n        };\r\n        if (_needToRemoveVest) then {\r\n            _holder addItemCargoGlobal [(vest _target), 1];\r\n            removeVest _target;\r\n        };\r\n        if (_needToRemoveUniform && {!((uniformItems _target) isEqualTo [])}) exitWith {\r\n            _holder setVariable [QGVAR(holderInUse), false];\r\n            [_caller, _target, \"Debug: Uniform Not Empty\"] call FUNC(eventTargetFinish);\r\n        };\r\n        if (_needToRemoveUniform) then {\r\n            _holder addItemCargoGlobal [(uniform _target), 1];\r\n            removeUniform _target;\r\n        };\r\n\r\n        _holder setVariable [QGVAR(holderInUse), false];\r\n        [_caller, _target, \"\"] call FUNC(eventTargetFinish);\r\n    };\r\n\r\n}, 0.0, [_caller,_target, _listOfItemsToRemove, _holder, _holderIsEmpty, (CBA_missionTime + TIME_MAX_WAIT), _doNotDropAmmo, _targetMagazinesEnd]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_disarming_fnc_eventCallerFinish","file":"disarming/functions/fnc_eventCallerFinish.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Recieves a possible error code from FUNC(eventTargetFinish)\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n * 2: error message <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player1, player2, \"Someting fucked up\"] call ace_disarming_fnc_eventCallerFinish\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_errorMsg\"];\r\n\r\nif (_caller != ACE_player) exitWith {};\r\n\r\nsystemChat format [\"Debug-Caller: Disarm finished from [%1] with code [%2]\", _target, _errorMsg];\r\nACE_LOGINFO_2(\"%1 - eventCallerFinish: %2\",CBA_missionTime,_this);\r\n"},{"name":"ace_disarming_fnc_eventTargetFinish","file":"disarming/functions/fnc_eventTargetFinish.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * After FUNC(disarmDropItems) has completed, passing a possible error code.\r\n * Passes that error back to orginal caller.\r\n *\r\n * Arguments:\r\n * 0: caller <OBJECT>\r\n * 1: target <OBJECT>\r\n * 2: errorMsg <STRING>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player1, player2, \"Someting fucked up\"] call ace_disarming_fnc_eventTargetFinish\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_errorMsg\"];\r\n\r\nif (_errorMsg != \"\") then {\r\n    ACE_LOGINFO_2(\"%1 - eventTargetFinish: %2\",CBA_missionTime,_this);\r\n    [QGVAR(debugCallback), [_caller, _target, _errorMsg], [_caller]] call CBA_fnc_targetEvent;\r\n};\r\n"},{"name":"ace_disarming_fnc_eventTargetStart","file":"disarming/functions/fnc_eventTargetStart.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Disarm Event Handler, Starting func, called on the target.\r\n * If target has to remove uniform/vest, this will add all uniform/vest items to the drop list.\r\n *\r\n * Arguments:\r\n * 0: caller (player) <OBJECT>\r\n * 1: target <OBJECT>\r\n * 2: type of disarm <STRING>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * eventTargetStart\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_listOfObjectsToRemove\"];\r\n\r\nprivate \"_itemsToAdd\";\r\n\r\n_itemsToAdd = [];\r\n{\r\n    if (_x == (uniform _target)) then {\r\n        _itemsToAdd = _itemsToAdd + (uniformItems _target);\r\n    };\r\n    if (_x == (vest _target)) then {\r\n        _itemsToAdd = _itemsToAdd + (vestItems _target);\r\n    };\r\n} forEach _listOfObjectsToRemove;\r\n\r\n{\r\n    if (!(_x in _listOfObjectsToRemove)) then {\r\n        _listOfObjectsToRemove pushBack _x;\r\n    };\r\n} forEach _itemsToAdd;\r\n\r\n[_caller, _target, _listOfObjectsToRemove] call FUNC(disarmDropItems);\r\n"},{"name":"ace_disarming_fnc_getAllGearContainer","file":"disarming/functions/fnc_getAllGearContainer.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Helper function to get all gear of a container\r\n *\r\n * Arguments:\r\n * 0: Container <OBJECT>\r\n *\r\n * Return Value:\r\n * Array of 2 arrays, classnames and count<ARRAY>\r\n *\r\n * Example:\r\n * [[\"ace_bandage\"],[2]] = [box] call ace_disarming_fnc_getAllGearContainer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\nprivate [\"_items\", \"_counts\"];\r\n\r\n_items = [];\r\n_counts = [];\r\n{\r\n    _x params [\"_item\", \"_count\"];\r\n    _items append _item;\r\n    _counts append _count;\r\n} forEach [(getWeaponCargo _target), (getItemCargo _target), (getMagazineCargo _target), (getBackpackCargo _target)];\r\n\r\n[_items,_counts] // Return\r\n"},{"name":"ace_disarming_fnc_getAllGearUnit","file":"disarming/functions/fnc_getAllGearUnit.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Helper function to get all gear of a unit.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Array of 2 arrays, classnames and count<ARRAY>\r\n *\r\n * Example:\r\n * [[\"ace_bandage\"],[2]] = [bob] call ace_disarming_fnc_getAllGearUnit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\nprivate [\"_allItems\", \"_classnamesCount\", \"_index\", \"_uniqueClassnames\"];\r\n\r\n_allItems = (((items _target) + (assignedItems _target)) - (weapons _target)) + (weapons _target) + (magazines _target);\r\n\r\nif ((backpack _target) != \"\") then {\r\n    _allItems pushBack (backpack _target);\r\n};\r\nif ((vest _target) != \"\") then {\r\n    _allItems pushBack (vest _target);\r\n};\r\nif ((uniform _target) != \"\") then {\r\n    _allItems pushBack (uniform _target);\r\n};\r\nif ((headgear _target) != \"\") then {\r\n    _allItems pushBack (headgear _target);\r\n};\r\n//What kind of asshole takes a man's glasses?\r\nif ((goggles _target) != \"\") then {\r\n    _allItems pushBack (goggles _target);\r\n};\r\n\r\n_uniqueClassnames = [];\r\n_classnamesCount = [];\r\n//Filter unique and count\r\n{\r\n    _index = _uniqueClassnames find _x;\r\n    if (_index != -1) then {\r\n        _classnamesCount set [_index, ((_classnamesCount select _index) + 1)];\r\n    } else {\r\n        _uniqueClassnames pushBack _x;\r\n        _classnamesCount pushBack 1;\r\n    };\r\n} forEach _allItems;\r\n\r\n[_uniqueClassnames, _classnamesCount]\r\n"},{"name":"ace_disarming_fnc_openDisarmDialog","file":"disarming/functions/fnc_openDisarmDialog.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Opens the disarm dialog (allowing a person to remove items)\r\n *\r\n * Arguments:\r\n * 0: Caller (player) <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, bob] call ace_disarming_fnc_openDisarmDialog\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_caller\", \"_target\"];\r\nprivate \"_display\";\r\n#define DEFUALTPATH \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\%1_gs.paa\"\r\n//Sanity Checks\r\nif (_caller != ACE_player) exitWith {ERROR(\"Player isn't caller?\");};\r\nif (!([_player, _target] call FUNC(canPlayerDisarmUnit))) exitWith {ERROR(\"Can't Disarm Unit\");};\r\nif (dialog) then {ERROR(\"Dialog open when trying to open disarm dialog\"); closeDialog 0;};\r\n\r\ndisableSerialization;\r\n\r\ncreateDialog QGVAR(remoteInventory);\r\n\r\n_display = uiNamespace getVariable [\"ACE_remoteInventory\", displayNull];\r\nif (isNull _display) exitWith {ERROR(\"Display is Null\");};\r\n\r\nGVAR(disarmTarget) = _target;\r\n\r\n//Setup Drop Event (on right pannel)\r\n(_display displayCtrl 632) ctrlAddEventHandler [\"LBDrop\", {\r\n    if (isNull GVAR(disarmTarget)) exitWith {};\r\n    params [\"_ctrl\", \"_xPos\", \"_yPos\", \"_idc\", \"_itemInfo\"];\r\n    (_itemInfo select 0) params [\"_displayText\", \"_value\", \"_data\"];\r\n\r\n    if (isNull GVAR(disarmTarget)) exitWith {ERROR(\"disarmTarget is null\");};\r\n\r\n    TRACE_2(\"Debug: Droping %1 from %2\",_data,GVAR(disarmTarget));\r\n    [QGVAR(dropItems), [ACE_player, GVAR(disarmTarget), [_data]], [GVAR(disarmTarget)]] call CBA_fnc_targetEvent;\r\n\r\n    false //not sure what this does\r\n}];\r\n\r\n//Setup PFEH\r\n[{\r\n    private [\"_groundContainer\", \"_targetContainer\", \"_playerName\", \"_icon\", \"_rankPicture\", \"_targetUniqueItems\", \"_holderUniqueItems\", \"_holder\"];\r\n    disableSerialization;\r\n    params [\"_args\", \"_idPFH\"];\r\n    _args params [\"_player\", \"_target\", \"_display\"];\r\n\r\n    if ((!([_player, _target] call FUNC(canPlayerDisarmUnit))) ||\r\n            {isNull _display} ||\r\n            {_player != ACE_player}) then {\r\n\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        GVAR(disarmTarget) = objNull;\r\n        if (!isNull _display) then { closeDialog 0; }; //close dialog if still open\r\n    } else {\r\n\r\n        _groundContainer = _display displayCtrl 632;\r\n        _targetContainer = _display displayCtrl 633;\r\n        _playerName = _display displayCtrl 111;\r\n        _rankPicture = _display displayCtrl 1203;\r\n\r\n        //Show rank and name (just like BIS's inventory)\r\n        _icon = format [DEFUALTPATH, toLower (rank _target)];\r\n        if (_icon isEqualTo DEFUALTPATH) then {_icon = \"\"};\r\n        _rankPicture ctrlSetText _icon;\r\n        _playerName ctrlSetText ([GVAR(disarmTarget), false, true] call EFUNC(common,getName));\r\n\r\n        //Clear both inventory lists:\r\n        lbClear _groundContainer;\r\n        lbClear _targetContainer;\r\n\r\n        //Show the items in the ground disarmTarget's inventory\r\n        _targetUniqueItems = [GVAR(disarmTarget)] call FUNC(getAllGearUnit);\r\n        [_targetContainer, _targetUniqueItems] call FUNC(showItemsInListbox);\r\n\r\n        //Try to find a holder that the target is using to drop items into:\r\n        _holder = objNull;\r\n        {\r\n            if ((_x getVariable [QGVAR(disarmUnit), objNull]) == _target) exitWith {\r\n                _holder = _x;\r\n            };\r\n        } count ((getpos _target) nearObjects [DISARM_CONTAINER, 3]);\r\n\r\n        //If a holder exists, show it's inventory\r\n        if (!isNull _holder) then {\r\n            _holderUniqueItems = [_holder] call FUNC(getAllGearContainer);\r\n            [_groundContainer, _holderUniqueItems] call FUNC(showItemsInListbox);\r\n        };\r\n    };\r\n}, 0, [_caller, _target, _display]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_disarming_fnc_showItemsInListbox","file":"disarming/functions/fnc_showItemsInListbox.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Shows a list of inventory items in a listBox control.\r\n *\r\n * Arguments:\r\n * 0: RscListBox <CONTROL>\r\n * 1: ItemArray [[\"itemClassnames\"],[counts]] <ARRAY>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [theListBox, [[\"ace_bandage\"],[2]]] call ace_disarming_fnc_showItemsInListbox\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nprivate [\"_classname\", \"_count\", \"_displayName\", \"_picture\"];\r\n\r\nparams [\"_listBoxCtrl\", \"_itemsCountArray\"];\r\n\r\n{\r\n    private \"_configPath\";\r\n    _displayName = \"\";\r\n    _picture = \"\";\r\n\r\n    _classname = _x;\r\n    _count = (_itemsCountArray select 1) select _forEachIndex;\r\n\r\n    if ((_classname != DUMMY_ITEM) && {_classname != \"ACE_FakePrimaryWeapon\"}) then { //Don't show the dummy potato or fake weapon\r\n\r\n        switch (true) do {\r\n            case (isClass (configFile >> \"CfgWeapons\" >> _classname)): {\r\n                _configPath = (configFile >> \"CfgWeapons\");\r\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\r\n                _picture = getText (_configPath >> _classname >> \"picture\");\r\n            };\r\n            case (isClass (configFile >> \"CfgMagazines\" >> _classname)): {\r\n                _configPath = (configFile >> \"CfgMagazines\");\r\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\r\n                _picture = getText (_configPath >> _classname >> \"picture\");\r\n            };\r\n            case (isClass (configFile >> \"CfgVehicles\" >> _classname)): {\r\n                _configPath = (configFile >> \"CfgVehicles\");\r\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\r\n                _picture = getText (_configPath >> _classname >> \"picture\");\r\n            };\r\n            case (isClass (configFile >> \"CfgGlasses\" >> _classname)): {\r\n                _configPath = (configFile >> \"CfgGlasses\");\r\n                _displayName = getText (_configPath >> _classname >> \"displayName\");\r\n                _picture = getText (_configPath >> _classname >> \"picture\");\r\n            };\r\n            default {\r\n                ERROR(format [\"[%1] - bad classname\", _classname]);\r\n            };\r\n        };\r\n\r\n        _listBoxCtrl lbAdd format [\"%1\", _displayName];\r\n        _listBoxCtrl lbSetData [((lbSize _listBoxCtrl) - 1), _classname];\r\n        _listBoxCtrl lbSetPicture [((lbSize _listBoxCtrl) - 1), _picture];\r\n        _listBoxCtrl lbSetTextRight [((lbSize _listBoxCtrl) - 1), str _count];\r\n    };\r\n} forEach (_itemsCountArray select 0);\r\n"},{"name":"ace_disarming_fnc_verifyMagazinesMoved","file":"disarming/functions/fnc_verifyMagazinesMoved.sqf","text":"/*\r\n * Author: PabstMirror\r\n *\r\n * Verifies magazines moved with exact ammo counts preserved.\r\n * Arrays will be in format from magazinesAmmo/magazinesAmmoCargo\r\n * e.g.: [[\"30Rnd_65x39_caseless_mag\",15], [\"30Rnd_65x39_caseless_mag\",30]]\r\n *\r\n * Arguments:\r\n * 0: Start on container A <ARRAY>\r\n * 1: End on container A <ARRAY>\r\n * 2: Start on container B <ARRAY>\r\n * 3: End on container B <ARRAY>\r\n *\r\n * Return Value:\r\n * Verified Good <BOOL>\r\n *\r\n * Example:\r\n * [stuff] call ace_disarming_fnc_verifyMagazinesMoved\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_problem\", \"_beginingArray\", \"_index\"];\r\n\r\nPARAMS_4(_startA,_endA,_startB,_endB);\r\n\r\n//Quick Lazy Count Check\r\nif (((count _startA) + (count _startB)) != ((count _endA) + (count _endB))) exitWith {\r\n    false\r\n};\r\n\r\n_beginingArray = (_startA + _startB);\r\n\r\n_problem = false;\r\n{\r\n    _index = _beginingArray find _x;\r\n    if (_index == -1) exitWith {_problem = true;};\r\n    _beginingArray deleteAt _index;\r\n} forEach (_endA + _endB);\r\n\r\n(!_problem) && {_beginingArray isEqualTo []}\r\n"}],"disposable":[{"name":"ace_disposable_fnc_replaceATWeapon","file":"disposable/functions/fnc_replaceATWeapon.sqf","text":"/*\r\n * Author: bux, commy2\r\n * Replace the disposable launcher with the used dummy. Called from the unified fired EH.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [fromBisFiredEH] call ace_disposable_fnc_replaceATWeapon;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nif (!local _unit || {_weapon != secondaryWeapon _unit})  exitWith {};\r\n\r\nprivate _replacementTube = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"ACE_UsedTube\");\r\nif (_replacementTube == \"\") exitWith {}; //If no replacement defined just exit\r\n\r\n//Save array of items attached to launcher\r\nprivate _items = secondaryWeaponItems _unit;\r\n//Replace the orginal weapon with the 'usedTube' weapon\r\n_unit addWeapon _replacementTube;\r\n//Makes sure the used tube is still equiped\r\n_unit selectWeapon _replacementTube;\r\n//Re-add all attachments to the used tube\r\n{\r\n    if (_x != \"\") then {_unit addSecondaryWeaponItem _x};\r\n} count _items;\r\n\r\n\r\n// AI - Remove the ai's missle launcher tube after the missle has exploded\r\nif !([_unit] call EFUNC(common,isPlayer)) then {\r\n    [{\r\n        params [\"_args\",\"_idPFH\"];\r\n        _args params [\"_unit\", \"_tube\", \"_projectile\"];\r\n\r\n        //don't do anything until projectile is null (exploded/max range)\r\n        if (isNull _projectile) then {\r\n            //Remove PFEH:\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n\r\n            //If (tube is dropped) OR (is dead) OR (is player) just exit\r\n            if (secondaryWeapon _unit != _tube || {!alive _unit} || {[_unit] call EFUNC(common,isPlayer)}) exitWith {};\r\n\r\n            //private  _items = secondaryWeaponItems _unit;\r\n            private _container = createVehicle [\"GroundWeaponHolder\", position _unit, [], 0, \"CAN_COLLIDE\"];\r\n            _container setPosAsl (getPosAsl _unit);\r\n            _container addWeaponCargoGlobal [_tube, 1];\r\n\r\n            //This will duplicate attachements, because we will be adding a weapon that may already have attachments on it\r\n            //We either need a way to add a clean weapon, or a way to add a fully configured weapon to a container:\r\n            // {\r\n                // if (_x != \"\") then {_container addItemCargoGlobal [_x, 1];};\r\n            // } forEach _items;\r\n\r\n            _unit removeWeaponGlobal _tube;\r\n        };\r\n    }, 1, [_unit, _replacementTube, _projectile]] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_disposable_fnc_takeLoadedATWeapon","file":"disposable/functions/fnc_takeLoadedATWeapon.sqf","text":"/*\r\n * Author: commy2\r\n * Handle the take event. Add a dummy magazine if a disposable rocket launcher is taken.\r\n *\r\n * Arguments:\r\n * 0: unit - Object the event handler is assigned to <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [fromTakeEH] call ace_disposable_fnc_takeLoadedATWeapon;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nif (!local _unit) exitWith {};\r\n\r\nprivate _launcher = secondaryWeapon _unit;\r\nprivate _config = configFile >> \"CfgWeapons\" >> _launcher;\r\n\r\nif (isClass _config && {getText (_config >> \"ACE_UsedTube\") != \"\"} && {getNumber (_config >> \"ACE_isUsedLauncher\") != 1} && {count secondaryWeaponMagazine _unit == 0}) then {\r\n    private _magazine = getArray (_config >> \"magazines\") select 0;\r\n    private _isLauncherSelected = currentWeapon _unit == _launcher;\r\n\r\n    _unit removeMagazines _magazine;\r\n\r\n    if (backpack _unit == \"\") then {\r\n        _unit addBackpack \"ACE_FakeBackpack\";\r\n        _unit removeWeapon _launcher;\r\n        _unit addMagazine _magazine;\r\n        private _didAdd = _magazine in magazines _unit;\r\n        _unit addWeapon _launcher;\r\n\r\n        if (!_didAdd) then {\r\n            TRACE_1(\"Failed To Add Disposable Magazine Normally, doing backup method (no backpack)\",_unit);\r\n            _unit addSecondaryWeaponItem _magazine;\r\n        };\r\n        removeBackpack _unit;\r\n    } else {\r\n        _unit removeWeapon _launcher;\r\n        _unit addMagazine _magazine;\r\n        private _didAdd = _magazine in magazines _unit;\r\n        _unit addWeapon _launcher;\r\n\r\n        if (!_didAdd) then {\r\n            TRACE_2(\"Failed To Add Disposable Magazine Normally, doing backup method\",_unit,(backpack _unit));\r\n            _unit addSecondaryWeaponItem _magazine;\r\n        };\r\n    };\r\n\r\n    if (_isLauncherSelected) then {\r\n        _unit selectWeapon _launcher;\r\n    };\r\n};\r\n"},{"name":"ace_disposable_fnc_updateInventoryDisplay","file":"disposable/functions/fnc_updateInventoryDisplay.sqf","text":"/*\r\n * Author: bux, commy2\r\n * Hide or show the secondary weapon magazine inventory slot to prevent unloading of dummy magazines.\r\n *\r\n * Arguments:\r\n * 0: unit - Object the event handler is assigned to <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_disposable_fnc_updateInventoryDisplay;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nparams [\"_player\", [\"_display\",(findDisplay 602),[displayNull]]];\r\nTRACE_2(\"params\",_player,_display);\r\n\r\n_player removeMagazines \"ACE_PreloadedMissileDummy\";\r\n_player removeMagazines \"ACE_FiredMissileDummy\";\r\n\r\nif (isNull _display) exitWith {};\r\n\r\nprivate _launcher = secondaryWeapon _player;\r\n\r\nif (_launcher == \"\" || {getText (configFile >> \"CfgWeapons\" >> _launcher >> \"ACE_UsedTube\") == \"\"}) then {\r\n    private _control = _display displayCtrl 627;\r\n    private _config = configFile >> \"RscDisplayInventory\" >> \"controls\" >> \"SlotSecondaryMagazine\";\r\n    _control ctrlSetPosition [getNumber (_config >> \"x\"), getNumber (_config >> \"y\"), getNumber (_config >> \"w\"), getNumber (_config >> \"h\")];\r\n    _control ctrlCommit 0;\r\n\r\n    _control = _display displayCtrl 1251;\r\n    _config = configFile >> \"RscDisplayInventory\" >> \"controls\" >> \"BackgroundSlotSecondaryMagazine\";\r\n    _control ctrlSetPosition [getNumber (_config >> \"x\"), getNumber (_config >> \"y\"), getNumber (_config >> \"w\"), getNumber (_config >> \"h\")];\r\n    _control ctrlCommit 0;\r\n} else {\r\n    private _control = _display displayCtrl 627;\r\n    _control ctrlSetPosition [0, 0, 0, 0];\r\n    _control ctrlCommit 0;\r\n\r\n    _control = _display displayCtrl 1251;\r\n    _control ctrlSetPosition [0, 0, 0, 0];\r\n    _control ctrlCommit 0;\r\n};\r\n"}],"dogtags":[{"name":"ace_dogtags_fnc_addDogtagActions","file":"dogtags/functions/fnc_addDogtagActions.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Creates one action per dogtag.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * Children actions <ARRAY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_player\"];\r\n\r\n//Get all dogtags and their ids\r\nprivate _unitDogtags = [];\r\nprivate _unitDogtagIDs = [];\r\n{\r\n    private _id = getNumber (configFile >> \"CfgWeapons\" >> _x >> QGVAR(tagID));\r\n    if (_id > 0) then {\r\n        _unitDogtags pushBack _x;\r\n        _unitDogtagIDs pushBack _id;\r\n    };\r\n} forEach items _player;\r\n\r\n//Create action children for all dogtags\r\nprivate _actions = [];\r\n{\r\n    private _tagID = _unitDogtagIDs select _forEachIndex;\r\n    private _displayName = format [\"%1 #%2\", getText (configFile >> \"CfgWeapons\" >> _x >> \"displayName\"), _tagID];\r\n    private _picture = getText (configFile >> \"CfgWeapons\" >> _x >> \"picture\");\r\n\r\n    private _action = [_x, _displayName, _picture, {_this call FUNC(checkDogtagItem)}, {true}, {}, _x] call EFUNC(interact_menu,createAction);\r\n    _actions pushBack [_action, [], _player];\r\n} forEach _unitDogtags;\r\n\r\n_actions\r\n"},{"name":"ace_dogtags_fnc_addDogtagItem","file":"dogtags/functions/fnc_addDogtagItem.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Adds dogtag item to unit (triggered by server)\r\n *\r\n * Arguments:\r\n * 0: Item class <STRING>\r\n * 1: Dogtag data <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_item\", \"_dogtagData\"];\r\n\r\nif (_item == \"\") exitWith {};\r\n\r\n[ace_player, _item] call CBA_fnc_addItem;\r\n\r\n_dogtagData params [\"_nickName\"];\r\nprivate _displayText = format [localize LSTRING(takeDogtagSuccess), _nickName];\r\n[_displayText] call EFUNC(common,displayText);\r\n"},{"name":"ace_dogtags_fnc_bloodType","file":"dogtags/functions/fnc_bloodType.sqf","text":"/*\r\n * Author: commy2\r\n * Reports a blood type depending on the units name.\r\n *\r\n * Arguments:\r\n * 0: Name of a unit <STRING>\r\n *\r\n * Return Value:\r\n * A random blood type <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define BLOOD_TYPES [\"O POS\", \"O NEG\", \"A POS\", \"A NEG\", \"B POS\", \"B NEG\", \"AB POS\", \"AB NEG\"]\r\n\r\nparams [\"_name\"];\r\n\r\nprivate _num = 0;\r\nprivate _count = {_num = _num + _x} count toArray _name;\r\n\r\n_num = _num + _count;\r\n\r\nBLOOD_TYPES select (_num % count BLOOD_TYPES)\r\n"},{"name":"ace_dogtags_fnc_canCheckDogtag","file":"dogtags/functions/fnc_canCheckDogtag.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Checks if dogtag can be checked.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * True if dogtag can be checked <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\"];\r\n\r\nif (isNull _target) exitWith {false};\r\n\r\n(!alive _target) || {_target getVariable [\"ACE_isUnconscious\", false]}\r\n"},{"name":"ace_dogtags_fnc_canTakeDogtag","file":"dogtags/functions/fnc_canTakeDogtag.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Checks if dogtag can be taken.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * True if dogtag can be taken <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\"];\r\n\r\nif (isNull _target) exitWith {false};\r\n\r\n(!alive _target) || {_target getVariable [\"ACE_isUnconscious\", false]}\r\n"},{"name":"ace_dogtags_fnc_checkDogtag","file":"dogtags/functions/fnc_checkDogtag.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Checks unit dogtag\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\"];\r\n\r\nprivate _doubleTags = (_target getVariable [QGVAR(dogtagTaken), objNull]) != _target;\r\nprivate _dogTagData = [_target] call FUNC(getDogTagData);\r\n\r\n[QGVAR(showDogtag), [_dogTagData, _doubleTags]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_dogtags_fnc_checkDogtagItem","file":"dogtags/functions/fnc_checkDogtagItem.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Check dogtag self menu action\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n * 2: Item class <STRING>\r\n *\r\n * Return Value:\r\n * Mone\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\", \"_item\"];\r\n\r\n[QGVAR(sendDogtagData), [_player, _item]] call CBA_fnc_serverEvent;\r\n"},{"name":"ace_dogtags_fnc_getDogtagData","file":"dogtags/functions/fnc_getDogtagData.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Get unit dogtag data\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\n// Check if the data was already created\r\nprivate _dogTagData = _target getVariable QGVAR(dogtagData);\r\nif (!isNil \"_dogTagData\") exitWith {_dogTagData};\r\n\r\n// Create dog tag data once for the unit: nickname, code (eg. 135-13-900) and blood type\r\nprivate _targetName = [_target, false, true] call EFUNC(common,getName);\r\n\r\nprivate _dogTagData = [\r\n    _targetName,\r\n    _targetName call FUNC(ssn),\r\n    _targetName call FUNC(bloodType)\r\n];\r\n// Store it\r\n_target setVariable [QGVAR(dogtagData), _dogTagData, true];\r\n_dogTagData\r\n"},{"name":"ace_dogtags_fnc_getDogtagItem","file":"dogtags/functions/fnc_getDogtagItem.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Server: creates new dogtag item and send it to client\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif(!isServer) exitWith {};\r\n\r\nparams [\"_player\", \"_target\"];\r\nTRACE_2(\"getDogtagItem\",_player,_target);\r\n\r\nprivate _allDogtags = missionNamespace getVariable [QGVAR(allDogtags), []];\r\nprivate _allDogtagDatas = missionNamespace getVariable [QGVAR(allDogtagDatas), []];\r\n\r\nprivate _nextID = count _allDogtags + 1;\r\n\r\nif (_nextID > 999) exitWith {ACE_LOGERROR(\"Ran out of IDs\");};\r\n\r\nprivate _dogTagData = [_target] call FUNC(getDogTagData);\r\nprivate _item = format [\"ACE_dogtag_%1\", _nextID];\r\n_allDogtags pushBack _item;\r\n_allDogtagDatas pushBack _dogTagData;\r\n\r\nmissionNamespace setVariable [QGVAR(allDogtags), _allDogtags];\r\nmissionNamespace setVariable [QGVAR(allDogtagDatas), _allDogtagDatas];\r\n\r\n[QGVAR(addDogtagItem), [_item, _dogTagData], [_player]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_dogtags_fnc_sendDogtagData","file":"dogtags/functions/fnc_sendDogtagData.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Server: returns to client data on given dogtag\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif(!isServer) exitWith {};\r\n\r\nparams [\"_target\", \"_item\"];\r\nTRACE_2(\"sendDogtagData\",_target,_item);\r\n\r\nprivate _allDogtags = missionNameSpace getVariable [QGVAR(allDogtags), []];\r\nprivate _allDogtagDatas = missionNameSpace getVariable [QGVAR(allDogtagDatas), []];\r\n\r\nprivate _dogtagData = [];\r\nprivate _index = _allDogtags find _item;\r\nif (_index >= 0) then {\r\n    _dogtagData = _allDogtagDatas select _index;\r\n};\r\n\r\n[QGVAR(showDogtag), [_dogtagData], [_target]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_dogtags_fnc_showDogtag","file":"dogtags/functions/fnc_showDogtag.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Shows dogtag\r\n *\r\n * Arguments:\r\n * 0: Dog tag data <ARRAY>\r\n * 1: Display as double tag <BOOLEAN>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_dogtagData\", [\"_doubleTags\", false, [false]]];\r\n\r\nif (!hasInterface || {_dogtagData isEqualTo []}) exitWith {};\r\n\r\nif (_doubleTags) then {\r\n    (QGVAR(tag) call BIS_fnc_rscLayer) cutRsc [QGVAR(doubleTag), \"PLAIN\", 1, true];\r\n} else {\r\n    (QGVAR(tag) call BIS_fnc_rscLayer) cutRsc [QGVAR(singleTag), \"PLAIN\", 1, true];\r\n};\r\nprivate _display = uiNamespace getvariable [QGVAR(tag), displayNull];\r\nif(isNull _display) exitWith {};\r\n\r\nprivate _control = _display displayCtrl 1001;\r\n_dogtagData params [\"_nickName\", \"_code\", \"_bloodType\"];\r\n_control ctrlSetStructuredText parseText format [\"%1<br/>%2<br/>%3\", toUpper _nickName, _code, _bloodType];\r\n"},{"name":"ace_dogtags_fnc_ssn","file":"dogtags/functions/fnc_ssn.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Reports a social security number generated from the units name.\r\n *\r\n * Arguments:\r\n * 0: Name of a unit <STRING>\r\n *\r\n * Return Value:\r\n * A random three/two/four format social security number <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\"];\r\nprivate _length = count _name;\r\nprivate _chars = toArray _name;\r\n\r\n// For short names, reuse characters\r\nif (_length < 9) then {\r\n    // Iterates every second character, swapping odd/even with each loop\r\n    for [{_i = 0},{_i < 2*(9 - _length)},{_i = _i + 2}] do {\r\n        _chars pushBack (_chars select floor((_i + (_i/_length % 2)) % _length));\r\n    };\r\n};\r\n\r\n// Offset array slice for long names to make generation more unique\r\nprivate _slice = [0, _length % 9] select (_length > 9);\r\nprivate _nums = (_chars select [_slice, 9]) apply { _x % 10 };\r\n\r\n([_nums select [0,3],_nums select [3,2], _nums select [5,4]] apply { _x joinString \"\" }) joinString \"-\"\r\n"},{"name":"ace_dogtags_fnc_takeDogtag","file":"dogtags/functions/fnc_takeDogtag.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * If dogtag is not already taken triggers event on server\r\n * If dogtag already taken displays info about it\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\"];\r\n\r\nif ((_target getVariable [QGVAR(dogtagTaken), objNull]) == _target) then {\r\n    [localize LSTRING(dogtagAlreadyTaken)] call EFUNC(common,displayText);\r\n} else {\r\n    _target setVariable [QGVAR(dogtagTaken), _target, true];\r\n    [QGVAR(getDogtagItem), [_player, _target]] call CBA_fnc_serverEvent;\r\n};\r\n"}],"dragging":[{"name":"ace_dragging_fnc_canCarry","file":"dragging/functions/fnc_canCarry.sqf","text":"/*\r\n * Author: commy2\r\n * Check if unit can carry the object. Doesn't check weight.\r\n *\r\n * Arguments:\r\n * 0: Unit that should do the carrying <OBJECT>\r\n * 1: Object to carry <OBJECT>\r\n *\r\n * Return Value:\r\n * Can the unit carry the object? <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_canCarry;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nif !([_unit, _target, []] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n//#2644 - Units with injured legs cannot bear the extra weight of carrying an object\r\n//The fireman carry animation does not slow down for injured legs, so you could carry and run\r\nif ((_unit getHitPointDamage \"HitLegs\") >= 0.5) exitWith {false};\r\n\r\n// a static weapon has to be empty for dragging (ignore UAV AI)\r\nif (((typeOf _target) isKindOf \"StaticWeapon\") && {{(getText (configFile >> \"CfgVehicles\" >> (typeOf _x) >> \"simulation\")) != \"UAVPilot\"} count crew _target > 0}) exitWith {false};\r\n\r\nalive _target && {vehicle _target == _target} && {_target getVariable [QGVAR(canCarry), false]} && {animationState _target in [\"\", \"unconscious\"] || (_target getVariable [\"ACE_isUnconscious\", false]) || (_target isKindOf \"CAManBase\" && {(_target getHitPointDamage \"HitLegs\") > 0.4})}\r\n"},{"name":"ace_dragging_fnc_canDrag","file":"dragging/functions/fnc_canDrag.sqf","text":"/*\r\n * Author: commy2\r\n * Check if unit can drag the object. Doesn't check weight.\r\n *\r\n * Arguments:\r\n * 0: Unit that should do the dragging <OBJECT>\r\n * 1: Object to drag <OBJECT>\r\n *\r\n * Return Value:\r\n * Can the unit drag the object? <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_canDrag;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nif !([_unit, _target, []] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n// a static weapon has to be empty for dragging (ignore UAV AI)\r\nif ((typeOf _target) isKindOf \"StaticWeapon\" && {{(getText (configFile >> \"CfgVehicles\" >> (typeOf _x) >> \"simulation\")) != \"UAVPilot\"} count crew _target > 0}) exitWith {false};\r\n\r\nalive _target && {vehicle _target == _target} && {_target getVariable [QGVAR(canDrag), false]} && {animationState _target in [\"\", \"unconscious\"] || (_target getVariable [\"ACE_isUnconscious\", false]) || (_target isKindOf \"CAManBase\" && {(_target getHitPointDamage \"HitLegs\") > 0.4})};\r\n"},{"name":"ace_dragging_fnc_canDrop_carry","file":"dragging/functions/fnc_canDrop_carry.sqf","text":"/*\r\n * Author: commy2\r\n * Check if unit can drop the carried object.\r\n *\r\n * Arguments:\r\n * 0: Unit that currently carries a object <OBJECT>\r\n * 1: Object that is carried <OBJECT>\r\n *\r\n * Return Value:\r\n * Can the unit drop the object? <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_canDrop_carry;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nif !([_unit, _target, [\"isNotCarrying\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n_unit getVariable [QGVAR(carriedObject), objNull] == _target\r\n"},{"name":"ace_dragging_fnc_canDrop","file":"dragging/functions/fnc_canDrop.sqf","text":"/*\r\n * Author: commy2\r\n * Check if unit can drop the object.\r\n *\r\n * Arguments:\r\n * 0: Unit that currently drags a object <OBJECT>\r\n * 1: Object that is dragged <OBJECT>\r\n *\r\n * Return Value:\r\n * Can the unit drop the object? <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_canDrop;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nif !([_unit, _target, [\"isNotDragging\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n_unit getVariable [QGVAR(draggedObject), objNull] == _target\r\n"},{"name":"ace_dragging_fnc_carryObject","file":"dragging/functions/fnc_carryObject.sqf","text":"/*\r\n * Author: commy2\r\n * Carry an object.\r\n *\r\n * Arguments:\r\n * 0: Unit that should do the carrying <OBJECT>\r\n * 1: Object to carry <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_carryObject;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\n// get attachTo offset and direction.\r\n\r\nprivate _position = _target getVariable [QGVAR(carryPosition), [0, 0, 0]];\r\nprivate _direction = _target getVariable [QGVAR(carryDirection), 0];\r\n\r\n// handle objects vs persons\r\nif (_target isKindOf \"CAManBase\") then {\r\n\r\n    [_unit, \"AcinPercMstpSnonWnonDnon\", 2, true] call EFUNC(common,doAnimation);\r\n    [_target, \"AinjPfalMstpSnonWnonDf_carried_dead\", 2, true] call EFUNC(common,doAnimation);\r\n\r\n    // attach person\r\n    _target attachTo [_unit, _position, \"LeftShoulder\"];\r\n\r\n} else {\r\n\r\n    // add height offset of model\r\n    private _offset = (_target modelToWorldVisual [0, 0, 0] select 2) - (_unit modelToWorldVisual [0, 0, 0] select 2);\r\n\r\n    _position = _position vectorAdd [0, 0, _offset];\r\n\r\n    // attach object\r\n    _target attachTo [_unit, _position];\r\n\r\n};\r\n[QEGVAR(common,setDir), [_target, _direction], _target] call CBA_fnc_targetEvent;\r\n\r\n_unit setVariable [QGVAR(isCarrying), true, true];\r\n_unit setVariable [QGVAR(carriedObject), _target, true];\r\n\r\n// add drop action\r\n_unit setVariable [QGVAR(ReleaseActionID), [\r\n    _unit, \"DefaultAction\",\r\n    {!isNull ((_this select 0) getVariable [QGVAR(carriedObject), objNull])},\r\n    {[_this select 0, (_this select 0) getVariable [QGVAR(carriedObject), objNull]] call FUNC(dropObject_carry)}\r\n] call EFUNC(common,addActionEventHandler)];\r\n\r\n// show mouse hint\r\nif (_target isKindOf \"CAManBase\") then {\r\n    [localize LSTRING(Drop), \"\", \"\"] call EFUNC(interaction,showMouseHint);\r\n} else {\r\n    [localize LSTRING(Drop), \"\", localize LSTRING(LowerRaise)] call EFUNC(interaction,showMouseHint);\r\n};\r\n\r\n// check everything\r\n[FUNC(carryObjectPFH), 0.5, [_unit, _target, CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\r\n\r\n// reset current dragging height.\r\nGVAR(currentHeightChange) = 0;\r\n\r\n// prevent UAVs from firing\r\nprivate _UAVCrew = _target call EFUNC(common,getVehicleUAVCrew);\r\n\r\nif !(_UAVCrew isEqualTo []) then {\r\n    {_target deleteVehicleCrew _x} count _UAVCrew;\r\n    _target setVariable [QGVAR(isUAV), true, true];\r\n};\r\n"},{"name":"ace_dragging_fnc_carryObjectPFH","file":"dragging/functions/fnc_carryObjectPFH.sqf","text":"/*\r\n * Author: commy2\r\n * PFH for Carry Object\r\n *\r\n * Arguments:\r\n * 0: ARGS <ARRAY>\r\n *  0: Unit <OBJECT>\r\n *  1: Target <OBJECT>\r\n *  2: Start time <NUMBER>\r\n * 1: PFEH Id <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[player, target], 20] call ace_dragging_fnc_carryObjectPFH;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#ifdef DEBUG_ENABLED_DRAGGING\r\n    systemChat format [\"%1 carryObjectPFH running\", CBA_missionTime];\r\n#endif\r\n\r\nparams [\"_args\", \"_idPFH\"];\r\n_args params [\"_unit\",\"_target\", \"_startTime\"];\r\n\r\nif !(_unit getVariable [QGVAR(isCarrying), false]) exitWith {\r\n    TRACE_2(\"carry false\",_unit,_target);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// drop if the crate is destroyed OR (target moved away from carrier (weapon disasembled))\r\nif (!alive _target || {_unit distance _target > 10}) then {\r\n    TRACE_2(\"dead/distance\",_unit,_target);\r\n    if ((_unit distance _target > 10) && {(CBA_missionTime - _startTime) < 1}) exitWith {\r\n        //attachTo seems to have some kind of network delay and target can return an odd position durring the first few frames, \r\n        //so wait a full second to exit if out of range (this is critical as we would otherwise detach and set it's pos to weird pos)\r\n        TRACE_3(\"ignoring bad distance at start\",_unit distance _target,_startTime,CBA_missionTime);\r\n    };\r\n    [_unit, _target] call FUNC(dropObject_carry);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n"},{"name":"ace_dragging_fnc_dragObject","file":"dragging/functions/fnc_dragObject.sqf","text":"/*\r\n * Author: commy2\r\n * Drag an object. Called from ace_dragging_fnc_startDrag\r\n *\r\n * Arguments:\r\n * 0: Unit that should do the dragging <OBJECT>\r\n * 1: Object to drag <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_dragObject;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\n// get attachTo offset and direction.\r\nprivate _position = _target getVariable [QGVAR(dragPosition), [0, 0, 0]];\r\nprivate _direction = _target getVariable [QGVAR(dragDirection), 0];\r\n\r\n// add height offset of model\r\nprivate _offset = (_target modelToWorldVisual [0, 0, 0] select 2) - (_unit modelToWorldVisual [0, 0, 0] select 2);\r\nif (_target isKindOf \"CAManBase\") then {\r\n    _offset = 0;\r\n};\r\n_position = _position vectorAdd [0, 0, _offset];\r\n\r\n// attach object\r\nTRACE_3(\"attaching\",_position,_offset,_direction);\r\n_target attachTo [_unit, _position];\r\n[QEGVAR(common,setDir), [_target, _direction], _target] call CBA_fnc_targetEvent;\r\n\r\nif (_target isKindOf \"CAManBase\") then {\r\n    [_target, \"AinjPpneMrunSnonWnonDb_still\", 0, true] call EFUNC(common,doAnimation);\r\n};\r\n\r\n_unit setVariable [QGVAR(isDragging), true, true];\r\n_unit setVariable [QGVAR(draggedObject), _target, true];\r\n\r\n// add drop action\r\n_unit setVariable [QGVAR(ReleaseActionID), [\r\n    _unit, \"DefaultAction\",\r\n    {!isNull ((_this select 0) getVariable [QGVAR(draggedObject), objNull])},\r\n    {[_this select 0, (_this select 0) getVariable [QGVAR(draggedObject), objNull]] call FUNC(dropObject)}\r\n] call EFUNC(common,addActionEventHandler)];\r\n\r\n// show mouse hint\r\n[localize LSTRING(Drop), \"\"] call EFUNC(interaction,showMouseHint);\r\n\r\n// check everything\r\n[FUNC(dragObjectPFH), 0.5, [_unit, _target, CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\r\n\r\n// reset current dragging height.\r\nGVAR(currentHeightChange) = 0;\r\n\r\n// prevent UAVs from firing\r\nprivate _UAVCrew = _target call EFUNC(common,getVehicleUAVCrew);\r\n\r\nif !(_UAVCrew isEqualTo []) then {\r\n    {_target deleteVehicleCrew _x} count _UAVCrew;\r\n    _target setVariable [QGVAR(isUAV), true, true];\r\n};\r\n"},{"name":"ace_dragging_fnc_dragObjectPFH","file":"dragging/functions/fnc_dragObjectPFH.sqf","text":"/*\r\n * Author: commy2\r\n * PFH for Drag Object\r\n *\r\n * Arguments:\r\n * 0: ARGS <ARRAY>\r\n *  0: Unit <OBJECT>\r\n *  1: Target <OBJECT>\r\n *  2: Start time <NUMBER>\r\n * 1: PFEH Id <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[player, target], 20] call ace_dragging_fnc_dragObjectPFH;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#ifdef DEBUG_ENABLED_DRAGGING\r\n    systemChat format [\"%1 dragObjectPFH running\", CBA_missionTime];\r\n#endif\r\n\r\nparams [\"_args\", \"_idPFH\"];\r\n_args params [\"_unit\",\"_target\", \"_startTime\"];\r\n\r\nif !(_unit getVariable [QGVAR(isDragging), false]) exitWith {\r\n    TRACE_2(\"drag false\",_unit,_target);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// drop if the crate is destroyed OR (target moved away from carrier (weapon disasembled))\r\nif (!alive _target || {_unit distance _target > 10}) then {\r\n    TRACE_2(\"dead/distance\",_unit,_target);\r\n    if ((_unit distance _target > 10) && {(CBA_missionTime - _startTime) < 1}) exitWith {\r\n        //attachTo seems to have some kind of network delay and target can return an odd position durring the first few frames, \r\n        //so wait a full second to exit if out of range (this is critical as we would otherwise detach and set it's pos to weird pos)\r\n        TRACE_3(\"ignoring bad distance at start\",_unit distance _target,_startTime,CBA_missionTime);\r\n    };\r\n    [_unit, _target] call FUNC(dropObject);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n"},{"name":"ace_dragging_fnc_dropObject_carry","file":"dragging/functions/fnc_dropObject_carry.sqf","text":"/*\r\n * Author: commy2\r\n * Drop a carried object.\r\n *\r\n * Arguments:\r\n * 0: Unit that carries the other object <OBJECT>\r\n * 1: Carried object to drop <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_dropObject_carry;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\n// remove drop action\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(ReleaseActionID), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\nprivate _inBuilding = [_unit] call FUNC(isObjectOnObject);\r\n\r\n// prevent collision damage\r\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\r\n[QEGVAR(common,fixCollision), _target, _target] call CBA_fnc_targetEvent;\r\n\r\n// release object\r\ndetach _target;\r\n\r\n// fix anim when aborting carrying persons\r\nif (_target isKindOf \"CAManBase\" || {animationState _unit in CARRY_ANIMATIONS}) then {\r\n    if (vehicle _unit == _unit && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\r\n        [_unit, \"\", 2, true] call EFUNC(common,doAnimation);\r\n    };\r\n\r\n    if (_target getVariable [\"ACE_isUnconscious\", false]) then {\r\n        [_target, \"unconscious\", 2, true] call EFUNC(common,doAnimation);\r\n    } else {\r\n        [_target, \"\", 2, true] call EFUNC(common,doAnimation);  //@todo\r\n    };\r\n};\r\n\r\n// properly remove fake weapon\r\n_unit removeWeapon \"ACE_FakePrimaryWeapon\";\r\n\r\n// reselect weapon and re-enable sprint\r\n_unit selectWeapon primaryWeapon _unit;\r\n\r\n[_unit, \"forceWalk\", \"ACE_dragging\", false] call EFUNC(common,statusEffect_set);\r\n\r\n// prevent object from flipping inside buildings\r\nif (_inBuilding) then {\r\n    _target setPosASL (getPosASL _target vectorAdd [0, 0, 0.05]);\r\n};\r\n\r\n// hide mouse hint\r\n[] call EFUNC(interaction,hideMouseHint);\r\n\r\n_unit setVariable [QGVAR(isCarrying), false, true];\r\n_unit setVariable [QGVAR(carriedObject), objNull, true];\r\n\r\n// make object accesable for other units\r\n[objNull, _target, true] call EFUNC(common,claim);\r\n\r\nif !(_target isKindOf \"CAManBase\") then {\r\n    [QEGVAR(common,fixPosition), _target, _target] call CBA_fnc_targetEvent;\r\n    [QEGVAR(common,fixFloating), _target, _target] call CBA_fnc_targetEvent;\r\n};\r\n\r\n// recreate UAV crew\r\nif (_target getVariable [QGVAR(isUAV), false]) then {\r\n    createVehicleCrew _target;\r\n};\r\n"},{"name":"ace_dragging_fnc_dropObject","file":"dragging/functions/fnc_dropObject.sqf","text":"/*\r\n * Author: commy2\r\n * Drop a dragged object.\r\n *\r\n * Arguments:\r\n * 0: Unit that drags the other object <OBJECT>\r\n * 1: Dragged object to drop <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_dropObject;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\n// remove drop action\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(ReleaseActionID), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\nprivate _inBuilding = [_unit] call FUNC(isObjectOnObject);\r\n\r\nif !(_unit getVariable [\"ACE_isUnconscious\", false]) then {\r\n    // play release animation\r\n    _unit playAction \"released\";\r\n};\r\n\r\n// prevent collision damage\r\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\r\n[QEGVAR(common,fixCollision), _target, _target] call CBA_fnc_targetEvent;\r\n\r\n// release object\r\ndetach _target;\r\n\r\nif (_target isKindOf \"CAManBase\") then {\r\n    if (_target getVariable [\"ACE_isUnconscious\", false]) then {\r\n        [_target, \"unconscious\", 2, true] call EFUNC(common,doAnimation);\r\n    } else {\r\n        [_target, \"\", 2, true] call EFUNC(common,doAnimation);  //@todo \"AinjPpneMrunSnonWnonDb_release\" seems to fall back to unconsciousness anim.\r\n    };\r\n};\r\n\r\n_unit removeWeapon \"ACE_FakePrimaryWeapon\";\r\n\r\n// prevent object from flipping inside buildings\r\nif (_inBuilding) then {\r\n    _target setPosASL (getPosASL _target vectorAdd [0, 0, 0.05]);\r\n    TRACE_2(\"setPos\",getPosASL _unit,getPosASL _target);\r\n};\r\n\r\n// hide mouse hint\r\n[] call EFUNC(interaction,hideMouseHint);\r\n\r\n_unit setVariable [QGVAR(isDragging), false, true];\r\n_unit setVariable [QGVAR(draggedObject), objNull, true];\r\n\r\n// make object accesable for other units\r\n[objNull, _target, true] call EFUNC(common,claim);\r\n\r\nif !(_target isKindOf \"CAManBase\") then {\r\n    [QEGVAR(common,fixPosition), _target, _target] call CBA_fnc_targetEvent;\r\n    [QEGVAR(common,fixFloating), _target, _target] call CBA_fnc_targetEvent;\r\n};\r\n\r\nif (_unit getVariable [\"ACE_isUnconscious\", false]) then {\r\n    [_unit, \"unconscious\", 2, true] call EFUNC(common,doAnimation);\r\n};\r\n\r\n// recreate UAV crew\r\nif (_target getVariable [QGVAR(isUAV), false]) then {\r\n    createVehicleCrew _target;\r\n};\r\n"},{"name":"ace_dragging_fnc_getWeight","file":"dragging/functions/fnc_getWeight.sqf","text":"/*\r\n * Author: L-H, edited by commy2, rewritten by joko // Jonas\r\n * Returns the weight of a crate.\r\n *\r\n * Arguments:\r\n * 0: Crate to get weight of <OBJECT>\r\n *\r\n * Return Value:\r\n * Total Weight <NUMBER>\r\n *\r\n * Example:\r\n * [Crate1] call ace_dragging_fnc_getweight;\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\n\r\n// Initialize the total weight.\r\nprivate _totalWeight = 0;\r\n\r\n// Cycle through all item types with their assigned config paths.\r\n{\r\n    _x params [\"_items\", \"_getConfigCode\"];\r\n    _items params [\"_item\", \"_count\"];\r\n    // Cycle through all items and read their mass out of the config.\r\n    {\r\n        // Multiply mass with amount of items and add the mass to the total weight.\r\n        _totalWeight = _totalWeight + (getNumber ((call _getConfigCode) >> \"mass\") * (_count select _forEachIndex));\r\n    } forEach _item;\r\n    true\r\n} count [\r\n    [getMagazineCargo _object, {configFile >> \"CfgMagazines\" >> _x}],\r\n    [getBackpackCargo _object, {configFile >> \"CfgVehicles\" >> _x}],\r\n    [getItemCargo _object, {configFile >> \"CfgWeapons\" >> _x >> \"ItemInfo\"}],\r\n    [getWeaponCargo _object, {configFile >> \"CfgWeapons\" >> _x >> \"WeaponSlotsInfo\"}]\r\n];\r\n\r\n// add Weight of create to totalWeight\r\n_totalWeight = _totalWeight + (getNumber (configFile >> \"CfgVehicles\" >> typeOf _object >> \"mass\"));\r\n\r\n// Mass in Arma isn't an exact amount but rather a volume/weight value. This attempts to work around that by making it a usable value. (sort of).\r\n_totalWeight * 0.5\r\n"},{"name":"ace_dragging_fnc_handleAnimChanged","file":"dragging/functions/fnc_handleAnimChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle the animaion for a Unit for Dragging Module\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: animaion <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit, \"amovpercmstpsnonwnondnon\"] call ace_dragging_fnc_handleAnimChanged;\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_anim\"];\r\n\r\nif (_unit getVariable [QGVAR(isDragging), false]) then {\r\n\r\n    // drop dragged object when not in valid animation\r\n    if !(_anim in DRAG_ANIMATIONS) then {\r\n        private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\r\n\r\n        if (!isNull _draggedObject) then {\r\n            [_unit, _draggedObject] call FUNC(dropObject);\r\n        };\r\n    };\r\n};\r\n\r\nif (_unit getVariable [QGVAR(isCarrying), false]) then {\r\n\r\n    // drop carried object when not standing; also some exceptions when picking up crate\r\n    if (stance _unit != \"STAND\" && {_anim != \"amovpercmstpsnonwnondnon\"}) then {\r\n        private _carriedObject = _unit getVariable [QGVAR(carriedObject), objNull];\r\n\r\n        if (!isNull _carriedObject) then {\r\n            [_unit, _carriedObject] call FUNC(dropObject_carry);\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_dragging_fnc_handleKilled","file":"dragging/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: commy2\r\n * Handle death of the dragger\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit] call ace_dragging_fnc_handleKilled;\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nif (_unit getVariable [QGVAR(isDragging), false]) then {\r\n    private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\r\n\r\n    [_unit, _draggedObject] call FUNC(dropObject);\r\n};\r\n\r\nif (_unit getVariable [QGVAR(isCarrying), false]) then {\r\n    private _carriedObject = _unit getVariable [QGVAR(carriedObject), objNull];\r\n\r\n    [_unit, _carriedObject] call FUNC(dropObject_carry);\r\n};\r\n"},{"name":"ace_dragging_fnc_handlePlayerChanged","file":"dragging/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle player changes.\r\n *\r\n * Arguments:\r\n * 0: New Player Unit <OBJECT>\r\n * 1: Old Player Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_newPlayer, _oldPlayer] call ace_dragging_fnc_handlePlayerChanged;\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_newPlayer\", \"_oldPlayer\"];\r\nTRACE_2(\"params\",_newPlayer,_oldPlayer);\r\n\r\n{\r\n    if (_x getVariable [QGVAR(isDragging), false]) then {\r\n        [_x, _x getVariable [QGVAR(draggedObject), objNull]] call FUNC(dropObject);\r\n    };\r\n\r\n    if (_x getVariable [QGVAR(isCarrying), false]) then {\r\n        [_x, _x getVariable [QGVAR(carriedObject), objNull]] call FUNC(dropObject_carry);\r\n    };\r\n} forEach [_newPlayer, _oldPlayer];\r\n"},{"name":"ace_dragging_fnc_handlePlayerWeaponChanged","file":"dragging/functions/fnc_handlePlayerWeaponChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle the Weapon Changed Event\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit, \"gun\"] call ace_dragging_fnc_handlePlayerWeaponChanged;\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\nTRACE_2(\"params\",_unit,_weapon);\r\n\r\nif (_unit getVariable [QGVAR(isDragging), false]) then {\r\n\r\n    // drop dragged object when selecting a non-primary weapon\r\n    if (_weapon != primaryWeapon _unit) then {\r\n        private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\r\n\r\n        [_unit, _draggedObject] call FUNC(dropObject);\r\n    };\r\n\r\n};\r\n\r\nif (_unit getVariable [QGVAR(isCarrying), false]) then {\r\n\r\n    private _carriedObject = _unit getVariable [QGVAR(carriedObject), objNull];\r\n\r\n    if (_carriedObject isKindOf \"CAManBase\") then {\r\n\r\n        if (_weapon != primaryWeapon _unit) then {\r\n            [_unit, _carriedObject] call FUNC(dropObject_carry);\r\n        };\r\n\r\n    } else {\r\n\r\n        // drop carried object when selecting any weapon\r\n        if (_weapon != \"\") then {\r\n            [_unit, _carriedObject] call FUNC(dropObject_carry);\r\n        };\r\n\r\n    };\r\n};\r\n"},{"name":"ace_dragging_fnc_handleScrollWheel","file":"dragging/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: L-H, commy2\r\n * Handles raising and lowering the dragged weapon to be able to place it on top of objects.\r\n *\r\n * Arguments:\r\n * 0: Scroll amount <NUMBER>\r\n *\r\n * Return Value:\r\n * Handled or not. <BOOL>\r\n *\r\n * Example:\r\n * [0.1] call ace_dragging_fnc_handleScrollWheel;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_scrollAmount\"];\r\n\r\nprivate _unit = ACE_player;\r\n\r\n// EH is always assigned. Exit and don't overwrite input if not carrying\r\nif !(_unit getVariable [QGVAR(isCarrying), false]) exitWith {false};\r\n\r\n// move carried item 15 cm per scroll interval\r\n_scrollAmount = _scrollAmount * 0.15;\r\n\r\nprivate _carriedItem = _unit getVariable [QGVAR(carriedObject), objNull];\r\n\r\n//disabled for persons\r\nif (_carriedItem isKindOf \"CAManBase\") exitWith {false};\r\n\r\nprivate _position = getPosATL _carriedItem;\r\nprivate _maxHeight = (_unit modelToWorldVisual [0,0,0]) select 2;\r\n\r\n_position set [2, ((_position select 2) + _scrollAmount min (_maxHeight + 1.5)) max _maxHeight];\r\n\r\n// move up/down object and reattach at current position\r\ndetach _carriedItem;\r\n_carriedItem setPosATL _position;\r\n_carriedItem attachTo [_unit];\r\n\r\n//reset the carry direction\r\nprivate _direction = _carriedItem getVariable [QGVAR(carryDirection), 0];\r\n[QEGVAR(common,setDir), [_carriedItem, _direction], _carriedItem] call CBA_fnc_targetEvent;\r\n\r\ntrue\r\n"},{"name":"ace_dragging_fnc_handleUnconscious","file":"dragging/functions/fnc_handleUnconscious.sqf","text":"/*\r\n * Author: commy2\r\n * Handle the Unconscious of a Unit while Dragging\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit] call ace_dragging_fnc_handleUnconscious;\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _player = ACE_player;\r\n\r\nif (_player getVariable [QGVAR(isDragging), false]) then {\r\n\r\n    private _draggedObject = _player getVariable [QGVAR(draggedObject), objNull];\r\n\r\n    // handle falling unconscious\r\n    if (_unit == _player) then {\r\n        [_unit, _draggedObject] call FUNC(dropObject);\r\n    };\r\n\r\n    // handle waking up dragged unit\r\n    //if (_unit == _draggedObject) then {\r\n        // [_player, _draggedObject] call FUNC(dropObject);\r\n    //};\r\n\r\n};\r\n\r\nif (_player getVariable [QGVAR(isCarrying), false]) then {\r\n\r\n    private _carriedObject = _player getVariable [QGVAR(carriedObject), objNull];\r\n\r\n    // handle falling unconscious\r\n    if (_unit == _player) then {\r\n        [_unit, _carriedObject] call FUNC(dropObject_carry);\r\n    };\r\n\r\n    // handle waking up dragged unit\r\n    //if (_unit == _carriedObject) then {\r\n        // [_player, _carriedObject] call FUNC(dropObject_carry);\r\n    //};\r\n\r\n};\r\n"},{"name":"ace_dragging_fnc_initObject","file":"dragging/functions/fnc_initObject.sqf","text":"/*\r\n * Author: commy2\r\n * Initialize variables for drag or carryable objects. Called from init EH.\r\n *\r\n * Arguments:\r\n * 0: Any object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [box] call ace_dragging_fnc_initObject;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _object;\r\n\r\nif (getNumber (_config >> QGVAR(canDrag)) == 1) then {\r\n    private _position = getArray (_config >> QGVAR(dragPosition));\r\n    private _direction = getNumber (_config >> QGVAR(dragDirection));\r\n\r\n    [_object, true, _position, _direction] call FUNC(setDraggable);\r\n};\r\n\r\nif (getNumber (_config >> QGVAR(canCarry)) == 1) then {\r\n    private _position = getArray (_config >> QGVAR(carryPosition));\r\n    private _direction = getNumber (_config >> QGVAR(carryDirection));\r\n\r\n    [_object, true, _position, _direction] call FUNC(setCarryable);\r\n};\r\n"},{"name":"ace_dragging_fnc_initPerson","file":"dragging/functions/fnc_initPerson.sqf","text":"/*\r\n * Author: commy2\r\n * Initialize variables for drag or carryable persons. Called from init EH.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_dragging_fnc_initPerson;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n[_unit, true, [0,1.1,0.092], 180] call FUNC(setDraggable);\r\n[_unit, true, [0.4,-0.1,-1.25], 195] call FUNC(setCarryable); // hard-coded selection: \"LeftShoulder\"\r\n"},{"name":"ace_dragging_fnc_isObjectOnObject","file":"dragging/functions/fnc_isObjectOnObject.sqf","text":"/*\r\n * Author: commy2\r\n * Check if Object is Overlapping\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n *\r\n * Return Value:\r\n * <BOOL>\r\n *\r\n * Example;\r\n * [player] call ace_dragging_fnc_isObjectOnObject\r\n *\r\n * Public: No\r\n */\r\nparams [\"_object\"];\r\n\r\n(getPosATL _object select 2) - (getPos _object select 2) > 1E-5\r\n"},{"name":"ace_dragging_fnc_setCarryable","file":"dragging/functions/fnc_setCarryable.sqf","text":"/*\r\n * Author: commy2\r\n * Enable the object to be carried.\r\n *\r\n * Arguments:\r\n * 0: Any object <OBJECT>\r\n * 1: true to enable carrying, false to disable <BOOL>\r\n * 2: Position offset for attachTo command <ARRAY> (default: [0,1,1])\r\n * 3: Direction in degree to rotate the object after attachTo <NUMBER> (default: 0)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [object, true, [0,1,1], 0] call ace_dragging_fnc_setCarryable;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_enableCarry\", \"_position\", \"_direction\"];\r\n\r\nif (isNil \"_position\") then {\r\n    _position = _object getVariable [QGVAR(carryPosition), [0,1,1]];\r\n};\r\n\r\nif (isNil \"_direction\") then {\r\n    _direction = _object getVariable [QGVAR(carryDirection), 0];\r\n};\r\n\r\n// update variables\r\n_object setVariable [QGVAR(canCarry), _enableCarry];\r\n_object setVariable [QGVAR(carryPosition), _position];\r\n_object setVariable [QGVAR(carryDirection), _direction];\r\n\r\n// add action to class if it is not already present\r\nprivate _type = typeOf _object;\r\nprivate _initializedClasses = GETGVAR(initializedClasses_carry,[]);\r\n\r\n// do nothing if the class is already initialized\r\nif (_type in _initializedClasses) exitWith {};\r\n\r\n_initializedClasses pushBack _type;\r\nGVAR(initializedClasses_carry) = _initializedClasses;\r\n\r\nprivate _icon = [QUOTE(PATHTOF(UI\\icons\\box_carry.paa)), QUOTE(PATHTOF(UI\\icons\\person_carry.paa))] select (_object isKindOf \"Man\");\r\n\r\nprivate _carryAction = [QGVAR(carry), localize LSTRING(Carry), _icon, {[_player, _target] call FUNC(startCarry)}, {[_player, _target] call FUNC(canCarry)}] call EFUNC(interact_menu,createAction);\r\nprivate _dropAction = [QGVAR(drop_carry), localize LSTRING(Drop), \"\", {[_player, _target] call FUNC(dropObject_carry)}, {[_player, _target] call FUNC(canDrop_carry)}] call EFUNC(interact_menu,createAction);\r\n\r\n[_type, 0, [\"ACE_MainActions\"], _carryAction] call EFUNC(interact_menu,addActionToClass);\r\n[_type, 0, [], _dropAction] call EFUNC(interact_menu,addActionToClass);\r\n"},{"name":"ace_dragging_fnc_setDraggable","file":"dragging/functions/fnc_setDraggable.sqf","text":"/*\r\n * Author: commy2\r\n * Enable the object to be dragged.\r\n *\r\n * Arguments:\r\n * 0: Any object <OBJECT>\r\n * 1: true to enable dragging, false to disable <BOOL>\r\n * 2: Position offset for attachTo command (Array, optinal; default: [0,0,0])\r\n * 3: Direction in degree to rotate the object after attachTo (Number, optional; default: 0)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [object, true, [0,0,0], 0] call ace_dragging_fnc_setDraggable;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING(\"_player\", \"_target\");\r\nparams [\"_object\", \"_enableDrag\", \"_position\", \"_direction\"];\r\n\r\nif (isNil \"_position\") then {\r\n    _position = _object getVariable [QGVAR(dragPosition), [0,0,0]];\r\n};\r\n\r\nif (isNil \"_direction\") then {\r\n    _direction = _object getVariable [QGVAR(dragDirection), 0];\r\n};\r\n\r\n// update variables\r\n_object setVariable [QGVAR(canDrag), _enableDrag];\r\n_object setVariable [QGVAR(dragPosition), _position];\r\n_object setVariable [QGVAR(dragDirection), _direction];\r\n\r\n// add action to class if it is not already present\r\nprivate _type = typeOf _object;\r\nprivate _initializedClasses = GETGVAR(initializedClasses,[]);\r\n\r\n// do nothing if the class is already initialized\r\nif (_type in _initializedClasses) exitWith {};\r\n\r\n_initializedClasses pushBack _type;\r\nGVAR(initializedClasses) = _initializedClasses;\r\n\r\nprivate _icon = [QUOTE(PATHTOF(UI\\icons\\box_drag.paa)), QUOTE(PATHTOF(UI\\icons\\person_drag.paa))] select (_object isKindOf \"Man\");\r\n\r\nprivate _dragAction = [QGVAR(drag), localize LSTRING(Drag), _icon, {[_player, _target] call FUNC(startDrag)}, {[_player, _target] call FUNC(canDrag)}] call EFUNC(interact_menu,createAction);\r\nprivate _dropAction = [QGVAR(drop), localize LSTRING(Drop), \"\", {[_player, _target] call FUNC(dropObject)}, {[_player, _target] call FUNC(canDrop)}] call EFUNC(interact_menu,createAction);\r\n\r\n[_type, 0, [\"ACE_MainActions\"], _dragAction] call EFUNC(interact_menu,addActionToClass);\r\n[_type, 0, [], _dropAction] call EFUNC(interact_menu,addActionToClass);\r\n"},{"name":"ace_dragging_fnc_startCarry","file":"dragging/functions/fnc_startCarry.sqf","text":"/*\r\n * Author: commy2\r\n * Start the carrying process.\r\n *\r\n * Arguments:\r\n * 0: Unit that should do the carrying <OBJECT>\r\n * 1: Object to carry <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_startCarry;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\n// check weight\r\nprivate _weight = [_target] call FUNC(getWeight);\r\n\r\nif (_weight > missionNamespace getVariable [\"ACE_maxWeightCarry\", 1E11]) exitWith {\r\n    [localize LSTRING(UnableToDrag)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\nprivate _timer = CBA_missionTime + 5;\r\n\r\n// handle objects vs persons\r\nif (_target isKindOf \"CAManBase\") then {\r\n\r\n    // add a primary weapon if the unit has none.\r\n    if (primaryWeapon _unit == \"\") then {\r\n        _unit addWeapon \"ACE_FakePrimaryWeapon\";\r\n    };\r\n\r\n    // select primary, otherwise the drag animation actions don't work.\r\n    _unit selectWeapon primaryWeapon _unit;\r\n\r\n    // move a bit closer and adjust direction when trying to pick up a person\r\n    _target setDir (getDir _unit + 180);\r\n    _target setPosASL (getPosASL _unit vectorAdd (vectorDir _unit));\r\n\r\n    [_unit, \"AcinPknlMstpSnonWnonDnon_AcinPercMrunSnonWnonDnon\", 2, true] call EFUNC(common,doAnimation);\r\n    [_target, \"AinjPfalMstpSnonWrflDnon_carried_Up\", 2, true] call EFUNC(common,doAnimation);\r\n\r\n    _timer = CBA_missionTime + 15;\r\n\r\n} else {\r\n\r\n    // select no weapon and stop sprinting\r\n    _unit action [\"SwitchWeapon\", _unit, _unit, 99];\r\n    [_unit, \"AmovPercMstpSnonWnonDnon\", 0] call EFUNC(common,doAnimation);\r\n\r\n    [_unit, \"forceWalk\", \"ACE_dragging\", true] call EFUNC(common,statusEffect_set);\r\n\r\n};\r\n\r\n// prevent multiple players from accessing the same object\r\n[_unit, _target, true] call EFUNC(common,claim);\r\n\r\n\r\n// prevents draging and carrying at the same time\r\n_unit setVariable [QGVAR(isCarrying), true, true];\r\n\r\n// required for aborting animation\r\n_unit setVariable [QGVAR(carriedObject), _target, true];\r\n\r\n[FUNC(startCarryPFH), 0.2, [_unit, _target, _timer]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_dragging_fnc_startCarryPFH","file":"dragging/functions/fnc_startCarryPFH.sqf","text":"/*\r\n * Author: commy2\r\n * Carry PFH\r\n *\r\n * Arguments:\r\n * 0: ARGS <ARRAY>\r\n *  0: Unit <OBJECT>\r\n *  1: Target <OBJECT>\r\n *  2: Timeout <NUMBER>\r\n * 1: PFEH Id <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[player, target, 100], 20] call ace_dragging_fnc_startCarryPFH;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#ifdef DEBUG_ENABLED_DRAGGING\r\n    systemChat format [\"%1 startCarryPFH running\", CBA_missionTime];\r\n#endif\r\n\r\nparams [\"_args\", \"_idPFH\"];\r\n_args params [\"_unit\", \"_target\", \"_timeOut\"];\r\n\r\n// handle aborting carry\r\nif !(_unit getVariable [QGVAR(isCarrying), false]) exitWith {\r\n    TRACE_4(\"carry false\",_unit,_target,_timeOut,CBA_missionTime);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// same as dragObjectPFH, checks if object is deleted or dead OR (target moved away from carrier (weapon disasembled))\r\nif (!alive _target || {_unit distance _target > 10}) then {\r\n    TRACE_4(\"dead/distance\",_unit,_target,_timeOut,CBA_missionTime);\r\n    [_unit, _target] call FUNC(dropObject);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// handle persons vs objects\r\nif (_target isKindOf \"CAManBase\") then {\r\n    if (CBA_missionTime > _timeOut) exitWith {\r\n        TRACE_4(\"Start carry person\",_unit,_target,_timeOut,CBA_missionTime);\r\n        [_unit, _target] call FUNC(carryObject);\r\n\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n} else {\r\n    if (CBA_missionTime > _timeOut) exitWith {\r\n        TRACE_4(\"timeout\",_unit,_target,_timeOut,CBA_missionTime);\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n\r\n        // drop if in timeout\r\n        private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\r\n        [_unit, _draggedObject] call FUNC(dropObject);\r\n    };\r\n\r\n    // wait for the unit to stand up\r\n    if (stance _unit == \"STAND\") exitWith {\r\n        TRACE_4(\"Start carry object\",_unit,_target,_timeOut,CBA_missionTime);\r\n        [_unit, _target] call FUNC(carryObject);\r\n\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n};\r\n"},{"name":"ace_dragging_fnc_startDrag","file":"dragging/functions/fnc_startDrag.sqf","text":"/*\r\n * Author: commy2\r\n * Start the dragging process.\r\n *\r\n * Arguments:\r\n * 0: Unit that should do the dragging <OBJECT>\r\n * 1: Object to drag <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_dragging_fnc_startDrag;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\n// check weight\r\nprivate _weight = [_target] call FUNC(getWeight);\r\n\r\nif (_weight > missionNamespace getVariable [\"ACE_maxWeightDrag\", 1E11]) exitWith {\r\n    [localize LSTRING(UnableToDrag)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n// add a primary weapon if the unit has none.\r\n// @todo prevent opening inventory when equipped with a fake weapon\r\nif (primaryWeapon _unit == \"\") then {\r\n    _unit addWeapon \"ACE_FakePrimaryWeapon\";\r\n};\r\n\r\n// select primary, otherwise the drag animation actions don't work.\r\n_unit selectWeapon primaryWeapon _unit;\r\n\r\n// prevent multiple players from accessing the same object\r\n[_unit, _target, true] call EFUNC(common,claim);\r\n\r\n// can't play action that depends on weapon if it was added the same frame\r\n[{_this playActionNow \"grabDrag\";}, _unit] call CBA_fnc_execNextFrame;\r\n\r\n// move a bit closer and adjust direction when trying to pick up a person\r\nif (_target isKindOf \"CAManBase\") then {\r\n    _target setDir (getDir _unit + 180);\r\n    _target setPosASL (getPosASL _unit vectorAdd (vectorDir _unit vectorMultiply 1.5));\r\n\r\n    [_target, \"AinjPpneMrunSnonWnonDb_grab\", 2, true] call EFUNC(common,doAnimation);\r\n};\r\n\r\n// prevents draging and carrying at the same time\r\n_unit setVariable [QGVAR(isDragging), true, true];\r\n\r\n[FUNC(startDragPFH), 0.2, [_unit, _target, CBA_missionTime + 5]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_dragging_fnc_startDragPFH","file":"dragging/functions/fnc_startDragPFH.sqf","text":"/*\r\n * Author: commy2\r\n * Drag PFH\r\n *\r\n * Arguments:\r\n * 0: ARGS <ARRAY>\r\n *  0: Unit <OBJECT>\r\n *  1: Target <OBJECT>\r\n *  2: Timeout <NUMBER>\r\n * 1: PFEH Id <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[player, target, 100], 20] call ace_dragging_fnc_startDragPFH;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#ifdef DEBUG_ENABLED_DRAGGING\r\n    systemChat format [\"%1 startDragPFH running\", CBA_missionTime];\r\n#endif\r\n\r\nparams [\"_args\", \"_idPFH\"];\r\n_args params [\"_unit\", \"_target\", \"_timeOut\"];\r\n\r\n// handle aborting drag\r\nif !(_unit getVariable [QGVAR(isDragging), false]) exitWith {\r\n    TRACE_4(\"drag false\",_unit,_target,_timeOut,CBA_missionTime);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// same as dragObjectPFH, checks if object is deleted or dead OR (target moved away from carrier (weapon disasembled))\r\nif (!alive _target || {_unit distance _target > 10}) then {\r\n    TRACE_4(\"dead/distance\",_unit,_target,_timeOut,CBA_missionTime);\r\n    [_unit, _target] call FUNC(dropObject);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// timeout. Do nothing. Quit. CBA_missionTime, because anim length is linked to ingame time.\r\nif (CBA_missionTime > _timeOut) exitWith {\r\n    TRACE_4(\"timeout\",_unit,_target,_timeOut,CBA_missionTime);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n\r\n    // drop if in timeout\r\n    private _draggedObject = _unit getVariable [QGVAR(draggedObject), objNull];\r\n    [_unit, _draggedObject] call FUNC(dropObject);\r\n};\r\n\r\n// unit is ready to start dragging\r\nif (animationState _unit in DRAG_ANIMATIONS) exitWith {\r\n    TRACE_4(\"Start Dragging\",_unit,_target,_timeOut,CBA_missionTime);\r\n    [_unit, _target] call FUNC(dragObject);\r\n\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n"}],"explosives":[{"name":"ace_explosives_fnc_addCellphoneIED","file":"explosives/functions/fnc_addCellphoneIED.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Adds an IED to the cellphone list\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Explosive <OBJECT>\r\n * 2: Magazine classname <STRING>\r\n * 3: Extra variables <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * Handled by PlaceExplosive.\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_explosive\", \"_magazineClass\", \"_extra\"];\r\nTRACE_4(\"params\",_unit,_explosive,_magazineClass,_extra);\r\n\r\nprivate[\"_config\", \"_detonators\", \"_hasRequired\", \"_requiredItems\", \"_code\", \"_count\", \"_codeSet\"];\r\n\r\n// Config is the last item in the list of passed in items.\r\n_config = (_this select 3) select (count (_this select 3) - 1);\r\n\r\n_requiredItems = getArray(_config >> \"requires\");\r\n_hasRequired = true;\r\n_detonators = [_unit] call FUNC(getDetonators);\r\n{\r\n    if !(_x in _detonators) exitWith{\r\n        _hasRequired = false;\r\n    };\r\n} count _requiredItems;\r\n\r\n_codeSet = false;\r\nwhile {!_codeSet} do {\r\n    _code = str(round (random 9999));\r\n    _count = 4 - count (toArray _code);\r\n    while {_count > 0} do {\r\n        _code = \"0\" + _code;\r\n        _count = _count - 1;\r\n    };\r\n    _codeSet = (count ([_code] call FUNC(getSpeedDialExplosive))) == 0;\r\n};\r\nif (isNil QGVAR(CellphoneIEDs)) then {\r\n    GVAR(CellphoneIEDs) = [];\r\n};\r\n_count = GVAR(CellphoneIEDs) pushBack [_explosive,_code,GetNumber(ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ACE_Triggers\" >> \"Cellphone\" >> \"FuseTime\")];\r\n_count = _count + 1;\r\npublicVariable QGVAR(CellphoneIEDs);\r\n\r\n//display IED number message:\r\n[format [\"IED %1 code: %2\", _count,_code]] call EFUNC(common,displayTextStructured);\r\n\r\nif !(_hasRequired) exitWith {};\r\n[format [\"IED %1\", _count],_code] call FUNC(addToSpeedDial);\r\n"},{"name":"ace_explosives_fnc_addClacker","file":"explosives/functions/fnc_addClacker.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Adds an explosive as a clacker item to the passed unit if the unit has the required item.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Explosive <OBJECT>\r\n * 2: Magazine classname <STRING>\r\n * 3: Extra variables <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, _explosive, \"SatchelCharge_Remote_Mag\", [ConfigFile >> \"ACE_Triggers\" >> \"Command\"]] call ACE_Explosives_fnc_addClacker;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_explosive\", \"_magazineClass\"];\r\nTRACE_3(\"params\",_unit,_explosive,_magazineClass);\r\n\r\nprivate [\"_clacker\", \"_config\", \"_requiredItems\", \"_hasRequired\", \"_detonators\"];\r\n\r\n// Config is the last item in the list of passed in items.\r\n_config = (_this select 3) select (count (_this select 3) - 1);\r\n\r\n_requiredItems = getArray(_config >> \"requires\");\r\n_hasRequired = true;\r\n_detonators = [_unit] call FUNC(getDetonators);\r\n{\r\n    if !(_x in _detonators) exitWith{\r\n        _hasRequired = false;\r\n    };\r\n} count _requiredItems;\r\n\r\nif !(_hasRequired) exitWith {};\r\n_config = ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ACE_Triggers\" >> configName _config;\r\n\r\n_clacker = _unit getVariable [QGVAR(Clackers), []];\r\nGVAR(PlacedCount) = GVAR(PlacedCount) + 1;\r\n\r\n_clacker pushBack [_explosive, getNumber(_config >> \"FuseTime\"), format [localize LSTRING(DetonateCode),\r\n    GVAR(PlacedCount)], _magazineClass, configName ((_this select 3) select (count (_this select 3) - 1))];\r\n\r\n_unit setVariable [QGVAR(Clackers), _clacker, true];\r\n\r\n//display clacker code message:\r\n[format [localize LSTRING(DetonateCode), GVAR(PlacedCount)]] call EFUNC(common,displayTextStructured);\r\n"},{"name":"ace_explosives_fnc_addDetonateActions","file":"explosives/functions/fnc_addDetonateActions.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Opens the UI for explosive detonation selection\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Trigger classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"ACE_M26_Clacker\"] call ACE_Explosives_fnc_addDetonateActions;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_detonator\"];\r\nTRACE_2(\"params\",_unit,_detonator);\r\n\r\nprivate [\"_result\", \"_item\", \"_children\", \"_range\", \"_required\",\"_explosivesList\"];\r\n\r\n_range = getNumber (ConfigFile >> \"CfgWeapons\" >> _detonator >> QGVAR(Range));\r\n\r\n_result = [_unit] call FUNC(getPlacedExplosives);\r\n_children = [];\r\n_explosivesList = [];\r\n{\r\n    if (!isNull(_x select 0)) then {\r\n        _required = getArray (ConfigFile >> \"ACE_Triggers\" >> (_x select 4) >> \"requires\");\r\n        if (_detonator in _required) then {\r\n            _item = ConfigFile >> \"CfgMagazines\" >> (_x select 3);\r\n\r\n            _explosivesList pushBack _x;\r\n\r\n            _children pushBack\r\n                [\r\n                    [\r\n                        format [\"Explosive_%1\", _forEachIndex],\r\n                        _x select 2,\r\n                        getText(_item >> \"picture\"),\r\n                        {(_this select 2) call FUNC(detonateExplosive);},\r\n                        {true},\r\n                        {},\r\n                        [_unit,_range,_x]\r\n                    ] call EFUNC(interact_menu,createAction),\r\n                    [],\r\n                    _unit\r\n                ];\r\n        };\r\n    };\r\n} forEach _result;\r\nif (_detonator != \"ACE_DeadManSwitch\") then {\r\n    // Add action to detonate all explosives tied to the detonator\r\n    if (count _explosivesList > 0) then {\r\n        _children pushBack [\r\n        [\r\n            \"Explosive_All\",\r\n            localize LSTRING(DetonateAll),\r\n            getText(ConfigFile >> \"CfgWeapons\" >> _detonator >> \"picture\"),\r\n            {(_this select 2) call FUNC(detonateExplosiveAll);},\r\n            {true},\r\n            {},\r\n            [_unit,_range,_explosivesList]\r\n            ] call EFUNC(interact_menu,createAction),\r\n            [],\r\n            _unit\r\n        ];\r\n    };\r\n} else {\r\n    //Add action to detonate all explosives (including the inventory explosive):\r\n    _children pushBack [\r\n    [\r\n    \"Explosive_All_Deadman\",\r\n    localize LSTRING(DetonateAll),\r\n    getText(ConfigFile >> \"CfgWeapons\" >> _detonator >> \"picture\"),\r\n    {[_player] call FUNC(onIncapacitated)},\r\n    {true}\r\n    ] call EFUNC(interact_menu,createAction),\r\n    [],\r\n    _unit\r\n    ];\r\n\r\n    //Adds actions for the explosives you can connect to the deadman switch.\r\n    private _connectedInventoryExplosive = _unit getVariable [QGVAR(deadmanInvExplosive), \"\"];\r\n    if ((_connectedInventoryExplosive != \"\") && {!(_connectedInventoryExplosive in (magazines _unit))}) then {\r\n        TRACE_1(\"set, but missing in inventory\",_connectedInventoryExplosive);\r\n        _unit setVariable [QGVAR(deadmanInvExplosive), \"\", true];\r\n    };\r\n\r\n    _connectedInventoryExplosive = _unit getVariable [QGVAR(deadmanInvExplosive), \"\"];\r\n    if (_connectedInventoryExplosive != \"\") then {\r\n        //Add the disconect action\r\n        private _magConfig = configFile >> \"CfgMagazines\" >> _connectedInventoryExplosive;\r\n        private _name = if ((getText (_magConfig >> \"displayNameShort\")) != \"\") then {\r\n            getText (_magConfig >> \"displayNameShort\")\r\n        } else {\r\n            getText(_magConfig >> \"displayName\")\r\n        };\r\n        private _picture = getText (_magConfig >> \"picture\");\r\n\r\n        _children pushBack [\r\n        ([\r\n        \"Deadman_disconnect\",\r\n        format [\"%1 %2\", localize \"str_disp_disconnect\", _name],\r\n        _picture,\r\n        {\r\n            params [\"_player\"];\r\n            TRACE_1(\"clear\",_player);\r\n            _player setVariable [QGVAR(deadmanInvExplosive), \"\", true];\r\n        },\r\n        {true}\r\n        ] call EFUNC(interact_menu,createAction)), [], _unit];\r\n\r\n    } else {\r\n        //Add all magazines that would work with the deadman switch\r\n        private _procressedMags = [];\r\n        {\r\n            private _mag = _x;\r\n            if (!(_mag in _procressedMags)) then {\r\n                _procressedMags pushBack _x;\r\n                private _magConfig = configFile >> \"CfgMagazines\" >> _mag;\r\n                private _supportedTriggers = getArray (_magConfig >> \"ACE_Triggers\" >> \"SupportedTriggers\");\r\n                if (({_x == \"DeadmanSwitch\"} count _supportedTriggers) == 1) then { //case insensitive search\r\n                    private _name = if ((getText (_magConfig >> \"displayNameShort\")) != \"\") then {\r\n                        getText (_magConfig >> \"displayNameShort\")\r\n                    } else {\r\n                        getText(_magConfig >> \"displayName\")\r\n                    };\r\n                    private _picture = getText (_magConfig >> \"picture\");\r\n\r\n                    _children pushBack [\r\n                    ([\r\n                    format [\"Deadman_exp_%1\", _mag],\r\n                    format [localize LSTRING(connectInventoryExplosiveToDeadman), _name],\r\n                    _picture,\r\n                    {\r\n                        params [\"_player\", \"\", \"_mag\"];\r\n                        TRACE_2(\"set new\",_player,_mag);\r\n                        _player setVariable [QGVAR(deadmanInvExplosive), _mag, true];\r\n                    },\r\n                    {(_this select 2) in (magazines _player)},\r\n                    {},\r\n                    (_mag)\r\n                    ] call EFUNC(interact_menu,createAction)), [], _unit];\r\n                };\r\n            };\r\n        } forEach (magazines _unit);\r\n    };\r\n};\r\n\r\n_children\r\n"},{"name":"ace_explosives_fnc_addExplosiveActions","file":"explosives/functions/fnc_addExplosiveActions.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet and CAA-Picard\r\n * Adds sub actions for all explosive magazines (from insertChildren)\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Actions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nprivate [\"_mags\", \"_item\", \"_index\", \"_children\", \"_itemCount\", \"_list\"];\r\n\r\n_mags = magazines _unit;\r\n_list = [];\r\n_itemCount = [];\r\n{\r\n    _item = ConfigFile >> \"CfgMagazines\" >> _x;\r\n    if (getNumber(_item >> QGVAR(Placeable)) == 1) then {\r\n        _index = _list find _item;\r\n        if (_index != -1) then {\r\n            _itemCount set [_index, (_itemCount select _index) + 1];\r\n        } else {\r\n            _list pushBack _item;\r\n            _itemCount pushBack 1;\r\n        };\r\n    };\r\n} forEach _mags;\r\n\r\n_children = [];\r\n\r\n{\r\n    private \"_name\";\r\n    _name = if(isText(_x >> \"displayNameShort\") && {getText(_x >> \"displayNameShort\") != \"\"}) then\r\n        {getText (_x >> \"displayNameShort\")}else{getText(_x >> \"displayName\")};\r\n    _children pushBack\r\n        [\r\n            [\r\n                format [\"Explosive_%1\", _forEachIndex],\r\n                format [_name + \" (%1)\", _itemCount select _forEachIndex],\r\n                getText(_x >> \"picture\"),\r\n                {[{_this call FUNC(setupExplosive)}, _this] call CBA_fnc_execNextFrame},\r\n                {true},\r\n                {},\r\n                (configName _x)\r\n            ] call EFUNC(interact_menu,createAction),\r\n            [],\r\n            _unit\r\n        ];\r\n} forEach _list;\r\n\r\n_children\r\n"},{"name":"ace_explosives_fnc_addToSpeedDial","file":"explosives/functions/fnc_addToSpeedDial.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Sets the speed dial for the UI.\r\n *\r\n * Arguments:\r\n * 0: Name of speed dial <STRING>\r\n * 1: Code to add to speed dial <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"My Speed Dial\",\"2131\"] call ACE_explosives_fnc_addToSpeedDial;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_name\", \"_code\"];\r\nTRACE_2(\"params\",_name,_code);\r\n\r\nprivate [\"_speedDial\", \"_found\"];\r\n\r\n_speedDial = ace_player getVariable [QGVAR(SpeedDial), []];\r\n_found = false;\r\n\r\nif ((_code) == \"\") exitWith {\r\n    [_name] call FUNC(removeFromSpeedDial);\r\n};\r\n{\r\n    if ((_x select 0) == _name) exitWith {\r\n        _speedDial set [_forEachIndex, _this];\r\n        _found = true;\r\n    };\r\n} forEach _speedDial;\r\nif (!_found) then {\r\n    _speedDial pushBack _this;\r\n};\r\n\r\nace_player setVariable [QGVAR(SpeedDial), _speedDial];\r\n"},{"name":"ace_explosives_fnc_addTransmitterActions","file":"explosives/functions/fnc_addTransmitterActions.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Opens the UI for selecting the transmitter\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player] call ACE_Explosives_fnc_addTransmitterActions;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nprivate [\"_children\", \"_config\", \"_detonators\"];\r\n\r\n_detonators = [_unit] call FUNC(getDetonators);\r\n_children = [];\r\n{\r\n    _config = ConfigFile >> \"CfgWeapons\" >> _x;\r\n    _children pushBack\r\n        [\r\n            [\r\n                format [\"Trigger_%1\", _forEachIndex],\r\n                getText(_config >> \"displayName\"),\r\n                getText(_config >> \"picture\"),\r\n                {},\r\n                {true},\r\n                {(_this select 2) call FUNC(addDetonateActions);},\r\n                [_unit,_x]\r\n            ] call EFUNC(interact_menu,createAction),\r\n            [],\r\n            _unit\r\n        ];\r\n} forEach _detonators;\r\n\r\n_children\r\n"},{"name":"ace_explosives_fnc_addTriggerActions","file":"explosives/functions/fnc_addTriggerActions.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Opens the UI for explosive trigger selection\r\n *\r\n * Arguments:\r\n * 0: Explosive Magazine <STRING>\r\n * 1: Explosive <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [lbData [8866, lbCurSel 8866], _explosive] call ACE_Explosives_fnc_addTriggerActions;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_magazine\", \"_explosive\"];\r\nTRACE_2(\"params\",_magazine,_explosive);\r\n\r\nprivate [\"_hasRequiredItems\",\"_triggerTypes\", \"_children\", \"_detonators\", \"_required\", \"_magTriggers\", \"_isAttached\"];\r\n\r\n_isAttached = !isNull (attachedTo _explosive);\r\n_detonators = [ACE_player] call FUNC(getDetonators);\r\n_triggerTypes = [_magazine] call FUNC(triggerType);\r\n_magTriggers = ConfigFile >> \"CfgMagazines\" >> _magazine >> \"ACE_Triggers\";\r\n_children = [];\r\n{\r\n    _required = getArray (_x >> \"requires\");\r\n    _hasRequiredItems = true;\r\n    {\r\n        if !(_x in _detonators) exitWith {\r\n            _hasRequiredItems = false;\r\n        };\r\n    } count _required;\r\n    if (_hasRequiredItems && {(!_isAttached) || {(getNumber (_x >> \"isAttachable\")) == 1}}) then {\r\n        _children pushBack\r\n            [\r\n                [\r\n                    format [\"Trigger_%1\", _forEachIndex],\r\n                    if(isText(_magTriggers >> configName _x >> \"displayName\"))then\r\n                        {getText(_magTriggers >> configName _x >> \"displayName\")}\r\n                        else{getText(_x >> \"displayName\")},\r\n                    if(isText(_magTriggers >> configName _x >> \"picture\"))then\r\n                        {getText(_magTriggers >> configName _x >> \"picture\")}\r\n                        else{getText(_x >> \"picture\")},\r\n                    {(_this select 2) call FUNC(selectTrigger);},\r\n                    {true},\r\n                    {},\r\n                    [_explosive, _magazine, configName _x]\r\n                ] call EFUNC(interact_menu,createAction),\r\n                [],\r\n                ACE_Player\r\n            ];\r\n    };\r\n} forEach _triggerTypes;\r\n\r\n_children\r\n"},{"name":"ace_explosives_fnc_cancelPlacement","file":"explosives/functions/fnc_cancelPlacement.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Cancels explosives placement.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Key <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, 1] call ace_explosives_fnc_cancelPlacement\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_key\"];\r\n\r\nif (_key != 1 || {!GVAR(pfeh_running)}) exitWith {};\r\n\r\nGVAR(placeAction) = PLACE_CANCEL;\r\n"},{"name":"ace_explosives_fnc_canDefuse","file":"explosives/functions/fnc_canDefuse.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Whether a unit can perform the defuse action\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to defuse <BOOL>\r\n *\r\n * Example:\r\n * if ([player] call ACE_Explosives_fnc_canDefuse) then {hint \"Can Defuse\";};\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\nprivate [\"_isSpecialist\"];\r\n\r\nif (isNull(_target getVariable [QGVAR(Explosive),objNull])) exitWith {\r\n    deleteVehicle _target;\r\n    false\r\n};\r\nif (vehicle _unit != _unit || {!(\"ACE_DefusalKit\" in (items _unit))}) exitWith {false};\r\n_isSpecialist = [_unit] call EFUNC(Common,isEOD);\r\n\r\nif (GVAR(RequireSpecialist) && {!_isSpecialist}) exitWith {false};\r\n\r\ntrue\r\n"},{"name":"ace_explosives_fnc_canDetonate","file":"explosives/functions/fnc_canDetonate.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Whether the unit is able to detonate explosives\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to detonate <BOOL>\r\n *\r\n * Example:\r\n * if ([player] call ACE_Explosives_fnc_canDetonate) then { hint \"Can Detonate\"; };\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n([_unit] call FUNC(hasPlacedExplosives)) && {(count ([_unit] call FUNC(getDetonators))) > 0}\r\n"},{"name":"ace_explosives_fnc_connectExplosive","file":"explosives/functions/fnc_connectExplosive.sqf","text":"/*\r\n * Author: VKing\r\n * Add preplaced explosives to a unit's detonator.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Explosive object <OBJECT>\r\n * 2: Detonator type <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, claymore1, \"ACE_Clacker\"] call ace_explosives_fnc_connectExplosive\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_object\", \"_detonator\"];\r\nTRACE_3(\"Params\",_unit,_object,_detonator);\r\n\r\nprivate _detonatorConfig = getText (configFile >> \"CfgWeapons\" >> _detonator >> QGVAR(triggerType));\r\n\r\nprivate _magazineClass = getText (configFile >> \"CfgAmmo\" >> typeOf _object >> QGVAR(magazine));\r\n\r\n[_unit, _object, _magazineClass, [configFile >> \"ACE_Triggers\" >> _detonatorConfig]] call FUNC(addClacker);\r\n"},{"name":"ace_explosives_fnc_defuseExplosive","file":"explosives/functions/fnc_defuseExplosive.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Causes the unit to defuse the passed explosive.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Explosive <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, ACE_Interaction_Target] call ACE_Explosives_fnc_defuseExplosive;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_explosive\"];\r\nTRACE_2(\"params\",_unit,_explosive);\r\n\r\nif (GVAR(ExplodeOnDefuse) && {(random 1.0) < (getNumber (ConfigFile >> \"CfgAmmo\" >> typeOf _explosive >> QGVAR(explodeOnDefuseChance)))}) exitWith {\r\n    TRACE_1(\"exploding on defuse\",_explosive);\r\n    [_unit, -1, [_explosive, 1], true] call FUNC(detonateExplosive);\r\n    [QGVAR(explodeOnDefuse), [_explosive, _unit]] call CBA_fnc_globalEvent;\r\n};\r\n\r\n_unit action [\"Deactivate\", _unit, _explosive];\r\n[QGVAR(defuse), [_explosive, _unit]] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_explosives_fnc_detonateExplosive","file":"explosives/functions/fnc_detonateExplosive.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Causes the unit to detonate the passed explosive.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Max range (-1 to ignore) <NUMBER>\r\n * 2: Explosive <ARRAY>\r\n *     0: Explosive <OBJECT>\r\n *     1: Fuse time <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, 100, [Explosive, 1]] call ACE_Explosives_fnc_detonateExplosive; // has to be within range\r\n * [player, -1, [Explosive, 1]] call ACE_Explosives_fnc_detonateExplosive; // range ignored.\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_range\", \"_item\"];\r\nTRACE_3(\"params\",_unit,_range,_item);\r\n\r\nprivate [\"_result\", \"_ignoreRange\", \"_pos\"];\r\n\r\n_ignoreRange = (_range == -1);\r\n_result = true;\r\n\r\nif (!_ignoreRange && {(_unit distance (_item select 0)) > _range}) exitWith {TRACE_1(\"out of range\",_range); false};\r\n\r\nif (getNumber (ConfigFile >> \"CfgAmmo\" >> typeOf (_item select 0) >> \"TriggerWhenDestroyed\") == 0) then {\r\n    private [\"_exp\", \"_previousExp\"];\r\n    _previousExp = _item select 0;\r\n    _exp = getText (ConfigFile >> \"CfgAmmo\" >> typeOf (_previousExp) >> QGVAR(Explosive));\r\n    if (_exp != \"\") then {\r\n        _exp = createVehicle [_exp, [0,0,15001], [], 0, \"NONE\"];\r\n        _exp setDir (getDir _previousExp);\r\n        _item set [0, _exp];\r\n        _pos = getPosASL _previousExp;\r\n        deleteVehicle _previousExp;\r\n        _exp setPosASL _pos;\r\n    };\r\n};\r\n[{\r\n    params [\"_explosive\"];\r\n    TRACE_1(\"exploding\",_explosive);\r\n    if (!isNull _explosive) then {\r\n        _explosive setDamage 1;\r\n    };\r\n}, [_item select 0], (_item select 1)] call CBA_fnc_waitAndExecute;\r\n\r\n_result\r\n"},{"name":"ace_explosives_fnc_detonateExplosiveAll","file":"explosives/functions/fnc_detonateExplosiveAll.sqf","text":"/*\r\n * Author: VKing\r\n * Causes the unit to detonate all passed explosives.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Range (-1 to ignore) <NUMBER>\r\n * 2: Explosives to detonate <ARRAY>\r\n *     0: Explosive <OBJECT>\r\n *     1: Fuse time <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, -1, [[c4,0.5]]] call ACE_Explosives_fnc_detonateExplosiveAll;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_range\", \"_explosivesList\"];\r\nTRACE_3(\"Params\",_unit,_range,_explosivesList);\r\n\r\n{\r\n    [_unit,_range,_x] call FUNC(detonateExplosive);\r\n} forEach _explosivesList;\r\n"},{"name":"ace_explosives_fnc_dialingPhone","file":"explosives/functions/fnc_dialingPhone.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Performs the dial tones and detonation of explosive.\r\n *\r\n * Arguments:\r\n * 0: Unit to do dialing <OBJECT>\r\n * 1: Index <NUMBER>\r\n * 2: Dialing points <ARRAY>\r\n * 3: IED code <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [FUNC(dialingPhone), 0.25, [_unit,4,_arr,_code]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_args\", \"_pfID\"];\r\n_args params [\"_unit\", \"_i\", \"_arr\", \"_code\"];\r\n\r\nif ((_i mod 4) == 0) then {\r\n    playSound3D [QUOTE(PATHTO_R(Data\\Audio\\DialTone.wss)), objNull, false, (_unit modelToWorldVisual [0,0.2,2]), 15,1,2.5];\r\n};\r\nctrlSetText [1400,format[\"Calling%1\",_arr select (_i - 4)]];\r\n\r\nprivate \"_explosive\";\r\n_explosive = [_code] call FUNC(getSpeedDialExplosive);\r\n\r\nif (_i >= (count _arr + 2)) then {\r\n    [_pfID] call CALLSTACK(CBA_fnc_removePerFrameHandler);\r\n    if ((count _explosive) > 0) then {\r\n        [_unit, -1, [_explosive select 0, _explosive select 2]] call FUNC(detonateExplosive);\r\n    };\r\n    _unit setVariable [QGVAR(Dialing), false, true];\r\n    if (_unit == ace_player) then {\r\n        ctrlSetText [1400,\"Call Ended!\"];\r\n    };\r\n};\r\nif (_i == (count _arr)) then {\r\n    if ((count _explosive) > 0) then {\r\n        playSound3D [QUOTE(PATHTO_R(Data\\Audio\\Cellphone_Ring.wss)),objNull, false, getPosASL (_explosive select 0),3.16228,1,75];\r\n    };\r\n};\r\n_args set [1, _i + 1];\r\n"},{"name":"ace_explosives_fnc_dialPhone","file":"explosives/functions/fnc_dialPhone.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Dials the number passed and detonates the explosive.\r\n *\r\n * Arguments:\r\n * 0: Unit to do dialing <OBJECT>\r\n * 1: Code to dial <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ace_player,\"2131\"] call ACE_explosives_fnc_dialPhone;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_code\"];\r\nTRACE_2(\"params\",_unit,_code);\r\n\r\nprivate [\"_arr\", \"_ran\", \"_i\"];\r\n\r\nif (_unit getVariable [QGVAR(Dialing),false]) exitWith {};\r\nif !(alive _unit) exitWith {};\r\n_unit setVariable [QGVAR(Dialing), true, true];\r\n\r\n_ran = (ceil(random 8)) + 1;\r\n_arr = [];\r\nfor [{_i=0}, {_i<_ran}, {_i=_i+1}] do {\r\n    _arr = _arr + ['.','..','...',''];\r\n};\r\nif (_unit == ace_player) then {\r\n    ctrlSetText [1400,\"Calling\"];\r\n    [FUNC(dialingPhone), 0.25, [_unit,4,_arr,_code]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\r\n} else {\r\n    private [\"_explosive\"];\r\n    _explosive = [_code] call FUNC(getSpeedDialExplosive);\r\n    if ((count _explosive) > 0) then {\r\n        [{\r\n            playSound3D [QUOTE(PATHTO_R(Data\\Audio\\Cellphone_Ring.wss)),objNull, false, getPosASL (_this select 1),3.16228,1,75];\r\n            (_this select 0) setVariable [QGVAR(Dialing), false, true];\r\n        }, [_unit,_explosive select 0], 0.25 * (count _arr - 4)] call CBA_fnc_waitAndExecute;\r\n        [_explosive select 0,(0.25 * (count _arr - 1)) + (_explosive select 2)] call FUNC(startTimer);\r\n    };\r\n};\r\n"},{"name":"ace_explosives_fnc_getDetonators","file":"explosives/functions/fnc_getDetonators.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Returns all the detonators of the unit\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Configs of all detonators <ARRAY>\r\n *\r\n * Example:\r\n * _detonators = [player] call ACE_Explosives_fnc_getDetonators;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n// IGNORE_PRIVATE_WARNING(_detonators);\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nprivate _result = (items _unit) select {getNumber (ConfigFile >> \"CfgWeapons\" >> _x >> QGVAR(Detonator)) == 1};\r\n_result = _result arrayIntersect _result;\r\n\r\n_result\r\n"},{"name":"ace_explosives_fnc_getPlacedExplosives","file":"explosives/functions/fnc_getPlacedExplosives.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Gets all placed explosives by unit, optionally filtered by specific trigger type.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Trigger classname - filter (optional) <STRING>\r\n *\r\n * Return Value:\r\n * Explosives <ARRAY>\r\n *\r\n * Example:\r\n * _allExplosives = [player] call ACE_Explosives_fnc_getPlacedExplosives;\r\n * _deadmanExplosives = [player, \"DeadManSwitch\"] call ACE_Explosives_fnc_getPlacedExplosives;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n// IGNORE_PRIVATE_WARNING(_allExplosives,_deadmanExplosives);\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nprivate [\"_clackerList\", \"_adjustedList\", \"_list\", \"_filter\"];\r\n\r\n_filter = nil;\r\nif (count _this > 1) then {\r\n    _filter = ConfigFile >> \"ACE_Triggers\" >> (_this select 1);\r\n};\r\n_clackerList = [];\r\n_adjustedList = false;\r\n_clackerList = _unit getVariable [QGVAR(Clackers), []];\r\n_list = [];\r\n{\r\n    if (isNull (_x select 0)) then {\r\n        _clackerList set [_forEachIndex, \"X\"];\r\n        _adjustedList = true;\r\n    } else {\r\n        if (isNil \"_filter\" || {(ConfigFile >> \"ACE_Triggers\" >> (_x select 4)) == _filter}) then {\r\n            _list pushBack _x;\r\n        };\r\n    };\r\n} forEach _clackerList;\r\nif (_adjustedList) then {\r\n    _clackerList = _clackerList - [\"X\"];\r\n    if (count _clackerList == 0) then {\r\n        _unit setVariable [QGVAR(Clackers), nil, true];\r\n    } else {\r\n        _unit setVariable [QGVAR(Clackers), _clackerList, true];\r\n    };\r\n};\r\n\r\n_list\r\n"},{"name":"ace_explosives_fnc_getSpeedDialExplosive","file":"explosives/functions/fnc_getSpeedDialExplosive.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Gets the explosive from the speed dial entry.\r\n *\r\n * Arguments:\r\n * 0: Speed dial entry <STRING>\r\n *\r\n * Return Value:\r\n * Associated explosive (or ObjNull) <OBJECT>\r\n *\r\n * Example:\r\n * [\"2113\"] call ace_explosives_fnc_getSpeedDialExplosive;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_code\"];\r\nTRACE_1(\"params\",_code);\r\n\r\nprivate [\"_explosive\"];\r\n\r\nif (isNil QGVAR(CellphoneIEDs)) exitWith {[]};\r\n_explosive = [];\r\n{\r\n    if ((_x select 1) == _code) exitWith {\r\n        _explosive = _x;\r\n    };\r\n    false\r\n} count GVAR(CellphoneIEDs);\r\n\r\n_explosive\r\n"},{"name":"ace_explosives_fnc_handleScrollWheel","file":"explosives/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Handles rotating of Explosives\r\n *\r\n * Arguments:\r\n * Amount scrolled <NUMBER>\r\n *\r\n * Return Value:\r\n * Handled <BOOL>\r\n *\r\n * Example:\r\n * 1.2 call ACE_Explosives_fnc_HandleScrollWheel;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!GVAR(pfeh_running)) exitWith {false};\r\n\r\nGVAR(TweakedAngle) = ((GVAR(TweakedAngle) + 7.2 * _this) + 360) % 360;\r\n\r\ntrue\r\n"},{"name":"ace_explosives_fnc_hasExplosives","file":"explosives/functions/fnc_hasExplosives.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Whether the passed unit has any explosives on them.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * The unit has explosives <BOOL>\r\n *\r\n * Example:\r\n * hasExplosives = [player] call ACE_Explosives_fnc_hasExplosives;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nprivate [\"_result\", \"_magazines\"];\r\n\r\n_result = false;\r\n_magazines = magazines _unit;\r\n{\r\n    if (getNumber (ConfigFile >> \"CfgMagazines\" >> _x >> QGVAR(Placeable)) == 1) exitWith {\r\n        _result = true;\r\n    };\r\n} count _magazines;\r\n\r\n_result\r\n"},{"name":"ace_explosives_fnc_hasPlacedExplosives","file":"explosives/functions/fnc_hasPlacedExplosives.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Whether the passed unit has placed any explosives or has a clacker that was used when explosives were placed.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Configs of all detonators <ARRAY>\r\n *\r\n * Example:\r\n * _hasPlacedExplosives = [player] call ACE_Explosives_fnc_hasPlacedExplosives;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n// IGNORE_PRIVATE_WARNING(_hasPlacedExplosives);\r\n\r\n(count (_this call FUNC(getPlacedExplosives)) > 0)\r\n"},{"name":"ace_explosives_fnc_interactEH","file":"explosives/functions/fnc_interactEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * When interact_menu starts rendering (from \"interact_keyDown\" event)\r\n * Add defuse helpers to all nearby mines\r\n *\r\n * Arguments:\r\n * Interact Menu Type (0 - world, 1 - self) <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [0] call ace_explosives_fnc_interactEH\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_interactionType\"];\r\nTRACE_1(\"params\",_interactionType);\r\n\r\n//Ignore self-interaction menu\r\nif (_interactionType != 0) exitWith {};\r\n//Ignore while mounted:\r\nif ((vehicle ACE_player) != ACE_player) exitWith {};\r\n//Ignore if we don't have defuse kit\r\nif (!(\"ACE_DefusalKit\" in (items ACE_player))) exitWith {};\r\n\r\n[{\r\n    params [\"_args\", \"_pfID\"];\r\n    _args params [\"_setPosition\", \"_addedDefuseHelpers\", \"_minesHelped\"];\r\n\r\n    if (!EGVAR(interact_menu,keyDown)) then {\r\n        TRACE_1(\"Cleaning Defuse Helpers\",(count _addedDefuseHelpers));\r\n        {deleteVehicle _x;} forEach _addedDefuseHelpers;\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n    } else {\r\n        private [\"_defuseHelper\"];\r\n        // Prevent Rare Error when ending mission with interact key down:\r\n        if (isNull ace_player) exitWith {};\r\n\r\n        //If player moved >5 meters from last pos, then rescan\r\n        if (((getPosASL ace_player) distance _setPosition) > 5) then {\r\n            {\r\n                if (((_x distance ACE_player) < 15) && {!(_x in _minesHelped)}) then {\r\n                    TRACE_2(\"Making Defuse Helper\",(_x),(typeOf _x));\r\n                    _defuseHelper = \"ACE_DefuseObject\" createVehicleLocal (getPos _x);\r\n\r\n                    private _config = configFile >> \"CfgAmmo\" >> typeOf _x;\r\n\r\n                    private _defuseObjectPosition = getArray (_config >> QGVAR(defuseObjectPosition));\r\n                    if (_defuseObjectPosition isEqualTo []) then {\r\n                        _defuseObjectPosition = [0,0,0];\r\n                    };\r\n\r\n                    TRACE_1(\"DefuseObjectPosition\",(_defuseObjectPosition));\r\n\r\n                    _defuseHelper attachTo [_x, _defuseObjectPosition];\r\n                    _defuseHelper setVariable [QGVAR(Explosive),_x];\r\n                    _addedDefuseHelpers pushBack _defuseHelper;\r\n                    _minesHelped pushBack _x;\r\n                };\r\n            } forEach allMines;\r\n            _args set [0, (getPosASL ace_player)];\r\n        };\r\n    };\r\n}, 0.5, [((getPosASL ace_player) vectorAdd [-100,0,0]), [], []]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_explosives_fnc_module","file":"explosives/functions/fnc_module.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Initialises the explosives module\r\n *\r\n * Arguments:\r\n * Module things.\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * Called By BIS.\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\n\r\nparams [\"_logic\"];\r\n\r\n[_logic, QGVAR(RequireSpecialist), \"RequireSpecialist\"] call EFUNC(Common,readSettingFromModule);\r\n[_logic, QGVAR(PunishNonSpecialists),\"PunishNonSpecialists\"] call EFUNC(Common,readSettingFromModule);\r\n[_logic, QGVAR(ExplodeOnDefuse),\"ExplodeOnDefuse\"] call EFUNC(Common,readSettingFromModule);\r\n\r\nACE_LOGINFO(\"Explosive Module Initialized.\");\r\n"},{"name":"ace_explosives_fnc_onIncapacitated","file":"explosives/functions/fnc_onIncapacitated.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Detonates all attached deadman's switched triggered explosives.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * Handled by CBA\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//NOTE: Extended_Killed_EventHandlers runs only where _unit is local\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nprivate [\"_deadman\"];\r\n\r\n_deadman = [_unit, \"DeadManSwitch\"] call FUNC(getPlacedExplosives);\r\n{\r\n    [_unit, -1, _x, true] call FUNC(detonateExplosive);\r\n} forEach _deadman;\r\n\r\n//Handle deadman connected to explosive in inventory\r\nprivate _connectedInventoryExplosive = _unit getVariable [QGVAR(deadmanInvExplosive), \"\"];\r\nif (_connectedInventoryExplosive != \"\") then {\r\n    if (!(_connectedInventoryExplosive in (magazines _unit))) exitWith {};\r\n\r\n    //Remove mag and reset variable\r\n    _unit removeMagazine _connectedInventoryExplosive;\r\n    _unit setVariable [QGVAR(deadmanInvExplosive), \"\", true];\r\n\r\n    private _ammo = getText (configFile >> \"CfgMagazines\" >> _connectedInventoryExplosive >> \"ammo\");\r\n    TRACE_2(\"deadman inventory\",_connectedInventoryExplosive,_ammo);\r\n    private _magazineTrigger = configFile >> \"CfgMagazines\" >> _connectedInventoryExplosive >> \"ACE_Triggers\" >> \"DeadmanSwitch\";\r\n    if (isText (_magazineTrigger >> \"ammo\")) then {\r\n        _ammo = getText (_magazineTrigger >> \"ammo\");\r\n    };\r\n\r\n    private _explosive = createVehicle [_ammo, (getPos _unit), [], 0, \"NONE\"];\r\n    _explosive setPosASL (getPosASL _unit);\r\n    [_unit, -1, [_explosive, -1]] call FUNC(detonateExplosive); //Explode, ignoring range, with a random 0-1 second delay\r\n};\r\n"},{"name":"ace_explosives_fnc_onInventoryChanged","file":"explosives/functions/fnc_onInventoryChanged.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * When a take/put event handler fires and a detonator is changed hands.\r\n * Then take \"attached\" explosives.\r\n *\r\n * Arguments:\r\n * 0: Receiver <OBJECT>\r\n * 1: Giver <OBJECT>\r\n * 2: Item <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * Handled by CBA\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_receiver\", \"_giver\", \"_item\"];\r\nTRACE_3(\"params\",_receiver,_giver,_item);\r\n\r\nprivate [\"_config\", \"_detonators\"];\r\n\r\nif (_receiver != ace_player) exitWith {};\r\n\r\n_config = ConfigFile >> \"CfgWeapons\" >> _item;\r\nif (isClass _config && {getNumber(_config >> QGVAR(Detonator)) == 1}) then {\r\n    private [\"_clackerItems\"];\r\n    _clackerItems = _giver getVariable [QGVAR(Clackers), []];\r\n    _receiver setVariable [QGVAR(Clackers), (_receiver getVariable [QGVAR(Clackers), []]) + _clackerItems, true];\r\n\r\n    _detonators = [_giver] call FUNC(getDetonators);\r\n    if (count _detonators == 0) then {\r\n        _giver setVariable [QGVAR(Clackers), nil, true];\r\n    };\r\n};\r\n"},{"name":"ace_explosives_fnc_openTimerSetUI","file":"explosives/functions/fnc_openTimerSetUI.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Opens the UI for timer setting of an explosive\r\n *\r\n * Arguments:\r\n * 0: Explosive <OBJECT>\r\n * 1: Magazine <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_explosive, \"SatchelCharge_Remote_Mag\"] call ACE_Explosives_fnc_openTimerSetUI;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_explosive\", \"_mag\"];\r\nTRACE_2(\"params\",_explosive,_mag);\r\n\r\ncreateDialog \"RscACE_SelectTimeUI\";\r\nsliderSetRange [8845, 5, 900]; // 5seconds - 15minutes\r\nsliderSetPosition [8845, 30];\r\n\r\nGVAR(explosive) = _explosive;\r\n\r\nDFUNC(SetTimer) = {\r\n    [\r\n        ACE_player,\r\n        getPosATL GVAR(explosive),\r\n        GVAR(explosive) getVariable QGVAR(Direction),\r\n        GVAR(explosive) getVariable QGVAR(class),\r\n        \"Timer\",\r\n        [floor sliderPosition 8845],\r\n        GVAR(explosive)\r\n    ] call FUNC(placeExplosive);\r\n    closeDialog 0;\r\n};\r\n\r\nbuttonSetAction [8860, QUOTE(call DFUNC(SetTimer);)];\r\nbuttonSetAction [8855, QUOTE(closeDialog 0;)];\r\n\r\nctrlSetText [8870, format[localize LSTRING(TimerMenu),0, 30]];\r\n"},{"name":"ace_explosives_fnc_placeExplosive","file":"explosives/functions/fnc_placeExplosive.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Places an explosive at the requested position\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Position to place explosive <POSITION>\r\n * 2: Rotation <NUMBER>\r\n * 3: Magazine class <STRING>\r\n * 4: Config of trigger <STRING>\r\n * 5: Variables required for the trigger type <ARRAY>\r\n * 6: Explosive placeholder <OBJECT> <OPTIONAL>\r\n *\r\n * Return Value:\r\n * Placed explosive <OBJECT>\r\n *\r\n * Example:\r\n * _explosive = [player, player modelToWorldVisual [0,0.5, 0.1], 134,\r\n *  \"SatchelCharge_Remote_Mag\", \"Command\", []] call ACE_Explosives_fnc_placeExplosive;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_pos\", \"_dir\", \"_magazineClass\", \"_triggerConfig\", \"_triggerSpecificVars\", [\"_setupPlaceholderObject\", objNull]];\r\nTRACE_7(\"params\",_unit,_pos,_dir,_magazineClass,_triggerConfig,_triggerSpecificVars,_setupPlaceholderObject);\r\n\r\nprivate [\"_ammo\", \"_explosive\", \"_attachedTo\", \"_magazineTrigger\", \"_pitch\", \"_digDistance\", \"_canDigDown\", \"_soundEnviron\", \"_surfaceType\"];\r\n\r\n_unit playActionNow \"PutDown\";\r\n\r\n_attachedTo = objNull;\r\nif (!isNull _setupPlaceholderObject) then {\r\n    _attachedTo = attachedTo _setupPlaceholderObject;\r\n    deleteVehicle _setupPlaceholderObject;\r\n};\r\n\r\nif (isNil \"_triggerConfig\") exitWith {\r\n    ACE_LOGERROR_1(\"Config not passed to PlaceExplosive: %1\",_this);\r\n    objNull\r\n};\r\n\r\n_magazineTrigger = ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ACE_Triggers\" >> _triggerConfig;\r\n_triggerConfig = ConfigFile >> \"ACE_Triggers\" >> _triggerConfig;\r\n\r\nif (isNil \"_triggerConfig\") exitWith {\r\n    ACE_LOGERROR_1(\"Config not found in PlaceExplosive: %1\",_this);\r\n    objNull\r\n};\r\n\r\n_ammo = getText(ConfigFile >> \"CfgMagazines\" >> _magazineClass >> \"ammo\");\r\nif (isText(_magazineTrigger >> \"ammo\")) then {\r\n    _ammo = getText (_magazineTrigger >> \"ammo\");\r\n};\r\n_triggerSpecificVars pushBack _triggerConfig;\r\n\r\n//Dig the explosive down into the ground (usually on \"pressurePlate\")\r\nif (isNumber (_magazineTrigger >> \"digDistance\")) then {\r\n    _digDistance = getNumber (_magazineTrigger >> \"digDistance\");\r\n\r\n    //Get Surface Type:\r\n    _canDigDown = true;\r\n    _surfaceType = surfaceType _pos;\r\n    if ((_surfaceType select [0,1]) == \"#\") then {_surfaceType = _surfaceType select [1, 99];};\r\n    if ((_surfaceType != \"\") || {isClass (configFile >> \"CfgSurfaces\" >> _surfaceType >> \"soundEnviron\")}) then {\r\n        _soundEnviron = getText (configFile >> \"CfgSurfaces\" >> _surfaceType >> \"soundEnviron\");\r\n        TRACE_2(\"Dig Down Surface\",_surfaceType,_soundEnviron);\r\n        _canDigDown = !(_soundEnviron in [\"road\", \"tarmac\", \"concrete\", \"concrete_int\", \"int_concrete\", \"concrete_ext\"]);\r\n    };\r\n    //Don't dig down if pos ATL is high (in a building or A2 road)\r\n    if (_canDigDown && {(_pos select 2) < 0.1}) then {\r\n        TRACE_2(\"Can Dig Down\",_digDistance,_pos);\r\n        _pos = _pos vectorAdd [0,0, (-1 * _digDistance)];\r\n    } else {\r\n        TRACE_2(\"Can NOT Dig Down\",_digDistance,_pos);\r\n    };\r\n};\r\n\r\n_explosive = createVehicle [_ammo, _pos, [], 0, \"NONE\"];\r\n_explosive setPosATL _pos;\r\n\r\nif (!isNull _attachedTo) then {\r\n    TRACE_1(\"Attaching Live Explosive\",_attachedTo);\r\n    _explosive attachTo [_attachedTo];\r\n};\r\n\r\n//If trigger has \"onPlace\" and it returns true, just exitWith the explosive\r\nif (isText(_triggerConfig >> \"onPlace\") && {[_unit,_explosive,_magazineClass,_triggerSpecificVars] call compile (getText (_triggerConfig >> \"onPlace\"))}) exitWith {\r\n    TRACE_1(\"onPlace returns true\",_explosive);\r\n    _explosive\r\n};\r\n\r\n//TODO: placing explosives on hills looks funny\r\n\r\n_pitch = getNumber (_magazineTrigger >> \"pitch\");\r\n\r\n//Globaly set the position and angle:\r\n[QGVAR(place), [_explosive, _dir, _pitch, _unit]] call CBA_fnc_globalEvent;\r\n\r\n_explosive\r\n"},{"name":"ace_explosives_fnc_removeFromSpeedDial","file":"explosives/functions/fnc_removeFromSpeedDial.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Removes the specified speed dial from unit's speed dial.\r\n *\r\n * Arguments:\r\n * 0: Speed dial name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"IED 1\"] call ACE_explosives_fnc_removeFromSpeedDial;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_speedDial\";\r\n\r\n_speedDial = ace_player getVariable [QGVAR(SpeedDial), []];\r\nif (count _speedDial == 0) exitWith {};\r\n{\r\n    if ((_x select 0) == (_this select 0)) exitWith {\r\n        _speedDial set [_forEachIndex, \"x\"];\r\n        _speedDial = _speedDial - [\"x\"];\r\n        ace_player setVariable [QGVAR(SpeedDial),_speedDial];\r\n    };\r\n} forEach _speedDial;\r\n"},{"name":"ace_explosives_fnc_scriptedExplosive","file":"explosives/functions/fnc_scriptedExplosive.sqf","text":"/*\r\n * Author: VKing\r\n * Detonate explosives via script, for use in triggers or mission scripts to\r\n * detonate editor-placed explosives.\r\n *\r\n * Arguments:\r\n * 0: Explosives objects to detonate <OBJECT or ARRAY>\r\n * 1: Fuze delay (for each explosive; use negative number for random time up to value) <NUMBER> <OPTIONAL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[charge1, charge2, charge3], -1] call ACE_Explosives_fnc_scriptedExplosive;\r\n * [[claymore1, claymore2]] call ACE_Explosives_fnc_scriptedExplosive;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_explosiveArr\", [], [[], objNull]], [\"_fuzeTime\", 0, [0]]];\r\n\r\nif (_explosiveArr isEqualType objNull) then {\r\n    _explosiveArr = [_explosiveArr];\r\n};\r\n\r\n{\r\n    private _detTime = if (_fuzeTime < 0) then {random abs _fuzeTime} else {_fuzeTime};\r\n    [objNull, -1, [_x, _detTime]] call FUNC(detonateExplosive);\r\n} forEach _explosiveArr;\r\n"},{"name":"ace_explosives_fnc_selectTrigger","file":"explosives/functions/fnc_selectTrigger.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Selects a trigger for an explosive.\r\n *\r\n * Arguments:\r\n * 0: Explosive <OBJECT>\r\n * 1: Magazine <STRING>\r\n * 2: Trigger mode <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_explosive, \"SatchelCharge_Remote_Mag\",\"Timer\"] call ACE_Explosives_fnc_selectTrigger;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_explosive\", \"_magazine\", \"_trigger\"];\r\nTRACE_3(\"params\",_explosive,_magazine,_trigger);\r\n\r\nprivate [\"_config\"];\r\n\r\n_config = ConfigFile >> \"ACE_Triggers\" >> _trigger;\r\n\r\n// If the onSetup function returns true, it is handled elsewhere\r\nif (isText(_config >> \"onSetup\") && {[_explosive,_magazine] call compile getText (_config >> \"onSetup\")}) exitWith {\r\n    TRACE_2(\"onSetup returned true\",_explosive,_trigger);\r\n};\r\n\r\n[ACE_player, getPosATL _explosive, _explosive getVariable [QGVAR(Direction), 0],_magazine, _trigger, [], _explosive] call FUNC(placeExplosive);\r\n"},{"name":"ace_explosives_fnc_setPosition","file":"explosives/functions/fnc_setPosition.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Sets the Dir and pitch of passed object\r\n *\r\n * Arguments:\r\n * 0: Explosive <OBJECT>\r\n * 1: Direction <NUMBER>\r\n * 2: Pitch <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_explosive, 150, 90] call ACE_Explosives_fnc_setPosition;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_explosive\", \"_direction\", \"_pitch\"];\r\nTRACE_3(\"params\",_explosive,_direction,_pitch);\r\n\r\nif (isNull (attachedTo _explosive)) then {\r\n    _explosive setDir _direction;\r\n    if (_pitch != 0) then {\r\n        [_explosive, _pitch, 0] call CALLSTACK(BIS_fnc_setPitchBank);\r\n    };\r\n} else {\r\n    //Attaching to a vehicle (dirAndUp based on vehicle)\r\n    _explosive setVectorDirAndUp [[0,0,1],[(sin _direction),(cos _direction),0]];\r\n};\r\n\r\nif (isServer) then {\r\n    // Store the orientation to broadcast it later to JIP players\r\n    GVAR(explosivesOrientations) pushBack [_explosive, _direction, _pitch];\r\n\r\n    // This is a good time to filter the array and remove explosives that no longer exist\r\n    GVAR(explosivesOrientations) = GVAR(explosivesOrientations) select {\r\n        _x params [\"_explosive\"];\r\n        (!isNull _explosive && {alive _explosive})\r\n    };\r\n    TRACE_1(\"setPosition\",GVAR(explosivesOrientations));\r\n};\r\n"},{"name":"ace_explosives_fnc_setSpeedDial","file":"explosives/functions/fnc_setSpeedDial.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Sets the speed dial for the UI.\r\n *\r\n * Arguments:\r\n * 0: Whether to increase or decrease speed dial index <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [true] call ACE_explosives_fnc_setSpeedDial; // increase\r\n * [false] call ACE_explosives_fnc_setSpeedDial; // decrease\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate [\"_speedDial\", \"_amount\"];\r\n\r\n_speedDial = ace_player getVariable [QGVAR(SpeedDial), []];\r\nif (count _speedDial == 0) exitWith {};\r\n_amount = if((_this select 0))then{1}else{-1};\r\n\r\nGVAR(CurrentSpeedDial) = (GVAR(CurrentSpeedDial) + _amount + count _speedDial) mod (count _speedDial);\r\n\r\nctrlSetText [1400,(_speedDial select GVAR(CurrentSpeedDial)) select 1];\r\nctrlSetText [1401,(_speedDial select GVAR(CurrentSpeedDial)) select 0];\r\n"},{"name":"ace_explosives_fnc_setupExplosive","file":"explosives/functions/fnc_setupExplosive.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Starts the setup process for the passed explosive. Player only.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Player Unit <OBJECT>\r\n * 2: Classname of explosive to place. (CfgMagazine class) <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"SatchelCharge_Remote_Mag\"] call ACE_Explosives_fnc_SetupExplosive;\r\n *\r\n * Public: Yes\r\n */\r\n// #define ENABLE_PERFORMANCE_COUNTERS\r\n#include \"script_component.hpp\"\r\n\r\n#define PLACE_RANGE_MAX 1\r\n#define PLACE_RANGE_MIN 0.025\r\n\r\nparams [\"_vehicle\", \"_unit\", \"_magClassname\"];\r\nTRACE_3(\"params\",_vehicle,_unit,_magClassname);\r\n\r\nprivate[\"_isAttachable\", \"_setupObjectClass\", \"_supportedTriggers\", \"_p3dModel\"];\r\n\r\n//Get setup object vehicle and model:\r\n_setupObjectClass = getText(ConfigFile >> \"CfgMagazines\" >> _magClassname >> QGVAR(SetupObject));\r\nif (!isClass (configFile >> \"CfgVehicles\" >> _setupObjectClass)) exitWith {ERROR(\"Bad Vehicle\");};\r\n_p3dModel = getText (configFile >> \"CfgVehicles\" >> _setupObjectClass >> \"model\");\r\nif (_p3dModel == \"\") exitWith {ERROR(\"No Model\");}; //\"\" - will crash game!\r\n\r\n[_unit, \"forceWalk\", \"ACE_Explosives\", true] call EFUNC(common,statusEffect_set);\r\n\r\n//Show mouse buttons:\r\n[localize LSTRING(PlaceAction), localize LSTRING(CancelAction), localize LSTRING(ScrollAction)] call EFUNC(interaction,showMouseHint);\r\n_unit setVariable [QGVAR(placeActionEH), [_unit, \"DefaultAction\", {true}, {GVAR(placeAction) = PLACE_APPROVE;}] call EFUNC(common,AddActionEventHandler)];\r\n_unit setVariable [QGVAR(cancelActionEH), [_unit, \"zoomtemp\", {true}, {GVAR(placeAction) = PLACE_CANCEL;}] call EFUNC(common,AddActionEventHandler)];\r\n\r\n//Display to show virtual object:\r\n(QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutRsc [QGVAR(virtualAmmo), \"PLAIN\", 0, false];\r\n((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModel _p3dModel;\r\n\r\n//Make sure it has a trigger that works when attached (eg, no tripwires that only do pressurePlate)\r\n_isAttachable = false;\r\n_supportedTriggers = getArray (configFile >> \"CfgMagazines\" >> _magClassname >> \"ACE_Triggers\" >> \"SupportedTriggers\");\r\n{\r\n    if ((getNumber (configFile >> \"ACE_Triggers\" >> _x >> \"isAttachable\")) == 1) exitWith {_isAttachable = true;};\r\n} forEach _supportedTriggers;\r\n\r\n\r\nGVAR(pfeh_running) = true;\r\nGVAR(placeAction) = PLACE_WAITING;\r\nGVAR(TweakedAngle) = 0;\r\n\r\n\r\n[{\r\n    BEGIN_COUNTER(pfeh);\r\n\r\n    params [\"_args\", \"_pfID\"];\r\n    _args params [\"_unit\", \"_magClassname\", \"_setupObjectClass\", \"_isAttachable\"];\r\n\r\n    private[\"_angle\", \"_attachVehicle\", \"_badPosition\", \"_basePosASL\", \"_cameraAngle\", \"_distanceFromBase\", \"_expSetupVehicle\", \"_index\", \"_intersectsWith\", \"_lookDirVector\", \"_max\", \"_min\", \"_modelDir\", \"_modelOffset\", \"_modelUp\", \"_placeAngle\", \"_realDistance\", \"_return\", \"_screenPos\", \"_testBase\", \"_testPos\", \"_testPositionIsValid\", \"_virtualPosASL\"];\r\n\r\n    _lookDirVector = ((positionCameraToWorld [0,0,0]) call EFUNC(common,positionToASL)) vectorFromTo ((positionCameraToWorld [0,0,10]) call EFUNC(common,positionToASL));\r\n    _basePosASL = (eyePos _unit);\r\n    if (cameraView == \"EXTERNAL\") then {  //If external, show explosive over the right shoulder\r\n        _basePosASL = _basePosASL vectorAdd ((positionCameraToWorld [0.3,0,0]) vectorDiff (positionCameraToWorld [0,0,0]));\r\n    };\r\n    if ((stance _unit) == \"PRONE\") then {\r\n        //If prone, lower base and increase up angle of look - Makes it much easier to attach to underside of vehicles\r\n        _basePosASL set [2, ((_basePosASL select 2) - 0.3)];\r\n        _lookDirVector = ((positionCameraToWorld [0,0,0]) call EFUNC(common,positionToASL)) vectorFromTo ((positionCameraToWorld [0,3,10]) call EFUNC(common,positionToASL));\r\n    };\r\n    _cameraAngle = (_lookDirVector select 0) atan2 (_lookDirVector select 1);\r\n\r\n    _testPositionIsValid = {\r\n        _testBase = _basePosASL vectorAdd (_lookDirVector vectorMultiply (_this select 0));\r\n        _return = true;\r\n        {\r\n            _testPos = _testBase vectorAdd [0.1 * (_x select 0) * (cos _cameraAngle), 0.1 * (_x select 0) * (sin _cameraAngle), 0.1 * (_x select 1)];\r\n            #ifdef DEBUG_MODE_FULL\r\n            drawLine3d [(eyePos _unit) call EFUNC(common,ASLToPosition), (_testPos) call EFUNC(common,ASLToPosition), [1,0,0,1]];\r\n            #endif\r\n            if (lineIntersects [eyePos _unit, _testPos, _unit]) exitWith {_return = false;};\r\n        } forEach [[0,0], [-1,-1], [1,-1], [-1,1], [1,1]];\r\n        _return\r\n    };\r\n\r\n    _distanceFromBase = PLACE_RANGE_MAX;\r\n    _badPosition = !([_distanceFromBase] call _testPositionIsValid);\r\n    _attachVehicle = objNull;\r\n\r\n    if (_isAttachable && _badPosition) then {\r\n        _attachVehicle = objNull;\r\n        _testBase = _basePosASL vectorAdd _lookDirVector;\r\n        {\r\n            _testPos = _testBase vectorAdd [0.1 * (_x select 0) * (cos _cameraAngle), 0.1 * (_x select 0) * (sin _cameraAngle), 0.1 * (_x select 1)];\r\n            _intersectsWith = lineIntersectsWith [eyePos _unit, _testPos, _unit];\r\n            if (count _intersectsWith == 1) exitWith {_attachVehicle = (_intersectsWith select 0);};\r\n        } forEach [[0,0], [-1,-1], [1,-1], [-1,1], [1,1]];\r\n        if ((!isNull _attachVehicle) && {[PLACE_RANGE_MIN] call _testPositionIsValid} &&\r\n                {(_attachVehicle isKindOf \"Car\") || {_attachVehicle isKindOf \"Tank\"} || {_attachVehicle isKindOf \"Air\"} || {_attachVehicle isKindOf \"Ship\"}}) then {\r\n            _min = PLACE_RANGE_MIN;\r\n            _max = PLACE_RANGE_MAX;\r\n            for \"_index\" from 0 to 6 do {\r\n                _distanceFromBase = (_min + _max) / 2;\r\n                if ([_distanceFromBase] call _testPositionIsValid) then {\r\n                    _min = _distanceFromBase;\r\n                } else {\r\n                    _max = _distanceFromBase;\r\n                };\r\n            };\r\n            _badPosition = false;\r\n            _distanceFromBase = ((_min + _max) / 2 + 0.075) min 1;\r\n        } else {\r\n            _attachVehicle = objNull;\r\n        };\r\n    };\r\n\r\n    _virtualPosASL = _basePosASL vectorAdd (_lookDirVector vectorMultiply _distanceFromBase);\r\n\r\n    //Update mouse hint:\r\n    if (_badPosition) then {\r\n        ((uiNamespace getVariable [\"ACE_Helper_Display\", objNull]) displayCtrl 1000) ctrlSetText localize LSTRING(BlockedAction);\r\n    } else {\r\n        if (isNull _attachVehicle) then {\r\n            ((uiNamespace getVariable [\"ACE_Helper_Display\", objNull]) displayCtrl 1000) ctrlSetText localize LSTRING(PlaceAction);\r\n        } else {\r\n            ((uiNamespace getVariable [\"ACE_Helper_Display\", objNull]) displayCtrl 1000) ctrlSetText localize LSTRING(AttachAction);\r\n        };\r\n    };\r\n\r\n    //Don't allow Placing bellow terrain\r\n    if ((getTerrainHeightASL _virtualPosASL) > (_virtualPosASL select 2)) then {\r\n        _virtualPosASL set [2, (getTerrainHeightASL _virtualPosASL)];\r\n    };\r\n\r\n    //Don't allow placing in a bad position:\r\n    if (_badPosition && {GVAR(placeAction) == PLACE_APPROVE}) then {GVAR(placeAction) = PLACE_WAITING;};\r\n\r\n    if (_unit != ACE_player ||\r\n        {!([_unit, objNull, [\"isNotSwimming\"]] call EFUNC(common,canInteractWith))} ||\r\n        {!(_magClassname in (magazines _unit))}\r\n    ) then {\r\n        GVAR(placeAction) = PLACE_CANCEL;\r\n    };\r\n\r\n    if (GVAR(placeAction) != PLACE_WAITING) then {\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n        GVAR(pfeh_running) = false;\r\n\r\n        [_unit, \"forceWalk\", \"ACE_Explosives\", false] call EFUNC(common,statusEffect_set);\r\n        [] call EFUNC(interaction,hideMouseHint);\r\n        [_unit, \"DefaultAction\", (_unit getVariable [QGVAR(placeActionEH), -1])] call EFUNC(common,removeActionEventHandler);\r\n        [_unit, \"zoomtemp\", (_unit getVariable [QGVAR(cancelActionEH), -1])] call EFUNC(common,removeActionEventHandler);\r\n\r\n        (QGVAR(virtualAmmo) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\n\r\n        if (GVAR(placeAction) == PLACE_APPROVE) then {\r\n            _placeAngle = 0;\r\n            _expSetupVehicle = _setupObjectClass createVehicle (_virtualPosASL call EFUNC(common,ASLToPosition));\r\n\r\n            TRACE_1(\"Planting Mass\", (getMass _expSetupVehicle));\r\n            //If the object is too heavy, it can kill a player if it colides\r\n            if ((getMass _expSetupVehicle) > 5) then {_expSetupVehicle setMass 5;};\r\n\r\n            if (isNull _attachVehicle) then {\r\n                _placeAngle = _cameraAngle - GVAR(TweakedAngle) + 180;\r\n                _expSetupVehicle setPosAsl _virtualPosASL;\r\n                _expSetupVehicle setDir _placeAngle;\r\n                _placeAngle = _placeAngle + 180; //CfgAmmos seem to be 180 for some reason\r\n            } else {\r\n                _modelOffset = _attachVehicle worldToModel (_virtualPosASL call EFUNC(common,ASLToPosition));\r\n                _placeAngle = _cameraAngle - (getDir _attachVehicle) + 180;\r\n                _expSetupVehicle attachTo [_attachVehicle, _modelOffset];\r\n                _expSetupVehicle setVectorDirAndUp [[0,0,-1],[(sin _placeAngle),(cos _placeAngle),0]];\r\n            };\r\n\r\n            TRACE_1(\"Place angel\",_placeAngle);\r\n\r\n            _expSetupVehicle setVariable [QGVAR(class), _magClassname, true];\r\n            _expSetupVehicle setVariable [QGVAR(Direction), _placeAngle, true];\r\n\r\n            _unit removeMagazine _magClassname;\r\n            _unit playActionNow \"PutDown\";\r\n            _unit setVariable [QGVAR(PlantingExplosive), true];\r\n            [{_this setVariable [QGVAR(PlantingExplosive), false]}, _unit, 1.5] call CBA_fnc_waitAndExecute;\r\n\r\n        };\r\n    } else {\r\n        _screenPos = worldToScreen (_virtualPosASL call EFUNC(common,ASLToPosition));\r\n        if (_badPosition || {_screenPos isEqualTo []}) then {\r\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow false;\r\n        } else {\r\n            //Show the model on the hud in aprox the same size/location as it will be placed:\r\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlShow true;\r\n\r\n            _realDistance = ((_virtualPosASL call EFUNC(common,ASLToPosition)) distance (positionCameraToWorld [0,0,0])) / ((call CBA_fnc_getFov) select 1);\r\n            _screenPos = [(_screenPos select 0), _realDistance, (_screenPos select 1)];\r\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetPosition _screenPos;\r\n\r\n            _modelDir = [0,0,-1];\r\n            _modelUp = [0,-1,0];\r\n            if (isNull _attachVehicle) then {\r\n                _angle = acos (_lookDirVector select 2);\r\n                _modelUp = [0, (cos _angle), (sin _angle)];\r\n                _modelDir = [cos GVAR(TweakedAngle), sin GVAR(TweakedAngle), 0] vectorCrossProduct _modelUp;\r\n            };\r\n            ((uiNamespace getVariable [QGVAR(virtualAmmoDisplay), displayNull]) displayCtrl 800851) ctrlSetModelDirAndUp [_modelDir, _modelUp];\r\n        };\r\n    };\r\n\r\n    END_COUNTER(pfeh);\r\n}, 0, [_unit, _magClassname, _setupObjectClass, _isAttachable]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_explosives_fnc_startDefuse","file":"explosives/functions/fnc_startDefuse.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Starts defusing an explosive\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target explosive <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, ACE_Interaction_Target] call ACE_Explosives_fnc_StartDefuse;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\nTRACE_2(\"params\",_unit,_target);\r\n\r\nprivate[\"_actionToPlay\", \"_defuseTime\", \"_isEOD\"];\r\n\r\n_target = attachedTo (_target);\r\n\r\n_fnc_DefuseTime = {\r\n    params [\"_specialist\", \"_target\"];\r\n    TRACE_2(\"defuseTime\",_specialist,_target);\r\n    private [\"_defuseTime\"];\r\n    _defuseTime = 5;\r\n    if (isNumber(ConfigFile >> \"CfgAmmo\" >> typeOf (_target) >> QGVAR(DefuseTime))) then {\r\n        _defuseTime = getNumber(ConfigFile >> \"CfgAmmo\" >> typeOf (_target) >> QGVAR(DefuseTime));\r\n    };\r\n    if (!_specialist && {GVAR(PunishNonSpecialists)}) then {\r\n        _defuseTime = _defuseTime * 1.5;\r\n    };\r\n    _defuseTime\r\n};\r\n_actionToPlay = \"MedicOther\";\r\nif (STANCE _unit == \"Prone\") then {\r\n    _actionToPlay = \"PutDown\";\r\n};\r\n\r\nif (ACE_player != _unit) then {\r\n    // If the unit is a player, call the function on the player.\r\n    if (isPlayer _unit) then {\r\n        [QGVAR(startDefuse), [_unit, _target], _unit] call CBA_fnc_targetEvent;\r\n    } else {\r\n        _unit playActionNow _actionToPlay;\r\n        _unit disableAI \"MOVE\";\r\n        _unit disableAI \"TARGET\";\r\n        _defuseTime = [[_unit] call EFUNC(Common,isEOD), _target] call _fnc_DefuseTime;\r\n        [{\r\n            params [\"_unit\", \"_target\"];\r\n            TRACE_2(\"defuse finished\",_unit,_target);\r\n            [_unit, _target] call FUNC(defuseExplosive);\r\n            _unit enableAI \"MOVE\";\r\n            _unit enableAI \"TARGET\";\r\n        }, [_unit, _target], _defuseTime] call CBA_fnc_waitAndExecute;\r\n    };\r\n} else {\r\n    _unit playActionNow _actionToPlay;\r\n    _isEOD = [_unit] call EFUNC(Common,isEOD);\r\n    _defuseTime = [_isEOD, _target] call _fnc_DefuseTime;\r\n    if (_isEOD || {!GVAR(RequireSpecialist)}) then {\r\n        [_defuseTime, [_unit,_target], {(_this select 0) call FUNC(defuseExplosive)}, {}, (localize LSTRING(DefusingExplosive))] call EFUNC(common,progressBar);\r\n    };\r\n};\r\n"},{"name":"ace_explosives_fnc_startTimer","file":"explosives/functions/fnc_startTimer.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Starts a timer for an explosive.\r\n *\r\n * Arguments:\r\n * 0: Explosive <OBJECT>\r\n * 1: Time till detonate <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_explosive, 10] call ACE_Explosives_fnc_startTimer;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_explosive\", \"_delay\"];\r\nTRACE_2(\"params\",_explosive,_delay);\r\n\r\n[{\r\n    params [\"_explosive\"];\r\n    TRACE_1(\"Explosive Going Boom\",_explosive);\r\n    if (!isNull _explosive) then {\r\n        [_explosive, -1, [_explosive, 0]] call FUNC(detonateExplosive);\r\n    };\r\n}, [_explosive], _delay] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_explosives_fnc_triggerType","file":"explosives/functions/fnc_triggerType.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Gets the types of triggers associated with the explosive\r\n *\r\n * Arguments:\r\n * 0: Explosive magazine <STRING>\r\n *\r\n * Return Value:\r\n * Supported triggers as ACE_Triggers config entries <ARRAY>\r\n *\r\n * Example:\r\n * [\"SatchelCharge_Remote_Mag\"] call ACE_Explosives_fnc_TriggerType\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_magazineClassname\"];\r\nTRACE_1(\"params\",_magazineClassname);\r\n\r\nprivate[\"_result\", \"_config\", \"_count\", \"_index\"];\r\n\r\n_result = [];\r\n_config = getArray (ConfigFile >> \"CfgMagazines\" >> _magazineClassname >> \"ACE_Triggers\" >> \"SupportedTriggers\");\r\n_count = count _config;\r\n\r\nfor \"_index\" from 0 to (_count - 1) do {\r\n    _result set [_index, ConfigFile >> \"ACE_Triggers\" >> (_config select _index)];\r\n};\r\n_result\r\n"}],"fastroping":[{"name":"ace_fastroping_fnc_canCloseRamp","file":"fastroping/functions/fnc_canCloseRamp.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Checks if the player can close the ramp of the given helo.\r\n *\r\n * Arguments:\r\n * 0: The helicopter <OBJECT>\r\n * 1: The ramp animation name <STRING>\r\n * 2: Turret paths that can close the ramp <ARRAY>\r\n *\r\n * Return Value:\r\n * Able to close ramp <BOOL>\r\n *\r\n * Example:\r\n * [_player, _vehicle] call ace_fastroping_fnc_canCloseRamp\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\", \"_door\", \"_turretPaths\"];\r\n\r\n(_vehicle doorPhase _door > 0.5) &&\r\n{alive _vehicle} &&\r\n{(_vehicle getVariable [\"bis_disabled_Ramp\", 0]) != 1} &&\r\n{!(_vehicle getVariable [QGVAR(doorsLocked), false])} &&\r\n{\r\n    (ACE_player == driver _vehicle) ||\r\n    {((assignedVehicleRole ACE_player) param [1, []]) in _turretPaths}\r\n}\r\n"},{"name":"ace_fastroping_fnc_canCutRopes","file":"fastroping/functions/fnc_canCutRopes.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Checks if the unit can cut deployed ropes.\r\n *\r\n * Arguments:\r\n * 0: The helicopter itself <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to cut ropes <BOOL>\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_canCutRopes\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\n\r\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n\r\n!(_deployedRopes isEqualTo [])\r\n"},{"name":"ace_fastroping_fnc_canDeployRopes","file":"fastroping/functions/fnc_canDeployRopes.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Checks if the unit can deploy ropes from the helicopter.\r\n *\r\n * Arguments:\r\n * 0: Unit occupying the helicopter <OBJECT>\r\n * 1: The helicopter itself <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to deploy ropes <BOOL>\r\n *\r\n * Example:\r\n * [_player, _vehicle] call ace_fastroping_fnc_canDeployRopes\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_unit\", \"_vehicle\"];\r\nprivate [\"_config\", \"_enabled\", \"_deploymentStage\"];\r\n\r\n_config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n_enabled = getNumber (_config >> QGVAR(enabled));\r\n_deploymentStage = _vehicle getVariable [QGVAR(deploymentStage), 0];\r\n\r\n(driver _vehicle != _unit) &&\r\n{getPos _vehicle select 2 > 2} &&\r\n{_enabled == 1 || {_enabled == 2 && {!(isNull (_vehicle getVariable [QGVAR(FRIES), objNull]))}}} &&\r\n{\r\n    (_deploymentStage == 0 && {getText (_config >> QGVAR(onPrepare)) == \"\"}) ||\r\n    {_deploymentStage == 2 && {getText (_config >> QGVAR(onPrepare)) != \"\"}}\r\n}\r\n"},{"name":"ace_fastroping_fnc_canFastRope","file":"fastroping/functions/fnc_canFastRope.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Checks if the unit can fast rope from the helicopter.\r\n *\r\n * Arguments:\r\n * 0: Unit occupying the helicopter <OBJECT>\r\n * 1: The helicopter itself <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to fast ropes <BOOL>\r\n *\r\n * Example:\r\n * [_player, _vehicle] call ace_fastroping_fnc_canDeployRopes\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_unit\", \"_vehicle\"];\r\n\r\nprivate _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n\r\n((driver _vehicle != _unit) &&\r\n{!(_deployedRopes isEqualTo [])} &&\r\n{{!(_x select 5)} count (_deployedRopes) > 0} &&\r\n{getPos _vehicle select 2 > 2})\r\n"},{"name":"ace_fastroping_fnc_canPrepareFRIES","file":"fastroping/functions/fnc_canPrepareFRIES.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Checks if the unit can prepare the helicopters FRIES.\r\n *\r\n * Arguments:\r\n * 0: The helicopter itself <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to prepare FRIES <BOOL>\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_canPrepareFRIES\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n\r\n((getNumber (_config >> QGVAR(enabled)) == 1) || {!(isNull (_vehicle getVariable [QGVAR(FRIES), objNull]))}) &&\r\n{(_vehicle getVariable [QGVAR(deploymentStage), 0]) == 0} &&\r\n{getText (_config >> QGVAR(onPrepare)) != \"\"}\r\n"},{"name":"ace_fastroping_fnc_checkVehicleThread","file":"fastroping/functions/fnc_checkVehicleThread.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Checks if the given helicopter still exits, and if not, destroys the FRIES.\r\n *\r\n * Arguments:\r\n * 0: The helicopter <OBJECT>\r\n * 1: The helicopter's FRIES <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_vehicle, _fries] call ace_fastroping_fnc_checkVehicleThread\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\", \"_fries\"];\r\n\r\nif (isNull _vehicle) then {\r\n    deleteVehicle _fries;\r\n} else {\r\n    [FUNC(checkVehicleThread), _this, 5] call CBA_fnc_waitAndExecute;\r\n};\r\n"},{"name":"ace_fastroping_fnc_cutRopes","file":"fastroping/functions/fnc_cutRopes.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Cut deployed ropes.\r\n *\r\n * Arguments:\r\n * 0: A helicopter with deployed ropes <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_cutRopes\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\nprivate [\"_deployedRopes\", \"_config\", \"_waitTime\"];\r\n\r\n_deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n{\r\n    _x params [\"\", \"_ropeTop\", \"_ropeBottom\", \"_dummy\", \"_hook\", \"_occupied\"];\r\n\r\n    //Make player fall if rope is occupied\r\n    if (_occupied) then {\r\n        private _attachedObjects = attachedObjects _dummy;\r\n        //Rope is considered occupied when it's broken as well, so check if array is empty\r\n        //Note: ropes are not considered attached objects by Arma\r\n        if !(_attachedObjects isEqualTo []) then {\r\n            detach ((attachedObjects _dummy) select 0);\r\n        };\r\n    };\r\n\r\n    //Destroy rope\r\n    //Only delete the hook first so the rope falls down.\r\n    //Note: ropeDetach was used here before, but the command seems a bit broken.\r\n    deleteVehicle _hook;\r\n    [{{deleteVehicle _x} count _this}, [_ropeTop, _ropeBottom, _dummy], 60] call CBA_fnc_waitAndExecute;\r\n} count _deployedRopes;\r\n\r\n_vehicle setVariable [QGVAR(deployedRopes), [], true];\r\n_vehicle setVariable [QGVAR(deploymentStage), 1, true];\r\n\r\n_config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n_waitTime = 0;\r\nif (isText (_config >> QGVAR(onCut))) then {\r\n    _waitTime = [_vehicle] call (missionNamespace getVariable (getText (_config >> QGVAR(onCut))));\r\n};\r\n\r\n[{\r\n    _this setVariable [QGVAR(deploymentStage), 0, true];\r\n}, _vehicle, _waitTime] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_fastroping_fnc_deployAI","file":"fastroping/functions/fnc_deployAI.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Auomatically deploy a helicopter filled with AI units.\r\n *\r\n * Arguments:\r\n * 0: The helicopter <OBJECT>\r\n * 1: Deploy special roles (gunners, copilot) (default: false) <BOOL>\r\n * 2: Create deployment group (default: true) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_deployAI\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [[\"_vehicle\", objNull, [objNull]], [\"_deploySpecial\", false, [true]], [\"_createDeploymentGroup\", true, [true]]];\r\nprivate [\"_config\", \"_configEnabled\", \"_deployTime\", \"_unitsToDeploy\", \"_deployGroup\"];\r\n\r\nif (isNull _vehicle || {!(_vehicle isKindOf \"Helicopter\")}) exitWith {\r\n    if (hasInterface) then {\r\n        // Note: BIS_fnc_guiMessage causes a CTD with call, so spawn is used instead.\r\n        [\"deployAI was called with an invalid or non-existant vehicle.\", QFUNC(deployAI)] spawn BIS_fnc_guiMessage;\r\n    };\r\n    ACE_LOGERROR('FUNC(deployAI): deployAI was called with an invalid or non-existant vehicle.');\r\n};\r\n\r\n_config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n_configEnabled = getNumber (_config >> QGVAR(enabled));\r\nif (_configEnabled == 0) exitWith {\r\n    if (hasInterface) then {\r\n        [format [\"You cannot fast rope from a \"\"%1\"\" helicopter.\", getText (_config >> \"DisplayName\")], QFUNC(deployAI)] spawn BIS_fnc_guiMessage;\r\n    };\r\n    ACE_LOGERROR_1('FUNC(deployAI): You cannot fast rope from a \"%1\" helicopter.',getText (_config >> \"DisplayName\"));\r\n};\r\n\r\nif (_configEnabled == 2 && {isNull (_vehicle getVariable [QGVAR(FRIES), objNull])}) exitWith {\r\n    if (hasInterface) then {\r\n        [format [\"\"\"%1\"\" requires a FRIES for fastroping, but has not been equipped with one.\", getText (_config >> \"DisplayName\")], QFUNC(deployAI)] spawn BIS_fnc_guiMessage;\r\n    };\r\n    ACE_LOGERROR_1('FUNC(deployAI): \"%1\" requires a FRIES for fastroping but has not been equipped with one.',getText (_config >> \"DisplayName\"));\r\n};\r\n\r\n_unitsToDeploy = crew _vehicle;\r\nif (_deploySpecial) then {\r\n    _unitsToDeploy deleteAt (_unitsToDeploy find driver _vehicle);\r\n} else {\r\n    _unitsToDeploy = _unitsToDeploy select {(assignedVehicleRole _x) select 0 == \"cargo\"};\r\n};\r\n\r\nif (_unitsToDeploy isEqualTo []) exitWith {\r\n    ACE_LOGWARNING_1('FUNC(deployAI): Found no units to deploy in \"%1\".',getText (_config >> \"DisplayName\"));\r\n};\r\n\r\nif (_createDeploymentGroup) then {\r\n    _deployGroup = createGroup side (_unitsToDeploy select 0);\r\n    _unitsToDeploy joinSilent _deployGroup;\r\n};\r\n\r\n_deployTime = 0;\r\nif (getText (_config >> QGVAR(onPrepare)) != \"\") then {\r\n    _deployTime = [_vehicle] call (missionNamespace getVariable (getText (_config >> QGVAR(onPrepare))));\r\n};\r\n[{[_this] call FUNC(deployRopes)}, _vehicle, _deployTime] call CBA_fnc_waitAndExecute;\r\ndriver _vehicle disableAI \"MOVE\";\r\n\r\nDFUNC(deployAIRecursive) = {\r\n    params [\"_vehicle\", \"_unitsToDeploy\"];\r\n\r\n    private _unit = _unitsToDeploy deleteAt 0;\r\n    unassignVehicle _unit;\r\n    [_unit, _vehicle] call FUNC(fastRope);\r\n\r\n    if !(_unitsToDeploy isEqualTo []) then {\r\n        [{\r\n            [{\r\n                params [\"_vehicle\"];\r\n                private _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n                ({!(_x select 5)} count (_deployedRopes)) > 0\r\n            }, FUNC(deployAIRecursive), _this] call CBA_fnc_waitUntilAndExecute;\r\n        }, [_vehicle, _unitsToDeploy], 1] call CBA_fnc_waitAndExecute;\r\n    } else {\r\n        [{\r\n            private _deployedRopes = _this getVariable [QGVAR(deployedRopes), []];\r\n            ({_x select 5} count (_deployedRopes)) == 0\r\n        }, {\r\n            [_this] call FUNC(cutRopes);\r\n            driver _this enableAI \"MOVE\";\r\n        }, _vehicle] call CBA_fnc_waitUntilAndExecute;\r\n    };\r\n};\r\n\r\n[FUNC(deployAIRecursive), [_vehicle, _unitsToDeploy], _deployTime + 4] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_fastroping_fnc_deployAIWaypoint","file":"fastroping/functions/fnc_deployAIWaypoint.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Waypoint function for the fast rope waypoint.\r\n *\r\n * Arguments:\r\n * 0: Group <GROUP>\r\n * 1: Waypoint position <ARRAY>\r\n *\r\n * Return Value:\r\n * true\r\n *\r\n * Example:\r\n * [_group, [6560, 12390, 0]] call ace_fastroping_fnc_deployAIWayoint\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [[\"_group\", grpNull, [grpNull]], [\"_position\", [0, 0, 0], [[]], 3]];\r\nprivate [\"_vehicle\", \"_commander\", \"_speedMode\"];\r\n\r\n_vehicle = vehicle leader _group;\r\n_commander = effectiveCommander _vehicle;\r\n_speedMode = speedMode _group;\r\n\r\n// - Approach -----------------------------------------------------------------\r\nif (_vehicle distance2D _position > 50) then {\r\n    _group setSpeedMode \"LIMITED\";\r\n    _vehicle flyInHeight 20;\r\n    _commander doMove _position;\r\n    waitUntil {_vehicle distance2D _position < 50};\r\n    waitUntil {vectorMagnitude (velocity _vehicle) < 3};\r\n    //doStop _commander;\r\n};\r\n\r\n// - Deployment ---------------------------------------------------------------\r\n[_vehicle] call FUNC(deployAI);\r\nwaitUntil {!((_vehicle getVariable [QGVAR(deployedRopes), []]) isEqualTo [])};\r\nwaitUntil {(_vehicle getVariable [QGVAR(deployedRopes), []]) isEqualTo []};\r\n_group setSpeedMode _speedMode;\r\n\r\ntrue\r\n"},{"name":"ace_fastroping_fnc_deployRopes","file":"fastroping/functions/fnc_deployRopes.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Deploy ropes from the helicopter.\r\n *\r\n * Arguments:\r\n * 0: The helicopter itself <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_deployRopes\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\nprivate [\"_config\", \"_ropeOrigins\", \"_ropeOrigin\", \"_deployedRopes\", \"_hookAttachment\", \"_origin\", \"_dummy\", \"_hook\", \"_ropeTop\", \"_ropeBottom\"];\r\n\r\n_config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n\r\n_ropeOrigins = getArray (_config >> QGVAR(ropeOrigins));\r\n_deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n_hookAttachment = _vehicle getVariable [QGVAR(FRIES), _vehicle];\r\n{\r\n    _ropeOrigin = _x;\r\n    _hook = QGVAR(helper) createVehicle [0, 0, 0];\r\n    _hook allowDamage false;\r\n    if (typeName _ropeOrigin == \"ARRAY\") then {\r\n        _hook attachTo [_hookAttachment, _ropeOrigin];\r\n    } else {\r\n        _hook attachTo [_hookAttachment, [0, 0, 0], _ropeOrigin];\r\n    };\r\n\r\n    _origin = getPosATL _hook;\r\n\r\n    _dummy = createVehicle [QGVAR(helper), _origin vectorAdd [0, 0, -1], [], 0, \"CAN_COLLIDE\"];\r\n    _dummy allowDamage false;\r\n    _dummy disableCollisionWith _vehicle;\r\n\r\n    _ropeTop = ropeCreate [_dummy, [0, 0, 0], _hook, [0, 0, 0], 0.5];\r\n    _ropeBottom = ropeCreate [_dummy, [0, 0, 0], 1];\r\n    ropeUnwind [_ropeBottom, 30, 34.5, false];\r\n\r\n    _ropeTop addEventHandler [\"RopeBreak\", {[_this, \"top\"] call FUNC(onRopeBreak)}];\r\n    _ropeBottom addEventHandler [\"RopeBreak\", {[_this, \"bottom\"] call FUNC(onRopeBreak)}];\r\n\r\n    //deployedRopes format: attachment point, top part of the rope, bottom part of the rope, attachTo helper object, occupied\r\n    _deployedRopes pushBack [_ropeOrigin, _ropeTop, _ropeBottom, _dummy, _hook, false];\r\n\r\n    false\r\n} count _ropeOrigins;\r\n\r\n_vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\r\n_vehicle setVariable [QGVAR(deploymentStage), 3, true];\r\n"},{"name":"ace_fastroping_fnc_equipFRIES","file":"fastroping/functions/fnc_equipFRIES.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Equips the given helicopter with a FRIES.\r\n *\r\n * Arguments:\r\n * 0: The helicopter <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_equipFRIES\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\nprivate [\"_config\", \"_fries\"];\r\n\r\n_config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\nif !(isNumber (_config >> QGVAR(enabled))) then {\r\n    [\"%1 has not been configured for ACE_Fastroping.\", getText (_config >> \"DisplayName\")] call BIS_fnc_error;\r\n} else {\r\n    if (getNumber (_config >> QGVAR(enabled)) == 2) then {\r\n        _fries = (getText (_config >> QGVAR(friesType))) createVehicle [0, 0, 0];\r\n        _fries attachTo [_vehicle, (getArray (_config >> QGVAR(friesAttachmentPoint)))];\r\n        _vehicle setVariable [QGVAR(FRIES), _fries, true];\r\n        _vehicle addEventHandler [\"Killed\", {\r\n            params [\"_vehicle\"];\r\n            deleteVehicle (_vehicle getVariable [QGVAR(FRIES), objNull]);\r\n            _vehicle setVariable [QGVAR(FRIES), nil, true];\r\n\r\n            if !((_vehicle getVariable [QGVAR(deployedRopes), []] isEqualTo [])) then {\r\n                [_vehicle] call FUNC(cutRopes);\r\n            };\r\n        }];\r\n        [FUNC(checkVehicleThread), [_vehicle, _fries], 5] call CBA_fnc_waitAndExecute;\r\n    };\r\n};\r\n"},{"name":"ace_fastroping_fnc_fastRope","file":"fastroping/functions/fnc_fastRope.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Lets the unit fast rope.\r\n *\r\n * Arguments:\r\n * 0: Unit occupying the helicopter <OBJECT>\r\n * 1: The helicopter itself <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_player, _vehicle] call ace_fastroping_fnc_fastRope\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_unit\", \"_vehicle\"];\r\nprivate [\"_deployedRopes\", \"_usableRope\", \"_usableRopeIndex\"];\r\n\r\n//Select unoccupied rope\r\n_deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n_usableRope = _deployedRopes select 0;\r\n_usableRopeIndex = 0;\r\n{\r\n    if !(_x select 5) exitWith {\r\n        _usableRope = _x;\r\n        _usableRopeIndex = _forEachIndex;\r\n    };\r\n} forEach _deployedRopes;\r\n\r\n_usableRope set [5, true];\r\n_deployedRopes set [_usableRopeIndex, _usableRope];\r\n_vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\r\n\r\n//Start server PFH asap\r\n[QGVAR(startFastRope), [_unit, _vehicle, _usableRope, _usableRopeIndex, false]] call CBA_fnc_serverEvent;\r\nmoveOut _unit;\r\n[FUNC(fastRopeLocalPFH), 0, [_unit, _vehicle, _usableRope, _usableRopeIndex, diag_tickTime]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_fastroping_fnc_fastRopeLocalPFH","file":"fastroping/functions/fnc_fastRopeLocalPFH.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Local PerFrameHandler during fast roping.\r\n *\r\n * Arguments:\r\n * 0: PFH arguments <ARRAY>\r\n * 1: PFH handle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[_unit, _vehicle, _rope, _ropeIndex], 0] call ace_fastroping_fnc_fastRopeLocalPFH\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_arguments\", \"_pfhHandle\"];\r\n_arguments params [\"_unit\", \"_vehicle\", \"_rope\", \"_ropeIndex\", \"_timeToPlayRopeSound\"];\r\n_rope params [\"_attachmentPoint\", \"_ropeTop\", \"_ropeBottom\", \"_dummy\", \"_hook\", \"_occupied\"];\r\nprivate [\"_vectorUp\", \"_vectorDir\", \"_origin\"];\r\n\r\n//Wait until the unit is actually outside of the helicopter\r\nif (vehicle _unit != _unit) exitWith {};\r\n\r\n//Start fast roping\r\nif (animationState _unit != \"ACE_FastRoping\") exitWith {\r\n    _unit disableCollisionWith _dummy;\r\n    _unit attachTo [_dummy, [0, 0, -1.45]];\r\n    [_unit, \"ACE_FastRoping\", 2] call EFUNC(common,doAnimation);\r\n};\r\n\r\n\r\n//End of fast rope\r\nif (isNull attachedTo _unit) exitWith {\r\n    TRACE_1(\"exit pfeh\",_unit);\r\n    [_unit, \"\", 2] call EFUNC(common,doAnimation);\r\n    _unit setVectorUp [0, 0, 1];\r\n\r\n    if (_unit == ACE_player) then {\r\n        playSound QGVAR(Thud);\r\n    };\r\n\r\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\nif (_unit == ACE_player && {diag_tickTime > _timeToPlayRopeSound}) then {\r\n    _arguments set [4, (_timeToPlayRopeSound + 1)];\r\n    playSound QGVAR(Rope);\r\n};\r\n"},{"name":"ace_fastroping_fnc_fastRopeServerPFH","file":"fastroping/functions/fnc_fastRopeServerPFH.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Server PerFrameHandler during fast roping.\r\n *\r\n * Arguments:\r\n * 0: PFH arguments <ARRAY>\r\n * 1: PFH handle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[_unit, _vehicle, _rope, _ropeIndex], 0] call ace_fastroping_fnc_fastRopeServerPFH\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_arguments\", \"_pfhHandle\"];\r\n_arguments params [\"_unit\", \"_vehicle\", \"_rope\", \"_ropeIndex\", \"_hasBeenAttached\"];\r\n_rope params [\"_attachmentPoint\", \"_ropeTop\", \"_ropeBottom\", \"_dummy\", \"_hook\", \"_occupied\"];\r\nprivate [\"_vectorUp\", \"_vectorDir\", \"_origin\"];\r\n\r\n//Wait until the unit is actually outside of the helicopter\r\nif (vehicle _unit != _unit) exitWith {};\r\n\r\n//Start fast roping\r\nif (getMass _dummy != 80) exitWith {\r\n    //Fix for twitchyness\r\n    _dummy setMass 80;\r\n    _dummy setCenterOfMass [0, 0, -2];\r\n    _origin = getPosASL _hook;\r\n    _dummy setPosASL (_origin vectorAdd [0, 0, -2]);\r\n    _dummy setVectorUp [0, 0, 1];\r\n\r\n    ropeUnwind [_ropeTop, 6, 34.5];\r\n    ropeUnwind [_ropeBottom, 6, 0.5];\r\n};\r\n\r\n//Check if the player has been attached to the rope yet\r\nif (!_hasBeenAttached && {!(isNull attachedTo _unit)}) then {\r\n    _hasBeenAttached = true;\r\n    _arguments set [4, true];\r\n};\r\n\r\n//Exit when the unit has been detached and is falling (rope broke, heli flew too fast, etc.)\r\n//Make sure this isn't executed before the unit is actually fastroping\r\nif (_hasBeenAttached && {isNull attachedTo _unit}) exitWith {\r\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n//Setting the velocity manually to reduce twitching\r\n_dummy setVelocity [0,0,-6];\r\n\r\n//Check if fast rope is finished\r\nif (((getPos _unit select 2) < 0.2) || {ropeLength _ropeTop == 34.5} || {vectorMagnitude (velocity _vehicle) > 5} || {!(alive _unit)} || {captive _unit}) exitWith {\r\n    detach _unit;\r\n\r\n    //Reset rope\r\n    deleteVehicle _ropeTop;\r\n    deleteVehicle _ropeBottom;\r\n\r\n    _origin = getPosASL _hook;\r\n    _dummy setPosASL (_origin vectorAdd [0, 0, -1]);\r\n\r\n    //Restore original mass and center of mass\r\n    _dummy setMass 40;\r\n    _dummy setCenterOfMass [0.000143227,0.00105986,-0.246147];\r\n\r\n    _ropeTop = ropeCreate [_dummy, [0, 0, 0], _hook, [0, 0, 0], 0.5];\r\n    _ropeBottom = ropeCreate [_dummy, [0, 0, 0], 34.5];\r\n\r\n    _ropeTop addEventHandler [\"RopeBreak\", {[_this, \"top\"] call FUNC(onRopeBreak)}];\r\n    _ropeBottom addEventHandler [\"RopeBreak\", {[_this, \"bottom\"] call FUNC(onRopeBreak)}];\r\n\r\n    //Update deployedRopes array\r\n    _deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n    _deployedRopes set [_ropeIndex, [_attachmentPoint, _ropeTop, _ropeBottom, _dummy, _hook, false]];\r\n    _vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\r\n\r\n    [_pfhHandle] call CBA_fnc_removePerFrameHandler;\r\n};\r\n"},{"name":"ace_fastroping_fnc_moduleEquipFRIES","file":"fastroping/functions/fnc_moduleEquipFRIES.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Equips synched helicopters with a FRIES.\r\n *\r\n * Arguments:\r\n * 0: Module <LOGIC>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_module] call ace_fastroping_fnc_moduleEquipFRIES\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_module\"];\r\n\r\nprivate _synchedUnits = synchronizedObjects _module;\r\n{\r\n    if (_x isKindOf \"CAManBase\") then {\r\n        _x = vehicle _x;\r\n    };\r\n    [_x] call FUNC(equipFRIES);\r\n    false\r\n} count _synchedUnits;\r\n"},{"name":"ace_fastroping_fnc_onCutCommon","file":"fastroping/functions/fnc_onCutCommon.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Function for opening doors and extending the hook for most vanilla helos.\r\n *\r\n * Arguments:\r\n * 0: Helicopter <OBJECT>\r\n *\r\n * Return Value:\r\n * Amount of time to wait before cutting ropes <NUMBER>\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_onCutRopesCommon\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\n\r\nprivate _fries = _vehicle getVariable [QGVAR(FRIES), objNull];\r\nif !(isNull _fries) then {\r\n    _fries animate [\"extendHookRight\", 0];\r\n    _fries animate [\"extendHookLeft\", 0];\r\n    [{\r\n        _this animateDoor [\"door_R\", 0];\r\n        _this animateDoor [\"door_L\", 0];\r\n        _this animateDoor [\"CargoRamp_Open\", 0];\r\n        _this animateDoor [\"Door_rear_source\", 0];\r\n        _this animateDoor [\"Door_6_source\", 0];\r\n        _this animate [\"dvere1_posunZ\", 0];\r\n        _this animate [\"dvere2_posunZ\", 0];\r\n        _this setVariable [QGVAR(doorsLocked), false, true];\r\n    }, _vehicle, 2] call CBA_fnc_waitAndExecute;\r\n\r\n    4\r\n} else {\r\n    _vehicle animateDoor [\"door_R\", 0];\r\n    _vehicle animateDoor [\"door_L\", 0];\r\n    _vehicle animateDoor [\"CargoRamp_Open\", 0];\r\n    _vehicle animateDoor [\"Door_rear_source\", 0];\r\n    _vehicle animateDoor [\"Door_6_source\", 0];\r\n    _vehicle animate [\"dvere1_posunZ\", 0];\r\n    _vehicle animate [\"dvere2_posunZ\", 0];\r\n    _vehicle setVariable [QGVAR(doorsLocked), false, true];\r\n\r\n    2\r\n};\r\n"},{"name":"ace_fastroping_fnc_onPrepareCommon","file":"fastroping/functions/fnc_onPrepareCommon.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Function for closing doors and retracting the hook for most vanilla helos.\r\n *\r\n * Arguments:\r\n * 0: Helicopter <OBJECT>\r\n *\r\n * Return Value:\r\n * Amount of time to wait before deploying ropes <NUMBER>\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_onDeployRopesCommon\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\nprivate [\"_fries\", \"_waitTime\"];\r\n\r\n_waitTime = 2;\r\n\r\n_vehicle animateDoor [\"door_R\", 1];\r\n_vehicle animateDoor [\"door_L\", 1];\r\n_vehicle animateDoor [\"CargoRamp_Open\", 1];\r\n_vehicle animateDoor [\"Door_rear_source\", 1];\r\n_vehicle animateDoor [\"Door_6_source\", 1];\r\n_vehicle animate [\"dvere1_posunZ\", 1];\r\n_vehicle animate [\"dvere2_posunZ\", 1];\r\n\r\n_vehicle setVariable [QGVAR(doorsLocked), true, true];\r\n\r\n_fries = _vehicle getVariable [QGVAR(FRIES), objNull];\r\nif !(isNull _fries) then {\r\n    [{\r\n        _this animate [\"extendHookRight\", 1];\r\n        _this animate [\"extendHookLeft\", 1];\r\n    }, _fries, 2] call CBA_fnc_waitAndExecute;\r\n    _waitTime = 4;\r\n};\r\n\r\n_waitTime\r\n"},{"name":"ace_fastroping_fnc_onRopeBreak","file":"fastroping/functions/fnc_onRopeBreak.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Handles ropes breaking when deployed.\r\n *\r\n * Arguments:\r\n * 0: RopeBreak EH arguments <ARRAY>\r\n * 1: Part of rope (\"top\" or \"bottom\") <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_ehArgs\", \"_part\"];\r\n_ehArgs params [\"_rope\", \"_helper1\", \"_helper2\"];\r\nprivate [\"_vehicle\", \"_deployedRopes\", \"_brokenRope\", \"_unit\"];\r\n\r\nif (_part == \"bottom\") then {\r\n    _helper2 = (ropeAttachedObjects _helper1) select 0;\r\n};\r\n\r\n_vehicle = attachedTo _helper2;\r\nif (isNil \"_vehicle\") exitWith {}; //Exit when vehicle got destroyed\r\nif (_vehicle isKindOf \"ACE_friesBase\") then {\r\n    _vehicle = attachedTo _vehicle;\r\n};\r\n\r\n_deployedRopes = _vehicle getVariable [QGVAR(deployedRopes), []];\r\n_brokenRope = [];\r\n{\r\n    if ((_x select 1 == _rope) || {(_x select 2 == _rope)}) exitWith {\r\n        _brokenRope = _x;\r\n    };\r\n} forEach _deployedRopes;\r\n_brokenRope set [5, true];\r\n_vehicle setVariable [QGVAR(deployedRopes), _deployedRopes, true];\r\n\r\n_unit = {\r\n    if (_x isKindOf \"CAManBase\") exitWith {_x};\r\n} forEach (attachedObjects (_brokenRope select 3));\r\n\r\nif !(isNil \"_unit\") then {\r\n    if (_part == \"top\") then {\r\n        detach _unit;\r\n    } else {\r\n        //TODO: ???\r\n        //Rope might break at the very bottom\r\n        //-> letting the unit fall is not always ideal\r\n    };\r\n};\r\n"},{"name":"ace_fastroping_fnc_prepareFRIES","file":"fastroping/functions/fnc_prepareFRIES.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Prepares the helicopters FRIES.\r\n *\r\n * Arguments:\r\n * 0: A helicopter with deployed ropes <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_vehicle] call ace_fastroping_fnc_prepareFRIES\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\"];\r\nprivate [\"_config\", \"_waitTime\"];\r\n\r\n//Stage indicator: 0 - travel mode; 1 - preparing FRIES; 2 - FRIES ready; 3 - ropes deployed\r\n_vehicle setVariable [QGVAR(deploymentStage), 1, true];\r\n\r\n_config = configFile >> \"CfgVehicles\" >> typeOf _vehicle;\r\n_waitTime = 0;\r\nif (isText (_config >> QGVAR(onPrepare))) then {\r\n    _waitTime = [_vehicle] call (missionNamespace getVariable (getText (_config >> QGVAR(onPrepare))));\r\n};\r\n\r\n[{\r\n    _this setVariable [QGVAR(deploymentStage), 2, true];\r\n}, _vehicle, _waitTime] call CBA_fnc_waitAndExecute;\r\n"}],"fcs":[{"name":"ace_fcs_fnc_adjustRange","file":"fcs/functions/fnc_adjustRange.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Adjusts the currently zeroed distance.\r\n *\r\n * Arguments:\r\n * 0: The vehicle in question <OBJECT>\r\n * 1: The Turrets that the Vehicle has <ARRAY>\r\n * 2: The amount to add to the distance (can be negative) <NUMMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_turret\", \"_delta\"];\r\n\r\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\r\n\r\nprivate _min = getNumber (_turretConfig >> QGVAR(MinDistance));\r\nprivate _max = getNumber (_turretConfig >> QGVAR(MaxDistance));\r\n\r\nprivate _distance = _vehicle getVariable [format [\"%1_%2\", QGVAR(Distance), _turret], _min];\r\nTRACE_4(\"\",_distance,_delta,_min,_max);\r\n\r\n_distance = _distance + _delta;\r\n_distance = _distance min _max;\r\n_distance = _distance max _min;\r\n\r\n[_vehicle, _turret, _distance] call FUNC(keyUp);\r\n"},{"name":"ace_fcs_fnc_calculateSolution","file":"fcs/functions/fnc_calculateSolution.sqf","text":"/*\r\n * Author: VKing\r\n * Calculate FCS solution\r\n *\r\n * Arguments:\r\n * 0: Vehicle\r\n * 1: Turret\r\n * 2: Target distance\r\n * 3: Azimuth offset\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\",\"_turret\",\"_distance\",\"_angleTarget\"];\r\nTRACE_4(\"params\",_vehicle,_turret,_distance,_angleTarget);\r\n\r\nprivate _FCSMagazines = [];\r\nprivate _FCSElevation = [];\r\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\r\n\r\n{\r\n    private _magazine = _x;\r\n    private _ammo = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\r\n\r\n    private _bulletSimulation = getText (configFile >> \"CfgAmmo\" >> _ammo >> \"simulation\");\r\n    if !(_bulletSimulation == \"shotMissile\") then {\r\n        private _maxElev     = getNumber (_turretConfig >> \"maxElev\");\r\n        private _initSpeed   = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\r\n        private _airFriction = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\");\r\n\r\n        {\r\n            private _weapon = _x;\r\n            private _muzzles = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"muzzles\");\r\n            private _weaponMagazines = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\r\n\r\n            {\r\n                if (_x != \"this\") then {\r\n                    _weaponMagazines append getArray (configFile >> \"CfgWeapons\" >> _weapon >> _x >> \"magazines\");\r\n                };\r\n                false\r\n            } count _muzzles;\r\n\r\n            // Fix the `in` operator being case sensitive and BI fucking up the spelling of their own classnames\r\n            private _weaponMagazinesCheck = _weaponMagazines apply {toLower _x};\r\n\r\n            // Another BIS fix: ShotBullet simulation uses weapon initSpeed, others ignore it\r\n            if (toLower _magazine in _weaponMagazinesCheck && {_bulletSimulation == \"shotBullet\"}) exitWith {\r\n                private _initSpeedCoef = getNumber(configFile >> \"CfgWeapons\" >> _weapon >> \"initSpeed\");\r\n\r\n                if (_initSpeedCoef < 0) then {\r\n                    _initSpeed = _initSpeed * -_initSpeedCoef;\r\n                };\r\n\r\n                if (_initSpeedCoef > 0) then {\r\n                    _initSpeed = _initSpeedCoef;\r\n                };\r\n            };\r\n            false\r\n        } count (_vehicle weaponsTurret _turret);\r\n\r\n        private _offset = \"ace_fcs\" callExtension format [\"%1,%2,%3,%4\", _initSpeed, _airFriction, _angleTarget, _distance];\r\n        _offset = parseNumber _offset;\r\n\r\n        _FCSMagazines pushBack _magazine;\r\n        _FCSElevation pushBack _offset;\r\n    };\r\n    false\r\n} count (_vehicle magazinesTurret _turret);\r\n\r\n[_vehicle, format [\"%1_%2\", QGVAR(Distance),  _turret],     _distance] call EFUNC(common,setVariablePublic);\r\n[_vehicle, format [\"%1_%2\", QGVAR(Magazines), _turret], _FCSMagazines] call EFUNC(common,setVariablePublic);\r\n[_vehicle, format [\"%1_%2\", QGVAR(Elevation), _turret], _FCSElevation] call EFUNC(common,setVariablePublic);\r\n"},{"name":"ace_fcs_fnc_canResetFCS","file":"fcs/functions/fnc_canResetFCS.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Called from config. Can player reset FCS?\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Boolean <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\ncount ((vehicle _unit) getVariable [format [\"%1_%2\", QGVAR(Magazines), [_unit] call EFUNC(common,getTurretIndex)], []]) > 1 // return\r\n"},{"name":"ace_fcs_fnc_canUseFCS","file":"fcs/functions/fnc_canUseFCS.sqf","text":"/*\r\n * Author: commy2\r\n * Called from config. Returns true if the player is a gunner and the players current vehicle has a FCS.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Boolean <BOOL>\r\n *\r\n * Example:\r\n * [] call ace_fcs_fnc_canUseFCS\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ngetNumber ([configFile >> \"CfgVehicles\" >> typeOf vehicle ACE_player, [ACE_player] call EFUNC(common,getTurretIndex)] call EFUNC(common,getTurretConfigPath) >> QGVAR(Enabled)) == 1\r\n&& {cameraView == \"GUNNER\"}\r\n&& {!([ACE_player] call CBA_fnc_canUseWeapon)} //Not Turned Out\r\n&& {cameraOn != (getConnectedUAV ACE_player)} //Not Controlling a UAV\r\n"},{"name":"ace_fcs_fnc_canUseRangefinder","file":"fcs/functions/fnc_canUseRangefinder.sqf","text":"/*\r\n * Author: commy2\r\n * Returns true if the laser distance measurement can be read from the engine.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Boolean <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n!isNull ((uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull]) displayCtrl 1713151)\r\n&& {cameraView == \"GUNNER\"} // return\r\n"},{"name":"ace_fcs_fnc_firedEH","file":"fcs/functions/fnc_firedEH.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Adjusts the direction of a shell. Called from the unified fired EH only if the gunner is a player.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nprivate _FCSMagazines = _vehicle getVariable [format [\"%1_%2\", QGVAR(Magazines), _turret], []];\r\n\r\nif !(_magazine in _FCSMagazines) exitWith {};\r\n\r\nprivate _FCSElevation = _vehicle getVariable format [\"%1_%2\", QGVAR(Elevation), _turret];\r\n\r\n// GET ELEVATION OFFSET OF CURRENT MAGAZINE\r\nprivate _offset = 0;\r\n\r\n{\r\n    if (_x == _magazine) exitWith {\r\n        _offset = _FCSElevation select _forEachIndex;\r\n    };\r\n} forEach _FCSMagazines;\r\n\r\n[_projectile, (_vehicle getVariable format [\"%1_%2\", QGVAR(Azimuth), _turret]), _offset, 0] call EFUNC(common,changeProjectileDirection);\r\n\r\n// Remove the platform velocity\r\nif (vectorMagnitude velocity _vehicle > 2) then {\r\n    private _sumVelocity = (velocity _projectile) vectorDiff (velocity _vehicle);\r\n\r\n    _projectile setVelocity _sumVelocity;\r\n};\r\n\r\n// Air burst missile\r\n// handle locally only\r\nif (!local _gunner) exitWith {};\r\n\r\nif (getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(Airburst)) == 1) then {\r\n    private _zeroing = _vehicle getVariable [format [\"%1_%2\", QGVAR(Distance), _turret], currentZeroing _vehicle];\r\n\r\n    if (_zeroing < 50) exitWith {};\r\n    if (_zeroing > 1500) exitWith {};\r\n\r\n    [FUNC(handleAirBurstAmmunitionPFH), 0, [_vehicle, _projectile, _zeroing]] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_fcs_fnc_getAngle","file":"fcs/functions/fnc_getAngle.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Calculates the angle offset necessary to hit the current target.\r\n *\r\n * Arguments:\r\n * 0: distance to target in meters <NUMBER>\r\n * 1: current angle of the turret <NUMBER>\r\n * 2: maximum elevation of the turret <NUMBER>\r\n * 3: initSpeed of the projectile <NUMBER>\r\n * 4: airFriction of the projectile <NUMBER>\r\n * 5: maximum timeToLive of the projectile <NUMBER>\r\n * 6: simulationStep of the projectile <NUMBER>\r\n *\r\n * Return Value:\r\n * offset from the current angle necessary to hit the target <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define PRECISION 0.1\r\n\r\nparams [\"_distance\", \"_angleTarget\", \"_maxElev\", \"_initSpeed\", \"_airFriction\", \"_timeToLive\", \"_simulationStep\"];\r\n\r\nif (_simulationStep == 0) exitWith {_angleTarget};\r\n\r\nprivate _fnc_traceBullet = {\r\n    params [\"_distance\", \"_angleTarget\", \"_maxElev\", \"_initSpeed\", \"_airFriction\", \"_timeToLive\", \"_simulationStep\", \"_angle\"];\r\n\r\n    _angle = _angle - _angleTarget;\r\n    _angleTarget = 0;\r\n\r\n    private _posTargetX = (cos _angleTarget) * _distance;\r\n    private _posTargetY = (sin _angleTarget) * _distance;\r\n\r\n    private _posX = 0;\r\n    private _posY = 0;\r\n\r\n    private _velocityX = (cos _angle) * _initSpeed;\r\n    private _velocityY = (sin _angle) * _initSpeed;\r\n\r\n    // trace the path of the bullet\r\n    for \"_i\" from 1 to ((floor (_timeToLive / _simulationStep)) + 1) do {\r\n        private _velocityMagnitude = sqrt (_velocityX^2 + _velocityY^2);\r\n\r\n        _velocityX = _velocityX + _simulationStep * (_velocityX * _velocityMagnitude * _airFriction);\r\n        _velocityY = _velocityY + _simulationStep * (_velocityY * _velocityMagnitude * _airFriction - 9.81);\r\n\r\n        _posX = _posX + _velocityX * _simulationStep;\r\n        _posY = _posY + _velocityY * _simulationStep;\r\n\r\n        if (_posX >= _posTargetX) exitWith {}; // bullet passed the target\r\n    };\r\n    _posY - _posTargetY\r\n};\r\n\r\nprivate _data = [_distance, _angleTarget, _maxElev, _initSpeed, _airFriction, _timeToLive, _simulationStep, _maxElev];\r\n\r\nif (_data call _fnc_traceBullet < 0) exitWith {_maxElev - _angleTarget};\r\n\r\n// Newton Method / Secand Method\r\nprivate _angle1 = _angleTarget;\r\nprivate _angle2 = _maxElev;\r\nprivate _it2 = 0;\r\n\r\n_data set [7, _maxElev];\r\nprivate _f1 = _data call _fnc_traceBullet;\r\n\r\nif (abs _f1 <= PRECISION) exitWith {0};\r\n\r\nwhile {abs _f1 > PRECISION} do {\r\n    _data set [7, _angle2];\r\n    private _f2 = _data call _fnc_traceBullet;\r\n\r\n    _angle1 = _angle2;\r\n    _angle2 = _angle2 - _f2 * (_angle2 - _angle1) / (_f2 - _f1);\r\n\r\n    _f1 = _f2;\r\n    _it2 = _it2 + 1;\r\n};\r\n\r\n_angle2 - _angleTarget\r\n"},{"name":"ace_fcs_fnc_getRange","file":"fcs/functions/fnc_getRange.sqf","text":"/*\r\n * Author: commy2\r\n * Read laser distance measurement from engine.\r\n *\r\n * Arguments:\r\n * 0: Measurement Accuracy (default: 1) <NUMBER>\r\n * 1: Maximum measure distance (default: 5000) <NUMBER>\r\n * 2: Minimum measure distance (default: 0) <NUMBER>\r\n * 3: Blank display on range error (default: false) <BOOL>\r\n *\r\n * Return Value:\r\n * Measured distance <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_accuracy\",1], [\"_maxDistance\",5000], [\"_minDistance\",0], [\"_blank\",false]];\r\n\r\ndisableSerialization;\r\nprivate _dlgRangefinder = uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull];\r\n\r\nprivate _distance = parseNumber ctrlText (_dlgRangefinder displayCtrl 151);\r\n\r\nif (_distance == 0) then {\r\n    _distance = _this call EFUNC(common,getTargetDistance);\r\n} else {\r\n    // Is distance out of bound?\r\n    _distance = _distance min _maxDistance;\r\n    _distance = _distance max _minDistance;\r\n\r\n    // If don't let accuracy be less than 1\r\n    _accuracy = _accuracy max 1;\r\n    _distance = (round (_distance/_accuracy)) * _accuracy;\r\n};\r\n\r\n// Change the display if the range is out of bounds\r\nif (_distance >= _maxDistance || _distance <= _minDistance) then {\r\n    if (_blank) then {\r\n        (_dlgRangefinder displayCtrl 1713151) ctrlSetText \"----\";\r\n    } else {\r\n        (_dlgRangefinder displayCtrl 1713151) ctrlSetText ([_distance, 4, 0] call CBA_fnc_formatNumber) + \"*\";\r\n    };\r\n} else {\r\n    (_dlgRangefinder displayCtrl 1713151) ctrlSetText ([_distance, 4, 0] call CBA_fnc_formatNumber);\r\n};\r\n\r\n_distance\r\n"},{"name":"ace_fcs_fnc_handleAirBurstAmmunitionPFH","file":"fcs/functions/fnc_handleAirBurstAmmunitionPFH.sqf","text":"/*\r\n * Author: commy2\r\n * Handle Air burst ammunition. Called from per frame handler.\r\n *\r\n * Arguments:\r\n * -\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(_this select 0) params [\"_vehicle\", \"_projectile\", \"_zeroing\"];\r\n\r\n// remove pfh if the projectile died before arriving\r\nif (isNull _projectile || {!alive _projectile}) exitWith {\r\n    [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// wait if not there\r\nif (_projectile distance _vehicle < _zeroing) exitWith {};\r\n\r\n// explode\r\nprivate _position = getPosATL _projectile;\r\n\r\nprivate _subMunition = createVehicle [\"ACE_B_35mm_ABM_Helper\", _position, [], 0, \"FLY\"];\r\n\r\n_subMunition setPosATL _position;\r\n_subMunition setVelocity [0, 0, -10];\r\n\r\ndeleteVehicle _projectile;\r\n\r\n[_this select 1] call CBA_fnc_removePerFrameHandler;\r\n"},{"name":"ace_fcs_fnc_keyDown","file":"fcs/functions/fnc_keyDown.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Starts watching the target for sideways correction.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Turret <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_turret\"];\r\n\r\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\r\n\r\n// Update display for infantry rangefinders\r\nif (_vehicle == ACE_player) exitWith {[5,5500,25,true] call FUNC(getRange)};\r\n\r\nprivate _distance = [\r\n    getNumber (_turretConfig >> QGVAR(DistanceInterval)),\r\n    getNumber (_turretConfig >> QGVAR(MaxDistance)),\r\n    getNumber (_turretConfig >> QGVAR(MinDistance))\r\n] call FUNC(getRange);\r\n\r\nif !(!GVAR(enabled) && FUNC(canUseFCS)) exitWith {};\r\n\r\nGVAR(Enabled) = true;\r\nGVAR(time) = CBA_missionTime;\r\n\r\n\r\nprivate _weaponDirection = _vehicle weaponDirection (_vehicle currentWeaponTurret _turret);  // @todo doesn't work for sub turrets\r\n\r\nif (_turret isEqualTo ([_vehicle] call EFUNC(common,getTurretCommander))) then {\r\n    _weaponDirection = eyeDirection _vehicle;\r\n};\r\n\r\nif (_weaponDirection isEqualTo [0,0,0]) then {  // dummy value for non main turrets\r\n    _weaponDirection = [1,0,0];\r\n};\r\n\r\nGVAR(Position) = (getPosASL _vehicle) vectorAdd (_weaponDirection vectorMultiply _distance);\r\n\r\n[_vehicle,_turret,_distance,0] call FUNC(calculateSolution);\r\n"},{"name":"ace_fcs_fnc_keyUp","file":"fcs/functions/fnc_keyUp.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Calculates the offsets for all weapons needed to hit the current target.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Turret <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_turret\", \"_distance\", [\"_showHint\", false], [\"_playSound\", true]];\r\nTRACE_5(\"params\",_vehicle,_turret,_distance,_showHint,_playSound);\r\n\r\nprivate _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _turret] call EFUNC(common,getTurretConfigPath);\r\n\r\nif (isNil \"_distance\") then {\r\n    _distance = [\r\n        getNumber (_turretConfig >> QGVAR(DistanceInterval)),\r\n        getNumber (_turretConfig >> QGVAR(MaxDistance)),\r\n        getNumber (_turretConfig >> QGVAR(MinDistance))\r\n    ] call FUNC(getRange);\r\n} else {\r\n    ((uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull]) displayCtrl 1713151) ctrlSetText ([_distance, 4, 0] call CBA_fnc_formatNumber);\r\n};\r\n\r\n// MOVING TARGETS\r\nprivate _weapon = _vehicle currentWeaponTurret _turret;\r\nprivate _weaponDirection = _vehicle weaponDirection _weapon; // @todo doesn't work for sub turrets\r\n\r\nif (_turret isEqualTo ([_vehicle] call EFUNC(common,getTurretCommander))) then {\r\n    _weaponDirection = eyeDirection _vehicle;\r\n};\r\n\r\nif (_weaponDirection isEqualTo [0,0,0]) then {  // dummy value for non main turrets\r\n    _weaponDirection = [1,0,0];\r\n};\r\n\r\nprivate _angleTarget = asin (_weaponDirection select 2);\r\n\r\nprivate _movingAzimuth = 0;\r\n\r\nif (CBA_missionTime - GVAR(time) > 1 && GVAR(time) != -1 && isNil {_this select 2}) then {\r\n    // calculate speed of target\r\n    private _posTarget = (getPosASL _vehicle) vectorAdd (_weaponDirection vectorMultiply _distance);\r\n    private _velocityTarget = (_posTarget vectorDiff GVAR(position)) vectorMultiply (1 / (CBA_missionTime - GVAR(time)));\r\n\r\n    // estimate time to target\r\n    private _magazine       = _vehicle currentMagazineTurret _turret;\r\n    private _ammo           = getText   (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\r\n    private _initSpeed      = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\r\n    private _airFriction    = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\");\r\n    private _timeToLive     = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"timeToLive\");\r\n    private _simulationStep = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"simulationStep\");\r\n    private _initSpeedCoef  = getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"initSpeed\");\r\n    private _simulationType = getText (configFile >> \"CfgAmmo\" >> _ammo >> \"simulation\");\r\n\r\n    // More BIS fix\r\n    if (_simulationType == \"shotBullet\") then {\r\n        if (_initSpeedCoef < 0) then {\r\n            _initSpeed = _initSpeed * - _initSpeedCoef;\r\n        };\r\n\r\n        if (_initSpeedCoef > 0) then {\r\n            _initSpeed = _initSpeedCoef;\r\n        };\r\n    };\r\n\r\n    if (_simulationStep != 0) then {\r\n        private _posX = 0;\r\n        private _velocityX = _initSpeed;\r\n        private _velocityY = 0;\r\n        private _timeToTarget = 0;\r\n\r\n        for \"_i\" from 1 to (floor (_timeToLive / _simulationStep) + 1) do {\r\n            _posX = _posX + _velocityX * _simulationStep;\r\n\r\n            if (_posX >= _distance) exitWith { // bullet passed the target\r\n                _timeToTarget = _i * _simulationStep;\r\n            };\r\n\r\n            private _velocityMagnitude = sqrt (_velocityX ^ 2 + _velocityY ^ 2);\r\n\r\n            _velocityX = _velocityX + _velocityX * _velocityMagnitude * _airFriction * _simulationStep;\r\n            _velocityY = _velocityY + _velocityY * _velocityMagnitude * _airFriction * _simulationStep - 9.81 * _simulationStep;\r\n        };\r\n\r\n        // calculate offsets\r\n        private _posArrival = _posTarget vectorAdd (_velocityTarget vectorMultiply _timeToTarget);\r\n        private _dirArrival = (_posArrival vectorDiff getPosASL _vehicle) vectorMultiply (1 / (_posArrival vectorDistance getPosASL _vehicle));\r\n\r\n        _movingAzimuth = ((_dirArrival select 0) atan2 (_dirArrival select 1)) - ((_weaponDirection select 0) atan2 (_weaponDirection select 1));\r\n        _angleTarget = asin (_dirArrival select 2);\r\n        _distance = floor (_posArrival distance (getPosASL _vehicle));\r\n    };\r\n};\r\n\r\nGVAR(enabled) = false;\r\nGVAR(time) = -1;\r\n\r\n// CALCULATE AZIMUTH CORRECTION\r\nprivate _viewDiff = _vehicle getVariable format [\"%1_%2\", QGVAR(ViewDiff), _turret];\r\nprivate _FCSAzimuth = _movingAzimuth;\r\n\r\nif (_viewDiff != 0) then {\r\n    _FCSAzimuth = (atan (_distance / _viewDiff) - (abs _viewDiff / _viewDiff) * 90) + _movingAzimuth;\r\n};\r\n\r\n[_vehicle, format [\"%1_%2\", QGVAR(Azimuth),   _turret],   _FCSAzimuth] call EFUNC(common,setVariablePublic);\r\n\r\n// CALCULATE SOLUTION\r\n[_vehicle,_turret,_distance,_angleTarget] call FUNC(calculateSolution);\r\n\r\nif (_playSound) then {\r\n    playSound \"ACE_Sound_Click\";\r\n};\r\n\r\nif (_showHint) then {\r\n    [format [\"%1: %2\", localize LSTRING(ZeroedTo), _distance]] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_fcs_fnc_onForceUpdate","file":"fcs/functions/fnc_onForceUpdate.sqf","text":"#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _vehicle = vehicle _unit;\r\n\r\nif !([_unit, _vehicle, []] call EFUNC(common,canInteractWith)) exitWith {false};\r\nif !((!GVAR(enabled) && FUNC(canUseFCS)) || FUNC(canUseRangefinder)) exitWith {false};\r\n\r\nprivate _turret = [_unit] call EFUNC(common,getTurretIndex);\r\n\r\n[_vehicle, _turret] call FUNC(keyDown);\r\n[_vehicle, _turret] call FUNC(keyUp);\r\n"},{"name":"ace_fcs_fnc_reset","file":"fcs/functions/fnc_reset.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Resets the FCS to default.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Turret <ARRAY>\r\n *\r\n * Return Value:\r\n * none\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_turret\"];\r\n\r\n[_vehicle, format [\"%1_%2\", QGVAR(Distance),  _turret],  0] call EFUNC(common,setVariablePublic);\r\n[_vehicle, format [\"%1_%2\", QGVAR(Magazines), _turret], []] call EFUNC(common,setVariablePublic);\r\n[_vehicle, format [\"%1_%2\", QGVAR(Elevation), _turret],  0] call EFUNC(common,setVariablePublic);\r\n[_vehicle, format [\"%1_%2\", QGVAR(Azimuth),   _turret],  0] call EFUNC(common,setVariablePublic);\r\n\r\n[localize LSTRING(HasBeenReset)] call EFUNC(common,displayTextStructured);\r\n"},{"name":"ace_fcs_fnc_updateRangeHUD","file":"fcs/functions/fnc_updateRangeHUD.sqf","text":"/*\r\n * Author: commy2\r\n * Update compatible info elements.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nprivate _dlgRangefinder = uiNamespace getVariable [\"ACE_dlgRangefinder\", displayNull];\r\n\r\n(_dlgRangefinder displayCtrl 1713151) ctrlSetText ctrlText (_dlgRangefinder displayCtrl 151);\r\n"},{"name":"ace_fcs_fnc_vehicleInit","file":"fcs/functions/fnc_vehicleInit.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2\r\n * Checks if a vehicle is equipped with an FCS and if so, adds the fired event handler. Execute on server.\r\n *\r\n * Arguments:\r\n * 0: Vehicle\r\n *\r\n * Return Value:\r\n * none\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\n{\r\n    private _turretConfig = [configFile >> \"CfgVehicles\" >> typeOf _vehicle, _x] call EFUNC(common,getTurretConfigPath);\r\n\r\n    if (getNumber (_turretConfig >> QGVAR(Enabled)) == 1) then {\r\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Distance),  _x],  0, true];\r\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Magazines), _x], [], true];\r\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Elevation), _x], [], true];\r\n        _vehicle setVariable [format [\"%1_%2\", QGVAR(Azimuth),   _x],  0, true];\r\n\r\n        // calculate offset between gunner camera and muzzle position\r\n        if !(_vehicle isKindOf \"Air\") then {\r\n            private [\"_gunBeg\", \"_gunnerView\", \"_gunBegPos\", \"_gunnerViewPos\", \"_viewDiff\"];\r\n\r\n            _gunBeg = getText (_turretConfig >> \"gunBeg\");\r\n            _gunnerView = getText (_turretConfig >> \"memoryPointGunnerOptics\");\r\n\r\n            _gunBegPos = (_vehicle selectionPosition _gunBeg) select 0;\r\n            _gunnerViewPos = (_vehicle selectionPosition _gunnerView) select 0;\r\n            _viewDiff = _gunBegPos - _gunnerViewPos;\r\n\r\n            _vehicle setVariable [format [\"%1_%2\", QGVAR(ViewDiff), _x], _viewDiff, true];\r\n        } else {\r\n            _vehicle setVariable [format [\"%1_%2\", QGVAR(ViewDiff), _x],         0, true];\r\n        };\r\n    };\r\n    false\r\n} count allTurrets _vehicle;\r\n"}],"finger":[{"name":"ace_finger_fnc_incomingFinger","file":"finger/functions/fnc_incomingFinger.sqf","text":"/*\r\n * Author: TheDrill, PabstMirror\r\n * Recieve an finger event, adds to the array (or updates if already present) and starts PFEH if not already running\r\n *\r\n * Arguments:\r\n * 0: Source Unit (can be self) <OBJECT>\r\n * 1: Position being pointed at (ASL) <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [bob, [1,2,3]] call ace_finger_fnc_incomingFinger;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_sourceUnit\", \"_fingerPosPrecise\", \"_distance\"];\r\n\r\n// Add some random float to location if it's not our own finger:\r\nprivate _fingerPos = if (_sourceUnit == ACE_player) then {\r\n    _fingerPosPrecise\r\n} else {\r\n    _fingerPosPrecise vectorAdd ([random (2*FP_RANDOMIZATION_X) - FP_RANDOMIZATION_X, random (2*FP_RANDOMIZATION_X) - FP_RANDOMIZATION_X, random (2*FP_RANDOMIZATION_Y) - FP_RANDOMIZATION_Y] vectorMultiply _distance)\r\n};\r\n\r\nTRACE_3(\"incoming finger:\", _sourceUnit, _fingerPosPrecise, _fingerPos);\r\n\r\nprivate _data = [diag_tickTime, _fingerPos, ([_sourceUnit, false, true] call EFUNC(common,getName))];\r\nHASH_SET(GVAR(fingersHash), _sourceUnit, _data);\r\n\r\nif (GVAR(pfeh_id) == -1) then {\r\n    GVAR(pfeh_id) = [DFUNC(perFrameEH), 0, []] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_finger_fnc_keyPress","file":"finger/functions/fnc_keyPress.sqf","text":"/*\r\n * Author: TheDrill, PabstMirror\r\n * On keypress, point and send position to nearby players\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Key Handeled <BOOL>\r\n *\r\n * Example:\r\n * [] call ace_finger_fnc_keyPress;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n\r\nif (!alive ACE_player) exitWith {false};\r\n// Conditions: canInteract\r\nif !([ACE_player, ACE_player, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n//make sure player is dismounted or in a static weapon:\r\nif ((ACE_player != vehicle ACE_player) && {!((vehicle ACE_player) isKindOf \"StaticWeapon\")}) exitWith {false};\r\n//Check camera view (not in GUNNER)\r\nif !(cameraView in [\"INTERNAL\", \"EXTERNAL\"]) exitWith {false};\r\n//Exit if run recently (run every 1 seconds)\r\nif (diag_tickTime < (GVAR(lastFPTime) + FP_ACTION_TIMEOUT)) exitWith {true};\r\n\r\nGVAR(lastFPTime) = diag_tickTime;\r\n\r\n// Find where is the finger pointing\r\nprivate _originASL = AGLtoASL positionCameraToWorld [0, 0, 0];\r\nprivate _fingerPosASL = AGLtoASL positionCameraToWorld [0, 0, FP_DISTANCE];\r\nprivate _intersections = lineIntersectsSurfaces [_originASL, _fingerPosASL, ACE_player, vehicle ACE_player, true, 1];\r\nif !(_intersections isEqualTo []) then {\r\n    _fingerPosASL = _intersections select 0 select 0;\r\n};\r\n\r\n// Find who should the finger be sent to\r\nprivate _playerEyePosASL = eyePos ACE_player;\r\nprivate _sendFingerToPlayers = [];\r\nprivate _nearbyMen = (ACE_player nearObjects [\"CAManBase\", (GVAR(maxRange) + 2)]);\r\n{\r\n    _nearbyMen append (crew _x);\r\n} count (ACE_player nearObjects [\"StaticWeapon\", (GVAR(maxRange) + 2)]);\r\n{\r\n    if ((((eyePos _x) vectorDistance _playerEyePosASL) < GVAR(maxRange)) &&\r\n            {alive _x} &&\r\n            {(_x == (vehicle _x)) || {(vehicle _x) isKindOf \"StaticWeapon\"}} &&\r\n            {GVAR(indicatorForSelf) || {_x != ACE_player}} &&\r\n            {!(lineIntersects [(eyePos _x), _playerEyePosASL, ACE_player, _x])} &&\r\n            {[_x] call EFUNC(common,isPlayer)}) then {\r\n\r\n        _sendFingerToPlayers pushBack _x;\r\n    };\r\n    true\r\n} count _nearbyMen;\r\n\r\nTRACE_1(\"sending finger to\",_sendFingerToPlayers);\r\n\r\n[QGVAR(fingered), [ACE_player, _fingerPosASL, _originASL vectorDistance _fingerPosASL], _sendFingerToPlayers] call CBA_fnc_targetEvent;\r\n\r\nACE_player playActionNow \"GestureGo\";\r\n\r\ntrue\r\n"},{"name":"ace_finger_fnc_moduleSettings","file":"finger/functions/fnc_moduleSettings.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Module for fingering settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\nif !(isServer) exitWith {};\r\n\r\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(maxRange), \"maxRange\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_finger_fnc_perFrameEH","file":"finger/functions/fnc_perFrameEH.sqf","text":"/*\r\n * Author: TheDrill, PabstMirror\r\n * The perFrameEventHandler to draw the icons\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [fromCBA] call ace_finger_fnc_perFrameEH;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!alive ACE_player) then {GVAR(fingersHash) = HASH_CREATE;};\r\n// Conditions: canInteract\r\nif !([ACE_player, ACE_player, [\"isNotInside\"]] call EFUNC(common,canInteractWith)) then {GVAR(fingersHash) = HASH_CREATE;};\r\n// Make sure player is dismounted or in a static weapon:\r\nif ((ACE_player != vehicle ACE_player) && {!((vehicle ACE_player) isKindOf \"StaticWeapon\")}) then {GVAR(fingersHash) = HASH_CREATE;};\r\n\r\nprivate _iconSize = BASE_SIZE * 0.10713 * (call EFUNC(common,getZoom));\r\n\r\n{\r\n    private _data = HASH_GET(GVAR(fingersHash), _x);\r\n    _data params [\"_lastTime\", \"_pos\", \"_name\"];\r\n    private _timeLeftToShow = _lastTime + FP_TIMEOUT - diag_tickTime;\r\n    if (_timeLeftToShow <= 0) then {\r\n        HASH_REM(GVAR(fingersHash), _x);\r\n    } else {\r\n        private _drawColor = + GVAR(indicatorColor);\r\n        // Fade out:\r\n        _drawColor set [3, ((_drawColor select 3) * ((_timeLeftToShow min 0.5) / 0.5))];\r\n\r\n        drawIcon3D [QPATHTOF(UI\\fp_icon2.paa), _drawColor, ASLtoAGL _pos, _iconSize, _iconSize, 0, _name, 1, 0.03, \"RobotoCondensed\"];\r\n    };\r\n} count (GVAR(fingersHash) select 0);\r\n\r\nif ((count (GVAR(fingersHash) select 0)) == 0) then {\r\n    [GVAR(pfeh_id)] call CBA_fnc_removePerFrameHandler;\r\n    GVAR(pfeh_id) = -1;\r\n};\r\n"}],"flashlights":[],"flashsuppressors":[],"fonts":[],"frag":[{"name":"ace_frag_fnc_addBlackList","file":"frag/functions/fnc_addBlackList.sqf","text":"#include \"script_component.hpp\"\r\nprivate [\"_round\"];\r\n_round = _this select 0;\r\nGVAR(blackList) set [(count GVAR(blackList)), _round];\r\n"},{"name":"ace_frag_fnc_addPfhRound","file":"frag/functions/fnc_addPfhRound.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_enabled\", \"_doSpall\", \"_spallTrack\", \"_spallTrackID\"];\r\nPARAMS_3(_gun,_type,_round);\r\nDEFAULT_PARAM(3,_doFragTrack,false);\r\n\r\nif (!GVAR(enabled)) exitWith {};\r\n\r\n//_enabled = getNumber (configFile >> \"CfgAmmo\" >> _type >> QGVAR(enabled));\r\n//if(_enabled < 1) exitWith {};\r\n\r\nif(_round in GVAR(blackList)) exitWith {\r\n    GVAR(blackList) = GVAR(blackList) - [_round];\r\n};\r\n\r\n// Exit on max track\r\nif( (count GVAR(objects)) > GVAR(MaxTrack)) exitWith { };\r\n\r\nif(_gun == ACE_player) then {\r\n    _doFragTrack = true;\r\n} else {\r\n    if((gunner _gun) == ACE_player) then {\r\n        _doFragTrack = true;\r\n    } else {\r\n        if(local _gun && {!(isPlayer (gunner _gun))} && {!(isPlayer _gun)}) then {\r\n            _doFragTrack = true;\r\n        };\r\n    };\r\n};\r\n\r\n_doSpall = false;\r\nif(GVAR(SpallEnabled)) then {\r\n    if(GVAR(spallIsTrackingCount) <= 0) then {\r\n        GVAR(spallHPData) = [];\r\n    };\r\n    if(GVAR(spallIsTrackingCount) > 5) then {\r\n        // ACE_player sideChat \"LIMT!\";\r\n    } else {\r\n        _doSpall = true;\r\n        GVAR(spallIsTrackingCount) = GVAR(spallIsTrackingCount) + 1;\r\n    };\r\n};\r\n// ACE_player sideChat format[\"c: %1\", GVAR(spallIsTrackingCount)];\r\n\r\nif(GVAR(autoTrace)) then {\r\n    [ACE_player, _round, [1,0,0,1]] call FUNC(addTrack);\r\n};\r\n\r\n// We only do the single track object check here.\r\n// We should do an {!(_round in GVAR(objects))}\r\n// But we leave that out here for optimization. So this cannot be a framework function\r\n// Otherwise, it should only be added once and from the FiredEH\r\nif(_doFragTrack && alive _round) then {\r\n    _spallTrack = [];\r\n    _spallTrackID = [];\r\n\r\n    private[\"_args\"];\r\n    _args = [_round, (getPosASL _round), (velocity _round), _type, diag_frameno, _gun, _doSpall, _spallTrack, _spallTrackID,\r\n    (getNumber (configFile >> \"CfgAmmo\" >> _type >> QGVAR(skip))),\r\n    (getNumber (configFile >> \"CfgAmmo\" >> _type >> \"explosive\")),\r\n    (getNumber (configFile >> \"CfgAmmo\" >> _type >> \"indirectHitRange\")),\r\n    (getNumber (configFile >> \"CfgAmmo\" >> _type >> QGVAR(force))),\r\n    (getNumber(configFile >> \"CfgAmmo\" >> _type >> \"indirecthit\")*(sqrt((getNumber (configFile >> \"CfgAmmo\" >> _type >> \"indirectHitRange\")))))\r\n    ];\r\n    TRACE_1(\"Initializing track\", _round);\r\n    GVAR(objects) pushBack _round;\r\n    GVAR(arguments) pushBack _args;\r\n\r\n    if(_doSpall) then {\r\n        [_round, 1, _spallTrack, _spallTrackID] call FUNC(spallTrack);\r\n    };\r\n    // ACE_player sideChat \"WTF2\";\r\n};\r\n"},{"name":"ace_frag_fnc_addTrack","file":"frag/functions/fnc_addTrack.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_color\", \"_data\", \"_index\", \"_obj\", \"_objSpd\", \"_origin\", \"_positions\"];\r\n\r\nif (GVAR(autoTrace)) then {\r\n    [] call FUNC(startTracing);\r\n};\r\n\r\n// setAccTime 0.05;\r\n_index = (count GVAR(traces));\r\n_obj = _this select 1;\r\n_origin = _this select 0;\r\n_color = [1,0,0,1];\r\nif((count _this) > 2) then {\r\n    _color = _this select 2;\r\n};\r\n_positions = [];\r\n_objSpd = vectorMagnitude (velocity _obj);\r\n_positions set[(count _positions), [(getPos _obj), _objSpd]];\r\n_data = [_origin, typeOf _origin, typeOf _obj, _objSpd, _positions, _color];\r\n\r\nGVAR(traces) set[_index, _data];\r\n[DFUNC(trackTrace), 0, [_obj, _index, CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_frag_fnc_dev_debugAmmo","file":"frag/functions/fnc_dev_debugAmmo.sqf","text":"#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_debugMissing\", true, [false]], [\"_debugForce\", false, [false]], [\"_debugNonFrag\", false, [false]]];\r\n\r\ndiag_log text format [\"~~~~~~~~~~~~~Start [%1]~~~~~~~~~~~~~\", _this];\r\n\r\nprivate _allMagsConfigs = configProperties [configFile >> \"CfgMagazines\", \"isClass _x\", true];\r\nprivate _processedCfgAmmos = [];\r\n\r\n{\r\n    private _ammo = toLower getText (_x >> \"ammo\");\r\n    if ((_ammo != \"\") && {!(_ammo in _processedCfgAmmos)}) then {\r\n        _processedCfgAmmos pushBack _ammo;\r\n\r\n        //Ignore mines/bombs\r\n        if (_ammo isKindOf \"TimeBombCore\") exitWith {};\r\n\r\n        _ammoConfig = configFile >> \"CfgAmmo\" >> _ammo;\r\n\r\n        //Read configs and test if it would actually cause a frag, using same logic as FUNC(pfhRound)\r\n        private _skip = getNumber (_ammoConfig >> QGVAR(skip));\r\n        private _explosive = getNumber (_ammoConfig >> \"explosive\");\r\n        private _indirectRange = getNumber (_ammoConfig >> \"indirectHitRange\");\r\n        private _force = getNumber (_ammoConfig >> QGVAR(force));\r\n        private _fragPower = getNumber(_ammoConfig >> \"indirecthit\")*(sqrt((getNumber (_ammoConfig >> \"indirectHitRange\"))));\r\n\r\n        private _shouldAdd = (_skip == 0) && {(_force == 1) || {_explosive > 0.5 && {_indirectRange >= 4.5} && {_fragPower >= 35}}};\r\n\r\n        if (_shouldAdd) then {\r\n            if (_debugForce && {((getNumber(_ammoConfig >> \"hit\")) < 5) || {_fragPower < 10}}) then {\r\n                diag_log text format [\"Ammo [%1] from Mag [%2] - Weak but will still frag!\",_ammo,configName _x];\r\n                diag_log text format [\" - _force=%1,_fragPower=%2\",_force,_fragPower];\r\n            };\r\n        \r\n            _warn = false;\r\n\r\n            _fragTypes = getArray (_ammoConfig >> \"ACE_frag_CLASSES\");\r\n            if(_fragTypes isEqualTo []) then {_warn = true;};\r\n            _c = getNumber(_ammoConfig >> \"ACE_frag_CHARGE\");\r\n            if(_c == 0) then {_warn = true;};\r\n            _m = getNumber(_ammoConfig >> \"ACE_frag_METAL\");\r\n            if(_m == 0) then {_warn = true;};\r\n            _k = getNumber(_ammoConfig >> \"ACE_frag_GURNEY_K\");\r\n            if(_k == 0) then {_warn = true;};\r\n            _gC = getNumber(_ammoConfig >> \"ACE_frag_GURNEY_C\");\r\n            if(_gC == 0) then { _warn = true;};\r\n\r\n            if(_debugMissing && _warn) then {\r\n                diag_log text format [\"Ammo [%1] from Mag [%2] MISSING frag configs:\",_ammo,configName _x];\r\n                diag_log text format [\" - _c=%1,_m=%2,_k=%3,_gC=%4,_fragTypes=%5\",_c,_m,_k,_gC,_fragTypes];\r\n            };\r\n        } else {\r\n            if (_debugNonFrag && {isArray (_ammoConfig >> \"ACE_frag_CLASSES\")}) then {\r\n                diag_log text format [\"Ammo [%1] from Mag [%2] has frag configs but will NOT frag:\",_ammo,configName _x];\r\n                diag_log text format [\"- skip=%1,explosive=%2,indirectHitRange=%3,force=%4,fragPower=%5\",_skip,_explosive,_indirectRange,_force,_fragPower];\r\n            };\r\n        };\r\n    };\r\n} forEach _allMagsConfigs;\r\n\r\ndiag_log text format [\"~~~~~~~~~~~~~End [%1-%2]~~~~~~~~~~~~~\", count _allMagsConfigs, count _processedCfgAmmos];\r\n"},{"name":"ace_frag_fnc_doExplosions","file":"frag/functions/fnc_doExplosions.sqf","text":"//fnc_doExplosions.sqf\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_params\", \"_explosions\", \"_index\", \"_i\", \"_exp\", \"_refExp\", \"_bpos\", \"_hit\", \"_distance\", \"_indirectHitRange\", \"_depth\"];\r\n_params = _this select 0;\r\n_explosions = _params select 0;\r\n_index = _params select 1;\r\nfor \"_i\" from _index to ((_index+2) min (count _explosions)) do {\r\n    _exp = _explosions select _i;\r\n    _refExp = _exp select 0;\r\n    _bpos = _exp select 1;\r\n    _hit = _exp select 2;\r\n    _distance = _exp select 3;\r\n    _indirectHitRange = _exp select 4;\r\n    _depth = _exp select 5;\r\n    _refExp createVehicle (ASLtoATL _bpos);\r\n    // if(_hit >= 150 && _distance > _indirectHitRange) then {\r\n        // [_bpos, _refExp, _depth] call FUNC(doReflections);\r\n    // };\r\n};\r\n_index = _index + 2;\r\nif(_index >= (count _explosions)) then {\r\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;\r\n} else {\r\n    _params set[1, _index];\r\n};\r\n"},{"name":"ace_frag_fnc_doReflections","file":"frag/functions/fnc_doReflections.sqf","text":"//fnc_doReflections.sqf\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_pos\", \"_ammo\", \"_depth\", \"_hit\", \"_range\", \"_hitFactor\", \"_indirectHitRange\", \"_indirectHit\", \"_testParams\"];\r\n\r\n_pos = _this select 0;\r\n_ammo = _this select 1;\r\n_depth = 1;\r\nif(count _this > 2) then {\r\n    _depth = _this select 2;\r\n};\r\n// TEST_ICONS pushBack [_pos, format[\"EXP!\", _hit, _range, _hitFactor]];\r\nif(_depth <= 2) then {\r\n    _indirectHitRange = getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHitRange\");\r\n    _indirectHit = getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHit\");\r\n    _testParams = [_pos, [_indirectHitRange, _indirectHit], [], [], -4, _depth, 0];\r\n    [DFUNC(findReflections), 0, _testParams] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_frag_fnc_doSpall","file":"frag/functions/fnc_doSpall.sqf","text":"//fnc_doSpall.sqf\r\n#include \"script_component.hpp\"\r\n// ACE_player sideChat \"WAAAAAAAAAAAAAAAAAAAAA\";\r\n\r\nprivate [\"_hitData\", \"_initialData\", \"_hpData\", \"_object\", \"_foundObjects\", \"_index\", \"_foundObjecsts\", \"_roundType\", \"_round\", \"_caliber\", \"_explosive\", \"_idh\", \"_alive\", \"_exit\", \"_vm\", \"_velocity\", \"_oldVelocity\", \"_curVelocity\", \"_diff\", \"_polar\", \"_unitDir\", \"_spallPos\", \"_pos1\", \"_i\", \"_pos2\", \"_blah\", \"_data\", \"_spallPolar\", \"_warn\", \"_c\", \"_m\", \"_k\", \"_gC\", \"_fragPower\", \"_fragTypes\", \"_spread\", \"_spallCount\", \"_elev\", \"_dir\", \"_vel\", \"_spallFragVect\", \"_fragType\", \"_fragment\", \"_pos\"];\r\n\r\n_hitData = _this select 0;\r\n_initialData = GVAR(spallHPData) select (_hitData select 0);\r\n_hpData = (_hitData select 1) select (_this select 1);\r\n\r\n\r\n_object = _hpData select 0;\r\n_object removeEventHandler [\"hitPart\", _initialData select 0];\r\n_foundObjects = _initialData select 7;\r\n_index = _foundObjects find _object;\r\nif(_index != -1) then {\r\n    _foundObjecsts set[_index, nil];\r\n};\r\n\r\n_roundType = (_initialData select 2);\r\n_round = (_initialData select 3);\r\n_object = (_initialData select 1);\r\n\r\n_caliber = getNumber(configFile >> \"CfgAmmo\" >> _roundType >> \"caliber\");\r\n_explosive = getNumber(configFile >> \"CfgAmmo\" >> _roundType >> \"explosive\");\r\n_idh = getNumber(configFile >> \"CfgAmmo\" >> _roundType >> \"indirectHitRange\");\r\n\r\n_alive = true;\r\nif(!alive _round && (_initialData select 6) == 1) then {\r\n    _alive = false;\r\n};\r\n\r\nif(_alive || {_caliber >= 2.5} || {(_explosive > 0 && {_idh >= 1})}) then {\r\n    // ACE_player sideChat format[\"BBBB\"];\r\n    _exit = false;\r\n    _vm = 1;\r\n    _velocity = _initialData select 5;\r\n\r\n    _oldVelocity = vectorMagnitude _velocity;\r\n    _curVelocity = vectorMagnitude (velocity _round);\r\n\r\n    if(alive _round) then {\r\n        _diff = _velocity vectorDiff (velocity _round);\r\n        _polar = _diff call CBA_fnc_vect2polar;\r\n        // ACE_player sideChat format[\"polar: %1\", _polar];\r\n        if((abs(_polar select 1) > 45 || abs(_polar select 2) > 45)) then {\r\n            if(_caliber < 2.5) then {\r\n                // ACE_player sideChat format[\"exit!\"];\r\n                _exit = true;\r\n            } else {\r\n                _vm = 1-(_curVelocity/_oldVelocity);\r\n            };\r\n        };\r\n    };\r\n    if(!_exit) then {\r\n        _unitDir = vectorNormalized _velocity;\r\n        _pos = _hpData select 3;\r\n        _spallPos = nil;\r\n        for \"_i\" from 0 to 100 do {\r\n            _pos1 = _pos vectorAdd (_unitDir vectorMultiply (0.01 * _i));\r\n            _pos2 = _pos vectorAdd (_unitDir vectorMultiply (0.01 * (_i + 1)));\r\n            // _blah = [_object, \"FIRE\"] intersect [_object worldToModel (ASLtoATL _pos1), _object worldToModel (ASLtoATL _pos2)];\r\n            // diag_log text format[\"b: %1\", _blah];\r\n\r\n            // _data = [nil, nil, nil, 1, [[ASLtoATL _pos1, 1], [ASLtoATL _pos2, 1]]];\r\n            // NOU_TRACES set[(count NOU_TRACES), _data];\r\n\r\n            if(!lineIntersects [_pos1, _pos2]) exitWith {\r\n                // ACE_player sideChat format[\"FOUND!\"];\r\n                _spallPos = _pos2;\r\n            };\r\n        };\r\n        if(!isNil \"_spallPos\") then {\r\n            _spallPolar = _velocity call CBA_fnc_vect2polar;\r\n\r\n            if(_explosive > 0) then {\r\n                // ACE_player sideChat format[\"EXPLOSIVE!\"];\r\n                _warn = false;\r\n                _c = getNumber(configFile >> \"CfgAmmo\" >> _roundType >> \"ACE_frag_CHARGE\");\r\n                if(_c == 0) then { _c = 1; _warn = true;};\r\n                _m = getNumber(configFile >> \"CfgAmmo\" >> _roundType >> \"ACE_frag_METAL\");\r\n                if(_m == 0) then { _m = 2; _warn = true;};\r\n                _k = getNumber(configFile >> \"CfgAmmo\" >> _roundType >> \"ACE_frag_GURNEY_K\");\r\n                if(_k == 0) then { _k = 1/2; _warn = true;};\r\n                _gC = getNumber(configFile >> \"CfgAmmo\" >> _roundType >> \"ACE_frag_GURNEY_C\");\r\n                if(_gC == 0) then { _gC = 2440; _warn = true;};\r\n\r\n                if(_warn) then {\r\n                    ACE_LOGWARNING_1(\"Ammo class %1 lacks proper explosive properties definitions for frag!\",_roundType); //TODO: turn this off when we get closer to release\r\n                };\r\n\r\n                _fragPower = (((_m/_c)+_k)^-(1/2))*_gC;\r\n                _spallPolar set[0, _fragPower*0.66];\r\n            };\r\n\r\n            _fragTypes = [\r\n                \"ACE_frag_spall_small\", \"ACE_frag_spall_small\", \"ACE_frag_spall_small\",\r\n                \"ACE_frag_spall_small\",\"ACE_frag_spall_medium\",\"ACE_frag_spall_medium\",\"ACE_frag_spall_medium\",\r\n                \"ACE_frag_spall_medium\", \"ACE_frag_spall_large\", \"ACE_frag_spall_large\", \"ACE_frag_spall_huge\",\r\n                \"ACE_frag_spall_huge\"\r\n\r\n            ];\r\n\r\n            // diag_log text format[\"SPALL POWER: %1\", _spallPolar select 0];\r\n            _spread = 15+(random 25);\r\n            _spallCount = 5+(random 10);\r\n            for \"_i\" from 1 to _spallCount do {\r\n                _elev = ((_spallPolar select 2)-_spread)+(random (_spread*2));\r\n                _dir = ((_spallPolar select 1)-_spread)+(random (_spread*2));\r\n                if(abs _elev > 90) then {\r\n                    _dir = _dir + 180;\r\n                };\r\n                _dir = _dir % 360;\r\n                _vel = (_spallPolar select 0)*0.33*_vm;\r\n                _vel = (_vel-(_vel*0.25))+(random (_vel*0.5));\r\n\r\n                _spallFragVect = [_vel, _dir, _elev] call CBA_fnc_polar2vect;\r\n                _fragType = round (random ((count _fragTypes)-1));\r\n                _fragment = (_fragTypes select _fragType) createVehicleLocal [0,0,10000];\r\n                _fragment setPosASL _spallPos;\r\n                _fragment setVelocity _spallFragVect;\r\n\r\n                if(GVAR(traceFrags)) then {\r\n                    [ACE_player, _fragment, [1,0.5,0,1]] call FUNC(addTrack);\r\n                };\r\n            };\r\n            _spread = 5+(random 5);\r\n            _spallCount = 3+(random 5);\r\n            for \"_i\" from 1 to _spallCount do {\r\n                _elev = ((_spallPolar select 2)-_spread)+(random (_spread*2));\r\n                _dir = ((_spallPolar select 1)-_spread)+(random (_spread*2));\r\n                if(abs _elev > 90) then {\r\n                    _dir = _dir + 180;\r\n                };\r\n                _dir = _dir % 360;\r\n                _vel = (_spallPolar select 0)*0.55*_vm;\r\n                _vel = (_vel-(_vel*0.25))+(random (_vel*0.5));\r\n\r\n                _spallFragVect = [_vel, _dir, _elev] call CBA_fnc_polar2vect;\r\n                _fragType = round (random ((count _fragTypes)-1));\r\n                _fragment = (_fragTypes select _fragType) createVehicleLocal [0,0,10000];\r\n                _fragment setPosASL _spallPos;\r\n                _fragment setVelocity _spallFragVect;\r\n\r\n                if(GVAR(traceFrags)) then {\r\n                    [ACE_player, _fragment, [1,0,0,1]] call FUNC(addTrack);\r\n                };\r\n            };\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_frag_fnc_drawTraces","file":"frag/functions/fnc_drawTraces.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_color\", \"_index\", \"_lastPos\", \"_lastSpd\", \"_max\", \"_positions\", \"_startSpeed\"];\r\n\r\n{\r\n    _positions = _x select 4;\r\n    _color = _x select 5;\r\n    _index = 0;\r\n    _max = count _positions;\r\n    _startSpeed = 0.01 max ((_positions select 0) select 1);\r\n    _lastSpd = [];\r\n    _lastPos = [];\r\n    while {_index < _max} do {\r\n        _data1 = _positions select _index;\r\n        _data2 = nil;\r\n        if(_index + ACE_TRACE_DRAW_INC >= _max) then {\r\n            _data2 = _positions select (_max - 1);\r\n        } else {\r\n            _data2 = _positions select (_index + ACE_TRACE_DRAW_INC);\r\n        };\r\n\r\n        _pos1 = _data1 select 0;\r\n        _pos2 = _data2 select 0;\r\n        _index = _index + ACE_TRACE_DRAW_INC;\r\n\r\n        drawLine3D [_pos1, _pos2, _color];\r\n        _lastPos = _pos2;\r\n        _lastSpd = _data1 select 1;\r\n    };\r\n    // drawIcon3D [\"\", [1,0,0,1], _lastPos, 0, 0, 0, format[\"%1m/s\", _lastSpd], 1, 0.05, \"RobotoCondensed\"];\r\n} forEach GVAR(traces);\r\n"},{"name":"ace_frag_fnc_findReflections","file":"frag/functions/fnc_findReflections.sqf","text":"//fnc_findReflections.sqf\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_split\", \"_radi\", \"_params\", \"_pos\", \"_explosiveInfo\", \"_los\", \"_nlos\", \"_zIndex\", \"_depth\", \"_indirectHitRange\", \"_indirectHit\", \"_distanceCount\", \"_lastPos\", \"_test\", \"_vec\", \"_testPos\", \"_buckets\", \"_excludes\", \"_bucketIndex\", \"_bucketPos\", \"_bucketList\", \"_c\", \"_index\", \"_blist\", \"_avgX\", \"_avgY\", \"_avgZ\", \"_bpos\", \"_distance\", \"_hitFactor\", \"_hit\", \"_range\", \"_refExp\", \"_rand\", \"_i\", \"_x\", \"_res\", \"_forEachIndex\", \"_explosions\", \"_can\", \"_dirvec\", \"_zAng\"];\r\n\r\nBEGIN_COUNTER(fnc_findReflections);\r\n_params = _this select 0;\r\n_pos = _params select 0;\r\n_explosiveInfo = _params select 1;\r\n_los = _params select 2;\r\n_nlos = _params select 3;\r\n_zIndex = _params select 4;\r\n_depth = _params select 5;\r\n_rand = _params select 6;\r\n\r\n_split = 15;\r\n_radi = (360/_split*_depth);\r\n\r\n// player sideChat format[\"p: %1\", _explosiveInfo];\r\n_indirectHitRange = _explosiveInfo select 0;\r\n_indirectHit = _explosiveInfo select 1;\r\n_distanceCount = (floor _indirectHitRange*4) min 100;\r\n\r\nif(_zIndex < 5) then {\r\n    _lastPos = _pos;\r\n    _zAng = _zIndex*20+2;\r\n    if(_zAng > 80) then {\r\n        _radi = 1;\r\n        _zAng = 90;\r\n    };\r\n    for \"_i\" from 0 to _radi do {\r\n        _test = true;\r\n        _vec = [1, ((_i*_split)+_rand) mod 360, _zAng] call CBA_fnc_polar2vect;\r\n        for \"_x\" from 1 to _distanceCount do {\r\n            _testPos = _pos vectorAdd (_vec vectorMultiply _x);\r\n            // drop [\"\\a3\\data_f\\Cl_basic\",\"\",\"Billboard\",1,15,ASLtoATL _testPos,[0,0,0],1,1.275,1.0,0.0,[1],[[1,0,0,1]],[0],0.0,2.0,\"\",\"\",\"\"];\r\n            _res = lineIntersectsWith [_pos, _testPos];\r\n            if(count _res > 0) exitWith {\r\n                _test = false;\r\n                _nlos pushBack _lastPos;\r\n                // {\r\n                    // _x addEventHandler [\"HandleDamage\", { diag_log text format[\"this: %1\", _this]; }];\r\n                // } forEach _res;\r\n                // drop [\"\\a3\\data_f\\Cl_basic\",\"\",\"Billboard\",1,15,ASLtoATL _testPos,[0,0,0],1,1.275,1.0,0.0,[1],[[1,0,0,1]],[0],0.0,2.0,\"\",\"\",\"\"];\r\n                // TEST_PAIRS pushBack [_pos, _lastPos, [1,0,0,1]];\r\n\r\n            };\r\n            // if(terrainIntersectASL [_pos, _testPos]) exitWith {};\r\n            _lastPos = _testPos;\r\n        };\r\n    };\r\n    _params set[4, _zIndex+1];\r\n} else {\r\n    _depth = _depth + 1;\r\n    _buckets = [];\r\n    _excludes = [];\r\n    _bucketIndex = 0;\r\n    _bucketPos = nil;\r\n    _bucketList = nil;\r\n    _c = 0;\r\n    while { count(_nlos) != count(_excludes) && _c < (count _nlos) } do {\r\n        scopeName \"mainSearch\";\r\n        {\r\n            if(!(_forEachIndex in _excludes)) then {\r\n                _index = _buckets pushBack [_x, [_x]];\r\n                _excludes pushBack _forEachIndex;\r\n                _bucketPos = _x;\r\n                _bucketList = (_buckets select _index) select 1;\r\n                breakTo \"mainSearch\";\r\n            };\r\n        } forEach _nlos;\r\n        {\r\n            if(!(_forEachIndex in _excludes)) then {\r\n                _testPos = _x;\r\n                if(_testPos vectorDistanceSqr _bucketPos <= 30) then {\r\n                    _bucketList pushBack _x;\r\n                    _excludes pushBack _forEachIndex;\r\n                };\r\n            };\r\n        } forEach _nlos;\r\n        _c = _c + 1;\r\n    };\r\n\r\n    // player sideChat format[\"c: %1\", count _buckets];\r\n    _explosions = [];\r\n    {\r\n        _blist = _x select 1;\r\n        _avgX = 0;\r\n        _avgY = 0;\r\n        _avgZ = 0;\r\n\r\n        {\r\n            _avgX = _avgX + (_x select 0);\r\n            _avgY = _avgY + (_x select 1);\r\n            _avgZ = _avgZ + (_x select 2);\r\n        } forEach _blist;\r\n        _c = count _blist;\r\n        _bpos = [_avgX/_c, _avgY/_c, _avgZ/_c];\r\n\r\n        _distance = _pos vectorDistance _bpos;\r\n        _hitFactor = 1-(((_distance/(_indirectHitRange*4)) min 1) max 0);\r\n        // _hitFactor = 1/(_distance^2);\r\n        _hit = _indirectHit*_hitFactor;\r\n        _hit = (floor (_hit/4)) min 500;\r\n        _hit = _hit - (_hit%10);\r\n        _range = (floor (_indirectHitRange-(_distance/4))) min 100;\r\n        _range = _range - (_range%2);\r\n\r\n        if(_hit >= 10 && _range > 0) then {\r\n            // TEST_ICONS pushBack [_bpos, format[\"h: %1, r: %2, hf: %3 d: %4 ihr: %5\", _hit, _range, _hitFactor, _distance, _indirectHitRange*4]];\r\n            // TEST_PAIRS pushBack [_pos, _bpos, [1,0,0,1]];\r\n            _refExp = format[\"ace_explosion_reflection_%1_%2\", _range, _hit];\r\n            // _refExp createVehicle (ASLtoATL _bpos);\r\n            // drop [\"\\a3\\data_f\\Cl_basic\",\"\",\"Billboard\",1,15,ASLtoATL _bpos,[0,0,0],1,1.275,1.0,0.0,[1],[[1,0,0,1]],[0],0.0,2.0,\"\",\"\",\"\"];\r\n\r\n            _explosions pushBack [_refExp, _bpos, _hit, _distance, _indirectHitRange/4, _depth];\r\n\r\n        };\r\n        if(count _explosions > (_radi*2)/_depth) exitWith {};\r\n    } forEach _buckets;\r\n    // _can = \"Land_Bricks_V4_F\" createVehicle (ASLtoATL _pos);\r\n    // _dirvec = _pos vectorFromTo ((ATLtoASL (player modelToWorldVisual (player selectionPosition \"Spine3\"))));\r\n    // _dirvec = _dirvec vectorMultiply 100;\r\n    // _can setVelocity _dirvec;\r\n    [DFUNC(doExplosions), 0, [_explosions, 0]] call CBA_fnc_addPerFrameHandler;\r\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;\r\n};\r\nEND_COUNTER(fnc_findReflections);\r\n"},{"name":"ace_frag_fnc_fired","file":"frag/functions/fnc_fired.sqf","text":"/*\r\n * Author: nou, jaynus, PabstMirror\r\n * Called from the unified fired EH for all.\r\n * If spall is not enabled (default), then cache and only track those that will actually trigger fragmentation.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [clientFiredBIS-XEH] call ace_frag_fnc_fired\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_ENABLED_FRAG\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nprivate _shouldAdd = GVAR(cacheRoundsTypesToTrack) getVariable _ammo;\r\nif (isNil \"_shouldAdd\") then {\r\n    TRACE_1(\"no cache for round\",_ammo);\r\n\r\n    if (!EGVAR(common,settingsInitFinished)) exitWith {\r\n        //Just incase fired event happens before settings init, don't want to set cache wrong if spall setting changes\r\n        TRACE_1(\"Settings not init yet - exit without setting cache\",_ammo);\r\n        _shouldAdd = false;\r\n    };\r\n\r\n    if (GVAR(SpallEnabled)) exitWith {\r\n        //Always want to run whenever spall is enabled?\r\n        _shouldAdd = true;\r\n        TRACE_2(\"SettingCache[spallEnabled]\",_ammo,_shouldAdd);\r\n        GVAR(cacheRoundsTypesToTrack) setVariable [_ammo, _shouldAdd];\r\n    };\r\n\r\n    //Read configs and test if it would actually cause a frag, using same logic as FUNC(pfhRound)\r\n    private _skip = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(skip));\r\n    private _explosive = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"explosive\");\r\n    private _indirectRange = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHitRange\");\r\n    private _force = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(force));\r\n    private _fragPower = getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"indirecthit\")*(sqrt((getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"indirectHitRange\"))));\r\n\r\n    _shouldAdd = (_skip == 0) && {(_force == 1) || {_explosive > 0.5 && {_indirectRange >= 4.5} && {_fragPower >= 35}}};\r\n    TRACE_6(\"SettingCache[willFrag?]\",_skip,_explosive,_indirectRange,_force,_fragPower,_shouldAdd);\r\n    GVAR(cacheRoundsTypesToTrack) setVariable [_ammo, _shouldAdd];\r\n};\r\n\r\nif (_shouldAdd) then {\r\n    TRACE_3(\"Running Frag Tracking\",_unit,_ammo,_projectile);\r\n    [_unit, _ammo, _projectile] call FUNC(addPfhRound);\r\n};\r\n"},{"name":"ace_frag_fnc_frago","file":"frag/functions/fnc_frago.sqf","text":"//fnc_frago.sqf\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n#define FRAG_VEC_VAR 0.004\r\n\r\n#define MAX_FRAG_COUNT 50\r\n\r\nif(!isServer) exitWith { };\r\n\r\nBEGIN_COUNTER(frago);\r\n// _startTime = diag_tickTime;\r\n\r\nprivate [\"_startTime\", \"_round\", \"_lastPos\", \"_lastVel\", \"_shellType\", \"_gun\", \"_fragTypes\", \"_warn\", \"_atlPos\", \"_isArmed\", \"_fuseDist\", \"_indirectHitRange\", \"_fragRange\", \"_c\", \"_m\", \"_k\", \"_gC\", \"_fragPower\", \"_fragPowerRandom\", \"_manObjects\", \"_objects\", \"_crew\", \"_fragCount\", \"_fragArcs\", \"_doRandom\", \"_boundingBox\", \"_targetPos\", \"_distance\", \"_add\", \"_bbX\", \"_bbY\", \"_bbZ\", \"_cubic\", \"_targetVel\", \"_baseVec\", \"_dir\", \"_currentCount\", \"_count\", \"_vecVar\", \"_vec\", \"_fp\", \"_vel\", \"_fragType\", \"_fragObj\", \"_randomCount\", \"_sectorSize\", \"_sectorOffset\", \"_i\", \"_randomDir\", \"_endTime\", \"_target\"];\r\n\r\n_round = _this select 0;\r\n_lastPos = _this select 1;\r\n_lastVel = _this select 2;\r\n_shellType = _this select 3;\r\n_gun = nil;\r\nif((count _this) > 5) then {\r\n    _gun = _this select 5;\r\n};\r\n\r\n_fragTypes = [\r\n            \"ACE_frag_tiny\", \"ACE_frag_tiny\", \"ACE_frag_tiny\",\r\n            \"ACE_frag_tiny_HD\", \"ACE_frag_tiny_HD\", \"ACE_frag_tiny_HD\",\r\n            \"ACE_frag_small\",\"ACE_frag_small\",\"ACE_frag_small\",\"ACE_frag_small\",\r\n            \"ACE_frag_small_HD\",\"ACE_frag_small_HD\",\"ACE_frag_small_HD\",\"ACE_frag_small_HD\",\r\n            \"ACE_frag_medium_HD\", \"ACE_frag_medium_HD\", \"ACE_frag_medium_HD\", \"ACE_frag_medium_HD\", \"ACE_frag_medium_HD\"\r\n        ];\r\n\r\n_warn = false;\r\nif(isArray (configFile >> \"CfgAmmo\" >> _shellType >> \"ACE_frag_CLASSES\")) then {\r\n    _fragTypes = getArray (configFile >> \"CfgAmmo\" >> _shellType >> \"ACE_frag_CLASSES\");\r\n} else {\r\n    _warn = true;\r\n};\r\n\r\n_atlPos = ASLtoATL _lastPos;\r\n\r\n_isArmed = true;\r\nif(!isNil \"_gun\") then {\r\n    _fuseDist = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"fuseDistance\");\r\n    _isArmed = ((getPosASL _gun) distance _lastPos > _fuseDist);\r\n};\r\n\r\n_indirectHitRange = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"indirecthitrange\");\r\n_fragRange = 20*_indirectHitRange*4;\r\n// _c = 185; // grams of comp-b\r\n// _m = 210; // grams of fragmentating metal\r\n// _k = 3/5; // spherical K factor\r\n// _gC = 2843; // Gurney constant of comp-b in /ms\r\n\r\n// _c = 429; // grams of tritonal\r\n// _m = 496; // grams of fragmentating metal\r\n// _k = 1/2; // spherical K factor\r\n// _gC = 2320; // Gurney constant of tritonal in /ms\r\n\r\n\r\n_c = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"ACE_frag_CHARGE\");\r\nif(_c == 0) then { _c = 1; _warn = true;};\r\n_m = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"ACE_frag_METAL\");\r\nif(_m == 0) then { _m = 2; _warn = true;};\r\n_k = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"ACE_frag_GURNEY_K\");\r\nif(_k == 0) then { _k = 1/2; _warn = true;};\r\n_gC = getNumber(configFile >> \"CfgAmmo\" >> _shellType >> \"ACE_frag_GURNEY_C\");\r\nif(_gC == 0) then { _gC = 2440; _warn = true;};\r\n\r\nif(_warn) then {\r\n    ACE_LOGWARNING_1(\"Ammo class %1 lacks proper explosive properties definitions for frag!\",_shellType); //TODO: turn this off when we get closer to release\r\n};\r\n\r\n_fragPower = (((_m/_c)+_k)^-(1/2))*_gC;\r\n_fragPower = _fragPower*0.8; // Gunery equation is for a non-fragmenting metal, imperical value of 80% represents fragmentation\r\n\r\n_fragPowerRandom = _fragPower*0.5;\r\nif((_atlPos select 2) < 0.5) then {\r\n    _lastPos set[2, (_lastPos select 2)+0.5];\r\n};\r\n\r\n// _manObjects = _atlPos nearEntities [\"CaManBase\", _fragRange];\r\n\r\n// setAccTime 0.01;\r\n\r\n//_objects = nearestObjects [_atlPos, [\"AllVehicles\"], _fragRange]; // Not sure if tracking \"ReammoBox\" is required, if so revert this change for _objects\r\n_objects = _atlPos nearEntities [[\"Car\", \"Motorcycle\", \"Tank\", \"StaticWeapon\", \"CAManBase\", \"Air\", \"Ship\"], _fragRange];\r\n\r\n// _objects = _manObjects;\r\n// Target also people inside vehicles or manning weapons\r\n_crew = [];\r\n{\r\n    {\r\n        _crew set [count _crew,_x]\r\n    } forEach (crew _x);\r\n} forEach _objects;\r\n\r\n_objects = _objects - _crew;\r\n_objects = _objects + _crew;\r\n\r\n_fragCount = 0;\r\n\r\n_fragArcs = [];\r\n_fragArcs set[360, 0];\r\n\r\n#ifdef DEBUG_MODE_FULL\r\n    ACE_player sideChat format[\"_fragRange: %1\", _fragRange];\r\n    ACE_player sideChat format[\"_objects: %1\", _objects];\r\n#endif\r\n_doRandom = true;\r\nif(_isArmed && (count _objects) > 0) then {\r\n    if (GVAR(ReflectionsEnabled)) then {\r\n        [_lastPos, _shellType] call FUNC(doReflections);\r\n    };\r\n    {\r\n        //if(random(1) > 0.5) then {\r\n            _target = _x;\r\n            if(alive _target) then {\r\n                _boundingBox = boundingBox _target;\r\n                _targetPos = (getPosASL _target);\r\n                _distance = _targetPos distance _lastPos;\r\n                _add = (((_boundingBox select 1) select 2)/2)+((((_distance-(_fragpower/8)) max 0)/_fragPower)*10);\r\n                _bbX = (abs((_boundingBox select 0) select 0))+((_boundingBox select 1) select 0);\r\n                _bbY = (abs((_boundingBox select 0) select 1))+((_boundingBox select 1) select 1);\r\n                _bbZ = (abs((_boundingBox select 0) select 2))+((_boundingBox select 1) select 2);\r\n                _cubic = _bbX*_bbY*_bbZ;\r\n                if(_cubic > 1) then {\r\n                    _doRandom = true;\r\n\r\n                    _targetVel = (velocity _target);\r\n\r\n\r\n                    _targetPos set[0, (_targetPos select 0)+((_targetVel select 0)*(_distance/_fragPower))];\r\n                    _targetPos set[1, (_targetPos select 1)+((_targetVel select 1)*(_distance/_fragPower))];\r\n                    _targetPos set[2, (_targetPos select 2)+_add];\r\n\r\n                    _baseVec = _lastPos vectorFromTo _targetPos;\r\n\r\n                    _dir = floor(_baseVec call CBA_fnc_vectDir);\r\n                    _currentCount = _fragArcs select _dir;\r\n                    if(isNil \"_currentCount\") then {\r\n                        _currentCount = 0;\r\n                    };\r\n                    if(_currentCount < 20) then {\r\n                        _count = ceil(random(sqrt(_m/1000)));\r\n                        _vecVar = FRAG_VEC_VAR;\r\n                        if(!(_target isKindOf \"Man\")) then {\r\n                            _vecVar = ((sqrt _cubic)/2000)+FRAG_VEC_VAR;\r\n                            if((count (crew _target)) == 0 && _count > 0) then {\r\n                                _count = 0 max (_count/2);\r\n                            };\r\n                        };\r\n                        for \"_i\" from 1 to _count do {\r\n                            _vec = +_baseVec;\r\n\r\n                            _vec set[0, (_vec select 0)-(_vecVar/2)+(random _vecVar)];\r\n                            _vec set[1, (_vec select 1)-(_vecVar/2)+(random _vecVar)];\r\n                            _vec set[2, (_vec select 2)-(_vecVar/2)+(random _vecVar)];\r\n\r\n                            _fp = (_fragPower-(random (_fragPowerRandom)));\r\n                            _vel = _vec vectorMultiply _fp;\r\n\r\n                            _fragType = round (random ((count _fragTypes)-1));\r\n                            _fragObj = (_fragTypes select _fragType) createVehicleLocal [0,0,10000];\r\n                            // diag_log text format[\"fp: %1 %2\", _fp, typeOf _fragObj];\r\n                            _fragObj setPosASL _lastPos;\r\n                            _fragObj setVectorDir _vec;\r\n                            _fragObj setVelocity _vel;\r\n                            if(GVAR(traceFrags)) then {\r\n                                GVAR(TOTALFRAGS) = GVAR(TOTALFRAGS) + 1;\r\n                                [ACE_player, _fragObj, [1,0,0,1]] call FUNC(addTrack);\r\n                            };\r\n                            _fragCount = _fragCount + 1;\r\n                            _currentCount = _currentCount + 1;\r\n                        };\r\n                        _fragArcs set[_dir, _currentCount];\r\n                    };\r\n                };\r\n            };\r\n        //};\r\n        if(_fragCount > MAX_FRAG_COUNT) exitWith {};\r\n    } forEach _objects;\r\n    if(_fragCount > MAX_FRAG_COUNT) exitWith {};\r\n    _randomCount = ((ceil((MAX_FRAG_COUNT-_fragCount)*0.1)) max 0)+20;\r\n    _sectorSize = 360 / (_randomCount max 1);\r\n    // _doRandom = false;\r\n    if(_doRandom) then {\r\n        for \"_i\" from 1 to _randomCount do {\r\n            // Distribute evenly\r\n            _sectorOffset = 360 * (_i - 1) / (_randomCount max 1);\r\n            _randomDir = random(_sectorSize);\r\n            _vec = [cos(_sectorOffset + _randomDir), sin(_sectorOffset + _randomDir), sin(30 - (random 45))];\r\n\r\n            _fp = (_fragPower-(random (_fragPowerRandom)));\r\n\r\n            _vel = _vec vectorMultiply _fp;\r\n\r\n            _fragType = round (random ((count _fragTypes)-1));\r\n            _fragObj = (_fragTypes select _fragType) createVehicleLocal [0,0,10000];\r\n            _fragObj setPosASL _lastPos;\r\n            _fragObj setVectorDir _vec;\r\n            _fragObj setVelocity _vel;\r\n\r\n            if(GVAR(traceFrags)) then {\r\n                GVAR(TOTALFRAGS) = GVAR(TOTALFRAGS) + 1;\r\n                [ACE_player, _fragObj, [1,0.5,0,1]] call FUNC(addTrack);\r\n            };\r\n            _fragCount = _fragCount + 1;\r\n        };\r\n    };\r\n\r\n};\r\n// #ifdef DEBUG_MODE_FULL\r\n    // ACE_player sideChat format[\"total frags: %1\", GVAR(TOTALFRAGS)];\r\n    // ACE_player sideChat format[\"tracks: %1\", (count GVAR(trackedObjects))];\r\n// #endif\r\n// _endTime = diag_tickTime;\r\nEND_COUNTER(frago);"},{"name":"ace_frag_fnc_masterPFH","file":"frag/functions/fnc_masterPFH.sqf","text":"/*\r\n * Author: jaynus\r\n *\r\n * Master single PFH abstraction for all rounds being tracked by frag/spall\r\n *\r\n * Arguments:\r\n *\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n//PARAMS_2(_pfhArgs,_handle);\r\n\r\nif (!GVAR(enabled)) exitWith {};\r\n\r\nprivate[\"_gcIndex\", \"_iter\"];\r\n_gcIndex = [];\r\n\r\n_iter = 0;\r\nwhile { (count GVAR(objects)) > 0 &&  { _iter < (GVAR(MaxTrackPerFrame) min (count GVAR(objects))) } } do {\r\n    private[\"_object\", \"_args\"];\r\n    if(GVAR(lastIterationIndex) >= (count GVAR(objects))) then {\r\n        GVAR(lastIterationIndex) = 0;\r\n    };\r\n    _object = GVAR(objects) select GVAR(lastIterationIndex);\r\n\r\n    if(!isNil \"_object\") then {\r\n        _args = GVAR(arguments) select GVAR(lastIterationIndex);\r\n\r\n        if(!(_args call FUNC(pfhRound))) then {\r\n            _gcIndex pushBack GVAR(lastIterationIndex);    // Add it to the GC if it returns false\r\n        };\r\n    };\r\n    _iter = _iter + 1;\r\n    GVAR(lastIterationIndex) = GVAR(lastIterationIndex) + 1;\r\n};\r\n\r\n// clean up dead object references\r\nprivate[\"_deletionCount\", \"_deleteIndex\"];\r\n_deletionCount = 0;\r\n{\r\n    TRACE_1(\"GC Projectile\", _x);\r\n    _deleteIndex = _x - _deletionCount;\r\n    GVAR(objects) deleteAt _deleteIndex;\r\n    GVAR(arguments) deleteAt _deleteIndex;\r\n\r\n    _deletionCount = _deletionCount + 1;\r\n} forEach _gcIndex;\r\n"},{"name":"ace_frag_fnc_pfhRound","file":"frag/functions/fnc_pfhRound.sqf","text":"#include \"script_component.hpp\"\r\nprivate [\"_round\", \"_lastPos\", \"_lastVel\", \"_type\", \"_firedFrame\", \"_doSpall\", \"_spallTrack\", \"_foundObjectHPIds\", \"_skip\", \"_explosive\", \"_indirectRange\", \"_force\", \"_fragPower\"];\r\n_round = _this select 0;\r\n_lastPos = _this select 1;\r\n_lastVel = _this select 2;\r\n_type = _this select 3;\r\n_firedFrame = _this select 4;\r\n_doSpall = _this select 6;\r\n_spallTrack = _this select 7;\r\n_foundObjectHPIds = _this select 8;\r\n_skip = _this select 9;\r\n_explosive = _this select 10;\r\n_indirectRange = _this select 11;\r\n_force = _this select 12;\r\n_fragPower = _this select 13;\r\n\r\nif(_round in GVAR(blackList)) exitWith {\r\n    false\r\n};\r\n\r\nif (!alive _round) exitWith {\r\n    if((diag_frameno - _firedFrame) > 1) then { //skip if deleted within a single frame\r\n        if(_skip == 0) then {\r\n            if((_explosive > 0.5 && {_indirectRange >= 4.5} && {_fragPower >= 35}) || {_force == 1} ) then {\r\n                [QGVAR(frag_eh), _this] call CBA_fnc_serverEvent;\r\n            };\r\n        };\r\n    };\r\n    if(_doSpall) then {\r\n        GVAR(spallIsTrackingCount) = GVAR(spallIsTrackingCount) - 1;\r\n        // diag_log text format[\"F: %1\", _foundObjectHPIds];\r\n        {\r\n            if(!isNil \"_x\") then {\r\n                _x removeEventHandler [\"hitPart\", _foundObjectHPIds select _forEachIndex];\r\n            };\r\n        } forEach _spallTrack;\r\n    };\r\n    false\r\n};\r\n\r\n_this set[1, (getPosASL _round)];\r\n_this set[2, (velocity _round)];\r\n\r\nif(_doSpall) then {\r\n    private[\"_scale\"];\r\n    _scale = ( (count GVAR(objects)) / GVAR(MaxTrackPerFrame) ) max 0.1;\r\n    [_round, _scale, _spallTrack, _foundObjectHPIds] call FUNC(spallTrack);\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_frag_fnc_removePfhRound","file":"frag/functions/fnc_removePfhRound.sqf","text":"#include \"script_component.hpp\"\r\n\r\n// THIS FUNCTION SHOULD NOT BE USED BECAUSE IT CAUSES AN SEARCH AND REBUILD\r\n\r\nPARAMS_1(_round);\r\n\r\nif(_round in GVAR(blackList)) then {\r\n    GVAR(blackList) = GVAR(blackList) - [_round];\r\n};\r\n\r\nGVAR(objects) = GVAR(objects) - [_round];\r\n"},{"name":"ace_frag_fnc_removeTrack","file":"frag/functions/fnc_removeTrack.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_ret\"];\r\n_ret = true;\r\nif(IS_ARRAY((_this select 0))) then {\r\n    _ret = false;\r\n} else {\r\n    if((_this select 0) in GVAR(trackedObjects)) then {\r\n        GVAR(trackedObjects) = GVAR(trackedObjects) - [(_this select 0)];\r\n    } else {\r\n        _ret = false;\r\n    };\r\n};\r\n_ret\r\n"},{"name":"ace_frag_fnc_spallHP","file":"frag/functions/fnc_spallHP.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_initialData\", \"_hpData\", \"_round\", \"_hpRound\", \"_hpDirect\"];\r\n//player sideChat format[\"f: %1 c: %2\", (_this select 0), (count GVAR(spallHPData))];\r\n\r\nif ((_this select 0) <= (count GVAR(spallHPData))) then {\r\n    _initialData = GVAR(spallHPData) select (_this select 0);\r\n    if (!isNil \"_initialData\") then {\r\n        _hpRound = ((_this select 1) select 0) select 2;\r\n        _round = _initialData select 3;\r\n        _hpDirect = ((_this select 1) select 0) select 10;\r\n        if (_hpDirect && {_round == _hpRound}) then {\r\n            {\r\n                _hpData =  _x;\r\n                _round = _initialData select 3;\r\n                // diag_log text format[\"HPDUMP-------------------------------------\"];\r\n                // {\r\n                    // _hp = _x;\r\n                    // diag_log text format[\"%1 --\", _forEachIndex];\r\n                    // {\r\n                        // diag_log text format[\"%1: %2\", _forEachIndex, _x];\r\n                    // } forEach _hp;\r\n                // } forEach (_this select 1);\r\n                [DFUNC(doSpall), [_this, _forEachIndex]] call CBA_fnc_execNextFrame;\r\n                // player sideChat \"WEEE\";\r\n            } forEach (_this select 1);\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_frag_fnc_spallTrack","file":"frag/functions/fnc_spallTrack.sqf","text":"//fnc_spallTrack.sqf\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_round\", \"_multiplier\", \"_foundObjects\", \"_foundObjectHPIds\", \"_delta\", \"_curPos\", \"_velocity\", \"_velocityStep\", \"_forwardPos\", \"_intersectsWith\", \"_index\", \"_hpId\", \"_data\"];\r\n_round = _this select 0;\r\n_multiplier = _this select 1;\r\n_foundObjects = _this select 2;\r\n_foundObjectHPIds = _this select 3;\r\n\r\n_delta = (1/diag_fps) * _multiplier;\r\n_curPos = getPosASL _round;\r\n_velocity = velocity _round;\r\n\r\n_velocityStep = _velocity vectorMultiply _delta;\r\n_forwardPos = _curPos vectorAdd _velocityStep;\r\n\r\n_intersectsWith = lineIntersectsWith [_curPos, _forwardPos];\r\n\r\nif (count _intersectsWith > 0) then {\r\n    // player sideChat format[\"inter: %1\", _intersectsWith];\r\n    {\r\n        if(!(_x in _foundObjects)) then {\r\n            // diag_log text format[\"Adding HP: %1\", _x];\r\n            _index = (count GVAR(spallHPData));\r\n            _hpId = _x addEventHandler [\"hitPart\", compile format[\"[%1, _this] call \" + QFUNC(spallHP), _index]];\r\n            _foundObjects set[(count _foundObjects), _x];\r\n            _foundObjectHPIds set[(count _foundObjectHPIds), _hpId];\r\n            _data = [_hpId, _x, typeOf _round, _round, _curPos, _velocity, 0, _foundObjects, _foundObjectHPIds];\r\n            GVAR(spallHPData) set[_index, _data];\r\n        };\r\n    } forEach _intersectsWith;\r\n};\r\n"},{"name":"ace_frag_fnc_startTracing","file":"frag/functions/fnc_startTracing.sqf","text":"#include \"script_component.hpp\"\r\nif(!GVAR(tracesStarted)) then {\r\n    GVAR(tracesStarted) = true;\r\n    GVAR(traceID) = [FUNC(drawTraces), 0, []] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_frag_fnc_stopTracing","file":"frag/functions/fnc_stopTracing.sqf","text":"#include \"script_component.hpp\"\r\nif(GVAR(tracesStarted)) then {\r\n    GVAR(tracesStarted) = false;\r\n    [GVAR(traceID)] call CBA_fnc_removePerFrameHandler;\r\n};\r\n"},{"name":"ace_frag_fnc_trackTrace","file":"frag/functions/fnc_trackTrace.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_params\", \"_tracerObj\", \"_index\", \"_positions\", \"_data\"];\r\n_params = _this select 0;\r\n_tracerObj = _params select 0;\r\n_index = _params select 1;\r\n\r\nif (alive _tracerObj && (count GVAR(traces)) > 0) then {\r\n    _data = GVAR(traces) select _index;\r\n    _positions = _data select 4;\r\n    _positions set [(count _positions), [(getPos _tracerObj), vectorMagnitude (velocity _tracerObj)]];\r\n} else {\r\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;\r\n};\r\n"}],"gestures":[{"name":"ace_gestures_fnc_playSignal","file":"gestures/functions/fnc_playSignal.sqf","text":"/*\r\n * Author: joko // Jonas, Emperias, Zigomarvin\r\n * Detect if the player and play the Gesture Animation\r\n *\r\n * Arguments:\r\n * Animation <STRING>\r\n *\r\n * Return Value:\r\n * <BOOL>\r\n *\r\n * Example:\r\n * \"GeniusAnimation\" call ace_gestures_fnc_playSignal\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nTRACE_1(\"params\",_this);\r\n\r\nif (!GVAR(ReloadMutex)) exitWith {false};\r\nif (GVAR(showOnInteractionMenu) == 0) exitWith {false};\r\nif !([ACE_player, objNull, []] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\nprivate _gesture = if ((_this select [0,2]) == \"BI\") then {\r\n    //If it starts with BI, just strip off the leading BI and use it directly\r\n    _this select [2]\r\n} else {\r\n    //Adjust gesture based on stance:\r\n    if (((animationState ACE_player) select [0, 12]) in [\"amovpercmstp\", \"amovpercmwlk\", \"amovpercmtac\"] && weaponLowered ACE_player) then {\r\n        format [\"%1StandLowered\", _this]\r\n    } else {\r\n        _this\r\n    };\r\n};\r\n\r\nTRACE_1(\"playing gesture\",_gesture);\r\nACE_player playAction _gesture;\r\ntrue\r\n"}],"gforces":[{"name":"ace_gforces_fnc_addPFEH","file":"gforces/functions/fnc_addPFEH.sqf","text":"/*\r\n * Author: KoffeinFlummi and esteldunedain\r\n * Adds the PFEH\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//Reset forces array\r\nGVAR(GForces) = [];\r\nGVAR(GForces_Index) = 0;\r\n\r\n// Setup ppEffect\r\nGVAR(GForces_CC) = ppEffectCreate [\"ColorCorrections\", 4215];\r\nGVAR(GForces_CC) ppEffectEnable true;\r\nGVAR(GForces_CC) ppEffectForceInNVG true;\r\nGVAR(GForces_CC) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];\r\nGVAR(GForces_CC) ppEffectCommit 0.4;\r\n\r\nGVAR(lastUpdateTime) = 0;\r\nGVAR(oldVel) = [0,0,0];\r\n\r\nGVAR(pfID) = [DFUNC(pfhUpdateGForces), 0, []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_gforces_fnc_pfhUpdateGForces","file":"gforces/functions/fnc_pfhUpdateGForces.sqf","text":"/*\r\n * Author: KoffeinFlummi and esteldunedain\r\n * Calculates average g-forces and triggers g-effects\r\n *\r\n * Arguments:\r\n * 0: Arguments <ARRAY>\r\n * 1: pfh_id <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n #include \"script_component.hpp\"\r\n\r\n// Update the g-forces at constant mission time intervals (taking accTime into account)\r\nif ((CBA_missionTime - GVAR(lastUpdateTime)) < INTERVAL) exitWith {};\r\nGVAR(lastUpdateTime) = CBA_missionTime;\r\n\r\nif (isNull ACE_player || !(alive ACE_player)) exitWith {};\r\n\r\nBEGIN_COUNTER(everyInterval);\r\n\r\nprivate _newVel = velocity (vehicle ACE_player);\r\nprivate _accel = ((_newVel vectorDiff GVAR(oldVel)) vectorMultiply (1 / INTERVAL)) vectorAdd [0, 0, 9.8];\r\n// Cap maximum G's to +- 10 to avoid g-effects when the update is low fps.\r\nprivate _currentGForce = (((_accel vectorDotProduct vectorUp (vehicle ACE_player)) / 9.8) max -10) min 10;\r\n\r\nGVAR(GForces) set [GVAR(GForces_Index), _currentGForce];\r\nGVAR(GForces_Index) = (GVAR(GForces_Index) + 1) % round (AVERAGEDURATION / INTERVAL);\r\nGVAR(oldVel) = _newVel;\r\n\r\n/* Source: https://github.com/KoffeinFlummi/AGM/issues/1774#issuecomment-70341573\r\n*\r\n* For untrained people without g-suits:\r\n* GLOC: 5G for 6 s\r\n* RedOut: 2.5G for 6 s\r\n*\r\n* For trained jet pilots without g-suits:\r\n* GLOC: 9G for 6 s\r\n* RedOut: 4.5G\r\n*\r\n* For trained jet pilots with g-suits:\r\n* GLOC: 10.5G for 6 s\r\n* RedOut: 4.5G\r\n*\r\n* Effects and camera shake start 30% the limit value, and build gradually\r\n*/\r\n\r\nprivate _average = 0;\r\nprivate _count = {\r\n    _average = _average + _x;\r\n    true\r\n} count GVAR(GForces);\r\n\r\nif (_count > 0) then {\r\n    _average = _average / _count;\r\n};\r\n\r\nprivate _classCoef = (ACE_player getVariable [\"ACE_GForceCoef\",\r\n    getNumber (configFile >> \"CfgVehicles\" >> (typeOf ACE_player) >> \"ACE_GForceCoef\")]) max 0.001;\r\nprivate _suitCoef = if ((uniform ACE_player) != \"\") then {\r\n    (getNumber (configFile >> \"CfgWeapons\" >> (uniform ACE_player) >> \"ACE_GForceCoef\")) max 0.001\r\n} else {\r\n    1\r\n};\r\n\r\nprivate _gBlackOut = MAXVIRTUALG / _classCoef + MAXVIRTUALG / _suitCoef - MAXVIRTUALG;\r\n\r\n// Unconsciousness\r\nif ((_average > _gBlackOut) and {isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") and {!(ACE_player getVariable [\"ACE_isUnconscious\", false])}}) then {\r\n    [ACE_player, true, (10 + floor(random 5))] call EFUNC(medical,setUnconscious);\r\n};\r\n\r\nGVAR(GForces_CC) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[10,10,0,0,0,0.1,0.5]];\r\n\r\nif !(ACE_player getVariable [\"ACE_isUnconscious\", false]) then {\r\n    if (_average > 0.30 * _gBlackOut) then {\r\n        private _strength = ((_average - 0.30 * _gBlackOut) / (0.70 * _gBlackOut)) max 0;\r\n        GVAR(GForces_CC) ppEffectAdjust [1,1,0,[0,0,0,1],[0,0,0,0],[1,1,1,1],[2*(1-_strength),2*(1-_strength),0,0,0,0.1,0.5]];\r\n        addCamShake [_strength, 1, 15];\r\n    } else {\r\n        private _gRedOut = MINVIRTUALG / _classCoef;\r\n\r\n        if (_average < -0.30 * _gRedOut) then {\r\n            private _strength = ((abs _average - 0.30 * _gRedOut) / (0.70 * _gRedOut)) max 0;\r\n            GVAR(GForces_CC) ppEffectAdjust [1,1,0,[1,0.2,0.2,1],[0,0,0,0],[1,1,1,1],[2*(1-_strength),2*(1-_strength),0,0,0,0.1,0.5]];\r\n            addCamShake [_strength / 1.5, 1, 15];\r\n        };\r\n    };\r\n};\r\n\r\nGVAR(GForces_CC) ppEffectCommit INTERVAL;\r\n\r\nEND_COUNTER(everyInterval);\r\n"}],"goggles":[{"name":"ace_goggles_fnc_applyDirtEffect","file":"goggles/functions/fnc_applyDirtEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Adds dirt effect to the glasses.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Succeeded <BOOL>\r\n *\r\n * Example:\r\n * _applied = call ace_goggles_fnc_applyDirtEffect\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (call FUNC(externalCamera)) exitWith {false};\r\n\r\nprivate [\"_unit\", \"_effects\"];\r\n\r\n_unit = ACE_player;\r\n\r\n_effects = GETGLASSES(_unit);\r\n_effects set [DIRT, true];\r\n\r\nSETGLASSES(_unit,_effects);\r\n\r\nif ([_unit] call FUNC(isGogglesVisible)) then {\r\n    private _dirtImage = getText (configFile >> \"CfgGlasses\" >> goggles _unit >> \"ACE_OverlayDirt\");\r\n\r\n    if (_dirtImage != \"\") then {\r\n        GVAR(GogglesEffectsLayer) cutRsc [\"RscACE_GogglesEffects\", \"PLAIN\", 0.1, false];\r\n        (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10660) ctrlSetText _dirtImage;\r\n\r\n        private _effectBrightness = linearConversion [0,1,([] call EFUNC(common,ambientBrightness)),0.25,1];\r\n        (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10660) ctrlSetTextColor [_effectBrightness, _effectBrightness, _effectBrightness, 1];\r\n        TRACE_1(\"dirt\",_effectBrightness);\r\n    };\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_goggles_fnc_applyDustEffect","file":"goggles/functions/fnc_applyDustEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Applies dust to screen.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_applyDustEffect\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (call FUNC(ExternalCamera)) exitWith {};\r\n\r\nprivate [\"_unit\", \"_amount\"];\r\n\r\n_unit = ACE_player;\r\n\r\nif ([_unit] call FUNC(isGogglesVisible)) exitWith {\r\n    GVAR(GogglesEffectsLayer) cutRsc [\"RscACE_GogglesEffects\", \"PLAIN\", 2, false];\r\n\r\n    ((GETUVAR(GVAR(DisplayEffects),displayNull)) displayCtrl 10662) ctrlSetText format [getText (configFile >> \"CfgGlasses\" >> goggles _unit >> \"ACE_DustPath\"), GETDUSTT(DAMOUNT) + 1];\r\n\r\n    private _effectBrightness = linearConversion [0,1,([] call EFUNC(common,ambientBrightness)),0.25,1];\r\n    ((GETUVAR(GVAR(DisplayEffects),displayNull)) displayCtrl 10662) ctrlSetTextColor [_effectBrightness, _effectBrightness, _effectBrightness, 1];\r\n    TRACE_1(\"dust\",_effectBrightness);\r\n\r\n    SETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT) + 1,0,1));\r\n    SETDUST(DBULLETS,0);\r\n};\r\n\r\nif (GETVAR(_unit,ACE_EyesDamaged,false)) exitWith {\r\n    SETDUST(DACTIVE,false);\r\n    SETDUST(DBULLETS,0);\r\n    SETDUST(DAMOUNT,0);\r\n};\r\n\r\nSETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT) + 1,0,2));\r\n\r\n_amount = 1 - (GETDUSTT(DAMOUNT) * 0.125);\r\n\r\nGVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [_amount, _amount, _amount, _amount], [1, 1, 1, 0]];\r\nGVAR(PostProcessEyes) ppEffectCommit 1;\r\nGVAR(PostProcessEyes) ppEffectEnable true;\r\n\r\nSETDUST(DBULLETS,0);\r\n\r\n[GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\r\nGVAR(DustHandler) = -1;\r\n\r\nGVAR(DustHandler) = [{\r\n    if (diag_tickTime >= GETDUSTT(DTIME) + 3) then {\r\n        SETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT)-1,0,2));\r\n\r\n        private _amount = 1 - (GETDUSTT(DAMOUNT) * 0.125);\r\n\r\n        if !(_unit getVariable [\"ACE_EyesDamaged\", false]) then {\r\n            GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [_amount, _amount, _amount, _amount], [1, 1, 1, 0]];\r\n            GVAR(PostProcessEyes) ppEffectCommit 0.5;\r\n        };\r\n\r\n        if (GETDUSTT(DAMOUNT) <= 0) then {\r\n            SETDUST(DACTIVE,false);\r\n            SETDUST(DBULLETS,0);\r\n\r\n            GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [1, 1, 1, 1], [1, 1, 1, 0]];\r\n            GVAR(PostProcessEyes) ppEffectCommit 2;\r\n\r\n            [{\r\n                if (GVAR(DustHandler) == -1) then {\r\n                    GVAR(PostProcessEyes) ppEffectEnable false\r\n                };\r\n            }, [], 2] call CBA_fnc_waitAndExecute;\r\n\r\n            [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\r\n            GVAR(DustHandler) = -1;\r\n        };\r\n    };\r\n}, 0, []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_goggles_fnc_applyGlassesEffect","file":"goggles/functions/fnc_applyGlassesEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Sets screen tint for glasses.\r\n * Sets screen overlay for glasses. (broken/fixed)\r\n * Sets dirt/rain overlay for glasses.\r\n *\r\n * Arguments:\r\n * 0: Glasses classname to be applied <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [goggles ace_player] call ace_goggles_fnc_applyGlassesEffect\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_glasses\"];\r\n\r\n// remove old effect\r\ncall FUNC(removeGlassesEffect);\r\n\r\nprivate [\"_config\", \"_postProcessColour\", \"_postProcessTintAmount\", \"_imagePath\"];\r\n\r\n_config = configFile >> \"CfgGlasses\" >> _glasses;\r\n\r\n_postProcessColour = getArray (_config >> \"ACE_Color\");\r\n_postProcessTintAmount = getNumber (_config >> \"ACE_TintAmount\");\r\n\r\nif (_postProcessTintAmount != 0 && {GVAR(UsePP)}) then {\r\n    _postProcessColour set [3, _postProcessTintAmount/100];\r\n    GVAR(PostProcess) ppEffectAdjust[0.9, 1.1, 0.004, _postProcessColour, [0,0,0,1],[0,0,0,0]];\r\n    GVAR(PostProcess) ppEffectCommit 0;\r\n    GVAR(PostProcess) ppEffectEnable true;\r\n    _postProcessColour set [3, _postProcessTintAmount/250];\r\n    GVAR(PostProcess) ppEffectAdjust[0.9, 1.1, 0.004, _postProcessColour, [0,0,0,1],[0,0,0,0]];\r\n    GVAR(PostProcess) ppEffectCommit 30;\r\n};\r\n\r\n_imagePath = getText (_config >> [\"ACE_Overlay\", \"ACE_OverlayCracked\"] select GETBROKEN);\r\n\r\nif (_imagePath != \"\") then {\r\n    GVAR(GogglesLayer) cutRsc [\"RscACE_Goggles\", \"PLAIN\", 1, false];\r\n    (GLASSDISPLAY displayCtrl 10650) ctrlSetText _imagePath;\r\n};\r\n\r\nif (GETDIRT) then {\r\n    call FUNC(applyDirtEffect);\r\n};\r\n\r\nif (GETDUSTT(DACTIVE)) then {\r\n    SETDUST(DAMOUNT,CLAMP(GETDUSTT(DAMOUNT)-1,0,2));\r\n    call FUNC(applyDustEffect);\r\n};\r\n\r\nGVAR(EffectsActive) = true;\r\n"},{"name":"ace_goggles_fnc_applyRainEffect","file":"goggles/functions/fnc_applyRainEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Handles rain effects being created on glasses.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_applyRainEffect;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_unit\", \"_fnc_underCover\"];\r\n\r\n_unit = ACE_player;\r\n\r\nif (!alive _unit) exitWith {};\r\n\r\n_fnc_underCover = {\r\n    params [\"_unit\"];\r\n\r\n    if (vehicle _unit != _unit && {!isTurnedOut _unit}) exitWith {true};\r\n\r\n    // looking up and no roof over head\r\n    private _position = eyePos _unit;\r\n    positionCameraToWorld [0, 0, 1] select 2 < (positionCameraToWorld [0, 0, 0] select 2) - 0.4 || {(lineIntersects [_position, _position vectorAdd [0, 0, 15], _unit])} // return\r\n};\r\n\r\nif (!isNull findDisplay 312) exitWith {\r\n    if (GVAR(RainActive)) then {\r\n        call FUNC(removeRainEffect);\r\n    };\r\n};\r\n\r\n// Ignore if unit is under water\r\nif !(GVAR(EffectsActive) || {underwater _unit}) exitWith {\r\n    call FUNC(RemoveRainEffect);\r\n};\r\n\r\nif (GVAR(RainLastLevel) != rain) then {\r\n    call FUNC(RemoveRainEffect);\r\n\r\n    GVAR(RainLastLevel) = rain;\r\n\r\n    // Rain is happening\r\n    if (GVAR(RainLastLevel) > 0.05 && {!([_unit] call _fnc_underCover)}) then {\r\n        GVAR(RainActive) = true;\r\n        GVAR(RainDrops) = \"#particlesource\" createVehicleLocal position _unit;\r\n        GVAR(RainDrops) setParticleClass \"ACERainEffect\";\r\n        GVAR(RainDrops) setDropInterval (0.07 * (1.1 - GVAR(RainLastLevel)));\r\n        GVAR(RainDrops) attachTo [vehicle _unit, [0,0,0]];\r\n    };\r\n} else {\r\n    if (GVAR(RainLastLevel) > 0.05) then {\r\n        if (GVAR(RainActive) && {[_unit] call _fnc_underCover}) exitWith {\r\n            call FUNC(RemoveRainEffect);\r\n        };\r\n\r\n        if !(GVAR(RainActive)) then {\r\n            GVAR(RainLastLevel) = -1;\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_goggles_fnc_applyRotorWashEffect","file":"goggles/functions/fnc_applyRotorWashEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, commy2\r\n * Handles the rotor wash effects.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_applyRotorWashEffect;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_unit\", \"_fnc_underCover\"];\r\n\r\n_unit = ACE_player;\r\n\r\nif (!alive _unit) exitWith {};\r\n\r\n// idk. chaching magic? ends with isInRotorWash check.\r\nGVAR(FrameEvent) set [0, !(GVAR(FrameEvent) select 0)];\r\n\r\nif (GVAR(FrameEvent) select 0) exitWith {\r\n    if (vehicle _unit != _unit && {!isTurnedOut _unit}) exitWith {\r\n        (GVAR(FrameEvent) select 1) set [0, false];\r\n    };\r\n\r\n    GVAR(FrameEvent) set [1, ([_unit] call FUNC(isInRotorWash))];\r\n};\r\n\r\n// check if the unit is affected by rotor wash\r\nprivate [\"_rotorWash\", \"_safe\"];\r\n\r\n_rotorWash = GVAR(FrameEvent) select 1;\r\n_safe = false;\r\n\r\n// no rotor wash? remove effects.\r\nif !(_rotorWash select 0) exitWith {\r\n    if (GVAR(PostProcessEyes_Enabled)) then {\r\n        GVAR(PostProcessEyes_Enabled) = false;\r\n\r\n        GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0, 0, 0, 1], [1, 1, 1, 0]];\r\n        GVAR(PostProcessEyes) ppEffectCommit 2;\r\n\r\n        [{\r\n            if (GVAR(DustHandler) == -1) then {\r\n                GVAR(PostProcessEyes) ppEffectEnable false;\r\n            }\r\n        }, [], 2] call CBA_fnc_waitAndExecute;\r\n\r\n        [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\r\n        GVAR(DustHandler) = -1;\r\n    };\r\n};\r\n\r\n// check protection of helmet\r\nif (headgear _unit != \"\") then {\r\n    _safe = getNumber (configFile >> \"CfgWeapons\" >> headgear _unit >> \"ACE_Protection\") == 1;\r\n};\r\n\r\n// check protection of goggles\r\nif !(_safe) then {\r\n    if !([_unit] call FUNC(isGogglesVisible)) exitWith {};\r\n\r\n    if (GETDUSTT(DAMOUNT) < 2) then {\r\n        if !(GETDUSTT(DACTIVE)) then {\r\n            SETDUST(DACTIVE,true);\r\n\r\n            call FUNC(applyDustEffect);\r\n        } else {\r\n            if (_rotorWash select 1 > 0.5) then {\r\n                call FUNC(applyDustEffect);\r\n            };\r\n        };\r\n    };\r\n\r\n    _safe = getNumber (ConfigFile >> \"CfgGlasses\" >> goggles _unit >> \"ACE_Protection\") == 1;\r\n};\r\n\r\n// quit if protected by goggles or helmet\r\nif (_safe) exitWith {};\r\n\r\n// apply rotor wash effect\r\nif (_rotorWash select 1 > 0) then {\r\n    private _scale = 0.7;\r\n\r\n    if (_rotorWash select 1 > 0) then {\r\n        _scale = CLAMP(0.3 * (_rotorWash select 1),0.1,0.3);\r\n    } else {\r\n        _scale = 0.1;\r\n    };\r\n\r\n    _scale = 1 - _scale;\r\n\r\n    [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\r\n    GVAR(DustHandler) = -1;\r\n\r\n    if !(_unit getVariable [\"ACE_EyesDamaged\", false]) then {\r\n        GVAR(PostProcessEyes_Enabled) = true;\r\n        GVAR(PostProcessEyes) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [_scale, _scale, _scale, _scale], [1, 1, 1, 0]];\r\n        GVAR(PostProcessEyes) ppEffectCommit 0.5;\r\n        GVAR(PostProcessEyes) ppEffectEnable true;\r\n    };\r\n};\r\n"},{"name":"ace_goggles_fnc_clearGlasses","file":"goggles/functions/fnc_clearGlasses.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Clears all dirt, rain, dust from glasses.\r\n * Removes glasses effect (PP, overlay) and then puts it back.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_clearGlasses\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_unit\", \"_broken\", \"_effects\"];\r\n\r\n_unit = ACE_player;\r\n\r\n_broken = GETBROKEN;\r\n_effects = GLASSESDEFAULT;\r\n_effects set [BROKEN, _broken];\r\n\r\nSETGLASSES(_unit,_effects);\r\n\r\nif ((stance _unit != \"PRONE\") && {primaryWeapon _unit != \"\"} && {currentWeapon _unit == primaryWeapon _unit}) then {\r\n    _unit playActionNow \"gestureWipeFace\";\r\n};\r\n\r\n[{\r\n    if (cameraView == \"INTERNAL\") then {\r\n        addCamShake [5, 1.75, 2];\r\n    };\r\n}, [], 0.3] call CBA_fnc_waitAndExecute;\r\n\r\ncall FUNC(removeDirtEffect);\r\ncall FUNC(removeRainEffect);\r\ncall FUNC(removeDustEffect);\r\n"},{"name":"ace_goggles_fnc_externalCamera","file":"goggles/functions/fnc_externalCamera.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Returns if the camera is external or not.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Whether the camera is in external view or not. <BOOL>\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_externalCamera;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Handle the ThreeDen Editor Camera\r\nif ((!isNil {is3DEN}) && {is3DEN}) exitWith {true};\r\n\r\nif (GVAR(showInThirdPerson)) then {\r\n    cameraView in [\"GROUP\"] || EFUNC(common,isFeatureCameraActive) \r\n} else {\r\n    cameraView in [\"EXTERNAL\", \"GROUP\"] || EFUNC(common,isFeatureCameraActive) \r\n};\r\n"},{"name":"ace_goggles_fnc_getExplosionIndex","file":"goggles/functions/fnc_getExplosionIndex.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, commy2\r\n * Turns 0-1 damage of explosion Event into a rating system of 0-3\r\n *\r\n * Arguments:\r\n * 0: The amount of damage <NUMBER>\r\n *\r\n * Return Value:\r\n * The rating [0-3] <NUMBER>\r\n *\r\n * Example:\r\n * 0.05 call ace_goggles_fnc_getExplosionIndex;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_damage\"];\r\n\r\nif (_damage <= 0.04) exitWith {0};\r\nif (_damage <= 0.06) exitWith {1};\r\nif (_damage <= 0.09) exitWith {2};\r\n\r\n3\r\n"},{"name":"ace_goggles_fnc_handleExplosion","file":"goggles/functions/fnc_handleExplosion.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, commy2\r\n * Handles explosions.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Function is handled? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit != ACE_player) exitWith {true};\r\n\r\ncall FUNC(applyDirtEffect);\r\n\r\nif (GETBROKEN) exitWith {true};\r\n\r\nprivate [\"_config\", \"_effects\"];\r\n\r\n_config = configFile >> \"CfgGlasses\" >> goggles _unit;\r\n\r\nif ((_this select 1) call FUNC(GetExplosionIndex) < getNumber (_config >> \"ACE_Resistance\")) exitWith {true};\r\n\r\nif !([_unit] call FUNC(isGogglesVisible)) exitWith {\r\n    [\"ace_glassesCracked\", [_unit]] call CBA_fnc_localEvent;\r\n    true\r\n};\r\n\r\n_effects = GETGLASSES(_unit);\r\n_effects set [BROKEN, true];\r\n\r\nSETGLASSES(_unit,_effects);\r\n\r\nif (getText (_config >> \"ACE_OverlayCracked\") != \"\") then {\r\n    if (call FUNC(ExternalCamera)) exitWith {};\r\n\r\n    if (isNull (GLASSDISPLAY)) then {\r\n        GVAR(GogglesLayer) cutRsc [\"RscACE_Goggles\", \"PLAIN\", 1, false];\r\n    };\r\n\r\n    (GLASSDISPLAY displayCtrl 10650) ctrlSetText getText (_config >> \"ACE_OverlayCracked\");\r\n};\r\n\r\n[\"ace_glassesCracked\", [_unit]] call CBA_fnc_localEvent;\r\ntrue\r\n"},{"name":"ace_goggles_fnc_handleFired","file":"goggles/functions/fnc_handleFired.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, commy2\r\n * Determines whether to place dust on the goggles, based on calibre of weapon fired and other requirements. Called from the unified fired EH only for the local player.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * Function is handled? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\n// no dust in rain\r\nif (rain > 0.1) exitWith {true};\r\n\r\n// effect only aplies when lying on the ground\r\nif (stance _unit != \"PRONE\") exitWith {true};\r\n\r\nprivate [\"_position\", \"_particleConfig\", \"_cloudType\", \"_surface\", \"_bullets\"];\r\n\r\n// check if the unit really is on the ground and not in a building\r\n_position = getPosATL _unit;\r\n\r\nif (_position select 2 > 0.2) exitWith {true};\r\n\r\n// get weapon dust effect\r\n_particleConfig = configFile >> \"CfgWeapons\" >> _weapon >> \"GunParticles\";\r\n\r\n_cloudType = \"\";\r\n\r\nif (isClass (_particleConfig >> \"FirstEffect\")) then { // @todo read this with custom / non-standard config classnames\r\n    _cloudType = getText (_particleConfig >> \"FirstEffect\" >> \"effectName\");\r\n} else {\r\n    if (isClass (_particleConfig >> \"effect1\")) then {\r\n        _cloudType = getText (_particleConfig >> \"effect1\" >> \"effectName\");\r\n    };\r\n};\r\n\r\n// quit if the weapon causes no dust effect\r\nif (_cloudType == \"\") exitWith {true};\r\n\r\n// get if the surface is dusty\r\nif (surfaceIsWater _position) exitWith {true};\r\n\r\n_surface = surfaceType _position select [1]; // cuts of the leading #\r\n\r\nif (_surface != GVAR(surfaceCache)) then {\r\n    GVAR(surfaceCache) = _surface;\r\n    GVAR(surfaceCacheIsDust) = getNumber (configFile >> \"CfgSurfaces\" >> _surface >> \"dust\") >= 0.1;\r\n};\r\n\r\n// quit if surface isn't dusty\r\nif (!GVAR(surfaceCacheIsDust)) exitWith {true};\r\n\r\n// increment dust value with type bullet\r\n_bullets = GETDUSTT(DBULLETS);\r\n\r\nif (diag_tickTime - GETDUSTT(DTIME) > 1) then {\r\n    _bullets = 0;\r\n};\r\n\r\n_bullets = _bullets + 1;\r\n\r\nSETDUST(DBULLETS,_bullets);\r\nSETDUST(DTIME,diag_tickTime);\r\n\r\n// apply dust effect if the amount of fired bullets is over the threshold\r\nif (GETDUSTT(DAMOUNT) < 2) then {\r\n    private _bulletsRequired = 100;\r\n\r\n    if (isNumber (configFile >> _cloudType >> QGVAR(BulletCount))) then {\r\n        _bulletsRequired = getNumber (configFile >> _cloudType >> QGVAR(BulletCount));\r\n    };\r\n\r\n    if (_bullets > _bulletsRequired) then {\r\n        SETDUST(DACTIVE,true);\r\n        call FUNC(applyDustEffect);\r\n    };\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_goggles_fnc_handleKilled","file":"goggles/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, commy2\r\n * Handles the player dying.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Function is handled? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit != ACE_player) exitWith {true};\r\n\r\nGVAR(PostProcessEyes) ppEffectEnable false;\r\n\r\nSETGLASSES(_unit,GLASSESDEFAULT);\r\n\r\ncall FUNC(removeGlassesEffect);\r\n\r\nGVAR(EffectsActive) = false;\r\n\r\n_unit setVariable [\"ACE_EyesDamaged\", false];\r\n\r\nif (GVAR(DustHandler) != -1) then {\r\n    [GVAR(DustHandler)] call CBA_fnc_removePerFrameHandler;\r\n};\r\nGVAR(DustHandler) = -1;\r\n\r\ntrue\r\n"},{"name":"ace_goggles_fnc_isDivingGoggles","file":"goggles/functions/fnc_isDivingGoggles.sqf","text":"/*\r\n * Author: commy2\r\n * Determines whether passed goggles is diving goggles or a variant of them.\r\n *\r\n * Arguments:\r\n * 0: Glasses classname <STRING>\r\n *\r\n * Return Value:\r\n * Check if these goggles are diving goggles <BOOL>\r\n *\r\n * Example:\r\n * [goggles ace_player] call ace_goggles_fnc_isDivingGoggles;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_glasses\"];\r\n\r\nprivate _config = configFile >> \"CfgGlasses\" >> _glasses;\r\n\r\nif (!isClass _config) exitWith {false};\r\n\r\ngetNumber (_config >> \"mode\") == 1 // return\r\n"},{"name":"ace_goggles_fnc_isGogglesVisible","file":"goggles/functions/fnc_isGogglesVisible.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Determines if goggles are visible on passed unit.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Whether goggles are visible <BOOL>\r\n *\r\n * Example:\r\n * _visible = [ace_player] call ace_goggles_fnc_isGogglesVisible;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate [\"_currentGlasses\", \"_position\"];\r\n\r\n_currentGlasses = goggles _unit;\r\n\r\nif (_currentGlasses == \"\") exitWith {false};\r\n\r\n// requires ACE_Resistance config entry. Returns false for balaclavas and bandanas.\r\nif (getNumber (configFile >> \"CfgGlasses\" >> _currentGlasses >> \"ACE_Resistance\") == 0) exitWith {false};\r\n\r\n// check if in water and has diving goggles or on land and not diving goggles\r\n_position = getPosASLW _unit;\r\n\r\n(surfaceIsWater _position && {_position select 2 < 0.25}) isEqualTo (_currentGlasses call FUNC(isDivingGoggles)) // return\r\n"},{"name":"ace_goggles_fnc_isInRotorWash","file":"goggles/functions/fnc_isInRotorWash.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, commy2\r\n * Checks for nearby running helicopters (within 15m)\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Radius to check for helicopter (default: 15) <NUMBER>\r\n *\r\n * Return Value:\r\n * <ARRAY>:\r\n *     0: In rotorwash <BOOL>\r\n *     1: Amount of rotor wash. <NUMBER>\r\n *\r\n * Example:\r\n * if ([ace_player, 10] call ace_goggles_fnc_isInRotorWash select 0) then { hint \"Rotor wash\"; };\r\n * if ([ace_player] call ace_goggles_fnc_isInRotorWash select 0) then { hint \"Rotor wash\"; };\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_radius\", 15]];\r\n\r\nprivate _rotorWash = [false, 0];\r\n\r\n{\r\n    if (isEngineOn _x) then {\r\n        private _distance = _unit distance _x;\r\n\r\n        // convert distance to 0...1 range, where 0 is the maximum radius\r\n        _distance = 1 - _distance / _radius;\r\n\r\n        // use highest amount of rotor wash as return value in case of multiple helicopters\r\n        if (_distance > _rotorWash select 1) then {\r\n            _rotorWash set [0, true];\r\n            _rotorWash set [1, _distance];\r\n        };\r\n    };\r\n    false\r\n} count (position _unit nearEntities [[\"Helicopter\"], _radius]);\r\n\r\n_rotorWash\r\n"},{"name":"ace_goggles_fnc_removeDirtEffect","file":"goggles/functions/fnc_removeDirtEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Removes dirt from the glasses.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_removeDirtEffect\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isNull (GETUVAR(GVAR(DisplayEffects),displayNull))) then {\r\n    (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10660) ctrlSetText \"\";\r\n};\r\n"},{"name":"ace_goggles_fnc_removeDustEffect","file":"goggles/functions/fnc_removeDustEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Removes dust from the glasses.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_removeDustEffect\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isNull (GETUVAR(GVAR(DisplayEffects),displayNull))) then {\r\n    (GETUVAR(GVAR(DisplayEffects),displayNull) displayCtrl 10662) ctrlSetText \"\";\r\n};\r\n"},{"name":"ace_goggles_fnc_removeGlassesEffect","file":"goggles/functions/fnc_removeGlassesEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Removes the glasses effect from the screen, removes dirt effect, removes rain effect, removes dust effect. Does not reset array (glasses will still be broken, dirty, ect.)\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_removeGlassesEffect\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(EffectsActive) = false;\r\nGVAR(PostProcess) ppEffectEnable false;\r\n\r\nif (!isNull (GLASSDISPLAY)) then {\r\n    GLASSDISPLAY closeDisplay 0;\r\n};\r\n\r\ncall FUNC(removeDirtEffect);\r\ncall FUNC(removeRainEffect);\r\ncall FUNC(removeDustEffect);\r\n"},{"name":"ace_goggles_fnc_removeRainEffect","file":"goggles/functions/fnc_removeRainEffect.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Removes rain effects from the screen.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_goggles_fnc_removeRainEffect\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isNull GVAR(RainDrops)) then {\r\n    deleteVehicle GVAR(RainDrops);\r\n};\r\n\r\nGVAR(RainActive) = false;\r\nGVAR(RainLastLevel) = 0;\r\n"}],"grenades":[{"name":"ace_grenades_fnc_flare","file":"grenades/functions/fnc_flare.sqf","text":"/*\r\n * Author: commy2\r\n * Makes flare shine.\r\n *\r\n * Arguments:\r\n * 0: The flare <OBJECT>\r\n * 1: Color of flare <ARRAY>\r\n * 2: Intensity of flare <NUMBER>\r\n * 3: Flare lifetime <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_nade, [0.5,0.5,0.5], 0.5, 60] call ace_grenades_fnc_flare\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_projectile\", \"_color\", \"_intensity\", \"_timeToLive\"];\r\n\r\nprivate _light = \"#lightpoint\" createVehicleLocal position _projectile;\r\n\r\n_light setLightColor _color;\r\n_light setLightAmbient _color;\r\n_light setLightIntensity _intensity;\r\n_light setLightBrightness 0.8;\r\n\r\n_light setLightUseFlare true;\r\n_light setLightFlareSize 3.0;\r\n_light setLightFlareMaxDistance 1000;\r\n\r\n_light setLightDayLight true;\r\n\r\n_light lightAttachObject [_projectile, [0,0,0]];\r\n//_light attachTo [_projectile, [0,0,0]];\r\n\r\n[{deleteVehicle _this}, _light, _timeToLive, 1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_grenades_fnc_flashbangExplosionEH","file":"grenades/functions/fnc_flashbangExplosionEH.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Creates the flashbang effect and knock out AI units.\r\n *\r\n * Arguments:\r\n * 0: The flashBang position ASL <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[0,0,0]] call ace_grenades_fnc_flashbangExplosionEH\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_grenadePosASL\"];\r\nTRACE_1(\"params\",_grenadePosASL);\r\n\r\n// Create flash to illuminate environment\r\nif (hasInterface) then {\r\n    private _light = \"#lightpoint\" createVehicleLocal ASLtoAGL _grenadePosASL;\r\n    _light setPosASL _grenadePosASL;\r\n\r\n    _light setLightBrightness 20;\r\n    _light setLightAmbient [1,1,1];\r\n    _light setLightColor [1,1,1];\r\n    _light setLightDayLight true;\r\n\r\n    // Reduce the light after 0.1 seconds\r\n    [{\r\n        params [\"_light\"];\r\n        _light setLightBrightness 5;\r\n        // Delete the light after 0.2 more seconds\r\n        [{\r\n            params [\"_light\"];\r\n            deleteVehicle _light;\r\n        }, [_light], 0.2] call CBA_fnc_waitAndExecute;\r\n    }, [_light], 0.1] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n// Affect local AI\r\n// @todo: Affect units in static weapons, turned out, etc\r\nprivate _affected = (ASLtoAGL _grenadePosASL) nearEntities [\"CAManBase\", 20];\r\n_affected = _affected - [ACE_player];\r\n{\r\n    if (local _x && {alive _x}) then {\r\n        private _strength = 1 - (((getPosASL _x) vectorDistance _grenadePosASL) min 20) / 20;\r\n\r\n        TRACE_3(\"FlashBangEffect Start\",_x,((getPosASL _x) vectorDistance _grenadePosASL),_strength);\r\n\r\n        [_x, true] call EFUNC(common,disableAI);\r\n\r\n        _x setSkill (skill _x / 50);\r\n\r\n        if (_strength > 0.2) then {\r\n            _x setVectorDir ((getPosASL _x) vectorDiff _grenadePosASL);\r\n        };\r\n\r\n        [{\r\n            params [\"_unit\"];\r\n\r\n            //Make sure we don't enable AI for unconscious units\r\n            if !(_unit getVariable [\"ace_isUnconscious\", false]) then {\r\n                [_unit, false] call EFUNC(common,disableAI);\r\n            };\r\n\r\n            _unit setSkill (skill _unit * 50);\r\n        }, [_x], 7 * _strength] call CBA_fnc_waitAndExecute;\r\n    };\r\n} count _affected;\r\n\r\n// Affect local player, independently of distance\r\nif (hasInterface && {!isNull ACE_player} && {alive ACE_player}) then {\r\n    // Do effects for player\r\n    // is there line of sight to the grenade?\r\n    private _eyePos = eyePos ACE_player; //PositionASL\r\n    _grenadePosASL set [2, (_grenadePosASL select 2) + 0.2]; // compensate for grenade glitching into ground\r\n\r\n    private _strength = 1 - ((_eyePos vectorDistance _grenadePosASL) min 20) / 20;\r\n\r\n    // Check for line of sight (check 4 points in case grenade is stuck in an object or underground)\r\n    private _losCoefficient = 1;\r\n    private _losCount = {\r\n        !lineIntersects [_grenadePosASL vectorAdd _x, _eyePos, ACE_player]\r\n    } count [[0,0,0], [0,0,0.2], [0.1, 0.1, 0.1], [-0.1, -0.1, 0.1]];\r\n    TRACE_1(\"Line of sight count (out of 4)\",_losCount);\r\n    if (_losCount <= 1) then {\r\n        _losCoefficient = 0.1;\r\n    };\r\n    _strength = _strength * _losCoefficient;\r\n\r\n    // Add ace_hearing ear ringing sound effect\r\n    if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Hearing\") && {_strength > 0}) then {\r\n        [40 * _strength] call EFUNC(hearing,earRinging);\r\n    };\r\n\r\n    // add ace_medical pain effect:\r\n    if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") && {_strength > 0.1}) then {\r\n        [ACE_player, _strength / 2] call EFUNC(medical,adjustPainLevel);\r\n    };\r\n\r\n    // Effect on vision has a wider range, with a higher falloff\r\n    _strength = 1 - (((_eyePos vectorDistance _grenadePosASL) min 25) / 25) ^ 0.4;\r\n    _strength = _strength * _losCoefficient;\r\n    // Account for people looking away by slightly reducing the effect for visual effects.\r\n    private _eyeDir = ((AGLtoASL positionCameraToWorld [0,0,1]) vectorDiff (AGLtoASL positionCameraToWorld [0,0,0]));\r\n    private _dirToUnitVector = _eyePos vectorFromTo _grenadePosASL;\r\n    private _angleDiff = acos (_eyeDir vectorDotProduct _dirToUnitVector);\r\n    TRACE_2(\"\",_angleDiff,((1 - (_angleDiff - 45) / (120 - 45)) max 0));\r\n    // from 0-45deg, full effect\r\n    if (_angleDiff > 45) then {\r\n        _strength = _strength * ((1 - (_angleDiff - 45) / (120 - 45)) max 0);\r\n    };\r\n\r\n    // Blind player\r\n    if (_strength > 0.1) then {\r\n        GVAR(flashbangPPEffectCC) ppEffectEnable true;\r\n        GVAR(flashbangPPEffectCC) ppEffectAdjust [1,1,(0.8 + _strength) min 1,[1,1,1,0],[0,0,0,1],[0,0,0,0]];\r\n        GVAR(flashbangPPEffectCC) ppEffectCommit 0.01;\r\n\r\n        //PARTIALRECOVERY - start decreasing effect over time\r\n        [{\r\n            params [\"_strength\"];\r\n\r\n            GVAR(flashbangPPEffectCC) ppEffectAdjust [1,1,0,[1,1,1,0],[0,0,0,1],[0,0,0,0]];\r\n            GVAR(flashbangPPEffectCC) ppEffectCommit (10 * _strength);\r\n        }, [_strength], 7 * _strength] call CBA_fnc_waitAndExecute;\r\n\r\n        //FULLRECOVERY - end effect\r\n        [{\r\n            GVAR(flashbangPPEffectCC) ppEffectEnable false;\r\n        }, [], 17 * _strength] call CBA_fnc_waitAndExecute;\r\n    };\r\n\r\n    if (_strength > 0.2) then {\r\n        ACE_player setVectorDir (_eyePos vectorDiff _grenadePosASL);\r\n    };\r\n};\r\ntrue\r\n"},{"name":"ace_grenades_fnc_flashbangThrownFuze","file":"grenades/functions/fnc_flashbangThrownFuze.sqf","text":"/*\r\n * Author: commy2\r\n * Waits for the flashbang grenade fuze to trigger and 'explode'\r\n *\r\n * Arguments:\r\n * 0: projectile - Flashbang Grenade <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [theFlashbang] call ace_grenades_fnc_flashbangThrownFuze\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_projectile\"];\r\nTRACE_1(\"params\",_projectile);\r\n\r\nif (alive _projectile) then {\r\n    playSound3D [\"A3\\Sounds_F\\weapons\\Explosion\\explosion_mine_1.wss\", _projectile, false, getPosASL _projectile, 5, 1.2, 400];\r\n\r\n    [\"ace_flashbangExploded\", [getPosASL _projectile]] call CBA_fnc_globalEvent;\r\n};\r\n"},{"name":"ace_grenades_fnc_nextMode","file":"grenades/functions/fnc_nextMode.sqf","text":"/*\r\n * Author: commy2\r\n * Select the next throwing mode and display message.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Handeled <BOOL>\r\n *\r\n * Example:\r\n * [] call ace_grenades_fnc_nextMode\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _mode = missionNamespace getVariable [QGVAR(currentThrowMode), 0];\r\n\r\nif (_mode == 4) then {\r\n    _mode = 0;\r\n} else {\r\n    _mode = _mode + 1;\r\n};\r\n\r\n// ROLL GRENADE DOESN'T WORK RIGHT NOW\r\nif (_mode == 3) then {\r\n    _mode = 4;\r\n};\r\n\r\nprivate _hint = localize ([\r\n    LSTRING(NormalThrow),\r\n    LSTRING(HighThrow),\r\n    LSTRING(PreciseThrow),\r\n    LSTRING(RollGrenade),\r\n    LSTRING(DropGrenade)  \r\n] select _mode);\r\n\r\n[_hint] call EFUNC(common,displayTextStructured);\r\n\r\nGVAR(currentThrowMode) = _mode;\r\n\r\ntrue\r\n"},{"name":"ace_grenades_fnc_throwGrenade","file":"grenades/functions/fnc_throwGrenade.sqf","text":"/*\r\n * Author: commy2\r\n * Adjust the grenades throwing direction and speed to the selected throwing mode. Called from the unified fired EH only for CAManBase\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [clientFiredBIS-XEH] call ace_grenades_fnc_throwGrenade\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nif (_weapon != \"Throw\") exitWith {};\r\n\r\n// http://feedback.arma3.com/view.php?id=12340\r\nif (isNull _projectile) then {\r\n    _projectile = nearestObject [_unit, _ammo];\r\n};\r\n\r\nprivate _config = configFile >> \"CfgAmmo\" >> _ammo;\r\n\r\n// handle special grenades\r\nif (local _unit) then {\r\n    if (getNumber (_config >> QGVAR(flashbang)) == 1) then {\r\n        private _fuzeTime = getNumber (_config >> \"explosionTime\");\r\n\r\n        [FUNC(flashbangThrownFuze), [_projectile], _fuzeTime] call CBA_fnc_waitAndExecute;\r\n    };\r\n};\r\n\r\nif (getNumber (_config >> QGVAR(flare)) == 1) then {\r\n    private _fuzeTime = getNumber (_config >> \"explosionTime\");\r\n    private _timeToLive = getNumber (_config >> \"timeToLive\");\r\n    private _color = getArray (_config >> QGVAR(color));\r\n    private _intensity = _color deleteAt 3;\r\n\r\n    [FUNC(flare), [_projectile, _color, _intensity, _timeToLive], _fuzeTime, 0] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n// handle throw modes\r\nif (_unit != ACE_player) exitWith {};\r\n\r\nprivate _mode = missionNamespace getVariable [QGVAR(currentThrowMode), 0];\r\n\r\nif (_mode != 0) then {\r\n    private _velocity = velocity _projectile;\r\n\r\n    switch (_mode) do {\r\n        //high throw\r\n        case 1 : {\r\n            _velocity = [\r\n            0.5 * (_velocity select 0),\r\n            0.5 * (_velocity select 1),\r\n            [0, 0, 0] distance (_velocity vectorMultiply 0.5)\r\n            ];\r\n        };\r\n        //precise throw\r\n        case 2 : {\r\n            _velocity = (_unit weaponDirection _weapon) vectorMultiply (vectorMagnitude _velocity);\r\n        };\r\n        //roll grande\r\n        case 3 : {\r\n            //@todo\r\n        };\r\n        //drop grenade\r\n        case 4 : {\r\n            _velocity = [0, 0, 0];\r\n        };\r\n    };\r\n\r\n    _projectile setVelocity _velocity;\r\n};\r\n"}],"gunbag":[{"name":"ace_gunbag_fnc_calculateMass","file":"gunbag/functions/fnc_calculateMass.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Calculate mass of weapon an items.\r\n *\r\n * Arguments:\r\n * 0: Weapon <STRING>\r\n * 1: Items <ARRAY>\r\n * 2: Magazines <ARRAY>\r\n *\r\n * Return Value:\r\n * Mass <NUMBER>\r\n *\r\n * Example:\r\n * [\"weapon\", [\"item1\", \"item2\"], [\"mag1\", \"mag2\"]] call ace_gunbag_fnc_calculateMass\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_weapon\", \"_items\", \"_magazines\"];\r\n\r\nprivate _mass = getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"WeaponSlotsInfo\" >> \"mass\");\r\n\r\n{\r\n    _mass = _mass + getNumber (configFile >> \"CfgWeapons\" >> _x >> \"ItemInfo\" >> \"mass\");\r\n} foreach _items;\r\n\r\n{\r\n    _mass = _mass + getNumber (configFile >> \"CfgWeapons\" >> _x >> \"mass\");\r\n} forEach _magazines;\r\n\r\n_mass\r\n"},{"name":"ace_gunbag_fnc_canInteract","file":"gunbag/functions/fnc_canInteract.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Check if client able to interact with gunbag.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * <NUMBER> -1: can't interact 0: empty gunbag 1: full gunbag\r\n *\r\n * Example:\r\n * _canInteract = [player, target] call ace_gunbag_fnc_canInteract\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nprivate _result = -1;\r\nprivate _gunbag = backpackContainer _target;\r\n\r\nif ((_gunbag getVariable [QGVAR(gunbagWeapon), []]) isEqualTo [] && {primaryWeapon _unit != \"\"} && {getNumber (configFile >> \"CfgWeapons\" >> primaryWeapon _unit  >> QGVAR(allowGunbag)) == 1}) then {\r\n    _result = 0;\r\n};\r\n\r\nif (!((_gunbag getVariable [QGVAR(gunbagWeapon), []]) isEqualTo []) && {primaryWeapon _unit == \"\"}) then {\r\n    _result = 1;\r\n};\r\n\r\n_result\r\n"},{"name":"ace_gunbag_fnc_hasGunbag","file":"gunbag/functions/fnc_hasGunbag.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Switches gunbag full/empty for mass calculation.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Has Gunbag <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_gunbag_fnc_hasGunbag\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n(backpackContainer _unit) isKindOf QUOTE(ADDON)\r\n"},{"name":"ace_gunbag_fnc_offGunbag","file":"gunbag/functions/fnc_offGunbag.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Get weapon out of gunbag.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, target] call ace_gunbag_fnc_toGunbag\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nprivate _gunbag = backpackContainer _target;\r\n\r\n_unit call EFUNC(common,goKneeling);\r\n\r\n// play sound\r\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\r\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\r\n};\r\n\r\n[PROGRESSBAR_TIME, _this, {\r\n    (_this select 0) call FUNC(offGunbagCallback)\r\n}, {}, localize LSTRING(offGunbag), {\r\n    (_this select 0) call FUNC(canInteract) == 1\r\n}] call EFUNC(common,progressBar);\r\n"},{"name":"ace_gunbag_fnc_offGunbagCallback","file":"gunbag/functions/fnc_offGunbagCallback.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Get weapon out of gunbag.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, target] call ace_gunbag_fnc_offGunbagCallback\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nprivate _gunbag = backpackContainer _target;\r\n\r\nprivate _state = _gunbag getVariable [QGVAR(gunbagWeapon), []];\r\n\r\nif (_state isEqualTo []) exitWith {\r\n    [localize LSTRING(empty)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n_state params [\"_weapon\", \"_items\", \"_magazines\"];\r\n\r\n_unit addWeapon _weapon;\r\nremoveAllPrimaryWeaponItems _unit;\r\n\r\n{\r\n    _unit addWeaponItem [_weapon, _x];\r\n} forEach (_items + _magazines);\r\n\r\n_unit selectWeapon _weapon;\r\n\r\n_magazines = _magazines apply {_x select 0};\r\n\r\nprivate _mass = [_weapon, _items, _magazines] call FUNC(calculateMass);\r\n\r\n// remove virtual load\r\n[_target, _gunbag, -_mass] call EFUNC(movement,addLoadToUnitContainer);\r\n_gunbag setVariable [QGVAR(gunbagWeapon), [], true];\r\n\r\n// play sound\r\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\r\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\r\n};\r\n"},{"name":"ace_gunbag_fnc_status","file":"gunbag/functions/fnc_status.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Check gunbag status full/empty.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_gunbag_fnc_status\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _state = (backpackContainer _unit) getVariable [QGVAR(gunbagWeapon), []];\r\n\r\nif (_state isEqualTo []) then {\r\n    [localize LSTRING(empty)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    _state params [\"_weapon\"];\r\n\r\n    [\r\n        getText (configFile >> \"CfgWeapons\" >> _weapon >> \"displayname\"),\r\n        getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\")\r\n    ] call EFUNC(common,displayTextPicture);\r\n};\r\n"},{"name":"ace_gunbag_fnc_toGunbag","file":"gunbag/functions/fnc_toGunbag.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Put weapon into gunbag.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, target] call ace_gunbag_fnc_toGunbag\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nprivate _gunbag = backpackContainer _target;\r\n\r\n_unit call EFUNC(common,goKneeling);\r\n\r\n// play sound\r\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\r\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\r\n};\r\n\r\n[PROGRESSBAR_TIME, _this, {\r\n    (_this select 0) call FUNC(toGunbagCallback)\r\n}, {}, localize LSTRING(toGunbag), {\r\n    (_this select 0) call FUNC(canInteract) == 0\r\n}] call EFUNC(common,progressBar);\r\n"},{"name":"ace_gunbag_fnc_toGunbagCallback","file":"gunbag/functions/fnc_toGunbagCallback.sqf","text":"/*\r\n * Author: Ir0n1E\r\n * Put weapon into gunbag.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, target] call ace_gunbag_fnc_toGunbagCallback\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nprivate _weapon = primaryWeapon _unit;\r\nprivate _gunbag = backpackContainer _target;\r\n\r\nprivate _state = [_unit, _weapon] call EFUNC(common,getWeaponState);\r\n\r\n/*\r\n * example return value _state\r\n * [[\"\",\"\",\"optic_Aco\",\"\"],[\"arifle_MX_GL_ACO_F\",\"GL_3GL_F\"],[\"30Rnd_65x39_caseless_mag\",\"1Rnd_HE_Grenade_shell\"],[30,1]]\r\n */\r\n\r\n_state params [\"_items\", \"\", \"_magazines\", \"_ammo\"];\r\n\r\nprivate _mass = [_weapon, _items, _magazines] call FUNC(calculateMass);\r\n\r\n{\r\n    _magazines set [_forEachIndex, [_x, _ammo select _forEachIndex]];\r\n} forEach _magazines;\r\n\r\n_unit removeWeapon _weapon;\r\n\r\n// add virtual load\r\n[_target, _gunbag, _mass] call EFUNC(movement,addLoadToUnitContainer);\r\n_gunbag setVariable [QGVAR(gunbagWeapon), [_weapon, _items, _magazines], true];\r\n\r\n// play sound\r\nif ([\"ace_backpacks\"] call EFUNC(common,isModLoaded)) then {\r\n    [_target, _gunbag] call EFUNC(backpacks,backpackOpened);\r\n};\r\n"}],"hearing":[{"name":"ace_hearing_fnc_addEarPlugs","file":"hearing/functions/fnc_addEarPlugs.sqf","text":"/*\r\n * Author: commy2\r\n * Called on unit initialization. Adds earplugs if the unit is equipped with either a really loud primary weapon or a rocket launcher.\r\n *\r\n * Arguments:\r\n * 0: A Soldier <Object>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [guy] call ace_hearing_fnc_addEarPlugs\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_2(\"params\",_unit,typeOf _unit);\r\n\r\n// only run this after the settings are initialized\r\nif !(EGVAR(common,settingsInitFinished)) exitWith {\r\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(addEarPlugs), _this];\r\n};\r\n\r\n// Exit if hearing is disabled OR autoAdd is disabled OR soldier has earplugs already in (persistence scenarios)\r\nif (!GVAR(enableCombatDeafness) || {!GVAR(autoAddEarplugsToUnits)} || {[_unit] call FUNC(hasEarPlugsIn)}) exitWith {};\r\n\r\n// add earplugs if the soldier has a rocket launcher\r\nif ((secondaryWeapon _unit) != \"\") exitWith {\r\n    TRACE_1(\"has launcher - adding\",_unit);\r\n    _unit addItem \"ACE_EarPlugs\";\r\n};\r\n\r\n// otherwise add earplugs if the soldier has a big rifle\r\nif ((primaryWeapon _unit) == \"\") exitWith {};\r\n\r\n(primaryWeaponMagazine _unit) params [[\"_magazine\", \"\"]];\r\nif (_magazine == \"\") exitWith {};\r\n\r\nprivate _initSpeed = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\r\nprivate _ammo = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"ammo\");\r\nprivate _count = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"count\");\r\n\r\nprivate _caliber = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ACE_caliber\");\r\n_caliber = call {\r\n    if (_ammo isKindOf [\"ShellBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\r\n    if (_ammo isKindOf [\"RocketBase\", (configFile >> \"CfgAmmo\")]) exitWith { 200 };\r\n    if (_ammo isKindOf [\"MissileBase\", (configFile >> \"CfgAmmo\")]) exitWith { 600 };\r\n    if (_ammo isKindOf [\"SubmunitionBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\r\n    if (_caliber <= 0) then { 6.5 } else { _caliber };\r\n};\r\nprivate _loudness = (_caliber ^ 1.25 / 10) * (_initspeed / 1000) / 5;\r\n\r\n//If unit has a machine gun boost effective loudness 50%\r\nif (_count >= 50) then {_loudness = _loudness * 1.5};\r\n\r\nTRACE_2(\"primaryWeapon\",_unit,_loudness);\r\n\r\nif (_loudness > 0.2) then {\r\n    TRACE_1(\"loud gun - adding\",_unit);\r\n    _unit addItem \"ACE_EarPlugs\";\r\n};\r\n"},{"name":"ace_hearing_fnc_earRinging","file":"hearing/functions/fnc_earRinging.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2, Rocko, Rommel, Ruthberg\r\n * Handle new sound souce near ace_player and apply hearing damage\r\n *\r\n * Arguments:\r\n * 0: strength of ear ringing <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_strength] call ace_hearing_fnc_earRinging\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_strength\"];\r\n\r\nif (_strength < 0.05) exitWith {};\r\nif (!isNull curatorCamera) exitWith {};\r\nif ((!GVAR(enabledForZeusUnits)) && {player != ACE_player}) exitWith {};\r\n\r\nTRACE_2(\"adding\",_strength * GVAR(damageCoefficent),GVAR(deafnessDV));\r\n\r\nGVAR(deafnessDV) = GVAR(deafnessDV) + (_strength * GVAR(damageCoefficent));\r\n"},{"name":"ace_hearing_fnc_explosionNear","file":"hearing/functions/fnc_explosionNear.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2, Ruthberg\r\n * Handles deafness due to explosions going off near the player.\r\n *\r\n * Arguments:\r\n * 0: vehicle - Object the event handler is assigned to (player) <OBJECT>\r\n * 1: damage - Damage inflicted to the object <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [clientExplosionEvent] call ace_hearing_fnc_explosionNear\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_damage\"];\r\n\r\nif (_unit != ACE_player) exitWith {};\r\n\r\nTRACE_2(\"explosion near player\",_unit,_damage);\r\n\r\nprivate [\"_strength\"];\r\n_strength = (0 max _damage) * 30;\r\nif (_strength < 0.01) exitWith {};\r\n\r\n// Call inmediately, as it will get pick up later anyway by the update thread\r\n[_strength] call FUNC(earRinging);\r\n"},{"name":"ace_hearing_fnc_firedNear","file":"hearing/functions/fnc_firedNear.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2\r\n * Handles deafness due to large-caliber weapons going off near the player.\r\n *\r\n * Arguments:\r\n * 0: Unit - Object the event handler is assigned to <OBJECT>\r\n * 1: Firer: Object - Object which fires a weapon near the unit <OBJECT>\r\n * 2: Distance - Distance in meters between the unit and firer <NUMBER>\r\n * 3: weapon - Fired weapon <STRING>\r\n * 4: muzzle - Muzzle that was used (not used) <STRING>\r\n * 5: mode - Current mode of the fired weapon (not used) <STRING>\r\n * 6: ammo - Ammo used <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [clientFiredNearEvent] call ace_hearing_fnc_firedNear\r\n * [player, player, 10, \"arifle_MX_ACO_pointer_F\", \"arifle_MX_ACO_pointer_F\", \"single\", \"B_65x39_Caseless\"] call ace_hearing_fnc_firedNear\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_firer\", \"_distance\", \"_weapon\", \"\", \"\", \"_ammo\"];\r\n\r\n//Only run if firedNear object is player or player's vehicle:\r\nif ((ACE_player != _object) && {(vehicle ACE_player) != _object}) exitWith {};\r\nif (_weapon in [\"Throw\", \"Put\"]) exitWith {};\r\nif (_distance > 50) exitWith {};\r\n\r\nprivate _vehAttenuation = if ((ACE_player == (vehicle ACE_player)) || {isTurnedOut ACE_player}) then {1} else {GVAR(playerVehAttenuation)};\r\nprivate _distance = 1 max _distance;\r\n\r\nprivate _silencer = switch (_weapon) do {\r\n    case (primaryWeapon _firer) : {(primaryWeaponItems _firer) select 0};\r\n    case (secondaryWeapon _firer) : {(secondaryWeaponItems _firer) select 0};\r\n    case (handgunWeapon _firer) : {(handgunItems _firer) select 0};\r\n    default {\"\"};\r\n};\r\n\r\nprivate _audibleFireCoef = 1;\r\nif (_silencer != \"\") then {\r\n    _audibleFireCoef = getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"audibleFire\");\r\n};\r\n\r\nprivate _loudness = GVAR(cacheAmmoLoudness) getVariable (format [\"%1%2\",_weapon,_ammo]);\r\nif (isNil \"_loudness\") then {\r\n    private _muzzles = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"muzzles\");\r\n    private _weaponMagazines = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\r\n    {\r\n        if (_x != \"this\") then {\r\n            private _muzzleMagazines = getArray (configFile >> \"CfgWeapons\" >> _weapon >> _x >> \"magazines\");\r\n            _weaponMagazines append _muzzleMagazines;\r\n        };\r\n    } count _muzzles;\r\n    {\r\n        _ammoType = getText(configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\r\n        _weaponMagazines set [_forEachIndex, [_x, _ammoType]];\r\n    } forEach _weaponMagazines;\r\n\r\n    private _magazine = \"\";\r\n    {\r\n        _x params [\"_magazineType\", \"_ammoType\"];\r\n        if (_ammoType == _ammo) exitWith {\r\n            _magazine = _magazineType;\r\n        };\r\n    } count _weaponMagazines;\r\n\r\n    if (_magazine == \"\") then {\r\n        _loudness = 0;\r\n        TRACE_2(\"No mag for Weapon/Ammo??\",_weapon,_ammo);\r\n    } else {\r\n        private _initSpeed = getNumber(configFile >> \"CfgMagazines\" >> _magazine >> \"initSpeed\");\r\n        private _caliber = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ACE_caliber\");\r\n        _caliber = call {\r\n            if (_ammo isKindOf [\"ShellBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\r\n            if (_ammo isKindOf [\"RocketBase\", (configFile >> \"CfgAmmo\")]) exitWith { 200 };\r\n            if (_ammo isKindOf [\"MissileBase\", (configFile >> \"CfgAmmo\")]) exitWith { 600 };\r\n            if (_ammo isKindOf [\"SubmunitionBase\", (configFile >> \"CfgAmmo\")]) exitWith { 80 };\r\n            if (_caliber <= 0) then { 6.5 } else { _caliber };\r\n        };\r\n\r\n        _loudness = (_caliber ^ 1.25 / 10) * (_initspeed / 1000) / 5;\r\n        TRACE_6(\"building cache\",_weapon,_ammo,_magazine,_initSpeed,_caliber,_loudness);\r\n    };\r\n    GVAR(cacheAmmoLoudness) setVariable [(format [\"%1%2\",_weapon,_ammo]), _loudness];\r\n};\r\n\r\n_loudness = _loudness * _audibleFireCoef;\r\nprivate _strength = _vehAttenuation * (_loudness - (_loudness / 50 * _distance)); // linear drop off\r\n\r\nTRACE_1(\"result\",_strength);\r\n\r\nif (_strength < 0.01) exitWith {};\r\n\r\n// Call inmediately, as it will get pick up later anyway by the update thread\r\n[_strength] call FUNC(earRinging);\r\n"},{"name":"ace_hearing_fnc_handleRespawn","file":"hearing/functions/fnc_handleRespawn.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Reset earplugs on respawn, and then re-add if appropriate\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player] call ACE_hearing_fnc_handleRespawn;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_2(\"params\",_unit,typeOf _unit);\r\n\r\nif (!local _unit) exitWith {}; //XEH should only be called on local units\r\n\r\n//Do not add or remove earplugs if gear should be preserved\r\nif (missionNamespace getVariable [QEGVAR(respawn,SavePreDeathGear), false]) exitWith {};\r\n\r\nprivate _respawn = [0] call BIS_fnc_missionRespawnType;\r\n\r\n//if respawn is not Group or side:\r\nif (_respawn <= 3) then {\r\n    //Remove earplugs if they have them:\r\n    if (_unit getVariable [\"ACE_hasEarPlugsin\", false]) then {\r\n        TRACE_1(\"had EarPlugs in - removing\",_unit);\r\n        _unit setVariable [\"ACE_hasEarPlugsin\", false, true];\r\n    };\r\n};\r\n\r\n//Re-add if they need them:\r\n[_unit] call FUNC(addEarPlugs);\r\n"},{"name":"ace_hearing_fnc_hasEarPlugsIn","file":"hearing/functions/fnc_hasEarPlugsIn.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit has earplugs put in.\r\n *\r\n * Arguments:\r\n * 0:Unit (player) <OBJECT>\r\n *\r\n * Return Value:\r\n * Have Earplugs in <BOOL>\r\n *\r\n * Example:\r\n * [ace_player] call ace_hearing_fnc_hasEarPlugsIn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_unit\"];\r\n\r\n_unit getVariable [\"ACE_hasEarPlugsin\", false]\r\n"},{"name":"ace_hearing_fnc_moduleHearing","file":"hearing/functions/fnc_moduleHearing.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Initializes the Hearing module.\r\n *\r\n * Arguments:\r\n * Whatever the module provides. (I dunno.)\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\n[_logic, QGVAR(EnableCombatDeafness), \"EnableCombatDeafness\"] call EFUNC(common,readSettingFromModule);\r\n\r\n// Do Not Force - read module setting only non-default is set due to using SCALAR\r\nif ((_logic getVariable \"DisableEarRinging\") != -1) then {\r\n    [_logic, QGVAR(DisableEarRinging), \"DisableEarRinging\"] call EFUNC(common,readSettingFromModule);\r\n};\r\n[_logic, QGVAR(enabledForZeusUnits), \"enabledForZeusUnits\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(autoAddEarplugsToUnits), \"autoAddEarplugsToUnits\"] call EFUNC(common,readSettingFromModule);\r\nACE_LOGINFO(\"Hearing Module Initialized.\");\r\n"},{"name":"ace_hearing_fnc_putInEarplugs","file":"hearing/functions/fnc_putInEarplugs.sqf","text":"/*\r\n * Author: Hope Johnson and commy2\r\n * Puts in earplugs.\r\n *\r\n * Arguments:\r\n * 0:Unit (player) <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ace_player] call ace_hearing_fnc_putInEarplugs\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\"];\r\n\r\n// Plugs in inventory, putting them in\r\n_player removeItem \"ACE_EarPlugs\";\r\n\r\n_player setVariable [\"ACE_hasEarPlugsIn\", true, true];\r\n\r\n[localize LSTRING(EarPlugs_Are_On)] call EFUNC(common,displayTextStructured);\r\n\r\n//Force an immediate fast volume update:\r\n[[true]] call FUNC(updateVolume);\r\n\r\n/*// No Earplugs in inventory, telling user\r\n[localize LSTRING(NoPlugs)] call EFUNC(common,displayTextStructured);*/\r\n\r\n[] call FUNC(updateHearingProtection);\r\n"},{"name":"ace_hearing_fnc_removeEarplugs","file":"hearing/functions/fnc_removeEarplugs.sqf","text":"/*\r\n * Author: Hope Johnson and commy2\r\n * Takes out earplugs.\r\n *\r\n * Arguments:\r\n * 0:Unit (player) <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ace_player] call ace_hearing_fnc_removeEarplugs\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\"];\r\n\r\nif !(_player canAdd \"ACE_EarPlugs\") exitWith { // inventory full\r\n    [localize LSTRING(Inventory_Full)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n// Plugs already in and removing them.\r\n_player addItem \"ACE_EarPlugs\";\r\n\r\n_player setVariable [\"ACE_hasEarPlugsIn\", false, true];\r\n\r\n[localize LSTRING(EarPlugs_Are_Off)] call EFUNC(common,displayTextStructured);\r\n\r\n//Force an immediate fast volume update:\r\n[[true]] call FUNC(updateVolume);\r\n\r\n[] call FUNC(updateHearingProtection);\r\n"},{"name":"ace_hearing_fnc_updateHearingProtection","file":"hearing/functions/fnc_updateHearingProtection.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Updates the hearing protection and volume attenuation for player on earbuds/helmet change\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_hearing_fnc_updateHearingProtection\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nTRACE_1(\"params\",_this);\r\n\r\nif (isNull ACE_player) exitWith {\r\n    GVAR(damageCoefficent) = 0;\r\n    GVAR(volumeAttenuation) = 1;\r\n};\r\n\r\n// Handle Earplugs\r\nprivate _hasEarPlugsIn = [ACE_player] call FUNC(hasEarPlugsIn);\r\nGVAR(damageCoefficent) = [1, 0.25] select _hasEarPlugsIn;\r\nGVAR(volumeAttenuation) = [1, GVAR(EarplugsVolume)] select _hasEarPlugsIn;\r\n\r\n// Handle Headgear\r\nif (headgear ACE_player != \"\") then {\r\n    private _protection = (getNumber (configFile >> \"CfgWeapons\" >> (headgear ACE_player) >> QGVAR(protection))) min 1;\r\n    GVAR(damageCoefficent) = GVAR(damageCoefficent) * (1 - _protection);\r\n    private _attenuation = (getNumber (configFile >> \"CfgWeapons\" >> (headgear ACE_player) >> QGVAR(lowerVolume))) min 1;\r\n    GVAR(volumeAttenuation) = GVAR(volumeAttenuation) * (1 - _attenuation);\r\n};\r\n"},{"name":"ace_hearing_fnc_updatePlayerVehAttenuation","file":"hearing/functions/fnc_updatePlayerVehAttenuation.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Gets the sound attenuation of a player to the outside.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Ammount that unit can hear outside <NUMBER>\r\n *\r\n * Example:\r\n * [] call ace_hearing_fnc_updatePlayerVehAttenuation\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_effectType\", \"_newAttenuation\", \"_turretConfig\", \"_turretPath\", \"_vehicle\"];\r\n\r\n_vehicle = vehicle ACE_player;\r\n\r\nif (isNull _vehicle) exitWith {};\r\n\r\n_newAttenuation = 1;\r\nif (ACE_player != _vehicle) then {\r\n    _effectType = \"\";\r\n    _turretPath = [ACE_player] call EFUNC(common,getTurretIndex);\r\n    _effectType = getText (configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"attenuationEffectType\");\r\n\r\n    if (!(_turretPath isEqualTo [])) then {\r\n        _turretConfig = [(configFile >> \"CfgVehicles\" >> (typeOf _vehicle)), _turretPath] call EFUNC(common,getTurretConfigPath);\r\n\r\n        if ((getNumber (_turretConfig >> \"disableSoundAttenuation\")) == 1) then {\r\n            _effectType = \"\";\r\n        } else {\r\n            if (isText (_turretConfig >> \"soundAttenuationTurret\")) then {\r\n                _effectType = getText (_turretConfig >> \"soundAttenuationTurret\");\r\n            };\r\n        };\r\n    };\r\n\r\n    _newAttenuation = switch (true) do {\r\n        case (_effectType == \"\"): {1};\r\n        case (_effectType == \"CarAttenuation\"): {0.5};\r\n        case (_effectType == \"RHS_CarAttenuation\"): {0.5};\r\n        case (_effectType == \"OpenCarAttenuation\"): {1};\r\n        case (_effectType == \"TankAttenuation\"): {0.1};\r\n        case (_effectType == \"HeliAttenuation\"): {0.3};\r\n        case (_effectType == \"OpenHeliAttenuation\"): {0.9};\r\n        case (_effectType == \"SemiOpenHeliAttenuation\"): {0.6};\r\n        case (_effectType == \"HeliAttenuationGunner\"): {0.85};\r\n        case (_effectType == \"HeliAttenuationRamp\"): {0.85};\r\n        default {1};\r\n    };\r\n};\r\n\r\nTRACE_2(\"New vehicle attenuation\",_vehicle,_newAttenuation);\r\n\r\nGVAR(playerVehAttenuation) = _newAttenuation;\r\n"},{"name":"ace_hearing_fnc_updateVolume","file":"hearing/functions/fnc_updateVolume.sqf","text":"/*\r\n * Author: commy2 and esteldunedain and Ruthberg\r\n * Updates and applys the current deafness.  Called every 1 sec from a PFEH.\r\n *\r\n * Arguments:\r\n * 0: Args <ARRAY>\r\n * -----0: Just update volume (skip ringing/recovery) <BOOL><OPTIONAL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_hearing_fnc_updateVolume\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!alive ACE_player) exitWith {\r\n    if (missionNameSpace getVariable [QGVAR(disableVolumeUpdate), false]) exitWith {};\r\n    TRACE_1(\"dead - removing hearing effects\",ACE_player);\r\n    [QUOTE(ADDON), 1, true] call EFUNC(common,setHearingCapability);\r\n};\r\n\r\n(_this select 0) params [\"_justUpdateVolume\"];\r\n\r\nGVAR(deafnessDV) = (GVAR(deafnessDV) min 20) max 0;\r\nGVAR(volume) = (1 -  (GVAR(deafnessDV) / 20)) max 0.05;\r\nTRACE_3(\"\",GVAR(volume),GVAR(deafnessDV),GVAR(deafnessDV) - GVAR(deafnessPrior));\r\n\r\nif (!_justUpdateVolume) then {\r\n    // Ring if we got a big increase in the last second or enough accumulated damage\r\n    if (GVAR(deafnessDV) - GVAR(deafnessPrior) > 1 ||\r\n        GVAR(deafnessDV) > 10) then {\r\n\r\n        if (CBA_missionTime - GVAR(time3) < 3) exitWith {};\r\n        GVAR(time3) = CBA_missionTime;\r\n\r\n        if (GVAR(deafnessDV) > 19.75) then {\r\n            playSound ([\"ACE_Combat_Deafness_Heavy\", \"ACE_Combat_Deafness_Heavy_NoRing\"] select GVAR(DisableEarRinging));\r\n        } else {\r\n            playSound ([\"ACE_Combat_Deafness_Medium\", \"ACE_Combat_Deafness_Medium_NoRing\"] select GVAR(DisableEarRinging));\r\n        };\r\n    };\r\n    GVAR(deafnessPrior) = GVAR(deafnessDV);\r\n\r\n    // Hearing takes longer to return to normal after it hits rock bottom\r\n    GVAR(deafnessDV) =  (GVAR(deafnessDV) - (0.5 * (GVAR(volume) max 0.1))) max 0;\r\n};\r\n\r\nif (missionNameSpace getVariable [QGVAR(disableVolumeUpdate), false]) exitWith {};\r\n\r\nprivate _volume = GVAR(volume);\r\n\r\n// Earplugs and headgear can attenuate hearing\r\n_volume = _volume min GVAR(volumeAttenuation);\r\n\r\n// Reduce volume if player is unconscious\r\nif (ACE_player getVariable [\"ACE_isUnconscious\", false]) then {\r\n    _volume = _volume min GVAR(UnconsciousnessVolume);\r\n};\r\n\r\n[QUOTE(ADDON), _volume, true] call EFUNC(common,setHearingCapability);\r\n"}],"hitreactions":[{"name":"ace_hitreactions_fnc_fallDown","file":"hitreactions/functions/fnc_fallDown.sqf","text":"/*\r\n * Author: commy2\r\n * Adds reactions to a unit that was hit. EH only runs where to unit is local. Adds screams, falling down, falling from ladders, ejecting from static weapons and camshake for players\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: firer <OBJECT>\r\n * 2: damage taken <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_firer\", \"_damage\"];\r\n\r\n// exit if system is disabled\r\nif (GVAR(minDamageToTrigger) == -1) exitWith {};\r\n\r\n// don't fall after minor damage\r\nif (_damage < GVAR(minDamageToTrigger)) exitWith {};\r\n\r\n// don't fall on collision damage\r\nif (_unit == _firer) exitWith {};\r\n\r\n// camshake for player\r\nif (_unit == ACE_player) then {\r\n    addCamShake [3, 5, _damage + random 10];\r\n};\r\n\r\n// play scream sound\r\nif (!isNil QEFUNC(medical,playInjuredSound)) then {\r\n    [_unit] call EFUNC(medical,playInjuredSound);\r\n};\r\n\r\nprivate _vehicle = vehicle _unit;\r\n\r\n// handle static weapons\r\nif (_vehicle isKindOf \"StaticWeapon\") exitWith {\r\n    if (!alive _unit) then {\r\n        _unit action [\"Eject\", _vehicle];\r\n        unassignVehicle _unit;\r\n    };\r\n};\r\n\r\n// don't do animations if in a vehicle (looks weird and animations never reset):\r\nif (_vehicle != _unit) exitWith {};\r\n\r\n// this checks most things, so it doesn't mess with being inside vehicles or while dragging etc.\r\nif !([_unit, _vehicle] call EFUNC(common,canInteractWith)) exitWith {};\r\n\r\n// handle ladders\r\nif (getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> animationState _unit >> \"ACE_isLadder\") == 1) exitWith {\r\n    _unit action [\"LadderOff\", nearestObject [position _unit, \"House\"]];\r\n};\r\n\r\n// only play animation when standing due to lack of animations, sry\r\nif !(stance _unit in [\"CROUCH\", \"STAND\"]) exitWith {};\r\n\r\nprivate _velocity = vectorMagnitude velocity _unit;\r\n\r\n// only fall when moving\r\nif (_velocity < 2) exitWith {};\r\n\r\n// get correct animation by weapon\r\nprivate _anim = _unit call FUNC(getRandomAnimation);\r\n\r\n// exit if no animation for this weapon exists, i.e. binocular or rocket launcher\r\nif (_anim == \"\") exitWith {};\r\n\r\n// don't mess with transitions. don't fall then.\r\nif !([_unit] call EFUNC(common,inTransitionAnim)) then {\r\n    [_unit, _anim, 2] call EFUNC(common,doAnimation);\r\n};\r\n"},{"name":"ace_hitreactions_fnc_getRandomAnimation","file":"hitreactions/functions/fnc_getRandomAnimation.sqf","text":"/*\r\n * Author: commy2\r\n * Get a random fall animation for the unit.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Fall animation <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _weapon = currentWeapon _unit;\r\n\r\nif (_weapon == \"\") exitWith {\r\n    \"AmovPercMsprSnonWnonDf_AmovPpneMstpSnonWnonDnon\"\r\n};\r\n\r\nif (_weapon == primaryWeapon _unit) exitWith {\r\n    if (_unit call EFUNC(common,isPlayer)) then {\r\n        private _isRunning = _velocity > 4;\r\n\r\n        [\r\n            [\"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon_2\", \"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon\"] select _isRunning,\r\n            [\"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon_2\", \"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon\"] select _isRunning,\r\n            \"AmovPercMstpSrasWrflDnon_AadjPpneMstpSrasWrflDleft\",\r\n            \"AmovPercMstpSrasWrflDnon_AadjPpneMstpSrasWrflDright\"\r\n        ] select floor random 4\r\n    } else {\r\n        \"AmovPercMsprSlowWrfldf_AmovPpneMstpSrasWrflDnon\"\r\n    };\r\n};\r\n\r\nif (_weapon == handgunWeapon _unit) exitWith {\r\n    if (_unit call EFUNC(common,isPlayer)) then {\r\n        [\r\n            \"AmovPercMsprSlowWpstDf_AmovPpneMstpSrasWpstDnon\",\r\n            \"AmovPercMsprSlowWpstDf_AmovPpneMstpSrasWpstDnon\",\r\n            \"AmovPercMstpSrasWpstDnon_AadjPpneMstpSrasWpstDleft\",\r\n            \"AmovPercMstpSrasWpstDnon_AadjPpneMstpSrasWpstDright\"\r\n        ] select floor random 4\r\n    } else {\r\n        \"AmovPercMsprSlowWpstDf_AmovPpneMstpSrasWpstDnon\"\r\n    };\r\n};\r\n\r\n\"\"\r\n"}],"huntir":[{"name":"ace_huntir_fnc_cam","file":"huntir/functions/fnc_cam.sqf","text":"/*\r\n * Author: Norrin, Rocko, Ruthberg\r\n *\r\n * Handles HuntIR camera\r\n *\r\n * Arguments:\r\n * 0: HuntIR <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!hasInterface) exitWith {};\r\nparams [\"_huntIR\"];\r\n\r\nGVAR(huntIR) = _huntIR;\r\nGVAR(pos) = getPosVisual GVAR(huntIR);\r\n\r\nGVAR(ZOOM) = 0;\r\nGVAR(NV) = 0;\r\nGVAR(TI) = 0;\r\nGVAR(cur_cam) = 0;\r\nGVAR(ROTATE) = 0;\r\nGVAR(ELEVAT) = 0.01;\r\n\r\nHUNTIR_BACKGROUND_LAYER_ID cutText[\"\",\"PLAIN\"];\r\n\r\nclosedialog 0;\r\ncreateDialog \"ace_huntir_cam_dialog\";\r\nuiNameSpace setVariable [\"ace_huntir_monitor\", findDisplay 18880];\r\n(uiNameSpace getVariable \"ace_huntir_monitor\") displaySetEventHandler [\"Keydown\", QUOTE(_this call FUNC(keyPressed))];\r\n\r\nctrlSetText [4, \"0X\"];\r\n\r\nGVAR(logic) = \"Logic\" createVehicleLocal [0, 0, 0];\r\nGVAR(logic) setPosATL (GVAR(pos) vectorAdd [0, 0, -5]);\r\nGVAR(logic) setVectorUp [0.001, 0.001, 1];\r\n\r\nGVAR(cam) = \"camera\" camCreate GVAR(pos);\r\nGVAR(cam) camSetTarget GVAR(logic);\r\nGVAR(cam) cameraEffect [\"internal\", \"BACK\"];\r\nGVAR(cam) camSetRelPos [0, 0, 2];\r\nGVAR(cam) camCommit 0;\r\nshowCinemaBorder false;\r\ncamUseNVG false;\r\n\r\nGVAR(pphandle) = ppEffectCreate [\"colorCorrections\", 135522];\r\nGVAR(pphandle) ppEffectAdjust [1, 1, 0, [0.01, 0.02, 0.04, 0.01], [0.87, 1.08, 1.196, 0.3], [0.399, 0.287, 0.014, 0.0]];\r\nGVAR(pphandle) ppEffectCommit 0;\r\nGVAR(pphandle) ppEffectEnable true;\r\n\r\nGVAR(stop) = false;\r\ncall FUNC(huntirCompass);\r\n\r\nGVAR(no_cams) = ACE_player nearEntities [\"ACE_HuntIR\", HUNTIR_MAX_TRANSMISSION_RANGE];\r\n{\r\n    GVAR(no_cams) set [_forEachIndex, [(getPosVisual ACE_player) vectorDistance (getPosVisual _x), _x]];\r\n} forEach GVAR(no_cams);\r\nGVAR(no_cams) sort true;\r\n{\r\n    GVAR(no_cams) set [_forEachIndex, _x select 1];\r\n} forEach GVAR(no_cams);\r\n[{\r\n    //Close monitor if we no longer have the item:\r\n    if ((!([ACE_player, \"ACE_HuntIR_monitor\"] call EFUNC(common,hasItem))) && {!isNull (uiNameSpace getVariable [\"ace_huntir_monitor\", displayNull])}) then {\r\n        closeDialog 0;\r\n    };\r\n\r\n    GVAR(nearHuntIRs) = ACE_player nearEntities [\"ACE_HuntIR\", HUNTIR_MAX_TRANSMISSION_RANGE];\r\n    {\r\n        if (((getPosVisual _x) select 2) > 20 && {!(_x in GVAR(no_cams))} && {_x getHitPointDamage \"HitCamera\" < 0.25}) then {\r\n            GVAR(no_cams) pushBack _x;\r\n        };\r\n        true\r\n    } count GVAR(nearHuntIRs);\r\n    {\r\n        if (((getPosVisual _x) select 2) <= 20 || {!(_x in GVAR(nearHuntIRs))} || {_x getHitPointDamage \"HitCamera\" >= 0.25}) then {\r\n            GVAR(no_cams) deleteAt _forEachIndex;\r\n            if (_forEachIndex < GVAR(cur_cam)) then {\r\n                GVAR(cur_cam) = GVAR(cur_cam) - 1;\r\n            };\r\n        };\r\n    } forEach GVAR(no_cams);\r\n\r\n    GVAR(cur_cam) = 0 max GVAR(cur_cam) min ((count GVAR(no_cams)) - 1);\r\n    if (count GVAR(no_cams) > 0) then {\r\n        GVAR(huntIR) = GVAR(no_cams) select GVAR(cur_cam);\r\n    };\r\n\r\n    GVAR(pos) = getPosVisual GVAR(huntIR);\r\n\r\n    if ((!dialog) || (count GVAR(no_cams) == 0) || ((GVAR(pos) select 2) <= 20)) exitWith {\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n        GVAR(stop) = true;\r\n\r\n        GVAR(pphandle) ppEffectEnable true;\r\n        ppEffectDestroy GVAR(pphandle);\r\n\r\n        GVAR(NV) = 0;\r\n        setAperture -1;\r\n        closedialog 0;\r\n        titletext [\" \", \"BLACK IN\", 4];\r\n        ACE_player switchCamera \"INTERNAL\";\r\n        GVAR(cam) CameraEffect [\"Terminate\", \"Back\"];\r\n        CamDestroy GVAR(cam);\r\n        deleteVehicle GVAR(logic);\r\n        if (player != ACE_player) then {\r\n            player remoteControl ACE_player;\r\n        };\r\n    };\r\n\r\n    switch (GVAR(ZOOM)) do {\r\n        case 0: {\r\n            GVAR(cam) camsetFOV 0.7;\r\n            GVAR(cam) camSetFocus [GVAR(pos) select 2, 1];\r\n        };\r\n        case 1: {\r\n            GVAR(cam) camsetFOV 0.35;\r\n            GVAR(cam) camSetFocus [(GVAR(pos) select 2)/2, 1];\r\n        };\r\n        case 2: {\r\n            GVAR(cam) camsetFOV 0.17;\r\n            GVAR(cam) camSetFocus [(GVAR(pos) select 2)/4, 1];\r\n        };\r\n        case 3: {\r\n            GVAR(cam) camsetFOV 0.1;\r\n            GVAR(cam) camSetFocus [(GVAR(pos) select 2)/8, 1];\r\n        };\r\n    };\r\n\r\n    private [\"_cam_coord_y\", \"_cam_coord_x\", \"_cam_time\", \"_cam_pos\"];\r\n\r\n    GVAR(logic) setPosATL (GVAR(pos) vectorAdd [0, 0, -5]);\r\n    GVAR(logic) setDir GVAR(ROTATE);\r\n    GVAR(logic) setVectorUp [0.0001, 0.0001, 1];\r\n    GVAR(cam) CameraEffect [\"internal\", \"BACK\"];\r\n    _cam_coord_y = GVAR(ELEVAT) * cos(GVAR(ROTATE));\r\n    _cam_coord_x = GVAR(ELEVAT) * sin(GVAR(ROTATE));\r\n    GVAR(cam) camSetRelPos [_cam_coord_x, _cam_coord_y, 2];\r\n    GVAR(cam) camCommit 0;\r\n\r\n    ctrlSetText [1, format[\"%1 m\", round(GVAR(pos) select 2)]];\r\n    ctrlSetText [2, format[\"%1\", GVAR(cur_cam) + 1]];\r\n    _cam_time = CBA_missionTime - (GVAR(huntIR) getVariable [QGVAR(startTime), CBA_missionTime]);\r\n    ctrlSetText [3, format[\"%1 s\", round(_cam_time)]];\r\n    _cam_pos = getPosVisual GVAR(huntIR);\r\n    _cam_pos = format [\"X = %1, Y = %2\", round (_cam_pos select 0), round (_cam_pos select 1)];\r\n    ctrlSetText [5, _cam_pos];\r\n    ctrlSetText [6, \"\"];\r\n}, 0, []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_huntir_fnc_handleFired","file":"huntir/functions/fnc_handleFired.sqf","text":"/*\r\n * Author: Norrin, Rocko, Ruthberg\r\n *\r\n * Handles HuntIR projectiles. Called from the unified fired EH for the local player.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nif (_ammo != \"F_HuntIR\") exitWith {};\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\n[{\r\n    params [\"_projectile\"];\r\n\r\n    //If null (deleted or hit water) exit:\r\n    if (isNull _projectile) exitWith {};\r\n    //If it's not spinning (hit ground), bail:\r\n    if ((vectorMagnitude (velocity _projectile)) < 0.1) exitWith {};\r\n\r\n    \"ACE_HuntIR_Propell\" createVehicle (getPosATL _projectile);\r\n    [{\r\n        private [\"_huntir\"];\r\n        params [\"_position\"];\r\n        _huntir = createVehicle [\"ACE_HuntIR\", _position, [], 0, \"FLY\"];\r\n        _huntir setPosATL _position;\r\n        _huntir setVariable [QGVAR(startTime), CBA_missionTime, true];\r\n        [{\r\n            params [\"_args\", \"_idPFH\"];\r\n            _args params [\"_huntir\"];\r\n            if (isNull _huntir) exitWith {\r\n                [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n            };\r\n            private [\"_parachuteDamage\", \"_velocity\"];\r\n            _parachuteDamage = _huntir getHitPointDamage \"HitParachute\";\r\n            if (_parachuteDamage > 0) then {\r\n                _velocity = velocity _huntir;\r\n                _velocity set [2, -1 min -20 * sqrt(_parachuteDamage)];\r\n                _huntir setVelocity _velocity;\r\n                _huntir setVectorUp [0, 0, 1];\r\n            };\r\n        }, 0, [_huntir]] call CBA_fnc_addPerFrameHandler;\r\n    }, [getPosATL _projectile vectorAdd [0, 0, 50]], 2, 0] call CBA_fnc_waitAndExecute;\r\n}, [_projectile], 5, 0] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_huntir_fnc_huntir","file":"huntir/functions/fnc_huntir.sqf","text":"/*\r\n * Author: Norrin, Rocko, Ruthberg\r\n *\r\n * HuntIR monitor system\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __TYPE_WRITER_DELAY 0.05\r\n\r\nif ((ACE_player call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\r\n    ACE_player playMove \"AmovPercMstpSrasWrflDnon_diary\";\r\n};\r\n\r\nHUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"BLACK\", 0];\r\ncreateDialog \"ace_huntir_cam_dialog_off\";\r\n\r\n[{\r\n    if (!dialog) exitWith {\r\n        HUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"PLAIN\", 0];\r\n    };\r\n    closeDialog 0;\r\n    createDialog \"ace_huntir_cam_dialog_inactive\";\r\n    uiNameSpace setVariable [\"ace_huntir_monitor\", findDisplay 18881];\r\n    [{\r\n        GVAR(startTime) = CBA_missionTime;\r\n        GVAR(done) = false;\r\n        GVAR(connectionDelay) = 5;\r\n        GVAR(state) = \"searching\";\r\n        GVAR(message) = [];\r\n        GVAR(messageSearching) = toArray \"Searching.....\";\r\n        GVAR(messageConnecting) = toArray \"Connecting.....\";\r\n        [{\r\n            //Close monitor if we no longer have item:\r\n            if ((!([ACE_player, \"ACE_HuntIR_monitor\"] call EFUNC(common,hasItem))) && {!isNull (uiNameSpace getVariable [\"ace_huntir_monitor\", displayNull])}) then {\r\n                closeDialog 0;\r\n            };\r\n\r\n            private [\"_elapsedTime\", \"_nearestHuntIRs\"];\r\n            _elapsedTime = CBA_missionTime - GVAR(startTime);\r\n            _nearestHuntIRs = ACE_player nearEntities [\"ACE_HuntIR\", HUNTIR_MAX_TRANSMISSION_RANGE];\r\n\r\n            if ((!dialog) || GVAR(done)) exitWith {\r\n                [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n                if (dialog && GVAR(state) == \"connected\") then {\r\n                    [_nearestHuntIRs select 0] call FUNC(cam);\r\n                } else {\r\n                    HUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"PLAIN\"];\r\n                };\r\n            };\r\n            switch (GVAR(state)) do {\r\n                case \"searching\": {\r\n                    if (count GVAR(message) < count GVAR(messageSearching)) then {\r\n                        GVAR(message) pushBack (GVAR(messageSearching) select (count GVAR(message)));\r\n                        ctrlSetText [1, toString GVAR(message)];\r\n                    } else {\r\n                        GVAR(message) = [];\r\n                        if (_elapsedTime > 10) then {\r\n                            GVAR(state) = \"noGDS\";\r\n                        };\r\n                        if (_elapsedTime > 5 && {{_x getHitPointDamage \"HitCamera\" < 0.25} count _nearestHuntIRs > 0}) then {\r\n                            GVAR(state) = \"connecting\";\r\n                        };\r\n                    };\r\n                };\r\n                case \"connecting\": {\r\n                    if (count GVAR(message) < count GVAR(messageConnecting)) then {\r\n                        GVAR(message) pushBack (GVAR(messageConnecting) select (count GVAR(message)));\r\n                        ctrlSetText [1, toString GVAR(message)];\r\n                    } else {\r\n                        GVAR(message) = [];\r\n                        GVAR(connectionDelay) = GVAR(connectionDelay) - 1;\r\n                        if (GVAR(connectionDelay) <= 0) then {\r\n                            GVAR(done) = true;\r\n                            GVAR(state) = \"connected\";\r\n                        };\r\n                    };\r\n                };\r\n                case \"noGDS\": {\r\n                    ctrlSetText [1, \"No GDS System detected\"];\r\n                    [{\r\n                        GVAR(done) = true;\r\n                        closedialog 0;\r\n                        HUNTIR_BACKGROUND_LAYER_ID cutText [\"\", \"PLAIN\"];\r\n                    }, [], 3, 0] call CBA_fnc_waitAndExecute;\r\n                };\r\n            };\r\n        }, __TYPE_WRITER_DELAY, []] call CBA_fnc_addPerFrameHandler;\r\n    }, [], 0.5, 0] call CBA_fnc_waitAndExecute;\r\n}, [], 1, 0] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_huntir_fnc_huntirCompass","file":"huntir/functions/fnc_huntirCompass.sqf","text":"/*\r\n * Author: Norrin, Rocko, Ruthberg\r\n *\r\n * HuntIR monitor compass\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\n#define __DSP (uiNamespace getVariable \"ace_huntir_cam_rose\")\r\n#define __CHAR_N (__DSP displayCtrl 64432)\r\n#define __CHAR_E (__DSP displayCtrl 64433)\r\n#define __CHAR_S (__DSP displayCtrl 64434)\r\n#define __CHAR_W (__DSP displayCtrl 64435)\r\n\r\n#define __OFFSET_X 0.003\r\n#define __OFFSET_Y 0.003\r\n#define __WIDTH 0.1\r\n#define __HEIGHT 0.1\r\n#define __RADIUS 0.05\r\n#define __CENTER_X 0.70\r\n#define __CENTER_Y 0.65\r\n\r\nprivate [\"_fnc_correctIt\"];\r\n\r\n_fnc_correctIt = {\r\n    params [\"_pos\", \"_dir\"];\r\n    if (_dir >= 270 || {_dir <= 90}) then {\r\n        _pos set [1, (_pos select 1) + __OFFSET_Y]\r\n    };\r\n    if (_dir >= 0 && {_dir <= 180}) then {\r\n        _pos set [0, (_pos select 0) - __OFFSET_X]\r\n    };\r\n    if (_dir >= 90 && {_dir <= 270}) then {\r\n        _pos set [1, (_pos select 1) - __OFFSET_Y]\r\n    };\r\n    if (_dir >= 180 && {_dir <= 360}) then {\r\n        _pos set [0, (_pos select 0) + __OFFSET_X]\r\n    };\r\n    _pos\r\n};\r\n\r\nHUNTIR_CAM_ROSE_LAYER_ID cutRsc [\"ace_huntir_cam_rose\", \"PLAIN\"];\r\n\r\n[{\r\n    params [\"_args\", \"_idPFH\"];\r\n    _args params [\"_fnc_correctIt\"];\r\n\r\n    if (GVAR(stop)) exitWith {\r\n        HUNTIR_CAM_ROSE_LAYER_ID cutText [\"\", \"PLAIN\"];\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    private [\"_dir\", \"_x1\", \"_y1\", \"_pos\"];\r\n    _dir = getDir GVAR(cam); // direction player;\r\n\r\n    _x1 = __CENTER_X - (__RADIUS * sin(_dir));\r\n    _y1 = __CENTER_Y - (__RADIUS * cos(_dir));\r\n    _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\r\n    __CHAR_N ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\r\n    __CHAR_N ctrlCommit 0;\r\n\r\n    _x1 = __CENTER_X - (__RADIUS * sin(_dir + 90));\r\n    _y1 = __CENTER_Y - (__RADIUS * cos(_dir + 90));\r\n    _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\r\n    __CHAR_W ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\r\n    __CHAR_W ctrlCommit 0;\r\n\r\n    _x1 = __CENTER_X - (__RADIUS * sin(_dir + 180));\r\n    _y1 = __CENTER_Y - (__RADIUS * cos(_dir + 180));\r\n    _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\r\n    __CHAR_S ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\r\n    __CHAR_S ctrlCommit 0;\r\n\r\n    _x1 = __CENTER_X - (__RADIUS * sin(_dir + 270));\r\n    _y1 = __CENTER_Y - (__RADIUS * cos(_dir + 270));\r\n    _pos = [[_x1, _y1], _dir] call _fnc_correctIt;\r\n    __CHAR_E ctrlSetPosition [_pos select 0, _pos select 1, __WIDTH, __HEIGHT];\r\n    __CHAR_E ctrlCommit 0;\r\n\r\n}, 0.01, [_fnc_correctIt]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_huntir_fnc_keyPressed","file":"huntir/functions/fnc_keyPressed.sqf","text":"/*\r\n * Author: Norrin, Rocko\r\n * Handles the HuntIR monitor key interaction\r\n *\r\n * Arguments:\r\n * 0: ?\r\n * 1: keycode <NUMBER>\r\n *\r\n * Return Value:\r\n * handled? <BOOLEAN>\r\n *\r\n * Example:\r\n * [] call ace_huntir_fnc_keyPressed\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_ret\"];\r\n_ret = false;\r\n\r\nswitch (_this select 1) do {\r\n    // A = Lower zoom level\r\n    case 30: {\r\n        if (GVAR(ZOOM) > 0) then {\r\n            GVAR(ZOOM) = GVAR(ZOOM) - 1;\r\n        };\r\n        switch (GVAR(ZOOM)) do {\r\n            case 0: { ctrlSetText [4, \"0X\"];};\r\n            case 1: { ctrlSetText [4, \"2X\"];};\r\n            case 2: { ctrlSetText [4, \"4X\"];};\r\n            case 3: { ctrlSetText [4, \"8X\"];};\r\n        };\r\n        _ret = true;\r\n    };\r\n    // D = Increase zoom level\r\n    case 32: {\r\n        if (GVAR(ZOOM) < 3) then {\r\n            GVAR(ZOOM) = GVAR(ZOOM) + 1;\r\n        };\r\n        switch (GVAR(ZOOM)) do {\r\n            case 0: { ctrlSetText [4, \"0X\"];};\r\n            case 1: { ctrlSetText [4, \"2X\"];};\r\n            case 2: { ctrlSetText [4, \"4X\"];};\r\n            case 3: { ctrlSetText [4, \"8X\"];};\r\n        };\r\n        _ret = true;\r\n    };\r\n    //N key ( Toggle NV and TI modes )\r\n    case 49: {\r\n        if (GVAR(NV) == 0) then {\r\n            setAperture -1;\r\n            camUseNVG true;\r\n            GVAR(NV) = 1;\r\n            if (!GVAR(IRON)) then {\r\n                GVAR(IRON) = true;\r\n            };\r\n        } else {\r\n            setAperture -1;\r\n            camUseNVG false;\r\n            GVAR(NV) = 0;\r\n            GVAR(IRON) = false;\r\n        };\r\n        _ret = true;\r\n    };\r\n    // S = Next camera\r\n    case 31: {\r\n        GVAR(cur_cam) = GVAR(cur_cam) + 1;\r\n        _ret = true;\r\n    };\r\n    // W = Previous camera\r\n    case 17: {\r\n        GVAR(cur_cam) = GVAR(cur_cam) - 1;\r\n        _ret = true;\r\n    };\r\n    // Rotate camera anticlockwise\r\n    case 203: {\r\n        GVAR(ROTATE) = GVAR(ROTATE) - 3;\r\n        _ret = true;\r\n    };\r\n    // Rotate camera clockwise\r\n    case 205: {\r\n        GVAR(ROTATE) = GVAR(ROTATE) + 3;\r\n        _ret = true;\r\n    };\r\n    // Raise camera\r\n    case 200: {\r\n        if (GVAR(ELEVAT) < 4.01) then {\r\n            GVAR(ELEVAT) = GVAR(ELEVAT) + 0.12;\r\n        };\r\n        _ret = true;\r\n    };\r\n    // Lower camera\r\n    case 208: {\r\n        if (GVAR(ELEVAT) > -3.99) then {\r\n            GVAR(ELEVAT) = GVAR(ELEVAT) - 0.12;\r\n        };\r\n        _ret = true;\r\n    };\r\n    // Reset camera\r\n    case 19: {\r\n        GVAR(ROTATE) = 0;\r\n        GVAR(ELEVAT) = 0.01;\r\n        GVAR(ZOOM) = 0;\r\n        ctrlSetText [4, \"0X\"];\r\n        GVAR(NV) = 0;\r\n        camUseNVG false;\r\n        setAperture -1;\r\n        _ret = true;\r\n    };\r\n};\r\n\r\n_ret\r\n"}],"interact_menu":[{"name":"ace_interact_menu_fnc_addActionToClass","file":"interact_menu/functions/fnc_addActionToClass.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Insert an ACE action to a class, under a certain path\r\n * Note: This function is NOT global.\r\n *\r\n * Arguments:\r\n * 0: TypeOf of the class <STRING>\r\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\r\n * 2: Parent path of the new action <ARRAY>\r\n * 3: Action <ARRAY>\r\n *\r\n * Return Value:\r\n * The entry full path, which can be used to remove the entry, or add children entries <ARRAY>.\r\n *\r\n * Example:\r\n * [typeOf cursorTarget, 0, [\"ACE_TapShoulderRight\"],VulcanPinchAction] call ace_interact_menu_fnc_addActionToClass;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!params [[\"_objectType\", \"\", [\"\"]], [\"_typeNum\", 0, [0]], [\"_parentPath\", [], [[]]], [\"_action\", [], [[]], 11]]) exitWith {\r\n    ERROR(\"Bad Params\");\r\n};\r\n\r\n// Ensure the config menu was compiled first\r\nif (_typeNum == 0) then {\r\n    [_objectType] call FUNC(compileMenu);\r\n} else {\r\n    [_objectType] call FUNC(compileMenuSelfAction);\r\n};\r\n\r\nprivate _namespace = [GVAR(ActNamespace), GVAR(ActSelfNamespace)] select _typeNum;\r\nprivate _actionTrees = _namespace getVariable _objectType;\r\nif (isNil \"_actionTrees\") then {\r\n    _actionTrees = [];\r\n    _namespace setVariable [_objectType, _actionTrees];\r\n};\r\n\r\nif (_parentPath isEqualTo [\"ACE_MainActions\"]) then {\r\n    [_objectType, _typeNum] call FUNC(addMainAction);\r\n};\r\n\r\nprivate _parentNode = [_actionTrees, _parentPath] call FUNC(findActionNode);\r\nif (isNil {_parentNode}) exitWith {\r\n    ERROR(\"Failed to add action\");\r\n    ACE_LOGERROR_4(\"action (%1) to parent %2 on object %3 [%4]\",(_action select 0),_parentPath,_objectType,_typeNum);\r\n};\r\n\r\n// Add action node as children of the correct node of action tree\r\n(_parentNode select 1) pushBack [_action,[]];\r\n\r\n// Return the full path\r\n(+ _parentPath) pushBack (_action select 0)\r\n"},{"name":"ace_interact_menu_fnc_addActionToObject","file":"interact_menu/functions/fnc_addActionToObject.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Insert an ACE action to an object, under a certain config path\r\n * Note: This function is NOT global.\r\n *\r\n * Arguments:\r\n * 0: Object the action should be assigned to <OBJECT>\r\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\r\n * 2: Parent path of the new action <ARRAY>\r\n * 3: Action <ARRAY>\r\n *\r\n * Return Value:\r\n * The entry full path, which can be used to remove the entry, or add children entries <ARRAY>.\r\n *\r\n * Example:\r\n * [cursorTarget, 0, [\"ACE_TapShoulderRight\"],VulcanPinchAction] call ace_interact_menu_fnc_addActionToObject;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!params [[\"_object\", objNull, [objNull]], [\"_typeNum\", 0, [0]], [\"_parentPath\", [], [[]]], [\"_action\", [], [[]], 11]]) exitWith {\r\n    ERROR(\"Bad Params\");\r\n};\r\n\r\nprivate _varName = [QGVAR(actions),QGVAR(selfActions)] select _typeNum;\r\nprivate _actionList = _object getVariable [_varName, []];\r\n\r\nif (_actionList isEqualTo []) then {\r\n    _object setVariable [_varName, _actionList];\r\n};\r\n\r\nif (_parentPath isEqualTo [\"ACE_MainActions\"]) then {\r\n    [(typeOf _object), _typeNum] call FUNC(addMainAction);\r\n};\r\n\r\n// Add action and parent path to the list of object actions\r\n_actionList pushBack [_action, +_parentPath];\r\n\r\n// Return the full path\r\n(+ _parentPath) pushBack (_action select 0)\r\n"},{"name":"ace_interact_menu_fnc_addMainAction","file":"interact_menu/functions/fnc_addMainAction.sqf","text":"/*\r\n * Author: Jonpas, PabstMirror\r\n * Makes sure there is a ACE_MainActions on the object type\r\n *\r\n * Arguments:\r\n * 0: Object classname <STRING>\r\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"Table\", 0] call ace_interact_menu_fnc_addMainAction;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_objectType\", \"_typeNum\"];\r\n\r\nprivate _namespace = [GVAR(ActNamespace), GVAR(ActSelfNamespace)] select _typeNum;\r\nprivate _actionTrees = _namespace getVariable _objectType;\r\nif (isNil \"_actionTrees\") then {\r\n    _actionTrees = [];\r\n};\r\n\r\nprivate _parentNode = [_actionTrees, [\"ACE_MainActions\"]] call FUNC(findActionNode);\r\n\r\nif (isNil {_parentNode}) then {\r\n    TRACE_2(\"No Main Action on object\", _objectType, _typeNum);\r\n    private _mainAction = [\"ACE_MainActions\", localize ELSTRING(interaction,MainAction), \"\", {}, {true}] call FUNC(createAction);\r\n    [_objectType, _typeNum, [], _mainAction] call EFUNC(interact_menu,addActionToClass);\r\n};\r\n"},{"name":"ace_interact_menu_fnc_collectActiveActionTree","file":"interact_menu/functions/fnc_collectActiveActionTree.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Collect a entire tree of active actions\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n * 1: Original action tree <ARRAY>\r\n * 2: Parent path <ARRAY>\r\n * 3: Distance to base point (will be 0 for self/zeus/in-vehicle) <NUMBER>\r\n *\r\n * Return Value:\r\n * Active children <ARRAY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_origAction\", \"_parentPath\", \"_distanceToBasePoint\"];\r\n_origAction params [\"_origActionData\", \"_origActionChildren\"];\r\n\r\nprivate _target = _object;\r\nprivate _player = ACE_player;\r\n\r\n// Check if the function should be modified first\r\nif !((_origActionData select 10) isEqualTo {}) then {\r\n    // It should, so make a copy and pass it to the modifierFunction\r\n    _origActionData = +_origActionData;\r\n    [_target, ACE_player, _origActionData select 6, _origActionData] call (_origActionData select 10);\r\n};\r\n\r\n_origActionData params [\"_actionName\", \"\", \"\", \"_statementCode\", \"_conditionCode\", \"_insertChildrenCode\", \"_customParams\", \"\", \"_distance\"];\r\n\r\n// Return nothing if the action itself is not active\r\nif !([_target, ACE_player, _customParams] call _conditionCode) exitWith {\r\n    []\r\n};\r\n\r\n// Return nothing if the action is to far (including checking sub actions) [DISABLED FOR NOW ref #2196]\r\n// if (_distanceToBasePoint > _distance) exitWith {\r\n    // []\r\n// };\r\n\r\nprivate _fullPath = +_parentPath;\r\n_fullPath pushBack _actionName;\r\nprivate _activeChildren = [];\r\n\r\n// If there's a statement to dynamically insert children then execute it\r\nif !({} isEqualTo _insertChildrenCode) then {\r\n    private _dynamicChildren = [_target, ACE_player, _customParams] call _insertChildrenCode;\r\n\r\n    // Collect dynamic children class actions\r\n    {\r\n        private _action = [_x select 2, _x, _fullPath, _distanceToBasePoint] call FUNC(collectActiveActionTree);\r\n        if ((count _action) > 0) then {\r\n            _activeChildren pushBack _action;\r\n        };\r\n        nil\r\n    } count _dynamicChildren;\r\n};\r\n\r\n// Collect children class actions\r\n{\r\n    private _action = [_object, _x, _fullPath, _distanceToBasePoint] call FUNC(collectActiveActionTree);\r\n    if ((count _action) > 0) then {\r\n        _activeChildren pushBack _action;\r\n    };\r\n    nil\r\n} count _origActionChildren;\r\n\r\n// Collect children object actions\r\n{\r\n    _x params [\"_actionData\", \"_pPath\"];\r\n\r\n    // Check if the action is children of the original action\r\n    if (_pPath isEqualTo _fullPath) then {\r\n        private _action = [_object, [_actionData,[]], _fullPath, _distanceToBasePoint] call FUNC(collectActiveActionTree);\r\n        if ((count _action) > 0) then {\r\n            _activeChildren pushBack _action;\r\n        };\r\n    };\r\n    nil\r\n} count GVAR(objectActionList);\r\n\r\n\r\n// If the original action has no statement, and no children, don't display it\r\nif ((_activeChildren isEqualTo []) && {_statementCode isEqualTo {}}) exitWith {\r\n    // @todo: Account for showDisabled?\r\n    []\r\n};\r\n\r\n\r\n[_origActionData, _activeChildren, _object]\r\n"},{"name":"ace_interact_menu_fnc_compileMenu","file":"interact_menu/functions/fnc_compileMenu.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Compile the action menu from config for an object's class\r\n *\r\n * Arguments:\r\n * 0: Object or class name <OBJECT> or <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\";\r\n\r\nparams [\"_target\"];\r\n\r\nprivate _objectType = _target;\r\nif (_target isEqualType objNull) then {\r\n    _objectType = typeOf _target;\r\n};\r\nprivate _namespace = GVAR(ActNamespace);\r\n\r\n// Exit if the action menu is already compiled for this class\r\nif !(isNil {_namespace getVariable _objectType}) exitWith {};\r\n\r\nprivate _recurseFnc = {\r\n    params [\"_actionsCfg\", \"_parentDistance\"];\r\n    private _actions = [];\r\n\r\n    {\r\n        private _entryCfg = _x;\r\n        if(isClass _entryCfg) then {\r\n            private _displayName = getText (_entryCfg >> \"displayName\");\r\n            private _distance = _parentDistance;\r\n            if (isNumber (_entryCfg >> \"distance\")) then {_distance = getNumber (_entryCfg >> \"distance\");};\r\n            // if (_distance < _parentDistance) then {ACE_LOGWARNING_3(\"[%1] distance %2 less than parent %3\", configName _entryCfg, _distance, _parentDistance);};\r\n            private _icon = getText (_entryCfg >> \"icon\");\r\n            private _statement = compile (getText (_entryCfg >> \"statement\"));\r\n\r\n            // If the position entry is present, compile it\r\n            private _position = getText (_entryCfg >> \"position\");\r\n            if (_position != \"\") then {\r\n                _position = compile _position;\r\n            } else {\r\n                // If the not, but the selection entry is present use that\r\n                _position = getText (_entryCfg >> \"selection\");\r\n                if (_position != \"\") then {\r\n                    _position = compile format [\"_target selectionPosition '%1'\", _position];\r\n                } else {\r\n                    // Otherwise, just use the origin\r\n                    _position = {[0,0,0]};\r\n                };\r\n            };\r\n\r\n            private _condition = getText (_entryCfg >> \"condition\");\r\n            if (_condition == \"\") then {_condition = \"true\"};\r\n\r\n            // Add canInteract (including exceptions) and canInteractWith to condition\r\n            if ((configName _entryCfg) != \"ACE_MainActions\") then {\r\n                _condition = _condition + format [QUOTE( && {[ARR_3(ACE_player, _target, %1)] call EFUNC(common,canInteractWith)} ), getArray (_entryCfg >> \"exceptions\")];\r\n            };\r\n\r\n            private _insertChildren = compile (getText (_entryCfg >> \"insertChildren\"));\r\n            private _modifierFunction = compile (getText (_entryCfg >> \"modifierFunction\"));\r\n\r\n            private _showDisabled = (getNumber (_entryCfg >> \"showDisabled\")) > 0;\r\n            private _enableInside = (getNumber (_entryCfg >> \"enableInside\")) > 0;\r\n            private _canCollapse = (getNumber (_entryCfg >> \"canCollapse\")) > 0;\r\n            private _runOnHover = false;\r\n            if (isText (_entryCfg >> \"runOnHover\")) then {\r\n                _runOnHover = compile getText (_entryCfg >> \"runOnHover\");\r\n            } else {\r\n                _runOnHover = (getNumber (_entryCfg >> \"runOnHover\")) > 0;\r\n            };\r\n\r\n            _condition = compile _condition;\r\n            private _children = [_entryCfg, _distance] call _recurseFnc;\r\n\r\n            private _entry = [\r\n                        [\r\n                            configName _entryCfg,\r\n                            _displayName,\r\n                            _icon,\r\n                            _statement,\r\n                            _condition,\r\n                            _insertChildren,\r\n                            [],\r\n                            _position,\r\n                            _distance,\r\n                            [_showDisabled,_enableInside,_canCollapse,_runOnHover, false],\r\n                            _modifierFunction\r\n                        ],\r\n                        _children\r\n                    ];\r\n            _actions pushBack _entry;\r\n        };\r\n        nil\r\n    } count (configProperties [_actionsCfg, \"isClass _x\", true]);\r\n    _actions\r\n};\r\n\r\nprivate _actionsCfg = configFile >> \"CfgVehicles\" >> _objectType >> \"ACE_Actions\";\r\n\r\nTRACE_1(\"Building ACE_Actions\",_objectType);\r\nprivate _actions = [_actionsCfg, 0] call _recurseFnc;\r\n\r\n_namespace setVariable [_objectType, _actions];\r\n\r\n/*\r\n[\r\n    [\r\n        [\r\n            \"MyAction\",\r\n            \"My Action\",\r\n            \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Actions\\eject_ca.paa\",\r\n            { (_this select 0) setVelocity [0,0,10]; },\r\n            { true },\r\n            {},\r\n            [],\r\n            {[0,0,0]},\r\n            1,\r\n            [false,false,false,false,false]\r\n        ],\r\n        [children actions]\r\n    ]\r\n]\r\n*/\r\n"},{"name":"ace_interact_menu_fnc_compileMenuSelfAction","file":"interact_menu/functions/fnc_compileMenuSelfAction.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Compile the self action menu from config for an object's class\r\n *\r\n * Arguments:\r\n * 0: Object or class name <OBJECT> or <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\";\r\n\r\nparams [\"_target\"];\r\n\r\nprivate _objectType = _target;\r\nif (_target isEqualType objNull) then {\r\n    _objectType = typeOf _target;\r\n};\r\nprivate _namespace = GVAR(ActSelfNamespace);\r\n\r\n// Exit if the action menu is already compiled for this class\r\nif !(isNil {_namespace getVariable _objectType}) exitWith {};\r\n\r\n\r\nprivate _recurseFnc = {\r\n    params [\"_actionsCfg\"];\r\n\r\n    private _actions = [];\r\n\r\n    {\r\n        private _entryCfg = _x;\r\n        if(isClass _entryCfg) then {\r\n            private _displayName = getText (_entryCfg >> \"displayName\");\r\n\r\n            private _icon = getText (_entryCfg >> \"icon\");\r\n            private _statement = compile (getText (_entryCfg >> \"statement\"));\r\n\r\n            private _condition = getText (_entryCfg >> \"condition\");\r\n            if (_condition == \"\") then {_condition = \"true\"};\r\n\r\n            // Add canInteract (including exceptions) and canInteractWith to condition\r\n            _condition = _condition + format [QUOTE( && {[ARR_3(ACE_player, _target, %1)] call EFUNC(common,canInteractWith)} ), getArray (_entryCfg >> \"exceptions\")];\r\n\r\n            private _insertChildren = compile (getText (_entryCfg >> \"insertChildren\"));\r\n            private _modifierFunction = compile (getText (_entryCfg >> \"modifierFunction\"));\r\n\r\n            private _showDisabled = (getNumber (_entryCfg >> \"showDisabled\")) > 0;\r\n            private _enableInside = (getNumber (_entryCfg >> \"enableInside\")) > 0;\r\n            private _canCollapse = (getNumber (_entryCfg >> \"canCollapse\")) > 0;\r\n            private _runOnHover = true;\r\n            if (isText (_entryCfg >> \"runOnHover\")) then {\r\n                _runOnHover = compile getText (_entryCfg >> \"runOnHover\");\r\n            } else {\r\n                _runOnHover = (getNumber (_entryCfg >> \"runOnHover\")) > 0;\r\n            };\r\n\r\n            _condition = compile _condition;\r\n            private _children = [_entryCfg] call _recurseFnc;\r\n\r\n            private _entry = [\r\n                        [\r\n                            configName _entryCfg,\r\n                            _displayName,\r\n                            _icon,\r\n                            _statement,\r\n                            _condition,\r\n                            _insertChildren,\r\n                            [],\r\n                            [0,0,0],\r\n                            10, //distace\r\n                            [_showDisabled,_enableInside,_canCollapse,_runOnHover, true],\r\n                            _modifierFunction\r\n                        ],\r\n                        _children\r\n                    ];\r\n            _actions pushBack _entry;\r\n        };\r\n        nil\r\n    } count (configProperties [_actionsCfg, \"isClass _x\", true]);\r\n    _actions\r\n};\r\n\r\nprivate _actionsCfg = configFile >> \"CfgVehicles\" >> _objectType >> \"ACE_SelfActions\";\r\n\r\nprivate _baseDisplayName = \"\";\r\nprivate _baseIcon = \"\";\r\nif (_objectType isKindOf \"CAManBase\") then {\r\n    _baseDisplayName = localize LSTRING(SelfActionsRoot);\r\n    _baseIcon = \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Actions\\eject_ca.paa\";\r\n} else {\r\n    _baseDisplayName = getText (configFile >> \"CfgVehicles\" >> _objectType >> \"displayName\");\r\n    //Alt would be to just use a static text, if veh names end up being too long:\r\n    // _baseDisplayName = localize LSTRING(VehicleActionsRoot);\r\n\r\n    //Pull the icon from the vehicle's config:\r\n    _baseIcon = getText (configFile >> \"CfgVehicles\" >> _objectType >> \"Icon\");\r\n    //icon could be a CfgVehicleIcons\r\n    if isText (configFile >> \"CfgVehicleIcons\" >> _baseIcon) then {\r\n        _baseIcon = getText (configFile >> \"CfgVehicleIcons\" >> _baseIcon);\r\n    };\r\n};\r\n\r\nTRACE_1(\"Building ACE_SelfActions\",_objectType);\r\n// Create a master action to base on self action\r\nprivate _actions = [\r\n        [\r\n            [\r\n                \"ACE_SelfActions\",\r\n                _baseDisplayName,\r\n                _baseIcon,\r\n                {\r\n                    // Dummy statement so it's not collapsed when there's no available actions\r\n                    true\r\n                },\r\n                {[ACE_player, _target, [\"isNotInside\",\"isNotDragging\", \"isNotCarrying\", \"isNotSwimming\", \"notOnMap\", \"isNotEscorting\", \"isNotSurrendering\", \"isNotSitting\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)},\r\n                {},\r\n                {},\r\n                \"Spine3\",\r\n                10,\r\n                [false,true,false,false,false]\r\n            ],\r\n            [_actionsCfg] call _recurseFnc\r\n        ]\r\n    ];\r\n\r\n_namespace setVariable [_objectType, _actions];\r\n"},{"name":"ace_interact_menu_fnc_compileMenuZeus","file":"interact_menu/functions/fnc_compileMenuZeus.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Compile the zeus action menu (only to be done once)\r\n *\r\n * Arguments:\r\n * nil\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\";\r\n\r\n// Exit if the action menu is already compiled for zeus\r\nif !(isNil {missionNamespace getVariable [QGVAR(ZeusActions), nil]}) exitWith {};\r\n\r\nprivate _recurseFnc = {\r\n    params [\"_actionsCfg\"];\r\n    private _actions = [];\r\n\r\n    {\r\n        private _entryCfg = _x;\r\n        if(isClass _entryCfg) then {\r\n            private _displayName = getText (_entryCfg >> \"displayName\");\r\n\r\n            private _icon = getText (_entryCfg >> \"icon\");\r\n            private _statement = compile (getText (_entryCfg >> \"statement\"));\r\n\r\n            private _condition = getText (_entryCfg >> \"condition\");\r\n            if (_condition == \"\") then {_condition = \"true\"};\r\n\r\n            private _insertChildren = compile (getText (_entryCfg >> \"insertChildren\"));\r\n            private _modifierFunction = compile (getText (_entryCfg >> \"modifierFunction\"));\r\n\r\n            private _showDisabled = (getNumber (_entryCfg >> \"showDisabled\")) > 0;\r\n            private _enableInside = (getNumber (_entryCfg >> \"enableInside\")) > 0;\r\n            private _canCollapse = (getNumber (_entryCfg >> \"canCollapse\")) > 0;\r\n            private _runOnHover = true;\r\n            if (isText (_entryCfg >> \"runOnHover\")) then {\r\n                _runOnHover = compile getText (_entryCfg >> \"runOnHover\");\r\n            } else {\r\n                _runOnHover = (getNumber (_entryCfg >> \"runOnHover\")) > 0;\r\n            };\r\n\r\n            private _condition = compile _condition;\r\n            private _children = [_entryCfg] call _recurseFnc;\r\n\r\n            private _entry = [\r\n                        [\r\n                            configName _entryCfg,\r\n                            _displayName,\r\n                            _icon,\r\n                            _statement,\r\n                            _condition,\r\n                            _insertChildren,\r\n                            {},\r\n                            [0,0,0],\r\n                            10, //distace\r\n                            [_showDisabled,_enableInside,_canCollapse,_runOnHover,false],\r\n                            _modifierFunction\r\n                        ],\r\n                        _children\r\n                    ];\r\n            _actions pushBack _entry;\r\n        };\r\n    } forEach (configProperties [_actionsCfg, \"isClass _x\", true]);\r\n    _actions\r\n};\r\n\r\nprivate _actionsCfg = configFile >> \"ACE_ZeusActions\";\r\n\r\n// Create a master action to base zeus actions on\r\nGVAR(ZeusActions) = [\r\n    [\r\n        [\r\n            \"ACE_ZeusActions\",\r\n            localize LSTRING(ZeusActionsRoot),\r\n            \"\\A3\\Ui_F_Curator\\Data\\Logos\\arma3_zeus_icon_ca.paa\",\r\n            {true},\r\n            {true},\r\n            {},\r\n            {},\r\n            {[0,0,0]},\r\n            10,\r\n            [false,true,false,false,false]\r\n        ],\r\n        [_actionsCfg] call _recurseFnc\r\n    ]\r\n];\r\n"},{"name":"ace_interact_menu_fnc_createAction","file":"interact_menu/functions/fnc_createAction.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Creates an isolated ACE action\r\n * Note: This function is NOT global.\r\n *\r\n * Arguments:\r\n * 0: Action name <STRING>\r\n * 1: Name of the action shown in the menu <STRING>\r\n * 2: Icon <STRING>\r\n * 3: Statement <CODE>\r\n * 4: Condition <CODE>\r\n * 5: Insert children code <CODE> (Optional)\r\n * 6: Action parameters <ANY> (Optional)\r\n * 7: Position (Position array, Position code or Selection Name) <ARRAY>, <CODE> or <STRING> (Optional)\r\n * 8: Distance <NUMBER> (Optional)\r\n * 9: Other parameters [showDisabled,enableInside,canCollapse,runOnHover,doNotCheckLOS] <ARRAY> (Optional)\r\n * 10: Modifier function <CODE> (Optional)\r\n *\r\n * Return Value:\r\n * Action <ARRAY>\r\n *\r\n * Example:\r\n * [\"VulcanPinch\",\"Vulcan Pinch\",\"\",{_target setDamage 1;},{true},{},[parameters], [0,0,0], 100] call ace_interact_menu_fnc_createAction;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// IGNORE_PRIVATE_WARNING(_actionName,_displayName,_icon,_statement,_condition,_insertChildren,_customParams,_position,_distance,_params,_modifierFunction);\r\n\r\nparams [\r\n    \"_actionName\",\r\n    \"_displayName\",\r\n    \"_icon\",\r\n    \"_statement\",\r\n    \"_condition\",\r\n    [\"_insertChildren\", {}],\r\n    [\"_customParams\", []],\r\n    [\"_position\", {[0, 0, 0]}],\r\n    [\"_distance\", 2],\r\n    [\"_params\", [false, false, false, false, false]],\r\n    [\"_modifierFunction\", {}]\r\n];\r\n\r\n_position = if (_position isEqualType \"\") then {\r\n    // If the action is set to a selection, create the suitable code - IGNORE_PRIVATE_WARNING(_target);\r\n    compile format [\"_target selectionPosition '%1'\", _position];\r\n} else {\r\n    if (_position isEqualType []) then {\r\n        // If the action is set to a array position, create the suitable code\r\n        compile format [\"%1\", _position];\r\n    } else {\r\n        _position;\r\n    };\r\n};\r\n\r\n[\r\n    _actionName,\r\n    _displayName,\r\n    _icon,\r\n    _statement,\r\n    _condition,\r\n    _insertChildren,\r\n    _customParams,\r\n    _position,\r\n    _distance,\r\n    _params,\r\n    _modifierFunction\r\n]\r\n"},{"name":"ace_interact_menu_fnc_ctrlSetParsedTextCached","file":"interact_menu/functions/fnc_ctrlSetParsedTextCached.sqf","text":"/*\r\n * Author: commy2\r\n * Sets the controls structured text if it isn't already set.\r\n *\r\n * Arguments:\r\n * 0: Structured Text Ctrl <CONTROL>\r\n * 1: Index <NUMBER>\r\n * 2: Text <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_ctrl\", \"_index\", \"_text\"];\r\n\r\n//systemChat str (_text != ARR_SELECT(GVAR(ParsedTextCached),_index,\"-1\"));\r\n\r\nif (_text != (GVAR(ParsedTextCached) param [_index,\"-1\"])) then {\r\n    GVAR(ParsedTextCached) set [_index, _text];\r\n    _ctrl ctrlSetStructuredText parseText _text;\r\n};\r\n"},{"name":"ace_interact_menu_fnc_findActionNode","file":"interact_menu/functions/fnc_findActionNode.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Return action point from path\r\n * Note: This function is NOT global.\r\n *\r\n * Arguments:\r\n * 0: List of Action Tree <ARRAY>\r\n * 1: Path <ARRAY>\r\n *\r\n * Return Value:\r\n * Action node <ARRAY> or <NIL> if not found \r\n *\r\n * Example:\r\n * [actionTree, [\"ACE_TapShoulderRight\",\"VulcanPinchAction\"]] call ace_interact_menu_fnc_findActionNode;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_actionTreeList\", \"_parentPath\"];\r\n\r\n// Hack to make this work on the root node too\r\nif (_parentPath isEqualTo []) exitWith {\r\n    [[],_actionTreeList]\r\n};\r\n\r\n// Search the class action trees and find where to insert the entry\r\nprivate _parentNode = [[],_actionTreeList];\r\nprivate _foundParentNode = false;\r\n\r\nprivate _fnc_findFolder = {\r\n    params [\"_parentPath\", \"_level\", \"_actionNode\"];\r\n\r\n    {\r\n        _x params [\"_actionData\", \"_actionChildren\"];\r\n        if ((_actionData select 0) isEqualTo (_parentPath select _level)) exitWith {\r\n\r\n            if (count _parentPath == _level + 1) exitWith {\r\n                _parentNode = _x;\r\n                _foundParentNode = true;\r\n            };\r\n\r\n            // The action should go somewhere in here\r\n            [_parentPath, _level + 1, _x] call _fnc_findFolder;\r\n        };\r\n    } forEach (_actionNode select 1);\r\n};\r\n\r\n[_parentPath, 0, [[],_actionTreeList]] call _fnc_findFolder;\r\n\r\n// Exit if there's no entry point to insert this action\r\nif (!_foundParentNode) exitWith {};\r\n\r\n_parentNode\r\n"},{"name":"ace_interact_menu_fnc_handlePlayerChanged","file":"interact_menu/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Disables firing while the menu is opened. Called from playerChanged eh.\r\n *\r\n * Arguments:\r\n * 0: New unit to add the addAction eh <OBJECT>\r\n * 1: Old unit to remove the addAction eh <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_newUnit\", \"_oldUnit\"];\r\n\r\n// add to new unit\r\nprivate _ehid = [_newUnit, \"DefaultAction\", {GVAR(openedMenuType) >= 0}, {\r\n    if (!GVAR(actionOnKeyRelease) && GVAR(actionSelected)) then {\r\n        [GVAR(openedMenuType),true] call FUNC(keyUp);\r\n    };\r\n}] call EFUNC(common,addActionEventHandler);\r\n\r\n_newUnit setVariable [QGVAR(AAEHID), _ehid];\r\n\r\n// remove from old unit\r\n_ehid = _oldUnit getVariable [QGVAR(AAEHID), -1];\r\n\r\n[_oldUnit, \"DefaultAction\", _ehid] call EFUNC(common,removeActionEventHandler);\r\n\r\n_oldUnit setVariable [QGVAR(AAEHID), -1];\r\n"},{"name":"ace_interact_menu_fnc_isSubPath","file":"interact_menu/functions/fnc_isSubPath.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Check if the first path is a subpath of the other\r\n *\r\n * Arguments:\r\n * 0: LongPath <ARRAY>\r\n * 1: ShortPath <STRING>\r\n *\r\n * Return Value:\r\n * Bool\r\n *\r\n * Example:\r\n * [[[\"ACE_SelfActions\", player],[\"ace_Gestures\", player]], [[\"ACE_SelfActions\", player]]] call ace_interact_menu_fnc_isSubPath\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_longPath\", \"_shortPath\"];\r\n\r\nprivate _isSubPath = true;\r\n\r\nif (count _shortPath > count _longPath) exitWith {false};\r\n\r\nfor [{private _i = 0},{_i < count _shortPath},{_i = _i + 1}] do {\r\n    if !((_longPath select _i) isEqualTo (_shortPath select _i)) exitWith {\r\n        _isSubPath = false;\r\n    };\r\n};\r\n\r\n_isSubPath\r\n"},{"name":"ace_interact_menu_fnc_keyDown","file":"interact_menu/functions/fnc_keyDown.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Handle interactions key down\r\n *\r\n * Arguments:\r\n * 0: Type of key: 0 interaction / 1 self interaction <NUMBER>\r\n *\r\n * Return Value:\r\n * true <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_menuType\"];\r\n\r\nif (GVAR(openedMenuType) == _menuType) exitWith {true};\r\n\r\n// Conditions: canInteract (these don't apply to zeus)\r\nif ((isNull curatorCamera) && {\r\n    !([ACE_player, objNull, [\"isNotInside\",\"isNotDragging\", \"isNotCarrying\", \"isNotSwimming\", \"notOnMap\", \"isNotEscorting\", \"isNotSurrendering\", \"isNotSitting\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith))\r\n}) exitWith {false};\r\n\r\nwhile {dialog} do {\r\n    closeDialog 0;\r\n};\r\n\r\nif (_menuType == 0) then {\r\n    GVAR(keyDown) = true;\r\n    GVAR(keyDownSelfAction) = false;\r\n} else {\r\n    GVAR(keyDown) = false;\r\n    GVAR(keyDownSelfAction) = true;\r\n};\r\nGVAR(keyDownTime) = diag_tickTime;\r\nGVAR(openedMenuType) = _menuType;\r\nGVAR(lastTimeSearchedActions) = -1000;\r\nGVAR(ParsedTextCached) = [];\r\n\r\nGVAR(useCursorMenu) = (vehicle ACE_player != ACE_player) ||\r\n                      visibleMap ||\r\n                      (!isNull curatorCamera) ||\r\n                      {(_menuType == 1) && {(isWeaponDeployed ACE_player) || GVAR(AlwaysUseCursorSelfInteraction) || {cameraView == \"GUNNER\"}}} ||\r\n                      {(_menuType == 0) && GVAR(AlwaysUseCursorInteraction)};\r\n\r\n// Delete existing controls in case there's any left\r\nGVAR(iconCount) = 0;\r\nfor \"_i\" from 0 to (count GVAR(iconCtrls))-1 do {\r\n    ctrlDelete (GVAR(iconCtrls) select _i);\r\n    GVAR(ParsedTextCached) set [_i, \"\"];\r\n};\r\nGVAR(iconCtrls) resize GVAR(iconCount);\r\n\r\nif (GVAR(useCursorMenu)) then {\r\n    // Don't close zeus interface if open\r\n    if (isNull curatorCamera) then {\r\n        (findDisplay 46) createDisplay QGVAR(cursorMenu); //\"RscCinemaBorder\";//\r\n    } else {\r\n        createDialog QGVAR(cursorMenu);\r\n    };\r\n    (finddisplay 91919) displayAddEventHandler [\"KeyUp\", {[_this,'keyup'] call CBA_events_fnc_keyHandler}];\r\n    (finddisplay 91919) displayAddEventHandler [\"KeyDown\", {[_this,'keydown'] call CBA_events_fnc_keyHandler}];\r\n    // The dialog sets:\r\n    // uiNamespace getVariable QGVAR(dlgCursorMenu);\r\n    // uiNamespace getVariable QGVAR(cursorMenuOpened);\r\n    GVAR(cursorPos) = [0.5,0.5,0];\r\n\r\n    private _ctrl = (findDisplay 91919) ctrlCreate [\"RscStructuredText\", 9922];\r\n    _ctrl ctrlSetPosition [safeZoneX, safeZoneY, safeZoneW, safeZoneH];\r\n    _ctrl ctrlCommit 0;\r\n\r\n    // handles Mouse moving and LMB in cursor mode when action on keyrelease is disabled\r\n    ((finddisplay 91919) displayctrl 9922) ctrlAddEventHandler [\"MouseMoving\", DFUNC(handleMouseMovement)];\r\n    ((finddisplay 91919) displayctrl 9922) ctrlAddEventHandler [\"MouseButtonDown\", DFUNC(handleMouseButtonDown)];\r\n    setMousePosition [0.5, 0.5];\r\n};\r\n\r\nGVAR(selfMenuOffset) = (AGLtoASL (positionCameraToWorld [0, 0, 2])) vectorDiff (AGLtoASL (positionCameraToWorld [0, 0, 0]));\r\n\r\n//Auto expand the first level when self, mounted vehicle or zeus (skips the first animation as there is only one choice)\r\nif (GVAR(openedMenuType) == 0) then {\r\n    if (isNull curatorCamera) then {\r\n        if (vehicle ACE_player != ACE_player) then {\r\n            GVAR(menuDepthPath) = [[\"ACE_SelfActions\", (vehicle ACE_player)]];\r\n            GVAR(expanded) = true;\r\n            GVAR(expandedTime) = diag_tickTime;\r\n            GVAR(lastPath) = +GVAR(menuDepthPath);\r\n            GVAR(startHoverTime) = -1000;\r\n        };\r\n    } else {\r\n        GVAR(menuDepthPath) = [[\"ACE_ZeusActions\", (getAssignedCuratorLogic player)]];\r\n        GVAR(expanded) = true;\r\n        GVAR(expandedTime) = diag_tickTime;\r\n        GVAR(lastPath) = +GVAR(menuDepthPath);\r\n        GVAR(startHoverTime) = -1000;\r\n    };\r\n} else {\r\n    GVAR(menuDepthPath) = [[\"ACE_SelfActions\", ACE_player]];\r\n    GVAR(expanded) = true;\r\n    GVAR(expandedTime) = diag_tickTime;\r\n    GVAR(lastPath) = +GVAR(menuDepthPath);\r\n    GVAR(startHoverTime) = -1000;\r\n};\r\n\r\n[\"ace_interactMenuOpened\", [_menuType]] call CBA_fnc_localEvent;\r\n\r\ntrue\r\n"},{"name":"ace_interact_menu_fnc_keyUp","file":"interact_menu/functions/fnc_keyUp.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Handle interactions key up\r\n *\r\n * Arguments:\r\n * 0: Type of key: 0 interaction / 1 self interaction <NUMBER>\r\n *\r\n * Return Value:\r\n * true <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_menuType\", \"_calledByClicking\"];\r\n\r\n// Exit if there's no menu opened\r\nif (GVAR(openedMenuType) < 0) exitWith {true};\r\n\r\nif (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]) then {\r\n    (findDisplay 91919) closeDisplay 2;\r\n};\r\n\r\nif(GVAR(actionSelected)) then {\r\n    this = GVAR(selectedTarget);\r\n\r\n    private _player = ACE_Player;\r\n    private _target = GVAR(selectedTarget);\r\n\r\n    // Clear the conditions caches\r\n    [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\r\n\r\n    // exit scope if selecting an action on key release is disabled\r\n    if (!(GVAR(actionOnKeyRelease)) && !_calledByClicking) exitWith {};\r\n\r\n    // Check the action conditions\r\n    private _actionData = GVAR(selectedAction) select 0;\r\n    if ([_target, _player, _actionData select 6] call (_actionData select 4)) then {\r\n        // Call the statement\r\n        [_target, _player, _actionData select 6] call (_actionData select 3);\r\n\r\n        // Clear the conditions caches again if the action was performed\r\n        [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\r\n    };\r\n};\r\n\r\n[\"ace_interactMenuClosed\", [GVAR(openedMenuType)]] call CBA_fnc_localEvent;\r\n\r\nGVAR(keyDown) = false;\r\nGVAR(keyDownSelfAction) = false;\r\nGVAR(openedMenuType) = -1;\r\n\r\nGVAR(expanded) = false;\r\nGVAR(lastPath) = [];\r\nGVAR(menuDepthPath) = [];\r\n\r\ntrue\r\n"},{"name":"ace_interact_menu_fnc_removeActionFromClass","file":"interact_menu/functions/fnc_removeActionFromClass.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Removes an action from a class\r\n *\r\n * Arguments:\r\n * 0: TypeOf of the class <STRING>\r\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\r\n * 2: Full path of the new action <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [typeOf cursorTarget, 0,[\"ACE_TapShoulderRight\",\"VulcanPinch\"]] call ace_interact_menu_fnc_removeActionFromClass;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_objectType\", \"_typeNum\", \"_fullPath\"];\r\n\r\nprivate _res = _fullPath call FUNC(splitPath);\r\n_res params [\"_parentPath\", \"_actionName\"];\r\n\r\nprivate _namespace = [GVAR(ActNamespace), GVAR(ActSelfNamespace)] select _typeNum;\r\nprivate _actionTrees = _namespace getVariable _objectType;\r\nif (isNil \"_actionTrees\") then {\r\n    _actionTrees = [];\r\n};\r\n\r\nprivate _parentNode = [_actionTrees, _parentPath] call FUNC(findActionNode);\r\nif (isNil {_parentNode}) exitWith {};\r\n\r\n// Iterate through children of the father\r\nprivate _found = false;\r\n{\r\n    if (((_x select 0) select 0) == _actionName) exitWith {\r\n        TRACE_2(\"Deleting Action\", _forEachIndex, _x);\r\n        _found = true;\r\n        (_parentNode select 1) deleteAt _forEachIndex;\r\n    };\r\n} forEach (_parentNode select 1);\r\n\r\nif (!_found) then {\r\n    WARNING(\"Failed to find action to delete\");\r\n};\r\n"},{"name":"ace_interact_menu_fnc_removeActionFromObject","file":"interact_menu/functions/fnc_removeActionFromObject.sqf","text":"/*\r\n * Author: commy2, NouberNou and esteldunedain\r\n * Removes an action from an object\r\n *\r\n * Arguments:\r\n * 0: Object the action is assigned to <OBJECT>\r\n * 1: Type of action, 0 for actions, 1 for self-actions <NUMBER>\r\n * 2: Full path of the action to remove <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [cursorTarget,0,[\"ACE_TapShoulderRight\",\"VulcanPinch\"]] call ace_interact_menu_fnc_removeActionFromObject;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\", \"_typeNum\", \"_fullPath\"];\r\n\r\nprivate [\"_res\",\"_varName\",\"_actionList\"];\r\n_res = _fullPath call FUNC(splitPath);\r\n_res params [\"_parentPath\", \"_actionName\"];\r\n\r\n_varName = [QGVAR(actions),QGVAR(selfActions)] select _typeNum;\r\n_actionList = _object getVariable [_varName, []];\r\n{\r\n    if (((_x select 0) select 0) isEqualTo _actionName &&\r\n        {(_x select 1) isEqualTo _parentPath}) exitWith {\r\n        _actionList deleteAt _forEachIndex;\r\n    };\r\n} forEach _actionList;\r\n"},{"name":"ace_interact_menu_fnc_render","file":"interact_menu/functions/fnc_render.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Render all available nearby interactions\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_interact_menu_fnc_render\r\n *\r\n * Public: No\r\n */\r\n// #define ENABLE_PERFORMANCE_COUNTERS\r\n#include \"script_component.hpp\"\r\n\r\nBEGIN_COUNTER(fnc_render);\r\n\r\nprivate _foundTarget = false;\r\n\r\nif (GVAR(openedMenuType) >= 0) then {\r\n    BEGIN_COUNTER(fnc_renderMenuOpen);\r\n\r\n    private _cursorPos2 = positionCameraToWorld [0, 0, 2];\r\n\r\n    // Render all available nearby interactions\r\n    call FUNC(renderActionPoints);\r\n\r\n    // Draw the red selector only when there's no cursor\r\n    if !(uiNamespace getVariable [QGVAR(cursorMenuOpened),false]) then {\r\n        [[0.5,0.5], \"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selected_ca.paa\"] call FUNC(renderSelector);\r\n    };\r\n\r\n    private _cursorScreenPos = [worldToScreen _cursorPos2, GVAR(cursorPos)] select (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]);\r\n\r\n    private _closestDistance = 1000000;\r\n    private _closestSelection = -1;\r\n    {\r\n        _x params [\"\", \"_sPos\"];\r\n        private _distanceFromCursor = _cursorScreenPos distance2d _sPos;\r\n        if ((_distanceFromCursor < 0.1118) && {_distanceFromCursor < _closestDistance}) then {\r\n            _closestDistance = _distanceFromCursor;\r\n            _closestSelection = _forEachIndex;\r\n        };\r\n    } forEach GVAR(currentOptions);\r\n\r\n    if (_closestSelection == -1) exitWith {END_COUNTER(fnc_renderMenuOpen);};\r\n\r\n    private _closest = GVAR(currentOptions) select _closestSelection;\r\n    _closest params [\"_action\", \"_sPos\", \"_hoverPath\"];\r\n\r\n    private _cTime = diag_tickTime;\r\n    private _delta = _cTime - GVAR(lastTime);\r\n    GVAR(lastTime) = _cTime;\r\n\r\n    GVAR(rotationAngle) = (GVAR(rotationAngle) + (270*_delta)) mod 360;\r\n    [_sPos, format [QPATHTOF(ui\\selector%1.paa), floor (((abs GVAR(rotationAngle)) mod 90) / 6)]] call FUNC(renderSelector);\r\n\r\n    _foundTarget = true;\r\n    GVAR(actionSelected) = true;\r\n    GVAR(selectedAction) = _action select 1;\r\n    GVAR(selectedTarget) = (GVAR(selectedAction)) select 2;\r\n\r\n    private _misMatch = !(GVAR(lastPath) isEqualTo _hoverPath);\r\n\r\n    if(_misMatch && {diag_tickTime-GVAR(expandedTime) > linearConversion [0, 2, GVAR(menuAnimationSpeed), 0.25, 0.08333333]}) then {\r\n        GVAR(startHoverTime) = diag_tickTime;\r\n        GVAR(lastPath) = _hoverPath;\r\n        GVAR(expanded) = false;\r\n    } else {\r\n        if(!GVAR(expanded) && {diag_tickTime-GVAR(startHoverTime) > linearConversion [0, 2, GVAR(menuAnimationSpeed), 0.25, 0.08333333]}) then {\r\n            GVAR(expanded) = true;\r\n\r\n            // Start the expanding menu animation only if the user is not going up the menu\r\n            if !([GVAR(menuDepthPath),GVAR(lastPath)] call FUNC(isSubPath)) then {\r\n                GVAR(expandedTime) = diag_tickTime;\r\n            };\r\n            GVAR(menuDepthPath) = +GVAR(lastPath);\r\n\r\n            // Execute the current action if it's run on hover\r\n            private _tmp = ((GVAR(selectedAction) select 0) select 9) select 3;\r\n            private _runOnHover = true;\r\n            if (_tmp isEqualType {}) then {\r\n                _runOnHover = call _tmp;\r\n            } else {\r\n                if (_tmp isEqualType false) then {\r\n                    _runOnHover = _tmp;\r\n                } else {\r\n                    _runOnHover = _tmp > 0;\r\n                };\r\n            };\r\n            if (_runOnHover) then {\r\n                this = GVAR(selectedTarget);\r\n                private _player = ACE_Player;\r\n                private _target = GVAR(selectedTarget);\r\n\r\n                // Clear the conditions caches\r\n                [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\r\n\r\n                // Check the action conditions\r\n                private _actionData = GVAR(selectedAction) select 0;\r\n                if ([_target, _player, _actionData select 6] call (_actionData select 4)) then {\r\n                    // Call the statement\r\n                    [_target, _player, _actionData select 6] call (_actionData select 3);\r\n\r\n                    // Clear the conditions caches again if the action was performed\r\n                    [QGVAR(clearConditionCaches), []] call CBA_fnc_localEvent;\r\n                };\r\n            };\r\n        };\r\n    };\r\n    END_COUNTER(fnc_renderMenuOpen);\r\n};\r\n\r\nif(!_foundTarget && GVAR(actionSelected)) then {\r\n    GVAR(actionSelected) = false;\r\n};\r\nfor \"_i\" from GVAR(iconCount) to (count GVAR(iconCtrls))-1 do {\r\n    ctrlDelete (GVAR(iconCtrls) select _i);\r\n    GVAR(ParsedTextCached) set [_i, \"\"];\r\n};\r\nGVAR(iconCtrls) resize GVAR(iconCount);\r\nGVAR(iconCount) = 0;\r\n\r\nEND_COUNTER(fnc_render);\r\n"},{"name":"ace_interact_menu_fnc_renderActionPoints","file":"interact_menu/functions/fnc_renderActionPoints.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Render all action points\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(currentOptions) = [];\r\n\r\nprivate _player = ACE_player;\r\n\r\nGVAR(cameraPosASL) = AGLtoASL (positionCameraToWorld [0, 0, 0]);\r\nGVAR(cameraDir) = (AGLtoASL (positionCameraToWorld [0, 0, 1])) vectorDiff GVAR(cameraPosASL);\r\n\r\nprivate _fnc_renderNearbyActions = {\r\n    // Render all nearby interaction menus\r\n    #define MAXINTERACTOBJECTS 3\r\n\r\n    GVAR(foundActions) = [];\r\n    GVAR(lastTimeSearchedActions) = diag_tickTime;\r\n\r\n    private _numInteractObjects = 0;\r\n    private _nearestObjects = nearestObjects [ACE_player, [\"All\"], 13];\r\n    {\r\n        private _target = _x;\r\n\r\n        // Quick oclussion test. Skip objects more than 1 m behind the camera plane\r\n        private _lambda = ((getPosASL _x) vectorDiff GVAR(cameraPosASL)) vectorDotProduct GVAR(cameraDir);\r\n        if ((_lambda > -1) && {!isObjectHidden _target}) then {\r\n            private _numInteractions = 0;\r\n            // Prevent interacting with yourself or your own vehicle\r\n            if (_target != ACE_player && {_target != vehicle ACE_player}) then {\r\n\r\n                // Iterate through object actions, find base level actions and render them if appropiate\r\n                GVAR(objectActionList) = _target getVariable [QGVAR(actions), []];\r\n                {\r\n                    // Only render them directly if they are base level actions\r\n                    if ((_x select 1) isEqualTo []) then {\r\n                        // Try to render the menu\r\n                        private _action = _x;\r\n                        if ([_target, _action] call FUNC(renderBaseMenu)) then {\r\n                            _numInteractions = _numInteractions + 1;\r\n                            GVAR(foundActions) pushBack [_target, _action, GVAR(objectActionList)];\r\n                        };\r\n                    };\r\n                    nil\r\n                } count GVAR(objectActionList);\r\n\r\n                // Iterate through base level class actions and render them if appropiate\r\n                private _namespace = GVAR(ActNamespace);\r\n                private _classActions = _namespace getVariable typeOf _target;\r\n\r\n                {\r\n                    private _action = _x;\r\n                    // Try to render the menu\r\n                    if ([_target, _action] call FUNC(renderBaseMenu)) then {\r\n                        _numInteractions = _numInteractions + 1;\r\n                        GVAR(foundActions) pushBack [_target, _action, GVAR(objectActionList)];\r\n                    };\r\n                    nil\r\n                } count _classActions;\r\n\r\n                // Limit the amount of objects the player can interact with\r\n                if (_numInteractions > 0) then {\r\n                    _numInteractObjects = _numInteractObjects + 1;\r\n                };\r\n            };\r\n        };\r\n        if (_numInteractObjects >= MAXINTERACTOBJECTS) exitWith {};\r\n\r\n        nil\r\n    } count _nearestObjects;\r\n};\r\n\r\nprivate _fnc_renderLastFrameActions = {\r\n    {\r\n        _x params [\"_target\", \"_action\", \"_objectActionList\"];\r\n\r\n        GVAR(objectActionList) = _objectActionList;\r\n        [_target, _action] call FUNC(renderBaseMenu);\r\n        nil\r\n    } count GVAR(foundActions);\r\n};\r\n\r\nprivate _fnc_renderSelfActions = {\r\n    private _target = _this;\r\n\r\n    // Set object actions for collectActiveActionTree\r\n    GVAR(objectActionList) = _target getVariable [QGVAR(selfActions), []];\r\n\r\n    // Iterate through base level class actions and render them if appropiate\r\n    private _namespace = GVAR(ActSelfNamespace);\r\n    private _classActions = _namespace getVariable typeOf _target;\r\n\r\n    private _pos = if !(GVAR(useCursorMenu)) then {\r\n        //Convert to ASL, add offset and then convert back to AGL (handles waves when over water)\r\n        ASLtoAGL ((AGLtoASL (positionCameraToWorld [0, 0, 0])) vectorAdd GVAR(selfMenuOffset));\r\n    } else {\r\n        [0.5, 0.5]\r\n    };\r\n\r\n    {\r\n        _action = _x;\r\n        [_target, _action, _pos] call FUNC(renderBaseMenu);\r\n        nil\r\n    } count _classActions;\r\n};\r\n\r\nprivate _fnc_renderZeusActions = {\r\n    {\r\n        private _action = _x;\r\n        [_this, _action, [0.5, 0.5]] call FUNC(renderBaseMenu);\r\n        nil\r\n    } count GVAR(ZeusActions);\r\n};\r\n\r\n\r\nGVAR(collectedActionPoints) resize 0;\r\n\r\n// Render nearby actions, unit self actions or vehicle self actions as appropiate\r\nif (GVAR(openedMenuType) == 0) then {\r\n    if (isNull curatorCamera) then {\r\n        if (vehicle ACE_player == ACE_player) then {\r\n            if (diag_tickTime > GVAR(lastTimeSearchedActions) + 0.20) then {\r\n                // Once every 0.2 secs, collect nearby objects active and visible action points and render them\r\n                call _fnc_renderNearbyActions;\r\n            } else {\r\n                // The rest of the frames just draw the same action points rendered the last frame\r\n                call _fnc_renderLastFrameActions;\r\n            };\r\n        } else {\r\n            // Render vehicle self actions when in vehicle\r\n            (vehicle ACE_player) call _fnc_renderSelfActions;\r\n        };\r\n    } else {\r\n        // Render zeus actions when zeus open\r\n        (getAssignedCuratorLogic player) call _fnc_renderZeusActions;\r\n    };\r\n} else {\r\n    ACE_player call _fnc_renderSelfActions;\r\n};\r\n\r\nif (count GVAR(collectedActionPoints) > 1) then {\r\n    // Do the oclusion pass\r\n\r\n    // Order action points according to z\r\n    GVAR(collectedActionPoints) sort true;\r\n\r\n    for [{private _i = count GVAR(collectedActionPoints) - 1}, {_i > 0}, {_i = _i - 1}] do {\r\n        for [{private _j = _i - 1}, {_j >= 0}, {_j = _j - 1}] do {\r\n            // Check if action point _i is ocluded by _j\r\n            private _delta = vectorNormalized ((GVAR(collectedActionPoints) select _i select 1) vectorDiff (GVAR(collectedActionPoints) select _j select 1));\r\n\r\n            // If _i is inside a cone with 20º half angle with origin on _j\r\n            if (_delta select 2 > 0.94) exitWith {\r\n                GVAR(collectedActionPoints) deleteAt _i;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n// Render the non-ocluded points\r\n{\r\n    _x params [\"_z\", \"_sPos\", \"_activeActionTree\"];\r\n    [[], _activeActionTree, _sPos, [180,360]] call FUNC(renderMenu);\r\n    nil\r\n} count GVAR(collectedActionPoints);\r\n"},{"name":"ace_interact_menu_fnc_renderBaseMenu","file":"interact_menu/functions/fnc_renderBaseMenu.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Render the interaction menu for a base action\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n * 1: Action node <ARRAY>\r\n * 2: 3D position or 2D position <ARRAY> (Optional)\r\n *\r\n * Return Value:\r\n * Was the menu rendered <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nBEGIN_COUNTER(fnc_renderBaseMenu)\r\n\r\nparams [\"_object\", \"_baseActionNode\"];\r\n_baseActionNode params [\"_actionData\"];\r\n_actionData params [\"_actionName\", \"\", \"\", \"\", \"\", \"\", \"\", \"_positionCode\", \"_distance\", \"_params\"];\r\n\r\n\r\n// Obtain a 3D position for the action\r\nprivate _pos = if((count _this) > 2) then {\r\n    _this select 2\r\n} else {\r\n    // Setup scope variables for position code\r\n    private _target = _object;\r\n\r\n    // Get action position\r\n    _object modelToWorldVisual (call _positionCode)\r\n};\r\n\r\n// For non-self actions, exit if the action is too far away or ocluded\r\nprivate _distanceToBasePoint = 0; //This will be 0 for self/zeus/in-vehicle (used later to check sub action distance)\r\nif ((GVAR(openedMenuType) == 0) && {vehicle ACE_player == ACE_player} && {isNull curatorCamera} &&\r\n    {\r\n        private _headPos = ACE_player modelToWorldVisual (ACE_player selectionPosition \"pilot\");\r\n        _distanceToBasePoint = _headPos distance _pos;\r\n\r\n        if (_distanceToBasePoint > _distance) exitWith {true};\r\n\r\n        if ((_distanceToBasePoint > 1.2) && {!(_params select 4)}) exitWith {\r\n            // If distance to action is greater than 1.2 m and check isn't disabled in params, check LOS\r\n            lineIntersects [AGLtoASL _headPos, AGLtoASL _pos, _object, ACE_player]\r\n        };\r\n        false\r\n    }) exitWith {false};\r\n\r\n// Exit if the action is behind you\r\nprivate _sPos = if (count _pos != 2) then {\r\n    worldToScreen _pos\r\n} else {\r\n    _pos\r\n};\r\nif (_sPos isEqualTo []) exitWith {false};\r\n\r\n// Exit if the action is off screen\r\nif ((_sPos select 0) < safeZoneXAbs || {(_sPos select 0) > safeZoneXAbs + safeZoneWAbs}) exitWith {false};\r\nif ((_sPos select 1) < safeZoneY    || {(_sPos select 1) > safeZoneY    + safeZoneH}) exitWith {false};\r\n\r\n\r\nBEGIN_COUNTER(fnc_collectActiveActionTree)\r\n\r\n// Collect active tree\r\nprivate _uid = format [QGVAR(ATCache_%1), _actionName];\r\nprivate _activeActionTree = [\r\n                        [_object, _baseActionNode, [], _distanceToBasePoint],\r\n                        DFUNC(collectActiveActionTree),\r\n                        _object, _uid, 1.0, \"interactMenuClosed\"\r\n                    ] call EFUNC(common,cachedCall);\r\n\r\nEND_COUNTER(fnc_collectActiveActionTree)\r\n\r\n#ifdef DEBUG_MODE_EXTRA\r\ndiag_log \"Printing: _activeActionTree\";\r\n[0, _activeActionTree] call {\r\n    params [\"_level\", \"_node\"];\r\n    _node params [\"_actionData\", \"_children\", \"_object\"];\r\n    diag_log text format [\"Level %1 -> %2 on %3\", _level, _actionData select 0, _object];\r\n    {\r\n        [_level + 1, _x] call _fnc_print;\r\n    } forEach _children;\r\n};\r\n#endif\r\n\r\n// Check if there's something left for rendering\r\nif (_activeActionTree isEqualTo []) exitWith {false};\r\n\r\nBEGIN_COUNTER(fnc_renderMenus);\r\n\r\nif (count _pos > 2) then {\r\n    _sPos pushBack (((AGLtoASL _pos) vectorDiff GVAR(cameraPosASL)) vectorDotProduct GVAR(cameraDir));\r\n} else {\r\n    _sPos pushBack 0;\r\n};\r\n\r\n// Add action point for oclusion and rendering\r\nGVAR(collectedActionPoints) pushBack [_sPos select 2, _sPos, _activeActionTree];\r\n\r\nEND_COUNTER(fnc_renderMenus);\r\n\r\nEND_COUNTER(fnc_renderBaseMenu)\r\n\r\ntrue\r\n"},{"name":"ace_interact_menu_fnc_renderIcon","file":"interact_menu/functions/fnc_renderIcon.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Render a single interaction icon\r\n *\r\n * Arguments:\r\n * 0: Text <STRING>\r\n * 1: Icon <STRING>\r\n * 2: 2d position <ARRAY>\r\n * 3: Text Settings <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n#define DEFAULT_ICON QUOTE(\\z\\ace\\addons\\interaction\\ui\\dot_ca.paa)\r\n\r\nparams [\"_text\", \"_icon\", \"_sPos\", \"_textSettings\"];\r\n\r\nTRACE_2(\"Icon\",_text,_sPos);\r\n\r\nif(GVAR(iconCount) > (count GVAR(iconCtrls))-1) then {\r\n    private _displayNum = [[46, 12] select visibleMap,91919] select (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]);\r\n    GVAR(iconCtrls) pushBack ((findDisplay _displayNum) ctrlCreate [\"RscStructuredText\", 54021+GVAR(iconCount)]);\r\n    if (GVAR(useCursorMenu)) then {\r\n        ((finddisplay _displayNum) displayctrl (54021+GVAR(iconCount))) ctrlAddEventHandler [\"MouseMoving\", DFUNC(handleMouseMovement)];\r\n        ((finddisplay _displayNum) displayctrl (54021+GVAR(iconCount))) ctrlAddEventHandler [\"MouseButtonDown\", DFUNC(handleMouseButtonDown)];\r\n    };\r\n};\r\nprivate _ctrl = GVAR(iconCtrls) select GVAR(iconCount);\r\n\r\nif(_icon == \"\") then {\r\n    _icon = DEFAULT_ICON;\r\n};\r\n\r\n_text = if (GVAR(UseListMenu)) then {\r\n    format [\"<img image='%1' align='left'/><t %2>%3</t>\", _icon, _textSettings, _text]\r\n} else {\r\n    format [\"<img image='%1' align='center'/><br/><t %2 align='center'>%3</t>\", _icon, _textSettings, \"ace_break_line\" callExtension _text];\r\n};\r\n\r\n[_ctrl, GVAR(iconCount), _text] call FUNC(ctrlSetParsedTextCached);\r\nGVAR(iconCount) = GVAR(iconCount) + 1;\r\n\r\nprivate _pos = if (GVAR(UseListMenu)) then {\r\n    [(_sPos select 0)-(0.0095*SafeZoneW), (_sPos select 1)-(0.0095*SafeZoneW), 0.20*SafeZoneW, 0.035*SafeZoneW]\r\n} else {\r\n    [(_sPos select 0)-(0.0750*SafeZoneW), (_sPos select 1)-(0.0095*SafeZoneW), 0.15*SafeZoneW, 0.100*SafeZoneW]\r\n};\r\n\r\nif (GVAR(cursorKeepCentered) && {uiNamespace getVariable [QGVAR(cursorMenuOpened),false]}) then {\r\n    _pos set [0, ((_pos select 0) - (GVAR(cursorPos) select 0) + 0.5)];\r\n    _pos set [1, ((_pos select 1) - (GVAR(cursorPos) select 1) + 0.5)];\r\n};\r\n\r\n_ctrl ctrlSetPosition _pos;\r\n_ctrl ctrlCommit 0;\r\n"},{"name":"ace_interact_menu_fnc_renderMenu","file":"interact_menu/functions/fnc_renderMenu.sqf","text":"/*\r\n * Author: NouberNou and esteldunedain\r\n * Render an interaction menu and it's children recursively\r\n *\r\n * Arguments:\r\n * 0: Parent path <ARRAY>\r\n * 1: Action data <ARRAY>\r\n * 2: 2D position <ARRAY>\r\n * 3: Angle range available for rendering <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_parentPath\", \"_action\", \"_sPos\", \"_angles\"];\r\n_action params [\"_actionData\", \"_activeChildren\", \"_actionObject\"];\r\n_angles params [\"_centerAngle\", \"_maxAngleSpan\"];\r\n\r\nprivate _menuDepth = (count GVAR(menuDepthPath));\r\n\r\n//BEGIN_COUNTER(constructing_paths);\r\n\r\n// Store path to action\r\nprivate _path = +_parentPath;\r\n_path pushBack [_actionData select 0,_actionObject];\r\n\r\n// Check if the menu is on the selected path\r\nprivate _menuInSelectedPath = true;\r\n{\r\n    if (_forEachIndex >= (count GVAR(menuDepthPath))) exitWith {\r\n        _menuInSelectedPath = false;\r\n    };\r\n    if !(_x isEqualTo (GVAR(menuDepthPath) select _forEachIndex)) exitWith {\r\n        _menuInSelectedPath = false;\r\n    };\r\n} forEach _path;\r\n\r\n//END_COUNTER(constructing_paths);\r\n//BEGIN_COUNTER(constructing_colors);\r\n\r\n//Get text color settings string\r\nprivate _textSettings = GVAR(colorSelectedSettings);\r\nif(!_menuInSelectedPath) then {\r\n    _textSettings = (GVAR(textSettingsMatrix) select (count _path)) select _menuDepth;\r\n};\r\n\r\n//END_COUNTER(constructing_colors);\r\n//BEGIN_COUNTER(fnc_renderIcons);\r\n\r\n[_actionData select 1, _actionData select 2, _sPos, _textSettings] call FUNC(renderIcon);\r\n\r\n//END_COUNTER(fnc_renderIcons);\r\n\r\n//BEGIN_COUNTER(currentOptions);\r\n\r\n// Add the action to current options\r\nGVAR(currentOptions) pushBack [_this, _sPos, _path];\r\n\r\n//END_COUNTER(currentOptions);\r\n\r\n// Exit without rendering children if it isn't\r\nif !(_menuInSelectedPath) exitWith {true};\r\n\r\n//BEGIN_COUNTER(children);\r\n\r\nprivate _numChildren = count _activeChildren;\r\nprivate _angleSpan = _maxAngleSpan min (55 * ((_numChildren) - 1));\r\nif (_angleSpan >= 305) then {\r\n    _angleSpan = 360;\r\n};\r\nprivate _angleInterval = 55;\r\nif (_angleSpan < 360) then {\r\n    if (_numChildren > 1) then {\r\n        _angleInterval = _angleSpan / (_numChildren - 1);\r\n    };\r\n} else {\r\n    _angleInterval = _angleSpan / (_numChildren);\r\n};\r\nif (_numChildren == 1) then {\r\n    _angleInterval = 55;\r\n};\r\n\r\n// Scale menu based on the amount of children\r\nprivate _scaleX = 1;\r\nprivate _scaleY = 1;\r\n\r\nif (GVAR(UseListMenu)) then {\r\n    private _textSize = [0.75, 0.875, 1, 1.2, 1.4] select GVAR(textSize);\r\n    _scaleX = _textSize * 0.17 * 1.1;\r\n    _scaleY = 0.17 * 0.30 * 4/3;\r\n} else {\r\n    private _textSize = if (GVAR(textSize) > 2) then {1.3} else {1};\r\n    _scaleX = _textSize * 0.17 * (((0.8 * (0.46 / sin (0.5 * _angleInterval))) min 1.1) max 0.5);\r\n    _scaleY = _textSize * 0.17 * 4/3 * (((0.8 * (0.46 / sin (0.5 * _angleInterval))) min 1.1) max 0.5);\r\n};\r\n\r\n// Animate menu scale\r\nif (_menuInSelectedPath && {_menuDepth == count _path}) then {\r\n    _scaleX = _scaleX * (0.3 + 0.7 * (((diag_tickTime - GVAR(expandedTime)) * linearConversion [0, 2, GVAR(menuAnimationSpeed), 8, 16]) min 1));\r\n    _scaleY = _scaleY * (0.3 + 0.7 * (((diag_tickTime - GVAR(expandedTime)) * linearConversion [0, 2, GVAR(menuAnimationSpeed), 8, 16]) min 1));\r\n};\r\n\r\nprivate _target = _actionObject;\r\nprivate _player = ACE_player;\r\n\r\n//END_COUNTER(children);\r\nprivate _angle = _centerAngle - _angleSpan / 2;\r\n{\r\n    private _newPos =  if (GVAR(UseListMenu)) then {\r\n        [(_sPos select 0) + _scaleX,\r\n         (_sPos select 1) + _scaleY * (_forEachIndex - _numChildren/2 + 0.5)];\r\n    } else {\r\n        [(_sPos select 0) - _scaleX * (cos _angle),\r\n         (_sPos select 1) + _scaleY * (sin _angle)];\r\n    };\r\n\r\n    [_path, _x, _newPos, [_angle, 150]] call FUNC(renderMenu);\r\n\r\n    _angle = _angle + _angleInterval;\r\n} forEach _activeChildren;\r\n\r\ntrue\r\n"},{"name":"ace_interact_menu_fnc_renderSelector","file":"interact_menu/functions/fnc_renderSelector.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Render a single interaction icon\r\n *\r\n * Arguments:\r\n * 0: 2d position <ARRAY>\r\n * 1: Icon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_sPos\", \"_icon\"];\r\n\r\nif(GVAR(iconCount) > (count GVAR(iconCtrls))-1) then {\r\n    private _displayNum = [[46, 12] select visibleMap,91919] select (uiNamespace getVariable [QGVAR(cursorMenuOpened),false]);\r\n    GVAR(iconCtrls) pushBack ((findDisplay _displayNum) ctrlCreate [\"RscStructuredText\", 54021+GVAR(iconCount)]);\r\n    if (GVAR(useCursorMenu)) then {\r\n        ((finddisplay _displayNum) displayctrl (54021+GVAR(iconCount))) ctrlAddEventHandler [\"MouseMoving\", DFUNC(handleMouseMovement)];\r\n        ((finddisplay _displayNum) displayctrl (54021+GVAR(iconCount))) ctrlAddEventHandler [\"MouseButtonDown\", DFUNC(handleMouseButtonDown)];\r\n    };\r\n};\r\n\r\nprivate _ctrl = GVAR(iconCtrls) select GVAR(iconCount);\r\n\r\nprivate _pos = if (GVAR(UseListMenu)) then {\r\n    [_ctrl, GVAR(iconCount), format [\"<img image='%1' color='#FF0000' size='1.6'/>\", _icon]] call FUNC(ctrlSetParsedTextCached);\r\n    [(_sPos select 0)-(0.014*SafeZoneW), (_sPos select 1)-(0.014*SafeZoneW), 0.05*SafeZoneW, 0.035*SafeZoneW]\r\n} else {\r\n    [_ctrl, GVAR(iconCount), format [\"<img image='%1' color='#FF0000' size='1.6' align='center'/>\", _icon]] call FUNC(ctrlSetParsedTextCached);\r\n    [(_sPos select 0)-(0.050*SafeZoneW), (_sPos select 1)-(0.014*SafeZoneW), 0.1*SafeZoneW, 0.035*SafeZoneW]\r\n};\r\n\r\nGVAR(iconCount) = GVAR(iconCount) + 1;\r\n\r\nif (GVAR(cursorKeepCentered) && {uiNamespace getVariable [QGVAR(cursorMenuOpened),false]}) then {\r\n    _pos set [0, ((_pos select 0) - (GVAR(cursorPos) select 0) + 0.5)];\r\n    _pos set [1, ((_pos select 1) - (GVAR(cursorPos) select 1) + 0.5)];\r\n};\r\n\r\n_ctrl ctrlSetPosition _pos;\r\n_ctrl ctrlCommit 0;\r\n"},{"name":"ace_interact_menu_fnc_setupTextColors","file":"interact_menu/functions/fnc_setupTextColors.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Builds color strings needed for displaying interaction text\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//Mixes 2 colors (number arrays) and makes a color string \"#AARRGGBB\" for structured text\r\nprivate _mixColor = {\r\n    params [\"_color1\", \"_color2\", \"_ratio\"];\r\n\r\n    private _return = \"\";\r\n    for \"_index\" from 0 to 3 do {\r\n        private _mix = linearConversion [0, 1, _ratio, (_color1 select _index), (_color2 select _index)];\r\n        if (_index != 3) then {\r\n            _return = _return + ([255 * _mix] call EFUNC(common,toHex));\r\n        } else {\r\n            _return = \"#\" + ([255 * _mix] call EFUNC(common,toHex)) + _return;\r\n        };\r\n    };\r\n    _return\r\n};\r\n\r\nprivate _colorTextMin = missionNamespace getVariable [QGVAR(colorTextMin), [1,1,1,0.25]];\r\nprivate _colorTextMax = missionNamespace getVariable [QGVAR(colorTextMax), [1,1,1,1]];\r\nprivate _colorShadowMin = missionNamespace getVariable [QGVAR(colorShadowMin), [0,0,0,0.25]];\r\nprivate _colorShadowMax = missionNamespace getVariable [QGVAR(colorShadowMax), [0,0,0,1]];\r\nprivate _shadowSetting = missionNamespace getVariable [QGVAR(shadowSetting), 2];\r\nprivate _textSize = missionNamespace getVariable [QGVAR(textSize), 2];\r\n\r\nTRACE_6(\"Building text matrix\",_colorTextMin,_colorTextMax,_colorShadowMin,_colorShadowMax,_shadowSetting,_textSize);\r\n\r\nprivate _textColor = [_colorTextMin, _colorTextMax, 1] call _mixColor;\r\nprivate _shadowColor = [_colorShadowMin, _colorShadowMax, 1] call _mixColor;\r\n_textSize = switch (_textSize) do {\r\n    case (0): {0.4};\r\n    case (1): {0.6};\r\n    case (2): {0.8};\r\n    case (3): {1};\r\n    case (4): {1.2};\r\n};\r\n\r\nGVAR(colorSelectedSettings) = format [\"color='%1' size='%2' shadow='%3' shadowColor='%4' shadowOffset='0.06'\", _textColor, _textSize, _shadowSetting, _shadowColor];\r\n\r\nGVAR(textSettingsMatrix) = [];\r\nfor \"_pathCount\" from 0 to 15 do {\r\n    private _row = [];\r\n    for \"_menuDepth\" from 0 to 15 do {\r\n        if (_menuDepth > 0) then {\r\n            _textColor = [_colorTextMin, _colorTextMax, (((_pathCount - 1) / _menuDepth) max 0.25)] call _mixColor;\r\n            _shadowColor = [_colorShadowMin, _colorShadowMax, (((_pathCount - 1) / _menuDepth) max 0.25)] call _mixColor;\r\n        } else {\r\n            _textColor = [_colorTextMin, _colorTextMax, 0] call _mixColor;\r\n            _shadowColor = [_colorShadowMin, _colorShadowMax, 0] call _mixColor;\r\n        };\r\n        _row pushBack format [\"color='%1' size='%2' shadow='%3' shadowColor='%4' shadowOffset='0.06'\", _textColor, _textSize, _shadowSetting, _shadowColor];\r\n    };\r\n    GVAR(textSettingsMatrix) pushBack _row;\r\n};\r\n"},{"name":"ace_interact_menu_fnc_splitPath","file":"interact_menu/functions/fnc_splitPath.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Take full path and split it between parent path and action name\r\n *\r\n * Arguments:\r\n * Full path of the action to remove <ARRAY>\r\n *\r\n * Return Value:\r\n * 0: Parent path <ARRAY>\r\n * 1: Action name <STRING>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _parentPath = [];\r\nfor [{private _i = 0},{_i < (count _this) - 1},{_i = _i + 1}] do {\r\n    _parentPath pushBack (_this select _i);\r\n};\r\nprivate _actionName = if (count _this > 0) then {\r\n    _this select ((count _this) - 1);\r\n} else {\r\n    \"\"\r\n};\r\n\r\n[_parentPath, _actionName]\r\n"},{"name":"ace_interact_menu_fnc_userActions_addHouseActions","file":"interact_menu/functions/fnc_userActions_addHouseActions.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Scans for nearby \"Static\" objects (buildings) and adds the UserActions to them.\r\n * Called when interact_menu starts rendering (from \"interactMenuOpened\" event)\r\n *\r\n * Arguments:\r\n * 0: Interact Menu Type (0 - world, 1 - self) <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [0] call ace_interact_menu_fnc_userActions_addHouseActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_interactionType\"];\r\n\r\n//Ignore if not enabled:\r\nif (!GVAR(addBuildingActions)) exitWith {};\r\n//Ignore self-interaction menu:\r\nif (_interactionType != 0) exitWith {};\r\n//Ignore when mounted:\r\nif ((vehicle ACE_player) != ACE_player) exitWith {};\r\n\r\n[{\r\n    params [\"_args\", \"_pfID\"];\r\n    _args params [\"_setPosition\", \"_addedHelpers\", \"_housesScaned\", \"_housesToScanForActions\"];\r\n\r\n    if (!EGVAR(interact_menu,keyDown)) then {\r\n        {deleteVehicle _x;} forEach _addedHelpers;\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n    } else {\r\n        // Prevent Rare Error when ending mission with interact key down:\r\n        if (isNull ace_player) exitWith {};\r\n\r\n        //Make the common case fast (cursorTarget is looking at a door):\r\n        if ((!isNull cursorTarget) && {cursorTarget isKindOf \"Static\"} && {!(cursorTarget in _housesScaned)}) then {\r\n            if (((count (configFile >> \"CfgVehicles\" >> (typeOf cursorTarget) >> \"UserActions\")) > 0) || {(count (getArray (configFile >> \"CfgVehicles\" >> (typeOf cursorTarget) >> \"ladders\"))) > 0}) then {\r\n                _housesToScanForActions = [cursorTarget];\r\n            } else {\r\n                _housesScaned pushBack cursorTarget;\r\n            };\r\n        };\r\n\r\n        //For performance, we only do 1 thing per frame,\r\n        //-either do a wide scan and search for houses with actions\r\n        //-or scan one house at a time and add the actions for that house\r\n\r\n        if (_housesToScanForActions isEqualTo []) then {\r\n            //If player moved >2 meters from last pos, then rescan\r\n            if (((getPosASL ace_player) distance _setPosition) < 2) exitWith {};\r\n\r\n            private _nearBuidlings = nearestObjects [ace_player, [\"Static\"], 30];\r\n            {\r\n                private _typeOfHouse = typeOf _x;\r\n                if (((count (configFile >> \"CfgVehicles\" >> _typeOfHouse >> \"UserActions\")) == 0) && {(count (getArray (configFile >> \"CfgVehicles\" >> _typeOfHouse >> \"ladders\"))) == 0}) then {\r\n                    _housesScaned pushBack _x;\r\n                } else {\r\n                    _housesToScanForActions pushBack _x;\r\n                };\r\n                nil\r\n            } count (_nearBuidlings - _housesScaned);\r\n\r\n            _args set [0, (getPosASL ace_player)];\r\n        } else {\r\n            _houseBeingScaned = _housesToScanForActions deleteAt 0;\r\n            private _typeOfHouse = typeOf _houseBeingScaned;\r\n            //Skip this house for now if we are outside of it's radius\r\n            //(we have to scan far out for the big houses, but we don't want to waste time adding actions on every little shack)\r\n            if ((_houseBeingScaned != cursorTarget) && {((ACE_player distance _houseBeingScaned) - ((sizeOf _typeOfHouse) / 2)) > 4}) exitWith {};\r\n\r\n            _housesScaned pushBack _houseBeingScaned;\r\n\r\n            private _actionSet = [_typeOfHouse] call FUNC(userActions_getHouseActions);\r\n            _actionSet params [\"_memPoints\", \"_memPointsActions\"];\r\n\r\n            // systemChat format [\"Add Actions for [%1] (count %2) @ %3\", _typeOfHouse, (count _memPoints), diag_tickTime];\r\n            {\r\n                private _helperPos = AGLtoASL (_houseBeingScaned modelToWorld (_houseBeingScaned selectionPosition _x));\r\n                private _helperObject = \"ACE_LogicDummy\" createVehicleLocal _helperPos;\r\n                _addedHelpers pushBack _helperObject;\r\n                _helperObject setVariable [QGVAR(building), _houseBeingScaned];\r\n                _helperObject setPosASL _helperPos;\r\n                TRACE_3(\"Making New Helper\",_helperObject,_x,_houseBeingScaned);\r\n\r\n                {\r\n                    [_helperObject, 0, [], _x] call EFUNC(interact_menu,addActionToObject);\r\n                    nil\r\n                } count (_memPointsActions select _forEachIndex);\r\n\r\n            } forEach _memPoints;\r\n        };\r\n    };\r\n}, 0, [((getPosASL ace_player) vectorAdd [-100,0,0]), [], [], []]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_interact_menu_fnc_userActions_getHouseActions","file":"interact_menu/functions/fnc_userActions_getHouseActions.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Scans the buidling type for UserActions and Ladder mount points.\r\n *\r\n * Arguments:\r\n * 0: Building Classname <STRING>\r\n *\r\n * Return Value:\r\n * [[Array of MemPoints], [Array Of Actions]]\r\n *\r\n * Example:\r\n * [\"Land_i_House_Big_01_V1_F\"] call ace_interact_menu_fnc_userActions_getHouseActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_typeOfBuilding\"];\r\n\r\nprivate _searchIndex = GVAR(cachedBuildingTypes) find _typeOfBuilding;\r\nif (_searchIndex != -1) exitWith {GVAR(cachedBuildingActionPairs) select _searchIndex};\r\n\r\nprivate _memPoints = [];\r\nprivate _memPointsActions = [];\r\n\r\n//Get the offset for a memory point:\r\nprivate _fnc_getMemPointOffset = {\r\n    params [\"_memoryPoint\"];\r\n    _memPointIndex = _memPoints find _memoryPoint;\r\n    _actionOffset = [0,0,0];\r\n    if (_memPointIndex == -1) then {\r\n        _memPoints pushBack _memoryPoint;\r\n        _memPointsActions pushBack [];\r\n    } else {\r\n        _actionOffset set [2, 0.0254 * (count (_memPointsActions select _memPointIndex))];\r\n    };\r\n    _actionOffset\r\n};\r\n\r\n// Add UserActions for the building:\r\nprivate _fnc_userAction_Statement = {\r\n    params [\"_target\", \"_player\", \"_variable\"];\r\n    _variable params [\"_actionStatement\", \"_actionCondition\"];\r\n    this = _target getVariable [QGVAR(building), objNull];\r\n    call _actionStatement;\r\n};\r\nprivate _fnc_userAction_Condition = {\r\n    params [\"_target\", \"_player\", \"_variable\"];\r\n    _variable params [\"_actionStatement\", \"_actionCondition\"];\r\n    this = _target getVariable [QGVAR(building), objNull];\r\n    if (isNull this) exitWith {false};\r\n    call _actionCondition;\r\n};\r\n\r\nprivate _configPath = configFile >> \"CfgVehicles\" >> _typeOfBuilding >> \"UserActions\";\r\nfor \"_index\" from 0 to ((count _configPath) - 1) do {\r\n    private _actionPath = _configPath select _index;\r\n\r\n    private _actionDisplayName = getText (_actionPath >> \"displayName\");\r\n    private _actionDisplayNameDefault = getText (_actionPath >> \"displayNameDefault\");\r\n    private _actionPosition = getText (_actionPath >> \"position\");\r\n    private _actionCondition = getText (_actionPath >> \"condition\");\r\n    private _actionStatement = getText (_actionPath >> \"statement\");\r\n    private _actionMaxDistance = getNumber (_actionPath >> \"radius\");\r\n\r\n    if (_actionDisplayName == \"\") then {_actionDisplayName = (configName _x);};\r\n    if (_actionPosition == \"\") then {ERROR(\"Bad Position\");};\r\n    if (_actionCondition == \"\") then {_actionCondition = \"true\";};\r\n    if (_actionStatement == \"\") then {ERROR(\"No Statement\");};\r\n\r\n    _actionStatement = compile _actionStatement;\r\n    _actionCondition = compile _actionCondition;\r\n    _actionMaxDistance = _actionMaxDistance + 0.1; //increase range slightly\r\n\r\n    //extension ~4x as fast:\r\n    private _iconImage =  \"ace_parse_imagepath\" callExtension _actionDisplayNameDefault;\r\n\r\n    private _actionOffset = [_actionPosition] call _fnc_getMemPointOffset;\r\n    private _memPointIndex = _memPoints find _actionPosition;\r\n\r\n    _action = [(configName _actionPath), _actionDisplayName, _iconImage, _fnc_userAction_Statement, _fnc_userAction_Condition, {}, [_actionStatement, _actionCondition], _actionOffset, _actionMaxDistance, [false,false,false,false,true]] call EFUNC(interact_menu,createAction);\r\n    (_memPointsActions select _memPointIndex) pushBack _action;\r\n};\r\n\r\n// Add Ladder Actions for the building:\r\nprivate _fnc_ladder_ladderUp = {\r\n    params [\"_target\", \"_player\", \"_variable\"];\r\n    _variable params [\"_ladderIndex\"];\r\n    private _building = _target getVariable [QGVAR(building), objNull];\r\n    TRACE_3(\"Ladder Action - UP\",_player,_building,_ladderIndex);\r\n    _player action [\"LadderUp\", _building, _ladderIndex, 0];\r\n};\r\nprivate _fnc_ladder_ladderDown = {\r\n    params [\"_target\", \"_player\", \"_variable\"];\r\n    _variable params [\"_ladderIndex\"];\r\n    private _building = _target getVariable [QGVAR(building), objNull];\r\n    TRACE_3(\"Ladder Action - Down\",_player,_building,_ladderIndex);\r\n    _player action [\"LadderDown\", _building, _ladderIndex, 1];\r\n};\r\n\r\nprivate _fnc_ladder_conditional = {\r\n    params [\"_target\", \"_player\"];\r\n    //(Check distance < 2) and (Don't show actions if on a ladder)\r\n    ((_target distance _player) < 2) && {((getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> (animationState _player) >> \"onLadder\")) == 0)}\r\n};\r\n\r\nprivate _ladders = getArray (configFile >> \"CfgVehicles\" >> _typeOfBuilding >> \"ladders\");\r\n{\r\n    _x params [\"_ladderBottomMemPoint\", \"_ladderTopMemPoint\"];\r\n\r\n    private _actionMaxDistance = 3; //interact_menu will check head -> target's offset; leave this high and do a precice distance check in condition\r\n\r\n    private _actionDisplayName = localize \"str_action_ladderup\";\r\n    private _iconImage = \"\\A3\\ui_f\\data\\igui\\cfg\\actions\\ladderup_ca.paa\";\r\n    //Ladder Up Action:\r\n    private _actionOffset = [_ladderBottomMemPoint] call _fnc_getMemPointOffset;\r\n    _actionOffset = _actionOffset vectorAdd [0,0,1];\r\n    private _memPointIndex = _memPoints find _ladderBottomMemPoint;\r\n    private _action = [format [\"LadderUp_%1\", _forEachIndex], _actionDisplayName, _iconImage, _fnc_ladder_ladderUp, _fnc_ladder_conditional, {}, [_forEachIndex], _actionOffset, _actionMaxDistance, [false,false,false,false,true]] call EFUNC(interact_menu,createAction);\r\n    (_memPointsActions select _memPointIndex) pushBack _action;\r\n\r\n    _actionDisplayName = localize \"str_action_ladderdown\";\r\n    _iconImage = \"\\A3\\ui_f\\data\\igui\\cfg\\actions\\ladderdown_ca.paa\";\r\n    //Ladder Down Action:\r\n    _actionOffset = [_ladderTopMemPoint] call _fnc_getMemPointOffset;\r\n    _actionOffset = _actionOffset vectorAdd [0,0,0.25];\r\n    _memPointIndex = _memPoints find _ladderTopMemPoint;\r\n    _action = [format [\"LadderDown_%1\", _forEachIndex], _actionDisplayName, _iconImage, _fnc_ladder_ladderDown, _fnc_ladder_conditional, {}, [_forEachIndex], _actionOffset, _actionMaxDistance, [false,false,false,false,true]] call EFUNC(interact_menu,createAction);\r\n    (_memPointsActions select _memPointIndex) pushBack _action;\r\n\r\n} forEach _ladders;\r\n\r\nGVAR(cachedBuildingTypes) pushBack _typeOfBuilding;\r\nGVAR(cachedBuildingActionPairs) pushBack [_memPoints, _memPointsActions];\r\n\r\n\r\n[_memPoints, _memPointsActions]\r\n"}],"interaction":[{"name":"ace_interaction_fnc_addPassengerActions","file":"interaction/functions/fnc_addPassengerActions.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Mount unit actions inside passenger submenu.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Player <OBJECT>\r\n * 3: Parameters <ARRAY>\r\n *\r\n * Return Value:\r\n * Children actions <ARRAY>\r\n *\r\n * Example:\r\n * array = [target, player, [params]] call ace_interaction_fnc_addPassengerAction\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"\", \"_parameters\"];\r\n_parameters params [\"_unit\"];\r\n\r\nprivate _namespace = EGVAR(interact_menu,ActNamespace);\r\nprivate _actionTrees = _namespace getVariable typeOf _unit;\r\nif (isNil \"_actionTrees\") then {\r\n    _actionTrees = [];\r\n};\r\n\r\nprivate _actions = [];\r\n\r\n// Mount unit MainActions menu\r\n{\r\n    _x params [\"_actionData\", \"_children\"];\r\n\r\n    _actions pushBack [_actionData, _children, _unit];\r\n    false\r\n} count (_actionTrees select 0 select 1);\r\n\r\n_actions\r\n"},{"name":"ace_interaction_fnc_addPassengersActions","file":"interaction/functions/fnc_addPassengersActions.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Create one action per passenger.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Player <OBJECT>\r\n * 3: Parameters <ARRAY>\r\n *\r\n * Return Value:\r\n * Children actions <ARRAY>\r\n *\r\n * Example:\r\n * [target, player, [params]] call ace_interaction_fnc_addPassengersActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_player\"];\r\n\r\nprivate \"_actions\";\r\n_actions = [];\r\n\r\n{\r\n    private _unit = _x;\r\n\r\n    if (_unit != _player && {getText (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"simulation\") != \"UAVPilot\"}) then {\r\n        private _icon = [\r\n            \"\",\r\n            \"A3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_driver_ca.paa\",\r\n            \"A3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_gunner_ca.paa\",\r\n            \"A3\\ui_f\\data\\IGUI\\RscIngameUI\\RscUnitInfo\\role_commander_ca.paa\"\r\n        ] select (([driver _vehicle, gunner _vehicle, commander _vehicle] find _unit) + 1);\r\n\r\n        if (_unit getVariable [QEGVAR(captives,isHandcuffed), false]) then {\r\n            _icon = QPATHTOEF(captives,UI\\handcuff_ca.paa);\r\n        };\r\n\r\n        _actions pushBack [\r\n            [\r\n                format [\"%1\", _unit],\r\n                [_unit, true] call EFUNC(common,getName),\r\n                _icon,\r\n                { \r\n                    //statement (Run on hover) - reset the cache so we will insert actions immedietly when hovering over new unit\r\n                    TRACE_2(\"Cleaning Cache\",_target,vehicle _target);\r\n                    [vehicle _target, QEGVAR(interact_menu,ATCache_ACE_SelfActions)] call EFUNC(common,eraseCache);\r\n                },\r\n                {true},\r\n                {\r\n                    if (EGVAR(interact_menu,selectedTarget) isEqualTo _target) then {\r\n                        _this call FUNC(addPassengerActions)\r\n                    } else {\r\n                        [] //not selected, don't waste time on actions\r\n                    };\r\n                },\r\n                [_unit],\r\n                {[0, 0, 0]},\r\n                2,\r\n                [false,false,false,true,false] //add run on hover (4th bit true)\r\n                ] call EFUNC(interact_menu,createAction),\r\n                [],\r\n                _unit\r\n            ];\r\n    };\r\n    false\r\n} count crew _vehicle;\r\n\r\n_actions\r\n"},{"name":"ace_interaction_fnc_canBecomeLeader","file":"interaction/functions/fnc_canBecomeLeader.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Test if can Become Leader of group.\r\n *\r\n * Arguments:\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to become leader of group <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_interaction_fnc_canBecomeLeader\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\ncount units group _unit > 1 && {leader group _unit != _unit}\r\n"},{"name":"ace_interaction_fnc_canInteractWithCivilian","file":"interaction/functions/fnc_canInteractWithCivilian.sqf","text":"/*\r\n * Author: commy2\r\n * Checks if the unit can interact with civilian\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n * 2: Target has to be on the civilian side (default: true) <BOOL>\r\n *\r\n * Return Value:\r\n * Able to interact with civilian <BOOL>\r\n *\r\n * Example:\r\n * [target] call ace_interaction_fnc_canInteractWithCivilian\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", [\"_isCivilian\", true]];\r\nalive _target && [side _target != side _unit, side group _target == civilian] select _isCivilian // return\r\n"},{"name":"ace_interaction_fnc_canJoinGroup","file":"interaction/functions/fnc_canJoinGroup.sqf","text":"/*\r\n * Author: commy2\r\n * Checks if the unit can join a group\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to join a group <BOOL>\r\n *\r\n * Example:\r\n * [player, target] call ace_interaction_fnc_canJoinGroup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nalive _target\r\n&& {!(_target getVariable [\"ACE_isUnconscious\", false])}\r\n&& {side group _unit == side group _target}\r\n&& {group _unit != group _target} // return\r\n"},{"name":"ace_interaction_fnc_canJoinTeam","file":"interaction/functions/fnc_canJoinTeam.sqf","text":"/*\r\n * Author: commy2\r\n * Checks if the player can join a team\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to join a team <BOOL>\r\n *\r\n * Example:\r\n * [player, target] call ace_interaction_fnc_canJoinTeam\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_2(_unit,_target);\r\n\r\nalive _target\r\n&& {!(_target getVariable [\"ACE_isUnconscious\", false])}\r\n&& {!([_target] call EFUNC(common,isPlayer))}\r\n&& {_target in units group _unit}\r\n"},{"name":"ace_interaction_fnc_canPardon","file":"interaction/functions/fnc_canPardon.sqf","text":"/*\r\n * Author: commy2\r\n * Checks if the unit can pardon the target.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Unit can pardon target <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\nalive _target\r\n&& {rating _target < -2000}\r\n&& {side group _unit == side group _target}\r\n"},{"name":"ace_interaction_fnc_canPassMagazine","file":"interaction/functions/fnc_canPassMagazine.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Checks if unit has a spare magazine for the specified weapon.\r\n *\r\n * Arguments:\r\n * 0: Unit that passes the magazine <OBJECT>\r\n * 1: Unit to pass the magazine to <OBJECT>\r\n * 2: Weapon classname <STRING>\r\n *\r\n * Return Value:\r\n * Unit can pass magazine <BOOL>\r\n *\r\n * Example:\r\n * [_player, _target, \"arifle_MX_F\"] call ace_interaction_fnc_canPassMagazine\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_player\", \"_target\", \"_weapon\"];\r\n\r\nif (!GVAR(enableMagazinePassing)) exitWith {false};\r\nif (((vehicle _target) != _target) && {(vehicle _target) != (vehicle _player)}) exitWith {false};\r\n\r\nprivate _compatibleMags = getArray (configfile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\r\n{\r\n    _x params [\"_className\", \"\", \"_loaded\"];\r\n    if ((_className in _compatibleMags) && {!_loaded} && {_target canAdd _className}) exitWith {true};\r\n    false\r\n} foreach (magazinesAmmoFull _player);\r\n"},{"name":"ace_interaction_fnc_canPush","file":"interaction/functions/fnc_canPush.sqf","text":"/*\r\n * Author: Jonpas\r\n * Checks if the boat can be pushed.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Push <BOOL>\r\n *\r\n * Example:\r\n * [target] call ace_interaction_fnc_canPush\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\nalive _target &&\r\n{getMass _target <= 2600 || getNumber (configFile >> \"CfgVehicles\" >> typeOf _target >> QGVAR(canPush)) == 1} &&\r\n{vectorMagnitude velocity _target < 3}\r\n"},{"name":"ace_interaction_fnc_canTapShoulder","file":"interaction/functions/fnc_canTapShoulder.sqf","text":"/*\r\n * Author: commy2\r\n * Checks if the player can tap a shoulder.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Able to tap a shoulder <BOOL>\r\n *\r\n * Example:\r\n * [player, target] call ace_interaction_fnc_canTapShoulder\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\n_target isKindOf \"CAManBase\" &&\r\n{alive _target} &&\r\n{_unit distance _target < 4} &&\r\n{!(_target getVariable [\"ACE_isUnconscious\", false])} // return\r\n"},{"name":"ace_interaction_fnc_doBecomeLeader","file":"interaction/functions/fnc_doBecomeLeader.sqf","text":" /*\r\n * Author: PabstMirror\r\n * Become Leader of group.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_interaction_fnc_doBecomeLeader\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n[QEGVAR(common,selectLeader), [group _unit, _unit], units group _unit] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_interaction_fnc_getDoor","file":"interaction/functions/fnc_getDoor.sqf","text":"/*\r\n * Author: commy2\r\n * Find door.\r\n *\r\n * Arguments:\r\n * 0: Distance <NUMBER>\r\n *\r\n * Return Value:\r\n * House objects and door <ARRAY>\r\n * 0: House <OBJECT>\r\n * 1: Door Name <STRING>\r\n *\r\n * Example:\r\n * [player, target] call ace_interaction_fnc_getDoor\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_distance\"];\r\n\r\nprivate [\"_position0\", \"_position1\", \"_intersections\", \"_house\", \"_door\"];\r\n\r\n_position0 = positionCameraToWorld [0, 0, 0];\r\n_position1 = positionCameraToWorld [0, 0, _distance];\r\n\r\n_intersections = lineIntersectsSurfaces [AGLToASL _position0, AGLToASL _position1, cameraOn, objNull, true, 1, \"GEOM\"];\r\n\r\nif (_intersections isEqualTo []) exitWith {[objNull, \"\"]};\r\n\r\n_house = _intersections select 0 select 2;\r\n\r\n// shithouse is bugged\r\nif (typeOf _house == \"\") exitWith {[objNull, \"\"]};\r\n\r\n_intersections = [_house, \"GEOM\"] intersect [_position0, _position1];\r\n\r\n_door = _intersections select 0 select 0;\r\n\r\nif (isNil \"_door\") exitWith {[_house, \"\"]};\r\n\r\n[_house, _door]\r\n"},{"name":"ace_interaction_fnc_getDoorAnimations","file":"interaction/functions/fnc_getDoorAnimations.sqf","text":"/*\r\n * Author: commy2\r\n * Get door animations. @todo rewrite for better custom building support\r\n *\r\n * Arguments:\r\n * 0: House <OBJECT>\r\n * 1: Door <STRING>\r\n *\r\n * Return Value:\r\n * Animation and Locked variable <ARRAY>\r\n * 0: Animation <STRING>\r\n * 1: Locked variable <STRING>\r\n *\r\n * Example:\r\n * array = [target, \"door\"] call ace_interaction_fnc_getDoorAnimations\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_house\", \"_door\"];\r\n\r\nprivate [\"_index\", \"_animations\", \"_lockedVariable\"];\r\n\r\n_index = [\r\n    \"door_1\",\r\n    \"door_2\",\r\n    \"door_3\",\r\n    \"door_4\",\r\n    \"door_5\",\r\n    \"door_6\",\r\n    \"door_7\",\r\n    \"door_8\",\r\n    \"door_9\",\r\n    \"door_10\",\r\n    \"door_11\",\r\n    \"door_12\",\r\n    \"door_13\",\r\n    \"Door_14\",\r\n    \"door_15\",\r\n    \"door_16\",\r\n    \"door_17\",\r\n    \"door_18\",\r\n    \"door_19\",\r\n    \"door_20\",\r\n    \"door_21\",\r\n    \"door_22\",\r\n\r\n    \"hatch_1\",\r\n    \"hatch_2\",\r\n    \"hatch_3\",\r\n    \"hatch_4\",\r\n    \"hatch_5\",\r\n    \"hatch_6\"\r\n] find toLower _door;\r\n\r\nif (_index == -1) exitWith {[[],\"\"]};\r\n\r\n_animations = [\r\n    [\"Door_1_rot\",  \"Door_Handle_1_rot_1\",  \"Door_Handle_1_rot_2\"],\r\n    [\"Door_2_rot\",  \"Door_Handle_2_rot_1\",  \"Door_Handle_2_rot_2\"],\r\n    [\"Door_3_rot\",  \"Door_Handle_3_rot_1\",  \"Door_Handle_3_rot_2\"],\r\n    [\"Door_4_rot\",  \"Door_Handle_4_rot_1\",  \"Door_Handle_4_rot_2\"],\r\n    [\"Door_5_rot\",  \"Door_Handle_5_rot_1\",  \"Door_Handle_5_rot_2\"],\r\n    [\"Door_6_rot\",  \"Door_Handle_6_rot_1\",  \"Door_Handle_6_rot_2\"],\r\n    [\"Door_7_rot\",  \"Door_Handle_7_rot_1\",  \"Door_Handle_7_rot_2\"],\r\n    [\"Door_8_rot\",  \"Door_Handle_8_rot_1\",  \"Door_Handle_8_rot_2\"],\r\n    [\"Door_9_rot\",  \"Door_Handle_9_rot_1\",  \"Door_Handle_9_rot_2\"],\r\n    [\"Door_10_rot\", \"Door_Handle_10_rot_1\", \"Door_Handle_10_rot_2\"],\r\n    [\"Door_11_rot\", \"Door_Handle_11_rot_1\", \"Door_Handle_11_rot_2\"],\r\n    [\"Door_12_rot\", \"Door_Handle_12_rot_1\", \"Door_Handle_12_rot_2\"],\r\n    [\"Door_13_rot\", \"Door_Handle_13_rot_1\", \"Door_Handle_13_rot_2\"],\r\n    [\"Door_14_rot\", \"Door_Handle_14_rot_1\", \"Door_Handle_14_rot_2\"],\r\n    [\"Door_15_rot\", \"Door_Handle_15_rot_1\", \"Door_Handle_15_rot_2\"],\r\n    [\"Door_16_rot\", \"Door_Handle_16_rot_1\", \"Door_Handle_16_rot_2\"],\r\n    [\"Door_17_rot\", \"Door_Handle_17_rot_1\", \"Door_Handle_17_rot_2\"],\r\n    [\"Door_18_rot\", \"Door_Handle_18_rot_1\", \"Door_Handle_18_rot_2\"],\r\n    [\"Door_19_rot\", \"Door_Handle_19_rot_1\", \"Door_Handle_19_rot_2\"],\r\n    [\"Door_20_rot\", \"Door_Handle_20_rot_1\", \"Door_Handle_20_rot_2\"],\r\n    [\"Door_21_rot\", \"Door_Handle_21_rot_1\", \"Door_Handle_21_rot_2\"],\r\n    [\"Door_22_rot\", \"Door_Handle_22_rot_1\", \"Door_Handle_22_rot_2\"],\r\n\r\n    [\"Hatch_1_rot\"],\r\n    [\"Hatch_2_rot\"],\r\n    [\"Hatch_3_rot\"],\r\n    [\"Hatch_4_rot\"],\r\n    [\"Hatch_5_rot\"],\r\n    [\"Hatch_6_rot\"]\r\n] select _index;\r\n\r\n_lockedVariable = [\r\n    [\"BIS_Disabled_Door_1\",  \"Door_Handle_1_rot_1\",  \"Door_Locked_1_rot\"],\r\n    [\"BIS_Disabled_Door_2\",  \"Door_Handle_2_rot_1\",  \"Door_Locked_2_rot\"],\r\n    [\"BIS_Disabled_Door_3\",  \"Door_Handle_3_rot_1\",  \"Door_Locked_3_rot\"],\r\n    [\"BIS_Disabled_Door_4\",  \"Door_Handle_4_rot_1\",  \"Door_Locked_4_rot\"],\r\n    [\"BIS_Disabled_Door_5\",  \"Door_Handle_5_rot_1\",  \"Door_Locked_5_rot\"],\r\n    [\"BIS_Disabled_Door_6\",  \"Door_Handle_6_rot_1\",  \"Door_Locked_6_rot\"],\r\n    [\"BIS_Disabled_Door_7\",  \"Door_Handle_7_rot_1\",  \"Door_Locked_7_rot\"],\r\n    [\"BIS_Disabled_Door_8\",  \"Door_Handle_8_rot_1\",  \"Door_Locked_8_rot\"],\r\n    [\"BIS_Disabled_Door_9\",  \"Door_Handle_9_rot_1\",  \"Door_Locked_9_rot\"],\r\n    [\"BIS_Disabled_Door_10\", \"Door_Handle_10_rot_1\", \"Door_Locked_10_rot\"],\r\n    [\"BIS_Disabled_Door_11\", \"Door_Handle_11_rot_1\", \"Door_Locked_11_rot\"],\r\n    [\"BIS_Disabled_Door_12\", \"Door_Handle_12_rot_1\", \"Door_Locked_12_rot\"],\r\n    [\"BIS_Disabled_Door_13\", \"Door_Handle_13_rot_1\", \"Door_Locked_13_rot\"],\r\n    [\"BIS_Disabled_Door_14\", \"Door_Handle_14_rot_1\", \"Door_Locked_14_rot\"],\r\n    [\"BIS_Disabled_Door_15\", \"Door_Handle_15_rot_1\", \"Door_Locked_15_rot\"],\r\n    [\"BIS_Disabled_Door_16\", \"Door_Handle_16_rot_1\", \"Door_Locked_16_rot\"],\r\n    [\"BIS_Disabled_Door_17\", \"Door_Handle_17_rot_1\", \"Door_Locked_17_rot\"],\r\n    [\"BIS_Disabled_Door_18\", \"Door_Handle_18_rot_1\", \"Door_Locked_18_rot\"],\r\n    [\"BIS_Disabled_Door_19\", \"Door_Handle_19_rot_1\", \"Door_Locked_19_rot\"],\r\n    [\"BIS_Disabled_Door_20\", \"Door_Handle_20_rot_1\", \"Door_Locked_20_rot\"],\r\n    [\"BIS_Disabled_Door_21\", \"Door_Handle_21_rot_1\", \"Door_Locked_21_rot\"],\r\n    [\"BIS_Disabled_Door_22\", \"Door_Handle_22_rot_1\", \"Door_Locked_22_rot\"],\r\n\r\n    [\"\", \"\"],\r\n    [\"\", \"\"],\r\n    [\"\", \"\"],\r\n    [\"\", \"\"],\r\n    [\"\", \"\"],\r\n    [\"\", \"\"]\r\n] select _index;\r\n\r\n[_animations, _lockedVariable]\r\n"},{"name":"ace_interaction_fnc_getDown","file":"interaction/functions/fnc_getDown.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2\r\n * Forces a civilian to the ground with a chance of failure.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [civillian] call ace_interaction_fnc_getDown\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define SEND_RADIUS 10\r\n\r\nparams [\"_unit\", \"_target\"];\r\n\r\n_unit playActionNow \"GestureGo\";\r\n\r\nprivate \"_chance\";\r\n_chance = [0.5, 0.8] select (count weapons _unit > 0);\r\n\r\n{\r\n    if (count weapons _x == 0 && {random 1 < _chance}) then {\r\n        [QGVAR(getDown), [_x], [_x]] call CBA_fnc_targetEvent;\r\n    };\r\n    false\r\n} count (_target nearEntities [\"Civilian\", SEND_RADIUS]);\r\n"},{"name":"ace_interaction_fnc_getVehiclePos","file":"interaction/functions/fnc_getVehiclePos.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Return a suitable position for the action point for the given target vehicle\r\n *\r\n * Arguments:\r\n * None (uses local variable _target)\r\n *\r\n * Return value:\r\n * Children actions <ARRAY>\r\n *\r\n * Example:\r\n * call ace_interaction_fnc_getVehiclePos\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n// IGNORE_PRIVATE_WARNING(_target);\r\n\r\nprivate _bb = boundingBoxReal _target;\r\n(_bb select 0) params [\"_bbX\", \"_bbY\", \"_bbZ\"];\r\n\r\n//Helicopter's rotors distort the bounding box, assume a max of 3 meters width for the body\r\nif (_target isKindOf \"Helicopter\") then {_bbX = (_bbx min 3) max -3;};\r\n\r\nprivate _relPos = _target worldToModelVisual ASLToAGL EGVAR(interact_menu,cameraPosASL);\r\n#ifdef DEBUG_MODE_FULL\r\n    _relPos = _target worldToModelVisual ASLToAGL eyePos ACE_player;\r\n#endif\r\n_relPos params [\"_dx\", \"_dy\", \"_dz\"];\r\n\r\nprivate _ndx = (abs _dx) / ((abs (_bbx)) - 1);\r\nprivate _ndy = (abs _dy) / ((abs (_bbY)) - 1);\r\nprivate _ndz = (abs _dz) / ((abs (_bbZ)) - 1);\r\n\r\nprivate \"_pos\";\r\nif (_ndx > _ndy) then {\r\n    if (_ndx > _ndz) then {\r\n        // _ndx is greater, will colide with x plane first\r\n        _pos = _relPos vectorMultiply ((1 / _ndx) min 0.8);\r\n    } else {\r\n        // _ndz is greater, will colide with z plane first\r\n        _pos = _relPos vectorMultiply ((1 / _ndz) min 0.8);\r\n    };\r\n} else {\r\n    if (_ndy > _ndz) then {\r\n        // _ndy is greater, will colide with y plane first\r\n        _pos = _relPos vectorMultiply ((1 / _ndy) min 0.8);\r\n    } else {\r\n        // _ndz is greater, will colide with z plane first\r\n        _pos = _relPos vectorMultiply ((1 / _ndz) min 0.8);\r\n    };\r\n};\r\n//Set max height at player's eye level (prevent very high interactin point on choppers)\r\n_pos set [2, (_pos select 2) min _dz];\r\nTRACE_4(\"\",_bb,_bbX,_relPos, _pos);\r\n_pos\r\n\r\n///////////////////\r\n// The code belows works very well for cursor mode, but not at all in normal mode\r\n// maybe it could be enabled by default only for that mode\r\n/*\r\nif (cursorObject isEqualTo _target) exitWith {\r\n    private _dest = EGVAR(interact_menu,cameraPosASL) vectorAdd (EGVAR(interact_menu,cameraDir) vectorMultiply 50);\r\n    private _origin = EGVAR(interact_menu,cameraPosASL);\r\n    //private _origin = EGVAR(interact_menu,cameraPosASL) vectorAdd [0, 0, -0.35] vectorDiff (EGVAR(interact_menu,cameraDir) vectorMultiply 1.5);\r\n    //private _dest = AGLtoASL (_target modelToWorldVisual [0,0,0]);\r\n    private _results = lineIntersectsSurfaces [_origin, _dest, ACE_player, objNull, true, 5];\r\n    private _finalPos = [0,0,0];\r\n    {\r\n        _x params [\"_pos\", \"\", \"_obj\"];\r\n        TRACE_3(\"\",_forEachIndex,_obj,_target);\r\n        if (_obj isEqualTo _target) exitWith {\r\n            _finalPos = _target worldToModelVisual ASLtoAGL (_pos vectorAdd (EGVAR(interact_menu,cameraDir) vectorMultiply 1.0));\r\n        };\r\n    } forEach _results;\r\n    _finalPos\r\n};\r\n[0,0,0]\r\n*/\r\n///////////////////\r\n\r\n"},{"name":"ace_interaction_fnc_getWeaponPos","file":"interaction/functions/fnc_getWeaponPos.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Return a suitable position for the action point for the current weapon\r\n *\r\n * Arguments:\r\n * None (uses local variable _target)\r\n *\r\n * Return Value:\r\n * Children actions <ARRAY>\r\n *\r\n * Example:\r\n * call ace_interaction_fnc_getWeaponPos\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n// IGNORE_PRIVATE_WARNING(_target);\r\n\r\nprivate [\"_weaponDir\", \"_refSystem\"];\r\n\r\n_weaponDir = _target weaponDirection currentWeapon _target;\r\n_refSystem = _weaponDir call EFUNC(common,createOrthonormalReference);\r\n\r\n(_target selectionPosition \"righthand\") vectorAdd ((_refSystem select 2) vectorMultiply 0.1);\r\n"},{"name":"ace_interaction_fnc_handleScrollWheel","file":"interaction/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: commy2\r\n * Handles incremental door opening\r\n *\r\n * Arguments:\r\n * 0: scroll amount <NUMBER>\r\n *\r\n * Return Value:\r\n * handled <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_scroll\"];\r\n\r\nif !(GVAR(isOpeningDoor)) exitWith {false};\r\n\r\nGVAR(doorTargetPhase) = ((GVAR(doorTargetPhase) + (_scroll / (1.2 * 12))) max 0) min 1;\r\n\r\nGVAR(usedScrollWheel) = true;\r\n\r\ntrue\r\n"},{"name":"ace_interaction_fnc_hideMouseHint","file":"interaction/functions/fnc_hideMouseHint.sqf","text":"/*\r\n * Author: Garth de Wet (LH)\r\n * Hides the interaction helper text with the mouse buttons at the bottom middle of the screen\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_interaction_fnc_hideMouseHint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (isNull (uiNamespace getVariable [\"ACE_Helper_Display\", objNull])) exitWith {};\r\n\r\n(QGVAR(InteractionHelper) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\n\r\n// Disable action menu, showHud also disables all scripted UI (such as drawIcon3D)\r\ninGameUISetEventHandler [\"PrevAction\", \"false\"];\r\ninGameUISetEventHandler [\"NextAction\", \"false\"];\r\ninGameUISetEventHandler [\"Action\", \"false\"];\r\n"},{"name":"ace_interaction_fnc_joinTeam","file":"interaction/functions/fnc_joinTeam.sqf","text":"/*\r\n * Author: commy2\r\n * Unit joins a fire team.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Team <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"YELLOW\"] call ace_interaction_fnc_joinTeam\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_team\"];\r\n\r\n[\"CBA_teamColorChanged\", [_unit, _team]] call CBA_fnc_globalEvent;\r\n\r\n// display message\r\nif (_unit == ACE_player) then {\r\n    private \"_message\";\r\n\r\n    if (_team == \"MAIN\") then {\r\n        _message = localize LSTRING(LeftTeam);\r\n    } else {\r\n        _team = localize format [LSTRING(Team%1), _team];\r\n        _message = format [localize LSTRING(JoinedTeam), _team];\r\n    };\r\n\r\n    [_message] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_interaction_fnc_moduleInteraction","file":"interaction/functions/fnc_moduleInteraction.sqf","text":"/*\r\n * Author: bux578\r\n * Initializes the Interaction module.\r\n *\r\n * Arguments:\r\n * 0: Logic <NUMBER>\r\n * 1: Units <ARRAY>\r\n * 2: Activation State <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic, ???, activationState] call ace_interaction_fnc_moduleInteraction\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(EnableTeamManagement), \"EnableTeamManagement\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO(\"Interaction Module Initialized.\");\r\n"},{"name":"ace_interaction_fnc_openDoor","file":"interaction/functions/fnc_openDoor.sqf","text":"/*\r\n * Author: commy2\r\n * Open door.\r\n *\r\n * Arguments:\r\n * 0: House <OBJECT>\r\n * 1: Door <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [house, \"door\"] call ace_interaction_fnc_openDoor\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_info\";\r\n_info = [MACRO_DOOR_REACH_DISTANCE] call FUNC(getDoor);\r\n\r\n_info params [\"_house\", \"_door\"];\r\n\r\nif (isNull _house) exitWith {};\r\n\r\nprivate \"_getDoorAnimations\";\r\n_getDoorAnimations = [_house, _door] call FUNC(getDoorAnimations);\r\n\r\n_getDoorAnimations params [\"_animations\", \"_lockedVariable\"];\r\n\r\nif (_animations isEqualTo []) exitWith {};\r\n\r\nif (_house animationPhase (_animations select 0) <= 0 && {_house getVariable [_lockedVariable select 0, 0] == 1}) exitWith {\r\n    _lockedVariable set [0, _house];\r\n    _lockedVariable call BIS_fnc_LockedDoorOpen;\r\n};\r\n\r\nplaySound \"ACE_Sound_Click\"; // @todo replace with smth. more fitting\r\n\r\nGVAR(doorTargetPhase) = _house animationPhase (_animations select 0);\r\nGVAR(isOpeningDoor) = true;\r\nGVAR(usedScrollWheel) = false;\r\n\r\n[{\r\n    (_this select 0) params [\"_house\", \"_animations\", \"_position\", \"_time\", \"_frame\"];\r\n\r\n    if !(GVAR(isOpeningDoor)) exitWith {\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n        // didn't use incremental opening. Just do animation normally.\r\n        if !(GVAR(usedScrollWheel)) then {\r\n            private \"_phase\";\r\n            _phase = [0, 1] select (_house animationPhase (_animations select 0) < 0.5);\r\n\r\n            {_house animate [_x, _phase]; false} count _animations;\r\n        };\r\n    };\r\n\r\n    // check if player moved too far away\r\n    if (getPosASL ACE_player distance _position > 1) exitWith {\r\n        GVAR(isOpeningDoor) = false;\r\n    };\r\n\r\n    // this allows for holding the door in it's current state.\r\n    if (CBA_missionTime > _time && {diag_frameno > _frame}) then {\r\n        GVAR(usedScrollWheel) = true;\r\n    };\r\n\r\n    // do incremental door opening\r\n    {_house animate [_x, GVAR(doorTargetPhase)]; false} count _animations;\r\n}, 0.1, [_house, _animations, getPosASL ACE_player, CBA_missionTime + 0.2, diag_frameno + 2]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_interaction_fnc_pardon","file":"interaction/functions/fnc_pardon.sqf","text":"/*\r\n * Author: commy2\r\n * Unit pardons target unit.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"_target\"];\r\n\r\n[QGVAR(pardon), [_target], [_target]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_interaction_fnc_passMagazine","file":"interaction/functions/fnc_passMagazine.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Pass spare magazine for the specified weapon.\r\n *\r\n * Arguments:\r\n * 0: Unit that passes the magazine <OBJECT>\r\n * 1: Unit to pass the magazine to <OBJECT>\r\n * 2: Weapon classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_player, _target, \"arifle_MX_F\"] call ace_interaction_fnc_magToPassazine\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nparams [\"_player\", \"_target\", \"_weapon\"];\r\nprivate [\"_compatibleMags\", \"_filteredMags\", \"_magToPass\", \"_magToPassIndex\", \"_playerName\", \"_magToPassDisplayName\"];\r\n\r\n_compatibleMags = getArray (configfile >> \"CfgWeapons\" >> _weapon >> \"magazines\");\r\n_filteredMags = magazinesAmmoFull _player select {(_x select 0) in _compatibleMags && {!(_x select 2)}};\r\n\r\n//select magazine with most ammo\r\n_magToPass = _filteredMags select 0;\r\n_magToPassIndex = 0;\r\n{\r\n    _x params [\"_className\", \"_ammoCount\"];\r\n    if ((_ammoCount > (_magToPass select 1)) && (_target canAdd _className)) then {\r\n        _magToPass = _x;\r\n        _magToPassIndex = _forEachIndex;\r\n    };\r\n} foreach _filteredMags;\r\n\r\n//remove all magazines and add them again, except the one to be passed\r\n//needed because of missing commands, see http://feedback.arma3.com/view.php?id=12782\r\n_magToPass params [\"_magToPassClassName\", \"_magToPassAmmoCount\"];\r\n_player removeMagazines _magToPassClassName;\r\n{\r\n    _x params [\"_className\", \"_ammoCount\"];\r\n    if ((_className == _magToPassClassName) && (_forEachIndex != _magToPassIndex)) then {\r\n        _player addMagazine [_className, _ammoCount];\r\n    };\r\n} foreach _filteredMags;\r\n\r\n_player playActionNow \"PutDown\";\r\n\r\n_target addMagazine [_magToPassClassName, _magToPassAmmoCount];\r\n\r\n_playerName = [_player] call EFUNC(common,getName);\r\n_magToPassDisplayName = getText (configFile >> \"CfgMagazines\" >> _magToPassClassName >> \"displayName\");\r\n[QEGVAR(common,displayTextStructured), [[LSTRING(PassMagazineHint), _playerName, _magToPassDisplayName], 1.5, _target], [_target]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_interaction_fnc_push","file":"interaction/functions/fnc_push.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Pushes a boat away from the player\r\n *\r\n * Arguments:\r\n * 0: Boat <OBJECT>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [Boats, Jose] call ace_interaction_fnc_push\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_boat\", \"_unit\"];\r\n\r\nprivate _newVelocity = vectorDir _unit;\r\n_newVelocity set [2, 0.25];\r\n_newVelocity = _newVelocity vectorMultiply 2;\r\n\r\n[QEGVAR(common,setVelocity), [_boat, _newVelocity], [_boat]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_interaction_fnc_sendAway","file":"interaction/functions/fnc_sendAway.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2\r\n * Sends a near civilian crowd away with a chance of failure.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [civillian] call ace_interaction_fnc_sendAway\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define SEND_DISTANCE 50\r\n#define SEND_RADIUS 10\r\n\r\nparams [\"_unit\"];\r\n\r\n_unit playActionNow \"GestureGo\";\r\n\r\nprivate \"_chance\";\r\n_chance = [0.5, 0.8] select (count weapons _unit > 0);\r\n\r\n{\r\n    if (count weapons _x == 0 && {random 1 < _chance}) then {\r\n        private \"_position\";\r\n        _position = getPosASL _unit vectorAdd (eyeDirection _unit vectorMultiply SEND_DISTANCE);\r\n        _position set [2, 0];\r\n\r\n        [QGVAR(sendAway), [_x, _position], [_x]] call CBA_fnc_targetEvent;\r\n    };\r\n    false\r\n} count (_unit nearEntities [\"Civilian\", SEND_RADIUS]);\r\n"},{"name":"ace_interaction_fnc_showMouseHint","file":"interaction/functions/fnc_showMouseHint.sqf","text":"/*\r\n * Author: Garth de Wet (LH)\r\n * Shows the interaction helper text with the mouse buttons at the bottom middle of the screen\r\n *\r\n * Arguments:\r\n * 0: Left Click Text <STRING>\r\n * 1: Right Click Text <STRING>\r\n * 2: Scroll Text <STRING> (Optional)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"Place Explosive\", \"Cancel\"] call ace_interaction_fnc_showMouseHint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define GUI_GRID_W  (0.025)\r\n#define GUI_GRID_H  (0.04)\r\n\r\nparams [\"_leftClick\", \"_rightClick\", [\"_scroll\", \"\"]];\r\n\r\n(QGVAR(InteractionHelper) call BIS_fnc_rscLayer) cutRsc [QGVAR(InteractionHelper), \"PLAIN\", 0.5, false];\r\n\r\ndisableSerialization;\r\n\r\nprivate \"_display\";\r\n_display = uiNamespace getVariable [\"ACE_Helper_Display\", objNull];\r\n\r\nif (isNull _display) exitWith {};\r\n\r\n(_display displayCtrl 1000) ctrlSetText _leftClick;\r\n(_display displayCtrl 1001) ctrlSetText _rightClick;\r\n\r\n(_display displayCtrl 1000) ctrlShow (_leftClick != \"\");\r\n(_display displayCtrl 1200) ctrlShow (_leftClick != \"\");\r\n(_display displayCtrl 1001) ctrlShow (_rightClick != \"\");\r\n(_display displayCtrl 1201) ctrlShow (_rightClick != \"\");\r\n\r\nif (_scroll == \"\") exitWith {\r\n    (_display displayCtrl 1002) ctrlShow false;\r\n    (_display displayCtrl 1202) ctrlShow false;\r\n    (_display displayCtrl 1001) ctrlSetPosition [21 * GUI_GRID_W, 18 * GUI_GRID_H, 24 * GUI_GRID_W, 1.5 * GUI_GRID_H];\r\n    (_display displayCtrl 1201) ctrlSetPosition [20 * GUI_GRID_W, 18.5 * GUI_GRID_H, 1.5 * GUI_GRID_W, 1 * GUI_GRID_H];\r\n    (_display displayCtrl 1001) ctrlCommit 0;\r\n    (_display displayCtrl 1201) ctrlCommit 0;\r\n};\r\n\r\n(_display displayCtrl 1002) ctrlSetText _scroll;\r\n\r\n// Enable action menu\r\ninGameUISetEventHandler [\"PrevAction\", \"true\"];\r\ninGameUISetEventHandler [\"NextAction\", \"true\"];\r\ninGameUISetEventHandler [\"Action\", \"true\"];\r\n"},{"name":"ace_interaction_fnc_switchLamp","file":"interaction/functions/fnc_switchLamp.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Turn on/off lamp\r\n *\r\n * Arguments:\r\n * 0: Lamp <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * lamp call ace_interaction_fnc_switchLamp\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define DISABLED_LAMP_DMG 0.95\r\n\r\nparams [\"_lamp\"];\r\n\r\n_isOn = _lamp getVariable [\"ACE_lampOn\", true];\r\nprivate _reflectors = \"true\" configClasses (configfile >> \"CfgVehicles\" >> (typeof _lamp) >> \"Reflectors\");\r\nprivate _hitPointsDamage = [];\r\n{\r\n    private _hitPoint = getText (_x >> \"hitpoint\");\r\n    _hitPointsDamage pushback [_hitPoint, _lamp getHit _hitPoint];\r\n    nil\r\n} count _reflectors;\r\n\r\n//if lamp is on turn it off\r\nprivate _eventName = [QGVAR(setLampOn), QGVAR(setLampOff)] select _isOn;\r\n[_eventName, [_lamp, _hitPointsDamage, DISABLED_LAMP_DMG], [_lamp]] call CBA_fnc_targetEvent;\r\n\r\n_lamp setVariable [\"ACE_lampOn\", !_isOn, true];\r\n"},{"name":"ace_interaction_fnc_tapShoulder","file":"interaction/functions/fnc_tapShoulder.sqf","text":"/*\r\n * Author: commy2\r\n * Taps a shoulder\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n * 2: Shoulder which was tapped [0: left, 1: right] <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, target, 0] call ace_interaction_fnc_tapShoulder\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", \"_shoulderNum\"];\r\n\r\nif (_unit == ACE_player) then {\r\n    addCamShake [4, 0.5, 5];\r\n};\r\n\r\n_unit playActionNow \"PutDown\";\r\n\r\n[QGVAR(tapShoulder), [_target, _shoulderNum], [_target]] call CBA_fnc_targetEvent;\r\n"}],"inventory":[{"name":"ace_inventory_fnc_addCustomFilter","file":"inventory/functions/fnc_addCustomFilter.sqf","text":"/*\r\n * Author: commy2\r\n * Adds a custom filter list to the inventory display.\r\n * Functions are here as strings, because list boxes can only store numbers and strings.\r\n *\r\n * Arguments:\r\n * 0: Localized filter display name <STRING>\r\n * 1: Filter function name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_filterName\", \"ERROR: No Name\", [\"\"]], [\"_fncName\", \"\", [\"\"]]];\r\n\r\nGVAR(customFilters) pushBack [_filterName, _fncName];\r\n"},{"name":"ace_inventory_fnc_currentItemListBox","file":"inventory/functions/fnc_currentItemListBox.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the current item list box of given inventory display.\r\n * These can be Ground, Soldier, Uniform, Backpack or Vest.\r\n * Can also be Weapon since 1.52, but that apparently uses one of the above.\r\n *\r\n * Arguments:\r\n * 0: Inventory display <DISPLAY>\r\n *\r\n * Return Value:\r\n * Currently selected item list box <CONTROL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\"];\r\n\r\nscopeName \"main\";\r\n\r\n{\r\n    private _control = _display displayCtrl _x;\r\n\r\n    if (ctrlShown _control) then {\r\n        _control breakOut \"main\";\r\n    };\r\n    false\r\n} count [IDC_ITEMLIST_GROUND, IDC_ITEMLIST_SOLDIER, IDC_ITEMLIST_UNIFORM, IDC_ITEMLIST_VEST, IDC_ITEMLIST_BACKPACK];\r\n\r\n-1\r\n"},{"name":"ace_inventory_fnc_filterBackpacks","file":"inventory/functions/fnc_filterBackpacks.sqf","text":"/*\r\n * Author: commy2\r\n * Filter condition for the Backpacks filter list\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\"];\r\n\r\ngetNumber (_config >> \"isBackpack\") == 1\r\n"},{"name":"ace_inventory_fnc_filterGrenades","file":"inventory/functions/fnc_filterGrenades.sqf","text":"/*\r\n * Author: commy2\r\n * Filter condition for the Grenades filter list\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\"];\r\n\r\ntoLower configName _config in GVAR(Grenades_ItemList)\r\n"},{"name":"ace_inventory_fnc_filterHeadgear","file":"inventory/functions/fnc_filterHeadgear.sqf","text":"/*\r\n * Author: commy2\r\n * Filter condition for the Headgear filter list\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\"];\r\n\r\ngetNumber (_config >> \"ItemInfo\" >> \"type\") in [TYPE_HEADGEAR, TYPE_HMD] || {isClass (configFile >> \"CfgGlasses\" >> configName _config)}\r\n"},{"name":"ace_inventory_fnc_filterItems","file":"inventory/functions/fnc_filterItems.sqf","text":"/*\r\n * Author: commy2\r\n * Remove uniforms, vests and backpacks from Items filter.\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\"];\r\n\r\n!(getNumber (_config >> \"ItemInfo\" >> \"type\") in [TYPE_UNIFORM, TYPE_VESTS, TYPE_HEADGEAR]) && {!(_this call FUNC(filterBackpacks))}\r\n"},{"name":"ace_inventory_fnc_filterMagazines","file":"inventory/functions/fnc_filterMagazines.sqf","text":"/*\r\n * Author: commy2\r\n * Remove backpacks and grenades from Magazines filter.\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n!(_this call FUNC(filterBackpacks)) && {!(_this call FUNC(filterGrenades))}\r\n"},{"name":"ace_inventory_fnc_filterMedical","file":"inventory/functions/fnc_filterMedical.sqf","text":"/*\r\n * Author: commy2\r\n * Filter condition for the Medical filter list\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\"];\r\n\r\ntoLower configName _config in GVAR(Medical_ItemList)\r\n"},{"name":"ace_inventory_fnc_filterUniforms","file":"inventory/functions/fnc_filterUniforms.sqf","text":"/*\r\n * Author: commy2\r\n * Filter condition for the Uniforms filter list\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\"];\r\n\r\ngetNumber (_config >> \"ItemInfo\" >> \"type\") == TYPE_UNIFORM\r\n"},{"name":"ace_inventory_fnc_filterVests","file":"inventory/functions/fnc_filterVests.sqf","text":"/*\r\n * Author: commy2\r\n * Filter condition for the Vests filter list\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_config\"];\r\n\r\ngetNumber (_config >> \"ItemInfo\" >> \"type\") == TYPE_VEST\r\n"},{"name":"ace_inventory_fnc_filterWeapons","file":"inventory/functions/fnc_filterWeapons.sqf","text":"/*\r\n * Author: commy2\r\n * Remove backpacks from Weapons filter.\r\n *\r\n * Arguments:\r\n * 0: Item config entry <CONFIG>\r\n *\r\n * Return Value:\r\n * Item should appear in this list? <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n!(_this call FUNC(filterBackpacks))\r\n"},{"name":"ace_inventory_fnc_forceItemListUpdate","file":"inventory/functions/fnc_forceItemListUpdate.sqf","text":"/*\r\n * Author: commy2\r\n * Updates item list and removes every entry that does not fit in the currently selected filter list.\r\n *\r\n * Arguments:\r\n * 0: Inventory display <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nparams [\"_display\"];\r\n\r\nprivate _index = GVAR(selectedFilterIndex);\r\nprivate _itemList = _display call FUNC(currentItemListBox);\r\nprivate _filterFunction = missionNamespace getVariable ((_display displayCtrl IDC_FILTERLISTS) lbData _index);\r\n\r\nif (_filterFunction isEqualType {}) then {\r\n    private _i = 0;\r\n\r\n    while {_i < lbSize _itemList} do {\r\n        private _config = GVAR(ItemKeyNamespace) getVariable format [\"%1:%2\", _itemList lbText _i, _itemList lbPicture _i];\r\n\r\n        if (!isNil \"_config\" && {!(_config call _filterFunction)}) then {\r\n            _itemList lbDelete _i;\r\n\r\n            // in case the filter function returns nil. Otherwise could lock up the game.\r\n            _i = _i - 1;\r\n        };\r\n\r\n        _i = _i + 1;\r\n    };\r\n};\r\n"},{"name":"ace_inventory_fnc_inventoryDisplayLoad","file":"inventory/functions/fnc_inventoryDisplayLoad.sqf","text":"/*\r\n * Author: commy2\r\n * Executed every time an inventory display is opened.\r\n *\r\n * Arguments:\r\n * 0: Inventory display <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nparams [\"_display\"];\r\n\r\nprivate _filter = _display displayCtrl IDC_FILTERLISTS;\r\n\r\n// engine defined behaviour is the following:\r\n// lb value, data and text don't matter, only the index.\r\n// the first three indecies are hard coded: 0 - weapons , 1 - magazines, 2 - items\r\n// all of them show backpacks, because BI\r\n// all other indecies show everything, so all we have to do is delete stuff we dont like\r\n_filter ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChanged)}];\r\n\r\n// have to add these a frame later, because this event happens before the engine adds the default filters\r\n[{\r\n    disableSerialization;\r\n    params [\"_filter\"];\r\n\r\n    // remove \"All\", so we can push it to the back later.\r\n    // to keep localization we can keep the lbText (displayed name).\r\n    private _index = lbSize _filter - 1;\r\n    private _nameAll = _filter lbText _index;\r\n    _filter lbDelete _index;\r\n\r\n    // add additional filter functions to the default filters. These remove backpacks etc.\r\n    _filter lbSetData [0, QFUNC(filterWeapons)];\r\n    _filter lbSetData [1, QFUNC(filterMagazines)];\r\n    _filter lbSetData [2, QFUNC(filterItems)];\r\n\r\n    // add our custom filters\r\n    {\r\n        _x params [\"_name\", \"_fncName\"];\r\n\r\n        _index = _filter lbAdd _name;\r\n        _filter lbSetData [_index, _fncName];\r\n\r\n        false\r\n    } count GVAR(customFilters);\r\n\r\n    // readd \"All\" filter to last position and select it\r\n    _index = _filter lbAdd _nameAll;\r\n    _filter lbSetCurSel _index;\r\n}, [_filter]] call CBA_fnc_execNextFrame;\r\n\r\n// monitor changes that can happen and force our update\r\nprivate _dummyControl = _display ctrlCreate [\"RscMapControl\", -1];\r\n\r\n_dummyControl ctrlSetPosition [0,0,0,0];\r\n_dummyControl ctrlCommit 0;\r\n\r\n_dummyControl ctrlAddEventHandler [\"Draw\", {\r\n    disableSerialization;\r\n    params [\"_dummyControl\"];\r\n\r\n    private _display = ctrlParent _dummyControl;\r\n\r\n    private _itemList = _display call FUNC(currentItemListBox);\r\n\r\n    // monitoring is done by setting a lb value. These are unused here and are reset every time the list box updates.\r\n    if (_itemList lbValue 0 != DUMMY_VALUE) then {\r\n        _display call FUNC(forceItemListUpdate);\r\n        _itemList lbSetValue [0, DUMMY_VALUE];\r\n    };\r\n}];\r\n"},{"name":"ace_inventory_fnc_onLBSelChanged","file":"inventory/functions/fnc_onLBSelChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Executed when the filter list box is changed.\r\n * Sets new filter list index.\r\n *\r\n * Arguments:\r\n * 0: Filter list box <CONTROL>\r\n * 1: Filter list index <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nparams [\"_filter\", \"_index\"];\r\n\r\nGVAR(selectedFilterIndex) = _index;\r\n\r\n[{\r\n    disableSerialization;\r\n    params [\"_display\"];\r\n\r\n    [_display] call FUNC(forceItemListUpdate);\r\n}, [ctrlParent _filter]] call CBA_fnc_execNextFrame;\r\n"}],"javelin":[{"name":"ace_javelin_fnc_cycleFireMode","file":"javelin/functions/fnc_cycleFireMode.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);\r\n\r\nprivate[\"_player\", \"_currentFireMode\"];\r\n\r\n_currentFireMode = ACE_player getVariable[\"ace_missileguidance_attackProfile\", \"JAV_TOP\"];\r\nif(_currentFireMode == \"JAV_DIR\") then {\r\n    _currentFireMode = \"JAV_TOP\";\r\n} else {\r\n    _currentFireMode = \"JAV_DIR\";\r\n};\r\nACE_player setVariable[\"ace_missileguidance_attackProfile\", _currentFireMode, false];\r\n"},{"name":"ace_javelin_fnc_lockKeyDown","file":"javelin/functions/fnc_lockKeyDown.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);"},{"name":"ace_javelin_fnc_lockKeyUp","file":"javelin/functions/fnc_lockKeyUp.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);"},{"name":"ace_javelin_fnc_onFired","file":"javelin/functions/fnc_onFired.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_2(_shooter,_weapon);\r\n\r\n// Bail on not missile or javelin PFEH not running\r\nif ((_shooter != ACE_player) || {(GVAR(pfehID) == -1)}) exitWith { false };\r\n\r\nprivate [\"_configs\"];\r\n\r\n_configs = configProperties [configFile >> \"CfgWeapons\" >> _weapon, QUOTE(configName _x == QUOTE(QGVAR(enabled))), false];\r\nif (((count _configs) < 1) || {(getNumber (_configs select 0)) != 1}) exitWith {};\r\n\r\n__JavelinIGUITargeting ctrlShow false;\r\n__JavelinIGUITargetingGate ctrlShow false;\r\n__JavelinIGUITargetingLines ctrlShow false;\r\n__JavelinIGUITargetingConstraints ctrlShow false;\r\n"},{"name":"ace_javelin_fnc_onOpticDraw","file":"javelin/functions/fnc_onOpticDraw.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);\r\n\r\n#define __TRACKINTERVAL 0    // how frequent the check should be.\r\n#define __LOCKONTIME 3    // Lock on won't occur sooner\r\n\r\nprivate[\"_apos\", \"_aposX\", \"_aposY\", \"_args\", \"_boundsInput\", \"_bpos\", \"_canFire\", \"_constraintBottom\"];\r\nprivate[\"_constraintLeft\", \"_constraintRight\", \"_constraintTop\", \"_currentTarget\", \"_fireDisabledEH\"];\r\nprivate[\"_firedEH\", \"_fov\", \"_lastTick\", \"_lockTime\", \"_maxX\", \"_maxY\", \"_minX\", \"_minY\", \"_newTarget\"];\r\nprivate[\"_offsetX\", \"_offsetY\", \"_pos\", \"_randomLockInterval\", \"_randomPosWithinBounds\", \"_range\"];\r\nprivate[\"_runTime\", \"_soundTime\", \"_targetArray\", \"_zamerny\", \"_currentShooter\"];\r\n\r\n_currentShooter = (vehicle ACE_player);\r\n\r\n#define __OffsetX ((ctrlPosition __JavelinIGUITargetingLineV) select 0) - 0.5\r\n#define __OffsetY ((ctrlPosition __JavelinIGUITargetingLineH) select 1) - 0.5\r\n\r\n// Reset arguments if we havnt rendered in over a second\r\n_args = uiNamespace getVariable[QGVAR(arguments), [] ];\r\nif( (count _args) > 0) then {\r\n    _lastTick = _args select 0;\r\n    if(diag_tickTime - _lastTick > 1) then {\r\n        [] call FUNC(onOpticLoad);\r\n    };\r\n};\r\n\r\nTRACE_1(\"Running\", \"Running\");\r\n\r\n// Pull the arguments\r\n_currentTarget = _args select 1;\r\n_runTime = _args select 2;\r\n_lockTime = _args select 3;\r\n_soundTime = _args select 4;\r\n_randomLockInterval = _args select 5;\r\n_fireDisabledEH = _args select 6;\r\n\r\nprivate[\"_ammo\", \"_magazineConfig\", \"_weaponConfig\"];\r\n_weaponConfig = configProperties [configFile >> \"CfgWeapons\" >> (currentWeapon _currentShooter), QUOTE(configName _x == QUOTE(QGVAR(enabled))), false];\r\n_magazineConfig = if ((currentMagazine _currentShooter) != \"\") then {\r\n    _ammo = getText (configFile >> \"CfgMagazines\" >> (currentMagazine _currentShooter) >> \"ammo\");\r\n    configProperties [(configFile >> \"CfgAmmo\" >> _ammo), \"(configName _x) == 'ace_missileguidance'\", false];\r\n} else {\r\n    []\r\n};\r\n\r\n//If weapon does not have \"javelin enabled\", then exit PFEH\r\nif (((count _weaponConfig) < 1) || {(getNumber (_weaponConfig select 0)) != 1}) exitWith {\r\n    __JavelinIGUITargeting ctrlShow false;\r\n    __JavelinIGUITargetingGate ctrlShow false;\r\n    __JavelinIGUITargetingLines ctrlShow false;\r\n    __JavelinIGUITargetingConstraints ctrlShow false;\r\n\r\n    if(!isNil \"_fireDisabledEH\") then {\r\n        _fireDisabledEH = [_fireDisabledEH] call FUNC(enableFire);\r\n    };\r\n\r\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;\r\n    GVAR(pfehID) = -1;\r\n};\r\n\r\n// Find a target within the optic range\r\n_newTarget = objNull;\r\n\r\n// Bail on fast movement\r\nif ((velocity ACE_player) distance [0,0,0] > 0.5 && {cameraView == \"GUNNER\"} && {cameraOn == ACE_player}) exitWith {    // keep it steady.\r\n    ACE_player switchCamera \"INTERNAL\";\r\n    if (player != ACE_player) then {\r\n        TRACE_2(\"Zeus, manually reseting RC after switchCamera\",player,ACE_player);\r\n        player remoteControl ACE_player;\r\n    };\r\n};\r\n\r\n// Refresh the firemode\r\n[] call FUNC(showFireMode);\r\n\r\n_ammo = _currentShooter ammo (currentWeapon _currentShooter);\r\n// not loaded or not \"javelin enabled\" for magazine, hide targeting and enable firing\r\nif ((_ammo == 0) || {(count _magazineConfig) < 1} || {(getNumber ((_magazineConfig select 0) >> \"enabled\")) != 1}) exitWith {\r\n    __JavelinIGUITargeting ctrlShow false;\r\n    __JavelinIGUITargetingGate ctrlShow false;\r\n    __JavelinIGUITargetingLines ctrlShow false;\r\n    __JavelinIGUITargetingConstraints ctrlShow false;\r\n\r\n    if(!isNil \"_fireDisabledEH\") then {\r\n        _fireDisabledEH = [_fireDisabledEH] call FUNC(enableFire);\r\n    };\r\n};\r\n\r\n_range = parseNumber (ctrlText __JavelinIGUIRangefinder);\r\nTRACE_1(\"Viewing range\", _range);\r\nif (_range > 50 && {_range < 2500}) then {\r\n    _pos = positionCameraToWorld [0,0,_range];\r\n    _targetArray = _pos nearEntities [\"AllVehicles\", _range/100];\r\n    TRACE_1(\"Searching at range\", _targetArray);\r\n    if (count (_targetArray) > 0) then {\r\n        _newTarget = _targetArray select 0;\r\n    };\r\n};\r\n\r\nif ((isNull _newTarget) && {cursorObject isKindOf \"AllVehicles\"}) then {\r\n        private _intersectionsToCursorTarget = lineIntersectsSurfaces [(AGLtoASL positionCameraToWorld [0,0,0]), aimPos cursorObject, ace_player, cursorObject, true, 1];\r\n        if (_intersectionsToCursorTarget isEqualTo []) then {\r\n            _newTarget = cursorObject;\r\n        };\r\n};\r\nif ((isNull _newTarget) && {cursorTarget isKindOf \"AllVehicles\"}) then {\r\n        private _intersectionsToCursorTarget = lineIntersectsSurfaces [(AGLtoASL positionCameraToWorld [0,0,0]), aimPos cursorTarget, ace_player, cursorTarget, true, 1];\r\n        if (_intersectionsToCursorTarget isEqualTo []) then {\r\n            _newTarget = cursorTarget;\r\n        };\r\n};\r\n\r\n// Create constants\r\n_constraintTop = __ConstraintTop;\r\n_constraintLeft = __ConstraintLeft;\r\n_constraintBottom = __ConstraintBottom;\r\n_constraintRight = __ConstraintRight;\r\n\r\n_offsetX = __OffsetX;\r\n_offsetY = __OffsetY;\r\n\r\n__JavelinIGUITargeting ctrlShow true;\r\n__JavelinIGUITargetingConstrains ctrlShow true;\r\n\r\n_zamerny = if (_currentTarget isKindOf \"CAManBase\") then {_currentTarget selectionPosition \"body\"} else {_currentTarget selectionPosition \"zamerny\"};\r\n_randomPosWithinBounds = [(_zamerny select 0) + 1 - (random 2.0),(_zamerny select 1) + 1 - (random 2.0),(_zamerny select 2) + 0.5 - (random 1.0)];\r\n\r\n_apos = worldToScreen (_currentTarget modelToWorld _randomPosWithinBounds);\r\n\r\n_aposX = 0;\r\n_aposY = 0;\r\nif (count _apos < 2) then {\r\n    _aposX = 1;\r\n    _aposY = 0;\r\n} else {\r\n    _aposX = (_apos select 0) + _offsetX;\r\n    _aposY = (_apos select 1) + _offsetY;\r\n};\r\n\r\nif((call CBA_fnc_getFoV) select 1 > 9) then {\r\n    __JavelinIGUINFOV ctrlSetTextColor __ColorGreen;\r\n    __JavelinIGUIWFOV ctrlSetTextColor __ColorGray;\r\n} else {\r\n    __JavelinIGUINFOV ctrlSetTextColor __ColorGray;\r\n    __JavelinIGUIWFOV ctrlSetTextColor __ColorGreen;\r\n};\r\n\r\nFUNC(disableFire) = {\r\n    _firedEH = _this select 0;\r\n\r\n    if(_firedEH < 0 && difficulty > 0) then {\r\n        _firedEH = [ACE_player, \"DefaultAction\", {true}, {\r\n            _canFire = (_this select 1) getVariable[\"ace_missileguidance_target\", nil];\r\n            if(!isNil \"_canFire\") exitWith { false };\r\n            true\r\n        }] call EFUNC(common,addActionEventHandler);\r\n    };\r\n    _firedEH\r\n};\r\nFUNC(enableFire) = {\r\n    _firedEH = _this select 0;\r\n\r\n    if(_firedEH > 0 && difficulty > 0) then {\r\n        [ACE_player, \"DefaultAction\", _firedEH] call EFUNC(common,removeActionEventHandler);\r\n    };\r\n    -1\r\n};\r\n\r\nif (isNull _newTarget) then {\r\n    // No targets found\r\n    _currentTarget = objNull;\r\n    _lockTime = 0;\r\n\r\n    __JavelinIGUISeek ctrlSetTextColor __ColorGray;\r\n    __JavelinIGUITargeting ctrlShow false;\r\n    __JavelinIGUITargetingGate ctrlShow false;\r\n    __JavelinIGUITargetingLines ctrlShow false;\r\n    __JavelinIGUITargetingConstraints ctrlShow false;\r\n\r\n    _currentShooter setVariable [\"ace_missileguidance_target\",nil, false];\r\n\r\n    // Disallow fire\r\n    _fireDisabledEH = [_fireDisabledEH] call FUNC(disableFire);\r\n} else {\r\n    _fov = [] call CBA_fnc_getFoV;\r\n    TRACE_1(\"FOV\", _fov);\r\n    if (_newTarget distance ACE_player < 2500\r\n            && {(call CBA_fnc_getFoV) select 1 > 9}\r\n            && { (currentVisionMode ACE_player == 2)}\r\n            && GVAR(isLockKeyDown)\r\n            ) then {\r\n        // Lock on after 3 seconds\r\n        if(_currentTarget != _newTarget) then {\r\n            TRACE_1(\"New Target, reseting locking\", _newTarget);\r\n            _lockTime = diag_tickTime;\r\n            _currentTarget = _newTarget;\r\n\r\n            playSound \"ACE_Javelin_Locking\";\r\n        } else {\r\n            if(diag_tickTime - _lockTime > __LOCKONTIME + _randomLockInterval) then {\r\n                TRACE_2(\"LOCKED!\", _currentTarget, _lockTime);\r\n\r\n                __JavelinIGUISeek ctrlSetTextColor __ColorGreen;\r\n\r\n                __JavelinIGUITargeting ctrlShow true;\r\n                __JavelinIGUITargetingConstrains ctrlShow false;\r\n                __JavelinIGUITargetingGate ctrlShow true;\r\n                __JavelinIGUITargetingLines ctrlShow true;\r\n\r\n                // Move target marker to coords.\r\n                //__JavelinIGUITargetingLineV ctrlSetPosition [_aposX,ctrlPosition __JavelinIGUITargetingLineV select 1];\r\n                //__JavelinIGUITargetingLineH ctrlSetPosition [ctrlPosition __JavelinIGUITargetingLineH select 0,_aposY];\r\n                //{_x ctrlCommit __TRACKINTERVAL} forEach [__JavelinIGUITargetingLineH,__JavelinIGUITargetingLineV];\r\n\r\n                _boundsInput = if (_currentTarget isKindOf \"CAManBase\") then {\r\n                    [_currentTarget,[-1,-1,-2],_currentTarget selectionPosition \"body\"];\r\n                } else {\r\n                    [_currentTarget,[-1,-1,-2],_currentTarget selectionPosition \"zamerny\"];\r\n                };\r\n\r\n                _bpos = _boundsInput call EFUNC(common,worldToScreenBounds);\r\n\r\n                _minX = ((_bpos select 0) + _offsetX) max _constraintLeft;\r\n                _minY = ((_bpos select 1) + _offsetY) max _constraintTop;\r\n                _maxX = ((_bpos select 2) + _offsetX) min (_constraintRight - 0.025*(3/4)*SafezoneH);\r\n                _maxY = ((_bpos select 3) + _offsetY) min (_constraintBottom - 0.025*SafezoneH);\r\n\r\n                TRACE_4(\"\", _boundsInput, _bpos, _minX, _minY);\r\n\r\n                __JavelinIGUITargetingGateTL ctrlSetPosition [_minX,_minY];\r\n                __JavelinIGUITargetingGateTR ctrlSetPosition [_maxX,_minY];\r\n                __JavelinIGUITargetingGateBL ctrlSetPosition [_minX,_maxY];\r\n                __JavelinIGUITargetingGateBR ctrlSetPosition [_maxX,_maxY];\r\n\r\n                {_x ctrlCommit __TRACKINTERVAL} forEach [__JavelinIGUITargetingGateTL,__JavelinIGUITargetingGateTR,__JavelinIGUITargetingGateBL,__JavelinIGUITargetingGateBR];\r\n\r\n                _currentShooter setVariable[\"ace_missileguidance_target\", _currentTarget, false];\r\n\r\n                // Allow fire\r\n                _fireDisabledEH = [_fireDisabledEH] call FUNC(enableFire);\r\n\r\n                if(diag_tickTime > _soundTime) then {\r\n                    playSound \"ACE_Javelin_Locked\";\r\n                    _soundTime = diag_tickTime + 0.25;\r\n                };\r\n            } else {\r\n                __JavelinIGUITargeting ctrlShow true;\r\n                __JavelinIGUITargetingGate ctrlShow true;\r\n                __JavelinIGUITargetingConstrains ctrlShow true;\r\n                __JavelinIGUITargetingLines ctrlShow false;\r\n\r\n                _currentShooter setVariable[\"ace_missileguidance_target\", nil, false];\r\n\r\n                _boundsInput = if (_currentTarget isKindOf \"CAManBase\") then {\r\n                    [_newTarget,[-1,-1,-2],_currentTarget selectionPosition \"body\"];\r\n                } else {\r\n                    [_newTarget,[-1,-1,-1],_currentTarget selectionPosition \"zamerny\"];\r\n                };\r\n\r\n                _bpos = _boundsInput call EFUNC(common,worldToScreenBounds);\r\n\r\n                _minX = ((_bpos select 0) + _offsetX) max _constraintLeft;\r\n                _minY = ((_bpos select 1) + _offsetY) max _constraintTop;\r\n                _maxX = ((_bpos select 2) + _offsetX) min (_constraintRight - 0.025*(3/4)*SafezoneH);\r\n                _maxY = ((_bpos select 3) + _offsetY) min (_constraintBottom - 0.025*SafezoneH);\r\n\r\n                TRACE_4(\"\", _boundsInput, _bpos, _minX, _minY);\r\n\r\n                __JavelinIGUITargetingGateTL ctrlSetPosition [_minX,_minY];\r\n                __JavelinIGUITargetingGateTR ctrlSetPosition [_maxX,_minY];\r\n                __JavelinIGUITargetingGateBL ctrlSetPosition [_minX,_maxY];\r\n                __JavelinIGUITargetingGateBR ctrlSetPosition [_maxX,_maxY];\r\n\r\n                {_x ctrlCommit __TRACKINTERVAL} forEach [__JavelinIGUITargetingGateTL,__JavelinIGUITargetingGateTR,__JavelinIGUITargetingGateBL,__JavelinIGUITargetingGateBR];\r\n\r\n                if(diag_tickTime > _soundTime) then {\r\n                    playSound \"ACE_Javelin_Locking\";\r\n                    _soundTime = diag_tickTime + 0.25;\r\n                };\r\n                // Disallow fire\r\n                _fireDisabledEH = [_fireDisabledEH] call FUNC(disableFire);\r\n            };\r\n        };\r\n    } else {\r\n        // No targets found\r\n        _currentTarget = objNull;\r\n        _lockTime = 0;\r\n\r\n        __JavelinIGUISeek ctrlSetTextColor __ColorGray;\r\n        __JavelinIGUITargeting ctrlShow false;\r\n        __JavelinIGUITargetingGate ctrlShow false;\r\n        __JavelinIGUITargetingLines ctrlShow false;\r\n        __JavelinIGUITargetingConstraints ctrlShow false;\r\n\r\n        _currentShooter setVariable [\"ace_missileguidance_target\",nil, false];\r\n\r\n        // Disallow fire\r\n        _fireDisabledEH = [_fireDisabledEH] call FUNC(disableFire);\r\n    };\r\n};\r\n\r\n//TRACE_2(\"\", _newTarget, _currentTarget);\r\n\r\n// Save arguments for next run\r\n_args set[0, diag_tickTime];\r\n_args set[1, _currentTarget];\r\n_args set[2, _runTime];\r\n_args set[3, _lockTime];\r\n_args set[4, _soundTime];\r\n_args set[6, _fireDisabledEH];\r\n\r\nuiNamespace setVariable[QGVAR(arguments), _args ];\r\n"},{"name":"ace_javelin_fnc_onOpticLoad","file":"javelin/functions/fnc_onOpticLoad.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);\r\n\r\n#define __LOCKONTIMERANDOM 2    // Deviation in lock on time\r\n\r\nif((count _this) > 0) then {\r\n    uiNameSpace setVariable ['ACE_RscOptics_javelin',_this select 0];\r\n};\r\n\r\nACE_player setVariable [\"ace_missileguidance_target\",nil, false];\r\n\r\n__JavelinIGUISeek ctrlSetTextColor __ColorGray;\r\n__JavelinIGUINFOV ctrlSetTextColor __ColorGray;\r\n\r\n__JavelinIGUITargeting ctrlShow false;\r\n__JavelinIGUITargetingConstrains ctrlShow false;\r\n__JavelinIGUITargetingGate ctrlShow false;\r\n__JavelinIGUITargetingLines ctrlShow false;\r\n\r\nif(GVAR(pfehID) != -1) then {\r\n    [] call FUNC(onOpticUnload); // Unload optic if it was already loaded\r\n};\r\n\r\nuiNameSpace setVariable [QGVAR(arguments), \r\n    [\r\n        diag_tickTime,         // Last runtime\r\n        objNull,   // currentTargetObject\r\n        0,         // Run Time\r\n        0,          // Lock Time\r\n        0,           // Sound timer\r\n        (random __LOCKONTIMERANDOM), // random lock time addition\r\n        -1\r\n    ]\r\n];\r\n\r\nGVAR(pfehID) = [FUNC(onOpticDraw), 0, []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_javelin_fnc_onOpticUnload","file":"javelin/functions/fnc_onOpticUnload.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);\r\nprivate[\"_args\", \"_disableFireEH\"];\r\n\r\n// uiNameSpace setVariable ['ACE_RscOptics_javelin',nil];\r\n\r\nif(GVAR(pfehID) != -1) then {\r\n    [GVAR(pfehID)] call CBA_fnc_removePerFrameHandler;\r\n    GVAR(pfehID) = -1;\r\n};\r\n\r\n_args = uiNamespace getVariable[QGVAR(arguments), nil ];\r\nif(!isNil \"_args\") then {\r\n    _disableFireEH = _args select 6;\r\n    if(_disableFireEH > 0  && difficulty > 0) then {\r\n        [ACE_player, \"DefaultAction\", _disableFireEH] call EFUNC(common,removeActionEventHandler);\r\n    };\r\n    uiNameSpace setVariable [QGVAR(arguments),nil];\r\n};\r\n"},{"name":"ace_javelin_fnc_showFireMode","file":"javelin/functions/fnc_showFireMode.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);\r\n\r\nprivate[\"_player\", \"_currentFireMode\"];\r\n\r\n_currentFireMode = ACE_player getVariable[\"ace_missileguidance_attackProfile\", \"JAV_TOP\"];\r\nif(_currentFireMode == \"JAV_TOP\") then {\r\n    __JavelinIGUITop ctrlSetTextColor __ColorGreen;\r\n    __JavelinIGUIDir ctrlSetTextColor __ColorGray;\r\n} else {\r\n    __JavelinIGUITop ctrlSetTextColor __ColorGray;\r\n    __JavelinIGUIDir ctrlSetTextColor __ColorGreen;\r\n};"}],"kestrel4500":[{"name":"ace_kestrel4500_fnc_buttonPressed","file":"kestrel4500/functions/fnc_buttonPressed.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Handles the Kestrel 4500 dialog button actions\r\n *\r\n * Arguments:\r\n * button ID <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * 2 call ace_kestrel4500_fnc_buttonPressed\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nswitch (_this) do {\r\n    case 0: { // Enter\r\n        if (!GVAR(MinAvgMax) && (GVAR(Menu) == 3 || GVAR(Menu) == 4)) then {\r\n            switch (GVAR(referenceHeadingMenu)) do {\r\n                case 0: { // Head- and Crosswind main page\r\n                    GVAR(TmpHeading) = GVAR(RefHeading);\r\n                    GVAR(referenceHeadingMenu) = 1;\r\n                };\r\n                case 1: { // Mode selection\r\n                    if (GVAR(referenceHeadingAutoSet)) then {\r\n                        GVAR(referenceHeadingMenu) = 2;\r\n                    } else {\r\n                        GVAR(referenceHeadingMenu) = 3;\r\n                    };\r\n                };\r\n                case 2: { // Auto set\r\n                    GVAR(RefHeading) = (getDir ACE_player) % 360;\r\n                    GVAR(referenceHeadingMenu) = 0;\r\n                    GVAR(headingSetDisplayTimer) = diag_tickTime;\r\n                };\r\n                case 3: { // Manual set\r\n                    GVAR(RefHeading) = GVAR(TmpHeading);\r\n                    GVAR(referenceHeadingMenu) = 0;\r\n                    GVAR(headingSetDisplayTimer) = diag_tickTime;\r\n                };\r\n            };\r\n        };\r\n        if (GVAR(MinAvgMax) && GVAR(Menu) > 1 && GVAR(Menu) < 5) then {\r\n            if (GVAR(MinAvgMaxMode) != 1) then {\r\n                {\r\n                    GVAR(MIN) set [_x, 0];\r\n                    GVAR(MAX) set [_x, 0];\r\n                    GVAR(TOTAL) set [_x, 0];\r\n                    GVAR(ENTRIES) set [_x, 0];\r\n                } forEach [2, 3, 4];\r\n            };\r\n            GVAR(MinAvgMaxMode) = (GVAR(MinAvgMaxMode) + 1) % 3;\r\n        };\r\n    };\r\n    case 1: { // Top\r\n        if (GVAR(referenceHeadingMenu) == 1) then {\r\n            GVAR(referenceHeadingAutoSet) = !GVAR(referenceHeadingAutoSet);\r\n        } else {\r\n            GVAR(Menu) = (GVAR(Menu) - 1 + (count GVAR(Menus))) % (count GVAR(Menus));\r\n        };\r\n    };\r\n    case 2: { // Bottom\r\n        if (GVAR(referenceHeadingMenu) == 1) then {\r\n            GVAR(referenceHeadingAutoSet) = !GVAR(referenceHeadingAutoSet);\r\n        } else {\r\n            GVAR(Menu) = (GVAR(Menu) + 1 + (count GVAR(Menus))) % (count GVAR(Menus));\r\n        };\r\n    };\r\n    case 3: { // Left\r\n        if (GVAR(referenceHeadingMenu) == 0) then {\r\n            GVAR(MinAvgMax) = !GVAR(MinAvgMax);\r\n        } else {\r\n            if (GVAR(referenceHeadingMenu) == 3) then {\r\n                if (diag_tickTime - GVAR(manualSetCooldown) < 0.2) then {\r\n                    GVAR(TmpHeading) = GVAR(TmpHeading) - 10;\r\n                } else {\r\n                    GVAR(TmpHeading) = GVAR(TmpHeading) - 1;\r\n                };\r\n                GVAR(TmpHeading) = (GVAR(TmpHeading) + 360) % 360;\r\n                GVAR(manualSetCooldown) = diag_tickTime;\r\n            };\r\n        };\r\n    };\r\n    case 4: { // Right\r\n        if (GVAR(referenceHeadingMenu) == 0) then {\r\n            GVAR(MinAvgMax) = !GVAR(MinAvgMax);\r\n        } else {\r\n            if (GVAR(referenceHeadingMenu) == 3) then {\r\n                if (diag_tickTime - GVAR(manualSetCooldown) < 0.2) then {\r\n                    GVAR(TmpHeading) = GVAR(TmpHeading) + 10;\r\n                } else {\r\n                    GVAR(TmpHeading) = GVAR(TmpHeading) + 1;\r\n                };\r\n                GVAR(TmpHeading) = (GVAR(TmpHeading) + 360) % 360;\r\n                GVAR(manualSetCooldown) = diag_tickTime;\r\n            };\r\n        };\r\n    };\r\n    case 5: { // Memory\r\n    };\r\n    case 6: { // Backlight\r\n    };\r\n    case 7: { // Exit\r\n        private [\"_exit\"];\r\n        _exit = true;\r\n        if (GVAR(referenceHeadingMenu) == 1) then {\r\n            GVAR(referenceHeadingMenu) = 0;\r\n            _exit = false;\r\n        };\r\n        if (GVAR(referenceHeadingMenu) > 1) then {\r\n            GVAR(referenceHeadingMenu) = 1;\r\n            _exit = false;\r\n        };\r\n        if (_exit) then {\r\n            closeDialog 0;\r\n        };\r\n    };\r\n};\r\n\r\n[] call FUNC(updateDisplay);\r\n[] call FUNC(storeUserData);\r\n"},{"name":"ace_kestrel4500_fnc_canShow","file":"kestrel4500/functions/fnc_canShow.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Tests if the Kestrel 4500 can be shown\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * canShow <BOOL>\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_canShow\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(\"ACE_Kestrel4500\" in (uniformItems ACE_player)) || (\"ACE_Kestrel4500\" in (vestItems ACE_player))\r\n"},{"name":"ace_kestrel4500_fnc_collectData","file":"kestrel4500/functions/fnc_collectData.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Gathers the weather data for the Kestrel 4500\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_collectData\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_playerDir\", \"_playerAltitude\", \"_temperature\", \"_humidity\", \"_barometricPressure\", \"_altitude\", \"_airDensity\", \"_densityAltitude\", \"_chill\", \"_heatIndex\", \"_dewPoint\", \"_wetBulb\", \"_windSpeed\", \"_crosswind\", \"_headwind\"];\r\n_playerDir = getDir ACE_player;\r\n_playerAltitude = (getPosASL ACE_player) select 2;\r\n_temperature = _playerAltitude call EFUNC(weather,calculateTemperatureAtHeight);\r\n_humidity = EGVAR(weather,currentHumidity);\r\n_barometricPressure = _playerAltitude call EFUNC(weather,calculateBarometricPressure);\r\n_altitude = EGVAR(common,mapAltitude) + _playerAltitude;\r\n_airDensity = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateAirDensity);\r\n_densityAltitude = _airDensity call EFUNC(weather,calculateDensityAltitude);\r\n_chill = [_temperature, _humidity] call EFUNC(weather,calculateWindChill);\r\n_heatIndex = [_temperature, _humidity] call EFUNC(weather,calculateHeatIndex);\r\n_dewPoint = [_temperature, _humidity] call EFUNC(weather,calculateDewPoint);\r\n_wetBulb = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateWetBulb);\r\n\r\nif (isNil QGVAR(MIN) || isNil QGVAR(MAX)) then {\r\n    GVAR(MIN) = [0, _playerDir, 0, 0, 0, _temperature, _chill, _humidity, _heatIndex, _dewPoint, _wetBulb, _barometricPressure, _altitude, _densityAltitude];\r\n    GVAR(MAX) = [0, _playerDir, 0, 0, 0, _temperature, _chill, _humidity, _heatIndex, _dewPoint, _wetBulb, _barometricPressure, _altitude, _densityAltitude];\r\n};\r\n\r\n{\r\n    GVAR(ENTRIES) set [_x, (GVAR(ENTRIES) select _x) + 1];\r\n} count [1, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n\r\n\r\n[0, _playerDir] call FUNC(updateMemory);\r\n\r\nif (GVAR(MinAvgMaxMode) == 1) then {\r\n    {\r\n        GVAR(ENTRIES) set [_x, (GVAR(ENTRIES) select _x) + 1];\r\n    } count [2, 3, 4];\r\n\r\n    // Wind SPD\r\n    _windSpeed = call FUNC(measureWindSpeed);\r\n    [2, _windSpeed] call FUNC(updateMemory);\r\n\r\n    // CROSSWIND\r\n    _crosswind = 0;\r\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n        _crosswind = abs(sin(GVAR(RefHeading) - _playerDir) * _windSpeed);\r\n    } else {\r\n        _crosswind = abs(sin(GVAR(RefHeading)) * _windSpeed);\r\n    };\r\n    [3, _crosswind] call FUNC(updateMemory);\r\n\r\n    // HEADWIND\r\n    _headwind = 0;\r\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n        _headwind = cos(GVAR(RefHeading) - _playerDir) * _windSpeed;\r\n    } else {\r\n        _headwind = cos(GVAR(RefHeading)) * _windSpeed;\r\n    };\r\n    if (abs(_headwind) > abs(GVAR(MAX) select 4)) then {\r\n        GVAR(MAX) set [4, _headwind];\r\n    };\r\n    if (abs(_headwind) < abs(GVAR(MIN) select 4)) then {\r\n        GVAR(MIN) set [4, _headwind];\r\n    };\r\n    GVAR(TOTAL) set [4, (GVAR(TOTAL) select 4) + _headwind];\r\n};\r\n\r\n{ _x call FUNC(updateMemory); true } count [[5, _temperature],[6, _chill],[7, _humidity],[8, _heatIndex],[9, _dewPoint],[10, _wetBulb],[11, _barometricPressure],[12, _altitude],[13, _densityAltitude]];\r\n"},{"name":"ace_kestrel4500_fnc_createKestrelDialog","file":"kestrel4500/functions/fnc_createKestrelDialog.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Opens the Kestrel 4500 dialog\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_createKestrelDialog\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(Kestrel4500)) exitWith { false };\r\nif (underwater ACE_player) exitWith { false };\r\nif (!(\"ACE_Kestrel4500\" in (uniformItems ACE_player)) && !(\"ACE_Kestrel4500\" in (vestItems ACE_player))) exitWith { false };\r\n\r\nGVAR(Overlay) = false;\r\n3 cutText [\"\", \"PLAIN\"];\r\n\r\nGVAR(Kestrel4500) = true;\r\ncreateDialog 'Kestrel4500_Display';\r\n\r\n[{\r\n    if (!dialog || !GVAR(Kestrel4500)) exitWith {\r\n        GVAR(Kestrel4500) = false;\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    [] call FUNC(updateDisplay);\r\n}, 1, _this select 0] call CBA_fnc_addPerFrameHandler;\r\n\r\ntrue\r\n"},{"name":"ace_kestrel4500_fnc_dayOfWeek","file":"kestrel4500/functions/fnc_dayOfWeek.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculate Current Day in the Week\r\n *\r\n * Arguments:\r\n * 0: Year <NUMBER>\r\n * 1: Month <NUMBER>\r\n * 2: Day <NUMBER>\r\n *\r\n * Return Value:\r\n * Day of The Week <NUMBER>\r\n *\r\n * Example:\r\n * [1995, 10, 21] call ace_kestrel4500_fnc_buttonPressed\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate \"_table\";\r\nparams [\"_year\", \"_month\", \"_day\"];\r\n\r\n_table = [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];\r\nif (_month < 3) then {\r\n    _year = _year - 1;\r\n};\r\n(_year + floor(_year/4) - floor(_year/100) + floor(_year/400) + (_table select (_month - 1)) + _day) % 7\r\n"},{"name":"ace_kestrel4500_fnc_displayKestrel","file":"kestrel4500/functions/fnc_displayKestrel.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows the Kestrel 4500 as rsc title\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_displayKestrel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __dsp (uiNamespace getVariable \"RscKestrel4500\")\r\n#define __ctrlKestrel4500 (__dsp displayCtrl 75000)\r\n#define __ctrlTop (__dsp displayCtrl 75100)\r\n#define __ctrlCenterBig (__dsp displayCtrl 75200)\r\n#define __ctrlCenter (__dsp displayCtrl 75201)\r\n#define __ctrlCenterLine1Left (__dsp displayCtrl 75300)\r\n#define __ctrlCenterLine2Left (__dsp displayCtrl 75301)\r\n#define __ctrlCenterLine3Left (__dsp displayCtrl 75302)\r\n#define __ctrlCenterLine1Right (__dsp displayCtrl 75303)\r\n#define __ctrlCenterLine2Right (__dsp displayCtrl 75304)\r\n#define __ctrlCenterLine3Right (__dsp displayCtrl 75305)\r\n#define __ctrlInfoLine1 (__dsp displayCtrl 75400)\r\n#define __ctrlInfoLine2 (__dsp displayCtrl 75401)\r\n#define __ctrlBottomBig (__dsp displayCtrl 75500)\r\n#define __ctrlCenterLine1 (__dsp displayCtrl 75600)\r\n#define __ctrlCenterLine2 (__dsp displayCtrl 75601)\r\n#define __ctrlCenterLine3 (__dsp displayCtrl 75602)\r\n#define __ctrlCenterLine4 (__dsp displayCtrl 75603)\r\n#define __ctrlCenterLine5 (__dsp displayCtrl 75604)\r\n#define __ctrlCenterLine6 (__dsp displayCtrl 75605)\r\n\r\nif (GVAR(Overlay)) exitWith {\r\n    GVAR(Overlay) = false;\r\n    3 cutText [\"\", \"PLAIN\"];\r\n    true\r\n};\r\nif (underwater ACE_player) exitWith { true };\r\nif (!(\"ACE_Kestrel4500\" in (uniformItems ACE_player)) && !(\"ACE_Kestrel4500\" in (vestItems ACE_player))) exitWith { true };\r\n\r\nif (GVAR(Kestrel4500) && dialog) then {\r\n    GVAR(Kestrel4500) = false;\r\n    closeDialog 0;\r\n};\r\n\r\nGVAR(Overlay) = true;\r\n\r\n[{\r\n    // abort condition\r\n    if (!GVAR(Overlay) || {!((\"ACE_Kestrel4500\" in (uniformItems ACE_player)) || (\"ACE_Kestrel4500\" in (vestItems ACE_player)))}) exitWith {\r\n        GVAR(Overlay) = false;\r\n        3 cutText [\"\", \"PLAIN\"];\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    if (diag_tickTime > GVAR(updateTimer)) then {\r\n        GVAR(updateTimer) = diag_tickTime + 1;\r\n\r\n        private [\"_outputData\"];\r\n        _outputData = [] call FUNC(generateOutputData);\r\n\r\n        3 cutRsc [\"RscKestrel4500\", \"PLAIN\", 1, false];\r\n        _outputData params [\r\n            \"_ctrlTop\",\r\n            \"_ctrlCenterBig\",\r\n            \"_ctrlCenter\",\r\n            \"_ctrlCenterLine1Left\",\r\n            \"_ctrlCenterLine2Left\",\r\n            \"_ctrlCenterLine3Left\",\r\n            \"_ctrlCenterLine1Right\",\r\n            \"_ctrlCenterLine2Right\",\r\n            \"_ctrlCenterLine3Right\",\r\n            \"_ctrlInfoLine1\",\r\n            \"_ctrlInfoLine2\",\r\n            \"_ctrlBottomBig\",\r\n            \"_ctrlCenterLine1\",\r\n            \"_ctrlCenterLine2\",\r\n            \"_ctrlCenterLine3\",\r\n            \"_ctrlCenterLine4\",\r\n            \"_ctrlCenterLine5\",\r\n            \"_ctrlCenterLine6\"\r\n        ];\r\n\r\n        __ctrlTop ctrlSetText _ctrlTop;\r\n        __ctrlCenterBig ctrlSetText _ctrlCenterBig;\r\n        __ctrlCenter ctrlSetText _ctrlCenter;\r\n\r\n        __ctrlCenterLine1Left ctrlSetText _ctrlCenterLine1Left;\r\n        __ctrlCenterLine2Left ctrlSetText _ctrlCenterLine2Left;\r\n        __ctrlCenterLine3Left ctrlSetText _ctrlCenterLine3Left;\r\n\r\n        __ctrlCenterLine1Right ctrlSetText _ctrlCenterLine1Right;\r\n        __ctrlCenterLine2Right ctrlSetText _ctrlCenterLine2Right;\r\n        __ctrlCenterLine3Right ctrlSetText _ctrlCenterLine3Right;\r\n\r\n        __ctrlInfoLine1 ctrlSetText _ctrlInfoLine1;\r\n        __ctrlInfoLine2 ctrlSetText _ctrlInfoLine2;\r\n\r\n        __ctrlBottomBig ctrlSetText _ctrlBottomBig;\r\n\r\n        __ctrlCenterLine1 ctrlSetText _ctrlCenterLine1;\r\n        __ctrlCenterLine2 ctrlSetText _ctrlCenterLine2;\r\n        __ctrlCenterLine3 ctrlSetText _ctrlCenterLine3;\r\n        __ctrlCenterLine4 ctrlSetText _ctrlCenterLine4;\r\n        __ctrlCenterLine5 ctrlSetText _ctrlCenterLine5;\r\n        __ctrlCenterLine6 ctrlSetText _ctrlCenterLine6;\r\n\r\n        if (GVAR(referenceHeadingMenu) == 1) then {\r\n            if (GVAR(referenceHeadingAutoSet)) then {\r\n                __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 0.6];\r\n                __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\r\n            } else {\r\n                __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\r\n                __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 0.6];\r\n            };\r\n        } else {\r\n            __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\r\n            __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\r\n        };\r\n    };\r\n\r\n    call FUNC(updateImpellerState);\r\n    __ctrlKestrel4500 ctrlSetText format [QPATHTOF(UI\\Kestrel4500_%1.paa), floor(GVAR(ImpellerState) % 7)];\r\n\r\n}, 0.01, []] call CBA_fnc_addPerFrameHandler;\r\n\r\ntrue\r\n"},{"name":"ace_kestrel4500_fnc_generateOutputData","file":"kestrel4500/functions/fnc_generateOutputData.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Generates the Kestrel 4500 output text.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * 0: top <STRING>\r\n * 1: centerBig <STRING>\r\n * 2: CenterLine1Left <STRING>\r\n * 3: CenterLine2Left <STRING>\r\n * 4: CenterLine3Left <STRING>\r\n * 5: CenterLine1Right <STRING>\r\n * 6: CenterLine2Right <STRING>\r\n * 7: CenterLine3Right <STRING>\r\n * 8: InfoLine1 <STRING>\r\n * 9: InfoLine2 <STRING>\r\n * 10: Bottom Big <STRING>\r\n * 11: Center Line 1 <STRING>\r\n * 11: Center Line 2 <STRING>\r\n * 12: Center Line 3 <STRING>\r\n * 13: Center Line 4 <STRING>\r\n * 14: Center Line 5 <STRING>\r\n * 15: Center Line 6 <STRING>\r\n *\r\n * Example:\r\n * _var = call ace_kestrel4500_fnc_generateOutputData\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (diag_tickTime - GVAR(headingSetDisplayTimer) < 0.8) exitWith {[\"\", \"\", \"  Heading Set\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]};\r\n\r\nprivate [\"_playerDir\", \"_playerAltitude\", \"_temperature\", \"_humidity\", \"_barometricPressure\", \"_airDensity\", \"_densityAltitude\", \"_chill\", \"_heatIndex\", \"_dewPoint\", \"_wetBulb\", \"_dayString\", \"_monthString\", \"_windSpeed\", \"_windDir\", \"_textTop\", \"_textCenterBig\", \"_textCenter\", \"_textCenterLine1Left\", \"_textCenterLine2Left\", \"_textCenterLine3Left\", \"_textCenterLine1Right\", \"_textCenterLine2Right\", \"_textCenterLine3Right\", \"_textInfoLine1\", \"_textInfoLine2\", \"_textBottomBig\", \"_textCenterLine1\", \"_textCenterLine2\", \"_textCenterLine3\", \"_textCenterLine4\", \"_textCenterLine5\", \"_textCenterLine6\"];\r\n\r\n[] call FUNC(collectData);\r\n\r\n_textTop = GVAR(Menus) select GVAR(Menu);\r\n_textCenterBig = \"\";\r\n_textCenter = \"\";\r\n\r\n_textCenterLine1Left = \"\";\r\n_textCenterLine2Left = \"\";\r\n_textCenterLine3Left = \"\";\r\n_textCenterLine1Right = \"\";\r\n_textCenterLine2Right = \"\";\r\n_textCenterLine3Right = \"\";\r\n\r\n_textInfoLine1 = \"\";\r\n_textInfoLine2 = \"\";\r\n\r\n_textBottomBig = \"\";\r\n\r\n_textCenterLine1 = \"\";\r\n_textCenterLine2 = \"\";\r\n_textCenterLine3 = \"\";\r\n_textCenterLine4 = \"\";\r\n_textCenterLine5 = \"\";\r\n_textCenterLine6 = \"\";\r\n\r\n_windSpeed = call FUNC(measureWindSpeed);\r\n_windDir = (ACE_wind select 0) atan2 (ACE_wind select 1);\r\n\r\n_playerDir = getDir ACE_player;\r\n_playerAltitude = (getPosASL ACE_player) select 2;\r\n\r\n_temperature = _playerAltitude call EFUNC(weather,calculateTemperatureAtHeight);\r\n_humidity = EGVAR(weather,currentHumidity);\r\n_barometricPressure = _playerAltitude call EFUNC(weather,calculateBarometricPressure);\r\n_airDensity = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateAirDensity);\r\n_densityAltitude = _airDensity call EFUNC(weather,calculateDensityAltitude);\r\n_chill = [_temperature, _humidity] call EFUNC(weather,calculateWindChill);\r\n_heatIndex = [_temperature, _humidity] call EFUNC(weather,calculateHeatIndex);\r\n_dewPoint = [_temperature, _humidity] call EFUNC(weather,calculateDewPoint);\r\n_wetBulb = [_temperature, _barometricPressure, _humidity] call EFUNC(weather,calculateWetBulb);\r\n\r\nGVAR(Direction) = 4 * floor(_playerDir / 90);\r\nif (_playerDir % 90 > 10) then { GVAR(Direction) = GVAR(Direction) + 1};\r\nif (_playerDir % 90 > 35) then { GVAR(Direction) = GVAR(Direction) + 1};\r\nif (_playerDir % 90 > 55) then { GVAR(Direction) = GVAR(Direction) + 1};\r\nif (_playerDir % 90 > 80) then { GVAR(Direction) = GVAR(Direction) + 1};\r\nGVAR(Direction) = GVAR(Direction) % 16;\r\n\r\nif (GVAR(referenceHeadingMenu) == 0) then {\r\n    switch (GVAR(Menu)) do {\r\n        case 0: { // Date\r\n            date params [\"_year\", \"_month\", \"_day\"];\r\n            _dayString = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"] select (date call FUNC(dayOfWeek));\r\n            _monthString = localize ([\"str_january\",\"str_february\",\"str_march\",\"str_april\",\"str_may\",\"str_june\",\"str_july\",\"str_august\",\"str_september\",\"str_october\",\"str_november\",\"str_december\"] select (_month - 1));\r\n            _textTop = _dayString;\r\n            _textCenter = format[\"%1 %2 %3\", _day, _monthString, _year];\r\n            _textBottomBig = [daytime, \"HH:MM:SS\"] call bis_fnc_timeToString;\r\n        };\r\n        case 1: { // Direction\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = format[\"%1\", format[\"%1 %2\", GVAR(Directions) select GVAR(Direction), round(_playerDir)]];\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = \"N/A\";\r\n                _textCenterLine2Right = \"N/A\";\r\n                _textCenterLine3Right = \"N/A\";\r\n            };\r\n        };\r\n        case 2: { // Wind SPD\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(abs(_windSpeed) * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Max\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                switch (GVAR(MinAvgMaxMode)) do {\r\n                    case 0: {\r\n                        _textCenterLine1Right = \"--. -\";\r\n                        _textCenterLine2Right = \"--. -\";\r\n                        _textInfoLine2 = \"- average\";\r\n                    };\r\n                    case 1: {\r\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 2) * 10) / 10);\r\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 2) / (GVAR(Entries) select 2) * 10) / 10);\r\n                        _textInfoLine2 = \"- stop\";\r\n                    };\r\n                    case 2: {\r\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 2) * 10) / 10);\r\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 2) / (GVAR(Entries) select 2) * 10) / 10);\r\n                        _textInfoLine2 = \"- clear\";\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        case 3: { // CROSSWIND\r\n            if (!GVAR(MinAvgMax)) then {\r\n                if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n                    _textCenterBig = Str(round(abs(sin(GVAR(RefHeading) - _playerDir) * _windSpeed) * 10) / 10);\r\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round((abs(cos(_playerDir - _windDir)) * _windSpeed) * 10) / 10, round(_playerDir)];\r\n                } else {\r\n                    _textCenterBig = Str(round(abs(sin(GVAR(RefHeading)) * _windSpeed) * 10) / 10);\r\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round(_windSpeed * 10) / 10, round(_windDir)];\r\n                };\r\n                _textInfoLine2 = \"- set heading\";\r\n            } else {\r\n                _textCenterLine1Left = \"Max\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                switch (GVAR(MinAvgMax)Mode) do {\r\n                    case 0: {\r\n                        _textCenterLine1Right = \"--. -\";\r\n                        _textCenterLine2Right = \"--. -\";\r\n                        _textInfoLine2 = \"- average\";\r\n                    };\r\n                    case 1: {\r\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 3) * 10) / 10);\r\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 3) / (GVAR(Entries) select 3) * 10) / 10);\r\n                        _textInfoLine2 = \"- stop\";\r\n                    };\r\n                    case 2: {\r\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 3) * 10) / 10);\r\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 3) / (GVAR(Entries) select 3) * 10) / 10);\r\n                        _textInfoLine2 = \"- clear\";\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        case 4: { // HEADWIND\r\n            if (!GVAR(MinAvgMax)) then {\r\n                if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n                    _textCenterBig = Str(round(cos(GVAR(RefHeading) - _playerDir) * _windSpeed * 10) / 10);\r\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round((abs(cos(_playerDir - _windDir)) * _windSpeed) * 10) / 10, round(_playerDir)];\r\n                } else {\r\n                    _textCenterBig = Str(round(cos(GVAR(RefHeading)) * _windSpeed * 10) / 10);\r\n                    _textInfoLine1 = format[\"%1 m/s @ %2\", round(_windSpeed * 10) / 10, round(_windDir)];\r\n                };\r\n                _textInfoLine2 = \"- set heading\";\r\n            } else {\r\n                _textCenterLine1Left = \"Max\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                switch (GVAR(MinAvgMax)Mode) do {\r\n                    case 0: {\r\n                        _textCenterLine1Right = \"--. -\";\r\n                        _textCenterLine2Right = \"--. -\";\r\n                        _textInfoLine2 = \"- average\";\r\n                    };\r\n                    case 1: {\r\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 4) * 10) / 10);\r\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 4) / (GVAR(Entries) select 4) * 10) / 10);\r\n                        _textInfoLine2 = \"- stop\";\r\n                    };\r\n                    case 2: {\r\n                        _textCenterLine1Right = Str(round((GVAR(Max) select 4) * 10) / 10);\r\n                        _textCenterLine2Right = Str(round((GVAR(Total) select 4) / (GVAR(Entries) select 4) * 10) / 10);\r\n                        _textInfoLine2 = \"- clear\";\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        case 5: { // TEMP\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_temperature * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round((GVAR(Min) select 5) * 10) / 10);\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 5) / (GVAR(Entries) select 5) * 10) / 10);\r\n                _textCenterLine3Right = Str(round((GVAR(Max) select 5) * 10) / 10);\r\n            };\r\n        };\r\n        case 6: { // CHILL\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_chill * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round((GVAR(Min) select 6) * 10) / 10);\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 6) / (GVAR(Entries) select 6) * 10) / 10);\r\n                _textCenterLine3Right = Str(round((GVAR(Max) select 6) * 10) / 10);\r\n            };\r\n        };\r\n        case 7: { // HUMIDITY\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_humidity * 100 * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round((GVAR(Min) select 7) * 100 * 10) / 10);\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 7) / (GVAR(Entries) select 7) * 100 * 10) / 10);\r\n                _textCenterLine3Right = Str(round((GVAR(Max) select 7) * 100 * 10) / 10);\r\n            };\r\n        };\r\n        case 8: { // HEAT INDEX\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_heatIndex * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round((GVAR(Min) select 8) * 10) / 10);\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 8) / (GVAR(Entries) select 8) * 10) / 10);\r\n                _textCenterLine3Right = Str(round((GVAR(Max) select 8) * 10) / 10);\r\n            };\r\n        };\r\n        case 9: { // DEW POINT\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_dewPoint * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round((GVAR(Min) select 9) * 10) / 10);\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 9) / (GVAR(Entries) select 9) * 10) / 10);\r\n                _textCenterLine3Right = Str(round((GVAR(Max) select 9) * 10) / 10);\r\n            };\r\n        };\r\n        case 10: { // WET BULB\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_wetBulb * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round((GVAR(Min) select 10) * 10) / 10);\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 10) / (GVAR(Entries) select 10) * 10) / 10);\r\n                _textCenterLine3Right = Str(round((GVAR(Max) select 10) * 10) / 10);\r\n            };\r\n        };\r\n        case 11: { // BARO\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_barometricPressure * 10) / 10);\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round((GVAR(Min) select 11) * 10) / 10);\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 11) / (GVAR(Entries) select 11) * 10) / 10);\r\n                _textCenterLine3Right = Str(round((GVAR(Max) select 11) * 10) / 10);\r\n            };\r\n        };\r\n        case 12: { // ALTITUDE\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(EGVAR(common,mapAltitude) + _playerAltitude));\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round(GVAR(Min) select 12));\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 12) / (GVAR(Entries) select 12)));\r\n                _textCenterLine3Right = Str(round(GVAR(Max) select 12));\r\n            };\r\n        };\r\n        case 13: { // DENSITY ALTITUDE\r\n            if (!GVAR(MinAvgMax)) then {\r\n                _textCenterBig = Str(round(_densityAltitude));\r\n            } else {\r\n                _textCenterLine1Left = \"Min\";\r\n                _textCenterLine2Left = \"Avg\";\r\n                _textCenterLine3Left = \"Max\";\r\n                _textCenterLine1Right = Str(round(GVAR(Min) select 13));\r\n                _textCenterLine2Right = Str(round((GVAR(Total) select 13) / (GVAR(Entries) select 13)));\r\n                _textCenterLine3Right = Str(round(GVAR(Max) select 13));\r\n            };\r\n        };\r\n        case 14: { // User Screen 1\r\n            _textCenterLine1Left = Str(round(_playerDir));\r\n            _textCenterLine2Left = Str(round(EGVAR(common,mapAltitude) + _playerAltitude));\r\n            _textCenterLine3Left = Str(round(abs(_windSpeed) * 10) / 10);\r\n            _textCenterLine1Right = GVAR(Directions) select GVAR(Direction);\r\n            _textCenterLine2Right = \"m\";\r\n            _textCenterLine3Right = \"m/s\";\r\n        };\r\n        case 15: { // User Screen 2\r\n            _textCenterLine1Left = Str(round(_temperature * 10) / 10);\r\n            _textCenterLine2Left = Str(round(_humidity * 100 * 10) / 10);\r\n            _textCenterLine3Left = Str(round((_playerAltitude call EFUNC(weather,calculateBarometricPressure)) * 10) / 10);\r\n            _textCenterLine1Right = \"C\";\r\n            _textCenterLine2Right = \"%\";\r\n            _textCenterLine3Right = \"hPA\";\r\n        };\r\n    };\r\n} else {\r\n    _textTop = \"\";\r\n    switch (GVAR(referenceHeadingMenu)) do {\r\n        case 1: {\r\n            _textCenterLine1 = \"MAGNETIC  HEADING\";\r\n            _textCenterLine2 = Str(round(GVAR(RefHeading)));\r\n            _textCenterLine3 = \"Auto Set           \";\r\n            _textCenterLine4 = \"Manual Set         \";\r\n            _textCenterLine5 = \"================\";\r\n            _textCenterLine6 = \"- select  (|) exit\";\r\n        };\r\n        case 2: {\r\n            _textCenterLine1 = \"MAGNETIC  HEADING\";\r\n            _textCenterLine2 = Str(round(_playerDir));\r\n            _textCenterLine3 = \"Point Down the\";\r\n            _textCenterLine4 = \"Runway or Range\";\r\n            _textCenterLine5 = \"================\";\r\n            _textCenterLine6 = \"- set heading\";\r\n        };\r\n        case 3: {\r\n            _textCenterLine1 = \"MAGNETIC  HEADING\";\r\n            _textCenterLine2 = Str(round(GVAR(TmpHeading)));\r\n            _textCenterLine3 = \"Press < and >\";\r\n            _textCenterLine4 = \"to Adjust\";\r\n            _textCenterLine5 = \"================\";\r\n            _textCenterLine6 = \"- set heading\";\r\n        };\r\n    };\r\n};\r\n\r\n[_textTop, _textCenterBig, _textCenter, _textCenterLine1Left, _textCenterLine2Left, _textCenterLine3Left, _textCenterLine1Right, _textCenterLine2Right, _textCenterLine3Right, _textInfoLine1, _textInfoLine2, _textBottomBig, _textCenterLine1, _textCenterLine2, _textCenterLine3, _textCenterLine4, _textCenterLine5, _textCenterLine6]\r\n"},{"name":"ace_kestrel4500_fnc_measureWindSpeed","file":"kestrel4500/functions/fnc_measureWindSpeed.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Measures the wind speed, stores the information in GVAR(MeasuredWindSpeed) and updates GVAR(ImpellerState)\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * wind speed <NUMBER>\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_canShow\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_playerDir\", \"_windSpeed\", \"_windDir\"];\r\n\r\n_playerDir = getDir ACE_player;\r\n_windSpeed = vectorMagnitude ACE_wind;\r\n_windDir = (ACE_wind select 0) atan2 (ACE_wind select 1);\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    // With wind gradient\r\n    _windSpeed = [eyePos ACE_player, true, true, true] call EFUNC(weather,calculateWindSpeed);\r\n    _windSpeed = abs(cos(_playerDir - _windDir)) * _windSpeed;\r\n} else {\r\n    // Without wind gradient\r\n    _windSpeed = [eyePos ACE_player, false, true, true] call EFUNC(weather,calculateWindSpeed);\r\n};\r\n\r\nif (_windSpeed > 0.3 || {GVAR(MeasuredWindSpeed) > 0.1 && _windSpeed > 0.125}) then {\r\n   GVAR(MeasuredWindSpeed) = _windSpeed;\r\n} else {\r\n    GVAR(MeasuredWindSpeed) = GVAR(MeasuredWindSpeed) * 0.99;\r\n    if (GVAR(MeasuredWindSpeed) < 0.05) then {\r\n        GVAR(MeasuredWindSpeed) = 0;\r\n    };\r\n};\r\n\r\nGVAR(MeasuredWindSpeed)\r\n"},{"name":"ace_kestrel4500_fnc_onCloseDialog","file":"kestrel4500/functions/fnc_onCloseDialog.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Called if Kestrel Dialog is closed\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_onCloseDialog\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nuiNamespace setVariable ['Kestrel4500_Display', nil];\r\nGVAR(Kestrel4500) = false;\r\n"},{"name":"ace_kestrel4500_fnc_onCloseDisplay","file":"kestrel4500/functions/fnc_onCloseDisplay.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Called if Kestrel Display is closed\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_onCloseDisplay\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nuiNamespace setVariable ['RscKestrel4500', nil];\r\nGVAR(Overlay) = false;\r\n"},{"name":"ace_kestrel4500_fnc_restoreUserData","file":"kestrel4500/functions/fnc_restoreUserData.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Reads user data from profileNamespace\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_restore_user_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(Menu) = 0 max (profileNamespace getVariable [\"ACE_Kestrel4500_menu\", 0]) min ((count GVAR(Menus)) - 1);\r\nGVAR(RefHeading) = 0 max (profileNamespace getVariable [\"ACE_Kestrel4500_RefHeading\", 0]) min 359;\r\n"},{"name":"ace_kestrel4500_fnc_storeUserData","file":"kestrel4500/functions/fnc_storeUserData.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Saves user data into profileNamespace\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_kestrel4500_fnc_store_user_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprofileNamespace setVariable [\"ACE_Kestrel4500_menu\", GVAR(menu)];\r\nprofileNamespace setVariable [\"ACE_Kestrel4500_RefHeading\", GVAR(RefHeading)];\r\n"},{"name":"ace_kestrel4500_fnc_updateDisplay","file":"kestrel4500/functions/fnc_updateDisplay.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the Kestrel 4500 dialog text boxes.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __dsp (uiNamespace getVariable \"Kestrel4500_Display\")\r\n#define __ctrlCenterLine3 (__dsp displayCtrl 74602)\r\n#define __ctrlCenterLine4 (__dsp displayCtrl 74603)\r\n\r\nprivate [\"_outputData\"];\r\n\r\n_outputData = [] call FUNC(generateOutputData);\r\n\r\n{\r\n    ctrlSetText [_x , _outputData select _forEachIndex];\r\n} forEach [74100, 74200, 74201, 74300, 74301, 74302, 74303, 74304, 74305, 74400, 74401, 74500, 74600, 74601, 74602, 74603, 74604, 74605];\r\n\r\nif (GVAR(referenceHeadingMenu) == 1) then {\r\n    if (GVAR(referenceHeadingAutoSet)) then {\r\n        __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 0.6];\r\n        __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\r\n    } else {\r\n        __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\r\n        __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 0.6];\r\n    };\r\n} else {\r\n    __ctrlCenterLine3 ctrlSetTextColor [0, 0, 0, 1.0];\r\n    __ctrlCenterLine4 ctrlSetTextColor [0, 0, 0, 1.0];\r\n};\r\n"},{"name":"ace_kestrel4500_fnc_updateImpellerState","file":"kestrel4500/functions/fnc_updateImpellerState.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Updates the Kestrel 4500 Impeller state\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_windSpeed\"];\r\n\r\n_windSpeed = call FUNC(measureWindSpeed);\r\n\r\nGVAR(ImpellerState) = GVAR(ImpellerState) + (ceil(_windSpeed) min 1) max _windSpeed;\r\nif (GVAR(ImpellerState) > 1000) then { GVAR(ImpellerState) = 0 };\r\n"},{"name":"ace_kestrel4500_fnc_updateMemory","file":"kestrel4500/functions/fnc_updateMemory.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Update Memory of Kestrel\r\n *\r\n * Arguments:\r\n * 0: Slot <NUMBER>\r\n * 1: Value <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [1, \"test\"] call ace_kestrel4500_fnc_updateMemory\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_slot\", \"_value\"];\r\nGVAR(MIN)   set [_slot, (GVAR(MIN) select _slot) min _value];\r\nGVAR(MAX)   set [_slot, _value max (GVAR(MAX) select _slot)];\r\nGVAR(TOTAL) set [_slot, (GVAR(TOTAL) select _slot) + _value];\r\n"}],"laser":[{"name":"ace_laser_fnc_checkLos","file":"laser/functions/fnc_checkLos.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_pos1\", \"_pos2\", \"_spacing\", \"_vectorTo\", \"_x\", \"_y\", \"_z\", \"_distance\", \"_count\", \"_return\", \"_alt\", \"_pos\", \"_designator\", \"_seeker\"];\r\n_pos1 = _this select 0;\r\n_pos2 = _this select 1;\r\n_designator = _this select 2;\r\n_seeker = _this select 3;\r\n_spacing = 100;\r\nif((count _this) > 4) then {\r\n    _spacing = _this select 4;\r\n};\r\n\r\n_return = true;\r\n_vectorTo = [_pos2, _pos1] call BIS_fnc_vectorFromXToY;\r\n\r\n_x = (_vectorTo select 0)*0.25;\r\n_y = (_vectorTo select 1)*0.25;\r\n_z = (_vectorTo select 2)*0.25;\r\n\r\n_pos2 = [(_pos2 select 0) + _x, (_pos2 select 1) + _y, (_pos2 select 2) + _z];\r\n\r\n// player sideChat format[\"new los check\"];\r\nif(terrainIntersect [_pos2, _pos1]) then {\r\n    _return = false;\r\n} else {\r\n    if(lineIntersects [_pos2, _pos1]) then {    // should take as arguments and add to this command objects to exclude - target and observer\r\n        // player sideChat format[\"with: %1\", lineIntersectsWith [_pos1, _pos2]];\r\n        _return = false;\r\n    };\r\n};\r\n_return;"},{"name":"ace_laser_fnc_drawVisibleLaserTargets","file":"laser/functions/fnc_drawVisibleLaserTargets.sqf","text":"// This is a debug function for displaying visible lasers for ourselves\r\n#include \"script_component.hpp\"\r\n\r\nACE_LOGINFO(\"Laser Emitter Dump\");\r\n\r\n{\r\n    ACE_LOGINFO_1(\"  %1\", _x);\r\n    ACE_LOGINFO_1(\"    %1\",HASH_GET(GVAR(laserEmitters),_x));\r\n} forEach GVAR(laserEmitters) select 0;\r\n"},{"name":"ace_laser_fnc_findStrongestRay","file":"laser/functions/fnc_findStrongestRay.sqf","text":"#include \"script_component.hpp\"\r\nprivate[\"_checkPos\", \"_i\", \"_largest\", \"_largestSpot\", \"_list\", \"_outliers\", \"_remainingSpots\", \"_samplePos\", \"_spot\", \"_spots\", \"_testPos\"];\r\n_list = _this select 0;\r\n_checkPos = _this select 1;\r\n_spots = [];\r\n_outliers = [];\r\n_spot = [];\r\n_testPos = (_list select 0) select 0;\r\n{\r\n    _samplePos = _x select 0;\r\n    if(!lineIntersects [_samplePos, _checkPos] && {!terrainIntersectASL [_samplePos, _checkPos]}) then {\r\n        if(_samplePos distance _testPos < 2) then {\r\n            _spot pushBack _samplePos;\r\n        } else {\r\n            _outliers pushBack _samplePos;\r\n        };\r\n    };\r\n} forEach _list;\r\n_spots pushBack _spot;\r\n\r\nif(count _outliers > 0) then {\r\n    for \"_i\" from 1 to 3 do {\r\n        _remainingSpots = _outliers;\r\n        _outliers = [];\r\n        _spot = [];\r\n        _testPos = (_remainingSpots select 0);\r\n        {\r\n            _samplePos = _x;\r\n            if(!lineIntersects [_samplePos, _checkPos] && {!terrainIntersectASL [_samplePos, _checkPos]}) then {\r\n                if(_samplePos distance _testPos < 2) then {\r\n                    _spot pushBack _samplePos;\r\n                } else {\r\n                    _outliers pushBack _samplePos;\r\n                };\r\n            };\r\n        } forEach _remainingSpots;\r\n        _spots pushBack _spot;\r\n    };\r\n};\r\n_largest = 0;\r\n_largestSpot = [];\r\n{\r\n    if((count _x) > _largest) then {\r\n        _largest = (count _x);\r\n        _largestSpot = _x;\r\n    };\r\n} forEach _spots;\r\n// player sideChat format[\"g: %1\", _spots];\r\n_largestSpot select (random (floor(count _largestSpot)));"},{"name":"ace_laser_fnc_handleLaserOff","file":"laser/functions/fnc_handleLaserOff.sqf","text":"//fnc_handleLaserOff.sqf\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_uuid\"];\r\n_uuid = _this select 0;\r\nif(HASH_HASKEY(GVAR(laserEmitters), _uuid)) then {\r\n    HASH_REM(GVAR(laserEmitters), _uuid);\r\n};\r\n"},{"name":"ace_laser_fnc_handleLaserOn","file":"laser/functions/fnc_handleLaserOn.sqf","text":"//fnc_handleLaserOn.sqf\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_uuid\", \"_args\"];\r\n_uuid = _this select 0;\r\n_args = _this select 1;\r\nHASH_SET(GVAR(laserEmitters), _uuid, _args);\r\n"},{"name":"ace_laser_fnc_keyLaserCodeDown","file":"laser/functions/fnc_keyLaserCodeDown.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nprivate[\"_oldLaserCode\", \"_laserCode\"];\r\n\r\n_oldLaserCode = ACE_player getVariable [QGVAR(code), ACE_DEFAULT_LASER_CODE];\r\nif(_oldLaserCode > ACE_DEFAULT_LASER_CODE) then {\r\n    _laserCode = _oldLaserCode - 1;\r\n    ACE_player setVariable [QGVAR(code), _laserCode, false];\r\n};\r\nif(_laserCode != _oldLaserCode) then {\r\n    [format [\"%1: %2\", localize LSTRING(laserCode), _laserCode]] call EFUNC(common,displayTextStructured);\r\n};"},{"name":"ace_laser_fnc_keyLaserCodeUp","file":"laser/functions/fnc_keyLaserCodeUp.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nprivate[\"_oldLaserCode\", \"_laserCode\"];\r\n\r\n_oldLaserCode = ACE_player getVariable [QGVAR(code), ACE_DEFAULT_LASER_CODE];\r\n_laserCode = _oldLaserCode + 1;\r\nACE_player setVariable [QGVAR(code), _laserCode, false];\r\nif(_laserCode != _oldLaserCode) then {\r\n[format [\"%1: %2\", localize LSTRING(laserCode), _laserCode]] call EFUNC(common,displayTextStructured);\r\n};"},{"name":"ace_laser_fnc_laser_init","file":"laser/functions/fnc_laser_init.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);\r\n\r\nPARAMS_1(_laserTarget);\r\nprivate[\"_uuid\"];\r\n\r\n// Add the target to the global targets array\r\n// Everyone tracks them\r\n// Add the laser localized to the laser array, and give it the default localized code\r\nPUSH(GVAR(VanillaLasers), _laserTarget);\r\n\r\n// Check the vehicle, otherwise use the default\r\n_laserTarget setVariable [QGVAR(code), ACE_DEFAULT_LASER_CODE, false];\r\n_laserTarget setVariable [QGVAR(beamSpread), ACE_DEFAULT_LASER_BEAMSPREAD, false];\r\n_laserTarget setVariable [QGVAR(waveLength), ACE_DEFAULT_LASER_WAVELENGTH, false];\r\n\r\n// Clean the lasers of any null objects while we are here\r\nREM(GVAR(VanillaLasers), objNull);\r\n\r\nif(!(local _laserTarget)) exitWith { };\r\n\r\n// The target is local, so its on this client\r\nif(!isDedicated) then {\r\n    // @TODO: Get ownership variables and set them on the vehicle\r\n\r\n    _uuid = [(vehicle ACE_player), ACE_player, QFUNC(vanillaLaserSeekerHandler), ACE_DEFAULT_LASER_WAVELENGTH, ACE_DEFAULT_LASER_CODE, ACE_DEFAULT_LASER_BEAMSPREAD] call FUNC(laserOn);\r\n    _laserTarget setVariable [QGVAR(uuid), _uuid, false];   \r\n   [FUNC(laserTargetPFH), 0, [_laserTarget, ACE_player, _uuid]] call CBA_fnc_addPerFrameHandler;\r\n} else {\r\n    // server side ownership of laser \r\n    _laserTarget setVariable [QGVAR(owner), nil, true];\r\n};\r\n"},{"name":"ace_laser_fnc_laserOff","file":"laser/functions/fnc_laserOff.sqf","text":"/*\r\n * Author: Nou\r\n * Turn a laser designator off.\r\n *\r\n * Arguments:\r\n * 0: UUID (from laserOn) <string>\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_uuid\"];\r\n_uuid = _this select 0;\r\n[\"ace_laserOff\", [_uuid]] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_laser_fnc_laserOn","file":"laser/functions/fnc_laserOn.sqf","text":"/*\r\n * Author: Nou\r\n * Turn a laser designator on.\r\n *\r\n * Arguments:\r\n * 0: Emitter <object>\r\n * 1: Owner <object>\r\n * 2: Method, can be code, which emitter and owner are passed to, a string function name, an array with a position memory point and weapon name, or an array with a position memory point, a vector begining memory point, and vector ending memory point.\r\n * 3: Wavelength (1550nm is common eye safe) <number>\r\n * 4: Laser code <number>\r\n * 5: Beam divergence (in mils off beam center).\r\n *\r\n * Return Value:\r\n * String, UUID for sending to laserOff function.\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_uuid\", \"_args\"];\r\n_uuid = format[\"%1%2%3\", floor diag_tickTime, floor random 1000, floor random 10000];\r\n_args = [_uuid, _this];\r\n[\"ace_laserOn\", _args] call CBA_fnc_globalEvent;\r\n_uuid;\r\n"},{"name":"ace_laser_fnc_laserTargetPFH","file":"laser/functions/fnc_laserTargetPFH.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nTRACE_1(\"enter\", _this);\r\n\r\nprivate[\"_args\", \"_laserTarget\", \"_pos\", \"_shooter\", \"_uuid\"];\r\n//TRACE_1(\"enter\", _this);\r\n_args = _this select 0;\r\n_laserTarget = _args select 0;\r\n_shooter = _args select 1;\r\n_uuid = _args select 2;\r\n\r\nif(isNull _laserTarget || !alive _shooter) exitWith {\r\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;\r\n    REM(GVAR(VanillaLasers), _laserTarget);\r\n\r\n    // Remove laseron\r\n    [_uuid] call FUNC(laserOff);\r\n};\r\n\r\n#ifdef DEBUG_MODE_FULL\r\n// Iconize the location of the actual laserTarget\r\n_pos = getPosASL _laserTarget;\r\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\select_target_ca.paa\", [1,0,0,1], (ASLtoATL _pos), 0.75, 0.75, 0, \"\", 0.5, 0.025, \"TahomaB\"];\r\n\r\n{\r\n    drawLine3D [ASLtoATL (_x select 0), ASLtoATL (_x select 1), (_x select 2)];\r\n    drawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", (_x select 2), ASLtoATL (_x select 1), 0.75, 0.75, 0, \"\", 0.5, 0.025, \"TahomaB\"];\r\n} forEach DRAW_LINES;\r\nDRAW_LINES = [];\r\n#endif\r\n"},{"name":"ace_laser_fnc_onLaserDesignatorDraw","file":"laser/functions/fnc_onLaserDesignatorDraw.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nprivate[\"_laserCode\"];\r\n\r\n_laserCode = ACE_player getVariable[QGVAR(code), ACE_DEFAULT_LASER_CODE];\r\nif(!isNil \"_laserCode\") then {\r\n    __LaserDesignatorIGUI_LaserCode ctrlSetText format[\"Code: %1\", [_laserCode, 4, 0, false] call CBA_fnc_formatNumber];\r\n};\r\n\r\nif(! (ctrlShown __LaserDesignatorIGUI_LaserOn) ) then {\r\n    // TODO: hide distance\r\n    __LaserDesignatorIGUI_ACE_Distance ctrlSetText \"----\";\r\n} else {\r\n    __LaserDesignatorIGUI_ACE_Distance ctrlSetText (ctrlText __LaserDesignatorIGUI_CA_Distance);\r\n};"},{"name":"ace_laser_fnc_rotateVectLine","file":"laser/functions/fnc_rotateVectLine.sqf","text":"#include \"script_component.hpp\"\r\nprivate[\"_d\", \"_map\", \"_p\", \"_theta\", \"_u\"];\r\n_map = _this select 0;\r\n_theta = _this select 1;\r\n\r\n_p = _map select 0;\r\n_p1 = _map select 1;\r\n_p2 = _map select 2;\r\n\r\n_q1 = +(_map select 3);\r\n_q2 = +(_map select 4);\r\n_u = _map select 5;\r\n_d = _map select 6;\r\n\r\n/* Step 4 */\r\n_q2 set[0, (_q1 select 0) * cos(_theta) - (_q1 select 1) * sin(_theta)];\r\n_q2 set[1, (_q1 select 0) * sin(_theta) + (_q1 select 1) * cos(_theta)];\r\n_q2 set[2, (_q1 select 2)];\r\n\r\n/* Inverse of step 3 */\r\n_q1 set[0,   (_q2 select 0) * _d + (_q2 select 2) * (_u select 0)];\r\n_q1 set[1,   (_q2 select 1)];\r\n_q1 set[2, - (_q2 select 0) * (_u select 0) + (_q2 select 2) * _d];\r\n\r\n/* Inverse of step 2 */\r\nif (_d != 0) then {\r\n  _q2 set[0,   (_q1 select 0)];\r\n  _q2 set[1,   (_q1 select 1) * (_u select 2) / _d + (_q1 select 2) * (_u select 1) / _d];\r\n  _q2 set[2, - (_q1 select 1) * (_u select 1) / _d + (_q1 select 2) * (_u select 2) / _d];\r\n} else {\r\n  _q2 = _q1;\r\n};\r\n\r\n/* Inverse of step 1 */\r\n_q1 = _q2 vectorAdd _p1;\r\n_q1;"},{"name":"ace_laser_fnc_rotateVectLineGetMap","file":"laser/functions/fnc_rotateVectLineGetMap.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_p\", \"_theta\", \"_p1\", \"_p2\", \"_q1\", \"_q2\", \"_u\", \"_d\"];\r\n_p = _this select 0;\r\n_p1 = _this select 1;\r\n_p2 = _this select 2;\r\n\r\n_q2 = [];\r\n\r\n/* Step 1 */\r\n_q1 = _p vectorDiff _p1;\r\n_u = _p2 vectorDiff _p1;\r\n_u = vectorNormalized _u;\r\n_d = sqrt((_u select 1)*(_u select 1) + (_u select 2)*(_u select 2));\r\n\r\n/* Step 2 */\r\nif (_d != 0) then {\r\n  _q2 set[0, (_q1 select 0)];\r\n  _q2 set[1, (_q1 select 1) * (_u select 2) / _d - (_q1 select 2) * (_u select 1) / _d];\r\n  _q2 set[2, (_q1 select 1) * (_u select 1) / _d + (_q1 select 2) * (_u select 2) / _d];\r\n} else {\r\n  _q2 = _q1;\r\n};\r\n\r\n/* Step 3 */\r\n_q1 set[0, (_q2 select 0) * _d - (_q2 select 2) * (_u select 0)];\r\n_q1 set[1, (_q2 select 1)];\r\n_q1 set[2, (_q2 select 0) * (_u select 0) + (_q2 select 2) * _d];\r\n\r\n[_p, _p1, _p2, _q1, _q2, _u, _d]"},{"name":"ace_laser_fnc_seekerFindLaserSpot","file":"laser/functions/fnc_seekerFindLaserSpot.sqf","text":"/*\r\n * Author: Nou\r\n * Turn a laser designator on.\r\n *\r\n * Arguments:\r\n * 0: Position of seeker (ASL) <position>\r\n * 1: Direction vector (will be normalized) <vector>\r\n * 2: Seeker FOV in degrees <number>\r\n * 3: Seeker wavelength sensitivity range, [1550,1550] is common eye safe. <array>\r\n * 4: Seeker laser code. <number>\r\n *\r\n * Return Value:\r\n * Array, [Strongest compatible laser spot ASL pos, owner object] Nil array values if nothing found.\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_pos\", \"_seekerWavelengths\", \"_seekerCode\", \"_spots\", \"_buckets\", \"_excludes\", \"_bucketIndex\", \"_finalPos\", \"_owner\", \"_obj\", \"_x\", \"_method\"];\r\nprivate [\"_emitterWavelength\", \"_laserCode\", \"_divergence\", \"_laser\", \"_res\", \"_bucketPos\", \"_bucketList\", \"_c\", \"_forEachIndex\", \"_index\"];\r\nprivate [\"_testPos\", \"_finalBuckets\", \"_largest\", \"_largestIndex\", \"_finalBucket\", \"_owners\", \"_avgX\", \"_avgY\", \"_avgZ\", \"_count\", \"_maxOwner\", \"_maxOwnerIndex\", \"_finalOwner\"];\r\nprivate[\"_dir\", \"_seekerCos\", \"_seekerFov\", \"_testDotProduct\", \"_testPoint\", \"_testPointVector\"];\r\n\r\n_pos = _this select 0;\r\n_dir = vectorNormalized (_this select 1);\r\n_seekerFov = _this select 2;\r\n_seekerWavelengths = _this select 3;\r\n_seekerCode = _this select 4;\r\n\r\n\r\n_seekerCos = cos _seekerFov;\r\n\r\n_spots = [];\r\n_buckets = [];\r\n_excludes = [];\r\n_bucketIndex = 0;\r\n_finalPos = nil;\r\n_finalOwner = nil;\r\n\r\n{\r\n    _obj = _x select 0;\r\n    _owner = _x select 1;\r\n    _method = _x select 2;\r\n    _emitterWavelength = _x select 3;\r\n    _laserCode = _x select 4;\r\n    _divergence = _x select 5;\r\n    if(alive _obj && {_emitterWavelength >= (_seekerWavelengths select 0)} && {_emitterWavelength <= (_seekerWavelengths select 1)} && {_laserCode == _seekerCode}) then {\r\n        _laser = [];\r\n        if(IS_CODE(_method)) then {\r\n            _laser = _x call _method;\r\n        } else {\r\n            if(IS_STRING(_method)) then {\r\n                _laser = _x call (missionNamespace getVariable [_method, {}]);\r\n            } else {\r\n                if(IS_ARRAY(_method)) then {\r\n                    if(count _method == 2) then {\r\n                        _laser = [ATLtoASL (_obj modelToWorldVisual (_method select 0)), _obj weaponDirection (_method select 1)];\r\n                    } else {\r\n                        if(count _method == 3) then {\r\n                            _laser = [ATLtoASL (_obj modelToWorldVisual (_method select 0)), (ATLtoASL (_obj modelToWorldVisual (_method select 1))) vectorFromTo (ATLtoASL (_obj modelToWorldVisual (_method select 2)))];\r\n                        };\r\n                    };\r\n                };\r\n            };\r\n        };\r\n\r\n        //Handle Weird Data Return\r\n        if (_laser params [[\"_laserPos\", [], [[]], 3], [\"_laserDir\", [], [[]], 3]]) then {\r\n            _res = [_laserPos, _laserDir, _divergence] call FUNC(shootCone);\r\n            {\r\n                _testPoint = _x select 0;\r\n                _testPointVector = vectorNormalized (_testPoint vectorDiff _pos);\r\n                _testDotProduct = _dir vectorDotProduct _testPointVector;\r\n                if(_testDotProduct > _seekerCos) then {\r\n                    _spots pushBack [_testPoint, _owner];\r\n                };\r\n            } forEach (_res select 2);\r\n        };\r\n    };\r\n} forEach (GVAR(laserEmitters) select 1);\r\n\r\nif((count _spots) > 0) then {\r\n    _bucketPos = nil;\r\n    _bucketList = nil;\r\n    _c = 0;\r\n    while { count(_spots) != count(_excludes) && _c < (count _spots) } do {\r\n        scopeName \"mainSearch\";\r\n        {\r\n            if(!(_forEachIndex in _excludes)) then {\r\n                _index = _buckets pushBack [_x, [_x]];\r\n                _excludes pushBack _forEachIndex;\r\n                _bucketPos = _x select 0;\r\n                _bucketList = (_buckets select _index) select 1;\r\n                breakTo \"mainSearch\";\r\n            };\r\n        } forEach _spots;\r\n        {\r\n            if(!(_forEachIndex in _excludes)) then {\r\n                _testPos = (_x select 0);\r\n                if(_testPos vectorDistanceSqr _bucketPos <= 100) then {\r\n                    _bucketList pushBack _x;\r\n                    _excludes pushBack _forEachIndex;\r\n                };\r\n            };\r\n        } forEach _spots;\r\n        _c = _c + 1;\r\n    };\r\n    _finalBuckets = [];\r\n    _largest = -1;\r\n    _largestIndex = 0;\r\n    {\r\n        _index = _finalBuckets pushBack [];\r\n        _bucketList = _finalBuckets select _index;\r\n        {\r\n            _testPos = (_x select 0);\r\n            if(!terrainIntersectASL [_pos, _testPos] && {!lineIntersects [_pos, _testPos]}) then {\r\n                _bucketList pushBack _x;\r\n            };\r\n        } forEach (_x select 1);\r\n        if((count _bucketList) > _largest) then {\r\n            _largest = (count _bucketList);\r\n            _largestIndex = _index;\r\n        };\r\n    } forEach _buckets;\r\n\r\n    _finalBucket = _finalBuckets select _largestIndex;\r\n    _owners = HASH_CREATE;\r\n\r\n    if(count _finalBucket > 0) then {\r\n        _avgX = 0;\r\n        _avgY = 0;\r\n        _avgZ = 0;\r\n        {\r\n            //player sideChat format[\"x: %1\", _x];\r\n            _avgX = _avgX + ((_x select 0) select 0);\r\n            _avgY = _avgY + ((_x select 0) select 1);\r\n            _avgZ = _avgZ + ((_x select 0) select 2);\r\n            _owner = _x select 1;\r\n            if(HASH_HASKEY(_owners, _owner)) then {\r\n                _count = HASH_GET(_owners, _owner);\r\n                HASH_SET(_owners, _owner, _count+1);\r\n            } else {\r\n                HASH_SET(_owners, _owner, 1);\r\n            };\r\n        } forEach _finalBucket;\r\n        _count = count _finalBucket;\r\n        _finalPos = [_avgX/_count, _avgY/_count, _avgZ/_count];\r\n        _maxOwner = -1;\r\n        _maxOwnerIndex = 0;\r\n        {\r\n            if((_owners select 1) select _forEachIndex > _maxOwner) then {\r\n                _maxOwner = (_owners select 1) select _forEachIndex;\r\n                _maxOwnerIndex = _forEachIndex;\r\n            };\r\n        } forEach (_owners select 0);\r\n        _finalOwner = (_owners select 0) select _maxOwnerIndex;\r\n    };\r\n};\r\n[_finalPos, _owner];\r\n"},{"name":"ace_laser_fnc_shootCone","file":"laser/functions/fnc_shootCone.sqf","text":"#include \"script_component.hpp\"\r\n//#define DEBUG_MODE_FULL\r\nprivate [\"_i\", \"_divergence\",\"_pos\",\"_vec\",\"_longestReturn\",\"_shortestReturn\",\"_resultPositions\",\"_p1\",\"_p2\",\"_p\",\"_v\",\"_cp\",\"_vecRotateMap\",\"_result\", \"_resultPos\",\"_distance\",\"_count\",\"_pos2\",\"_radOffset\",\"_offset\",\"_offsetPos\",\"_offsetVector\"];\r\n_divergence = 0.3;\r\n_pos = _this select 0;\r\n_vec = _this select 1;\r\nif(count _this > 2) then {\r\n    _divergence = _this select 2;\r\n};\r\n_count = 3;\r\nif(count _this > 3) then {\r\n    _count = _this select 3;\r\n};\r\n_longestReturn = -1000000000;\r\n_shortestReturn = 1000000000;\r\n_resultPositions = [];\r\n_p1 = [0,0,0];\r\n_p2 = +_vec;\r\n_p = (_vec call CBA_fnc_vect2polar);\r\n_v = [(_p select 0), (_p select 1), (_p select 2)+90] call CBA_fnc_polar2vect;\r\n_cp = _vec vectorCrossProduct _v;\r\n\r\n_vecRotateMap = [_cp, _p1, _p2] call FUNC(rotateVectLineGetMap);\r\n\r\n_result = [_pos, _vec] call FUNC(shootRay);\r\n_resultPos = _result select 0;\r\nif(!isNil \"_resultPos\") then {\r\n    _distance = _result select 1;\r\n    if(_distance < _shortestReturn) then {\r\n        _shortestReturn = _distance;\r\n    };\r\n    if(_distance > _longestReturn) then {\r\n        _longestReturn = _distance;\r\n    };\r\n    _resultPositions pushBack _result;\r\n#ifdef DEBUG_MODE_FULL\r\n    // DRAW_LINES set[(count DRAW_LINES), [_pos, _resultPos, [0, 1, 0, 1]]];\r\n    drawLine3D [ASLtoATL _pos, ASLtoATL _resultPos, [1,0,0,1]];\r\n#endif\r\n};\r\n\r\n\r\n_pos2 = _pos vectorAdd (_vec vectorMultiply 1000);\r\n{\r\n    for \"_i\" from 0 to ceil(_count*_x) do {\r\n        _radOffset = random 360;\r\n        _offset = [_vecRotateMap, (((360/_count)*_i)+_radOffset) mod 360] call FUNC(rotateVectLine);\r\n        _offsetPos = _pos2 vectorAdd (_offset vectorMultiply (_divergence*_x));\r\n        _offsetVector = _pos vectorFromTo _offsetPos;\r\n        _result = [_pos, _offsetVector] call FUNC(shootRay);\r\n        _resultPos = _result select 0;\r\n        if(!isNil \"_resultPos\") then {\r\n            _distance = _result select 1;\r\n            if(_distance < _shortestReturn) then {\r\n                _shortestReturn = _distance;\r\n            };\r\n            if(_distance > _longestReturn) then {\r\n                _longestReturn = _distance;\r\n            };\r\n            _resultPositions pushBack _result;\r\n#ifdef DEBUG_MODE_FULL\r\n            // DRAW_LINES set[(count DRAW_LINES), [_pos, _resultPos, [0, 1, 0, 1]]];\r\n            drawLine3D [ASLtoATL _pos, ASLtoATL _resultPos, [1,0,0,1]];\r\n#endif\r\n        };\r\n    };\r\n} forEach [1,0.5,0.25];\r\n[_longestReturn, _shortestReturn, _resultPositions];"},{"name":"ace_laser_fnc_shootRay","file":"laser/functions/fnc_shootRay.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_pos\", \"_vec\", \"_distance\", \"_resultPos\", \"_fidelity\", \"_lastPos\", \"_i\", \"_nextPos\"];\r\nscopeName \"main\";\r\n_pos = _this select 0;\r\n_vec = _this select 1;\r\n_distance = 0;\r\n_resultPos = nil;\r\n_fidelity = [1000,100,10,1,0.1];\r\n_lastPos = +_pos;\r\n{\r\n    scopeName \"mainSearch\";\r\n    for \"_i\" from 1 to 10 do {\r\n        _nextPos = _lastPos vectorAdd (_vec vectorMultiply _x);\r\n        if(terrainIntersectASL [_lastPos, _nextPos] || {lineIntersects [_lastPos, _nextPos]}) then {\r\n            _resultPos = _lastPos;\r\n            breakTo \"mainSearch\";\r\n        } else {\r\n            _distance = _distance + _x;\r\n            _lastPos = _nextPos;\r\n        };\r\n    };\r\n} forEach _fidelity;\r\n[_resultPos, _distance];"},{"name":"ace_laser_fnc_unitTurretCanLockLaser","file":"laser/functions/fnc_unitTurretCanLockLaser.sqf","text":"/*\r\n * Author: jaynus\r\n * Checks if the turret occupied by the given unit can lock a laser designator and select laser code.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Has designator? <BOOL>\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nEXPLODE_1_PVT(_this,_unit);\r\n\r\n// Get the player turret path\r\nprivate [\"_turret\",\"_config\",\"_turretConfig\"];\r\n_turret = [_unit] call EFUNC(common,getTurretIndex);\r\n_config = configFile >> \"CfgVehicles\" >> typeOf vehicle _unit;\r\n_turretConfig = [_config, _turret] call EFUNC(common,getTurretConfigPath);\r\n\r\ngetNumber (_turretConfig >> QGVAR(CanLockLaser)) > 0\r\n"},{"name":"ace_laser_fnc_vanillaLaserSeekerHandler","file":"laser/functions/fnc_vanillaLaserSeekerHandler.sqf","text":"/*\r\n * Author: jaynus\r\n * Handler function for laser network code.\r\n *\r\n * Arguments:\r\n * 0: Emitter\r\n * 1: Owner\r\n * \r\n * Return Value:\r\n *    [position, direction]\r\n */\r\n//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nprivate[\"_emmiter\", \"_owner\", \"_gunnerInfo\", \"_turretInfo\", \"_povPos\", \"_povDir\"];\r\n\r\n_emmiter = _this select 0;\r\n_owner = _this select 1;\r\n\r\n// Not in a vehicle....\r\n// @TODO: handle lasering from turrets\r\nif( (vehicle _emmiter) == _emmiter && alive _emmiter && (currentWeapon _emmiter) == \"LaserDesignator\") exitWith {\r\n    [(eyePos _emmiter), (eyeDirection _emmiter)]\r\n};\r\n\r\n[-1,-1]"}],"laser_selfdesignate":[{"name":"ace_laser_selfdesignate_fnc_findLaserSource","file":"laser_selfdesignate/functions/fnc_findLaserSource.sqf","text":"/*\r\n * Author: jaynus\r\n * Handler function for laser network code.\r\n *\r\n * Arguments:\r\n * 0: Emitter <OBJECT>\r\n *\r\n * Return Value:\r\n * 0: position <ARRAY>\r\n * 1: direction <ARRAY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate[\"_gunnerInfo\", \"_turretInfo\"];\r\nparams [\"_emmiter\"];\r\n\r\n_gunnerInfo = [_emmiter, (currentWeapon _emmiter)] call CBA_fnc_getFirer;\r\n_turretInfo = [_emmiter, _gunnerInfo select 1] call EFUNC(common,getTurretDirection);\r\n_turretInfo params [[\"_povPos\", -1], [\"_povDir\", -1]];\r\n\r\n[_povPos, _povDir]\r\n"},{"name":"ace_laser_selfdesignate_fnc_initDesignatorActions","file":"laser_selfdesignate/functions/fnc_initDesignatorActions.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Initializes the actions for turning on/off the laser for vehicles that have them\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\n// Add action to class if it is not already done\r\nprivate [\"_type\", \"_initializedClasses\"];\r\n_type = typeOf _vehicle;\r\n_initializedClasses = GETGVAR(initializedClasses,[]);\r\n\r\n// do nothing if the class is already initialized\r\nif (_type in _initializedClasses) exitWith {};\r\n_initializedClasses pushBack _type;\r\nGVAR(initializedClasses) = _initializedClasses;\r\n\r\n{\r\n    private [\"_turretConfig\",\"_onAction\",\"_offAction\"];\r\n    _turretConfig = [configFile >> \"CfgVehicles\" >> _type, _x] call EFUNC(common,getTurretConfigPath);\r\n\r\n    if (getNumber (_turretConfig >> QGVAR(Enabled)) == 1) exitWith {\r\n        // @todo: Add the state variables to the vehicle, instead of to the client\r\n        // e.g.: _vehicle setVariable [format [\"%1_%2\", QGVAR(active),  _x], false];\r\n\r\n        // Add actions\r\n        _onAction = [QGVAR(LaserOn), localize LSTRING(DesignatorOn), \"\",\r\n        {\r\n            // Statement\r\n            _this call FUNC(laserHudDesignateOn)\r\n        },\r\n        {\r\n            // Condition\r\n            !GVAR(active) && {[ACE_player] call FUNC(unitTurretHasDesignator)}\r\n        }] call EFUNC(interact_menu,createAction);\r\n\r\n        _offAction = [QGVAR(LaserOff), localize LSTRING(DesignatorOff), \"\",\r\n        {\r\n            // Statement\r\n            _this call FUNC(laserHudDesignateOff)\r\n        },\r\n        {\r\n            // Condition\r\n            GVAR(active) && {[ACE_player] call FUNC(unitTurretHasDesignator)}\r\n        }] call EFUNC(interact_menu,createAction);\r\n\r\n        [_type, 1, [\"ACE_SelfActions\"], _onAction] call EFUNC(interact_menu,addActionToClass);\r\n        [_type, 1, [\"ACE_SelfActions\"], _offAction] call EFUNC(interact_menu,addActionToClass);\r\n    };\r\n} forEach allTurrets _vehicle;\r\n"},{"name":"ace_laser_selfdesignate_fnc_laserHudDesignateOff","file":"laser_selfdesignate/functions/fnc_laserHudDesignateOff.sqf","text":"/*\r\n * Author: jaynus\r\n * Turns off passed laser self designation.\r\n *\r\n * Arguments:\r\n * 0: Shooter, player shooting the laser\r\n * 1: LaserUUID, the UUID of the laser returned by EFUNC(laser,laserOn)\r\n * 2: Local laser target, unused.\r\n *\r\n * Return Value:\r\n * True <BOOL>\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif( (count _this) > 2) then {\r\n    params [\"\", \"_laserUuid\"];\r\n    [_laserUuid] call EFUNC(laser,laserOff);\r\n    // @TODO: Nou gets to field all tickets about missing lasers.\r\n    //deleteVehicle _localLaserTarget;\r\n};\r\n\r\nGVAR(active) = false;\r\n\r\nif(!isNil QGVAR(selfDesignateHandle)) then {\r\n    [GVAR(selfDesignateHandle)] call CBA_fnc_removePerFrameHandler;\r\n    GVAR(selfDesignateHandle) = nil;\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_laser_selfdesignate_fnc_laserHudDesignateOn","file":"laser_selfdesignate/functions/fnc_laserHudDesignateOn.sqf","text":"/*\r\n * Author: jaynus\r\n * Turns on laser self designation from this vehicle based on the turret.\r\n * There are no arguments, because it is all strictly based on the users vehicle.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nTRACE_1(\"enter\", _this);\r\n\r\n#define FCS_UPDATE_DELAY 1\r\n\r\nFUNC(laserHudDesignatePFH) = {\r\n    private[\"_strongestResultPos\", \"_args\", \"_localLaserTarget\", \"_laserResultPosition\", \"_laserResult\", \"_shooter\", \"_vehicle\", \"_weapon\", \"_gunnerInfo\", \"_turretInfo\", \"_pov\", \"_gunBeg\", \"_gunEnd\", \"_povPos\", \"_povDir\", \"_result\", \"_resultPositions\", \"_firstResult\", \"_forceUpdateTime\"];\r\n    params [\"_args\"];\r\n    _args params [\"_shooter\", \"_localLaserTarget\"];\r\n    _vehicle = vehicle _shooter;\r\n    TRACE_1(\"\", _args);\r\n\r\n    if((vehicle _shooter) == _shooter || {!alive _shooter} || {isNull _vehicle} || {!GVAR(active)} ) exitWith {\r\n        _args call FUNC(laserHudDesignateOff);\r\n    };\r\n    if(!([_shooter] call FUNC(unitTurretHasDesignator)) ) exitWith {\r\n        _args call FUNC(laserHudDesignateOff);\r\n    };\r\n\r\n    if( (count _args) < 4) then {\r\n        _args set[3, diag_tickTime + FCS_UPDATE_DELAY];\r\n    };\r\n    _forceUpdateTime = _args select 3;\r\n\r\n    // @TODO: We don't have anything here we need to do the calculations for right now\r\n    /*\r\n\r\n    _gunnerInfo = [_vehicle, (currentWeapon _vehicle)] call CBA_fnc_getFirer;\r\n    _turretInfo = [_vehicle, _gunnerInfo select 1] call EFUNC(common,getTurretDirection);\r\n    _povPos = _turretInfo select 0;\r\n\r\n    _laserCode = (vehicle ACE_player) getVariable[\"ace_laser_code\", ACE_DEFAULT_LASER_CODE];\r\n    _waveLength = (vehicle ACE_player) getVariable[\"ace_laser_waveLength\", ACE_DEFAULT_LASER_WAVELENGTH];\r\n\r\n\r\n    _laserResult = [_povPos, [_waveLength,_waveLength], _laserCode] call EFUNC(laser,seekerFindLaserSpot);\r\n    _laserResultPosition = _laserResult select 0;\r\n    TRACE_1(\"Search\", _laserResult);\r\n\r\n    if((count _laserResult) > 0) then {\r\n        // @TODO: Nou gets to field all tickets about missing lasers.\r\n        //_localLaserTarget setPosASL _laserResultPosition;\r\n    };\r\n    */\r\n\r\n    if(diag_tickTime > _forceUpdateTime) then {\r\n        [\"ace_fcs_forceUpdate\", []] call ace_common_fnc_localEvent;\r\n         _args set[3, diag_tickTime + FCS_UPDATE_DELAY];\r\n    };\r\n\r\n    _this set[0, _args];\r\n};\r\n\r\nprivate [\"_laserTarget\", \"_handle\", \"_vehicle\", \"_laserUuid\", \"_waveLength\", \"_beamSpread\", \"_laserCode\"];\r\n\r\nif(!GVAR(active)) then {\r\n    GVAR(active) = true;\r\n\r\n    TRACE_1(\"Activating laser\", \"\");\r\n\r\n    // Get the self-designation variables, or use defaults\r\n    _laserCode = (vehicle ACE_player) getVariable[\"ace_laser_code\", ACE_DEFAULT_LASER_CODE];\r\n    _waveLength = (vehicle ACE_player) getVariable[\"ace_laser_waveLength\", ACE_DEFAULT_LASER_WAVELENGTH];\r\n    _beamSpread = (vehicle ACE_player) getVariable[\"ace_laser_beamSpread\", ACE_DEFAULT_LASER_BEAMSPREAD];\r\n\r\n    _laserUuid = [(vehicle ACE_player), ACE_player, QFUNC(findLaserSource), _waveLength, _laserCode, _beamSpread] call EFUNC(laser,laserOn);\r\n\r\n    // @TODO: Create the local target for the players side\r\n    // @TODO: Nou gets to field all tickets about missing lasers.\r\n    //_localLaserTarget = \"LaserTargetW\" createVehicleLocal (getpos ACE_player);\r\n\r\n    GVAR(selfDesignateHandle) = [FUNC(laserHudDesignatePFH), 0.1, [ACE_player, _laserUuid, nil]] call CBA_fnc_addPerFrameHandler;\r\n} else {\r\n    [] call FUNC(laserHudDesignateOff);\r\n    [] call FUNC(laserHudDesignateOn);\r\n};\r\n"},{"name":"ace_laser_selfdesignate_fnc_unitTurretHasDesignator","file":"laser_selfdesignate/functions/fnc_unitTurretHasDesignator.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Checks if the turret occupied by the given unit has a laser designator\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Has unit designator <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// Get the player turret path\r\nprivate [\"_turret\",\"_config\",\"_turretConfig\"];\r\n_turret = [_unit] call EFUNC(common,getTurretIndex);\r\n_config = configFile >> \"CfgVehicles\" >> typeOf vehicle _unit;\r\n_turretConfig = [_config, _turret] call EFUNC(common,getTurretConfigPath);\r\n\r\ngetNumber (_turretConfig >> QGVAR(Enabled)) > 0\r\n"}],"laserpointer":[{"name":"ace_laserpointer_fnc_drawLaserpoint","file":"laserpointer/functions/fnc_drawLaserpoint.sqf","text":"/*\r\n * Author: commy2 and esteldunedain\r\n * Draw a Laser Point\r\n *\r\n * Arguments:\r\n * 0: Target unit <OBJECT>\r\n * 1: Range <NUMBER>\r\n * 2: is Green <BOOL>\r\n * 3: Brightness <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, 10, false, 2] call ace_laserpointer_fnc_drawLaserpoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_range\", \"_isGreen\", \"_brightness\"];\r\n\r\nprivate _unit = ACE_player;\r\n\r\nprivate _p0 = AGLToASL (_target modelToWorldVisual (_target selectionPosition \"righthand\"));\r\n\r\n// Find a system of orthogonal reference vectors\r\n// _v1 points in the direction of the weapon\r\n// _v2 points to the right of the weapon\r\n// _v3 points to the top side of the weapon\r\nprivate _v1 = _target weaponDirection currentWeapon _target;\r\nprivate _v2 = vectorNormalized (_v1 vectorCrossProduct [0,0,1]);\r\nprivate _v3 = _v2 vectorCrossProduct _v1;\r\n\r\n// Offset over the 3 reference axis\r\n// This offset could eventually be configured by weapon in the config\r\n#define OFFV1 0.31\r\n#define OFFV2 0\r\n#define OFFV3 0.08\r\n\r\n// Offset _p0, the start of the laser\r\n_p0 = _p0 vectorAdd (_v1 vectorMultiply OFFV1) vectorAdd (_v3 vectorMultiply OFFV3) vectorAdd (_v2 vectorMultiply OFFV2);\r\n\r\n// Calculate _p1, the potential end of the laser\r\nprivate _p1 = _p0 vectorAdd (_v1 vectorMultiply _range);\r\n\r\nprivate _pL = lineIntersectsSurfaces [_p0, _p1, _unit, vehicle _unit] select 0 select 0;\r\n\r\n// no intersection found, quit\r\nif (isNil \"_pL\") exitWith {};\r\n\r\nprivate _distance = _p0 vectorDistance _pL;\r\n\r\n//systemChat str _distance;\r\nif (_distance < 0.5) exitWith {};\r\n\r\n_pL = _p0 vectorAdd (_v1 vectorMultiply _distance);\r\n\r\nprivate _pL2 = _p0 vectorAdd (_v1 vectorMultiply (_distance - 0.5));\r\n\r\n_pL = ASLtoAGL _pL;\r\n\r\n/*\r\ndrawLine3D [\r\n    _p0,\r\n    _pL,\r\n    [[1,0,0,1], [0,1,0,1]] select _isGreen\r\n];\r\n*/\r\n\r\n//systemChat str [_target, \"FIRE\"] intersect [_camPos, _pL];\r\n\r\nprivate _camPos = positionCameraToWorld [0,0,0.2];\r\n\r\nif (count ([_target, \"FIRE\"] intersect [_camPos, _pL]) > 0) exitWith {};\r\nif (count ([_unit, \"FIRE\"] intersect [_camPos, _pL]) > 0) exitWith {};\r\n\r\n// Convert _camPos to ASL\r\n_camPos = AGLToASL _camPos;\r\n\r\nif (terrainIntersectASL [_camPos, _pL2]) exitWith {};\r\nif (lineIntersects [_camPos, _pL2]) exitWith {};\r\n\r\nprivate _size = 2 * sqrt (1 / _distance) * (call EFUNC(common,getZoom));\r\n\r\ndrawIcon3D [\r\n    format [\"\\a3\\weapons_f\\acc\\data\\collimdot_%1_ca.paa\", [\"red\", \"green\"] select _isGreen],\r\n    [[1,0.25,0.25,0.5*_brightness], [0.25,1,0.25,0.5*_brightness]] select _isGreen,\r\n    _pL,\r\n    _size,\r\n    _size,\r\n    45,\r\n    \"\",\r\n    0,\r\n    0.05\r\n];\r\n"},{"name":"ace_laserpointer_fnc_onDraw","file":"laserpointer/functions/fnc_onDraw.sqf","text":"/*\r\n * Author: commy2\r\n * Draw the visible laser beams of all cached units.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _isIR = currentVisionMode ACE_player;\r\n\r\nif (_isIR == 2) exitWith {};\r\n\r\n_isIR = _isIR == 1;\r\n\r\nprivate _brightness = 2 - call EFUNC(common,ambientBrightness);\r\n\r\n{\r\n    private _weapon = currentWeapon _x;\r\n    private _laser = (_x weaponAccessories _weapon) select 1;\r\n\r\n    if (_laser != \"\") then {\r\n        private _cacheName = format [QGVAR(laser_%1), _laser];\r\n        private _laserID = missionNamespace getVariable [_cacheName, -1];\r\n\r\n        if (missionNamespace getVariable [_cacheName, -1] == -1) then {\r\n            _laserID = getNumber (configFile >> \"CfgWeapons\" >> _laser >> \"ACE_laserpointer\");\r\n            missionNamespace setVariable [_cacheName, _laserID];\r\n        };\r\n\r\n        if (_laserID > 0 && {_x isFlashlightOn _weapon}) then {\r\n            [_x, 100, (_laserID == 2 || _isIR), _brightness] call FUNC(drawLaserpoint);\r\n        };\r\n    };\r\n    false\r\n} count GVAR(nearUnits);\r\n"},{"name":"ace_laserpointer_fnc_switchLaserLightMode","file":"laserpointer/functions/fnc_switchLaserLightMode.sqf","text":"/*\r\n * Author: Commy2\r\n * Switch between laser modes.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\n\r\nprivate _pointer = (_unit weaponAccessories _weapon) select 1;\r\n\r\nif (_pointer == \"\") exitWith {};\r\n\r\nprivate _config = configFile >> \"CfgWeapons\" >> _pointer;\r\n\r\nprivate _nextPointer = getText (_config >> \"ACE_nextModeClass\");\r\n\r\nif (_nextPointer == \"\") exitWith {};\r\n\r\n//If system disabled, don't switch to a laser:\r\nprivate _nextPointerIsLaser = getNumber (configFile >> \"CfgWeapons\" >> _nextPointer >> \"ACE_laserpointer\");\r\nif ((!GVAR(enabled)) && {_nextPointerIsLaser == 1}) exitWith {};\r\n\r\n// disable inheritance for this entry, because addons claim this as a base class for convenience\r\nif !((_config >> \"ACE_nextModeClass\") in configProperties [_config, \"true\", false]) exitWith {};\r\n\r\n_unit addWeaponItem [_weapon, _nextPointer];\r\n\r\nprivate _error = false;\r\n\r\nif ((_unit weaponAccessories _weapon) select 1 != _nextPointer) then {\r\n    ERROR(\"NextPointer not compatible\");\r\n    _unit addWeaponItem [_weapon, _pointer];\r\n    _error = true;\r\n};\r\n\r\nif (!_error) then {\r\n    private _description = getText (configFile >> \"CfgWeapons\" >> _nextPointer >> \"ACE_modeDescription\");\r\n    private _picture = getText (configFile >> \"CfgWeapons\" >> _nextPointer >> \"picture\");\r\n\r\n    [_description, _picture] call EFUNC(common,displayTextPicture);\r\n} else {\r\n    ACE_LOGERROR_3(\"Failed to add %1 to %2 - reverting to %3\",_nextPointer,_weapon,_pointer);\r\n};\r\n\r\nplaySound \"ACE_Sound_Click\";\r\n"}],"logistics_uavbattery":[{"name":"ace_logistics_uavbattery_fnc_canRefuelUAV","file":"logistics_uavbattery/functions/fnc_canRefuelUAV.sqf","text":"/*\r\n * Author: marc_book\r\n * Tests if unit can refuel the target UAV\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: UAV <OBJECT>\r\n *\r\n * Return Value:\r\n * Can the player rechange the UAV <BOOL>\r\n *\r\n * Example:\r\n * [player, theUAV] call ace_logistics_uavbattery_fnc_canRefuelUAV\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\"];\r\n\r\n(\"ACE_UAVBattery\" in (items _caller)) && {(fuel _target) < 1} && {(speed _target) < 1} && {!(isEngineOn _target)} && {(_target distance _caller) <= 4}\r\n"},{"name":"ace_logistics_uavbattery_fnc_refuelUAV","file":"logistics_uavbattery/functions/fnc_refuelUAV.sqf","text":"/*\r\n * Author: marc_book\r\n * Starts refueling/recharging the 'Dartar' UAVs\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: UAV <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, theUAV] call ace_logistics_uavbattery_fnc_refuelUAV\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate [\"_onFinish\", \"_onFailure\"];\r\nparams [\"_caller\", \"_target\"];\r\n\r\nif (!(_this call FUNC(canRefuelUAV))) exitWith {};\r\n\r\n_onFinish = {\r\n    (_this select 0) params [\"_caller\", \"_target\"];\r\n    _caller removeItem \"ACE_UAVBattery\";\r\n    playSound3D [QUOTE(PATHTO_R(sounds\\exchange_battery.ogg)), objNull, false, getPosASL _caller, 1, 1, 10];\r\n      [QEGVAR(common,setFuel), [_target, 1], [_target]] call CBA_fnc_targetEvent; //setFuel is local\r\n};\r\n\r\n_onFailure = {\r\n    (_this select 0) params [\"_caller\", \"_target\"];\r\n    [_caller, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\r\n};\r\n\r\n[_caller, \"AinvPknlMstpSnonWnonDr_medic5\", 0] call EFUNC(common,doAnimation);\r\n\r\n[10, [_caller, _target], _onFinish, _onFailure, (localize LSTRING(Battery_Recharge)), {(_this select 0) call FUNC(canRefuelUAV)}] call EFUNC(common,progressBar);\r\n"}],"logistics_wirecutter":[{"name":"ace_logistics_wirecutter_fnc_cutDownFence","file":"logistics_wirecutter/functions/fnc_cutDownFence.sqf","text":"/*\r\n * Author: gpgpgpgp, edited by commy2, PabstMirror\r\n * Starts cutting down a fence\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fence <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, berlinWall] call ace_logistics_wirecutter_fnc_cutDownFence\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_fenceObject\"];\r\nTRACE_2(\"params\",_unit,_fenceObject);\r\n\r\nprivate [\"_timeToCut\", \"_progressCheck\", \"_onCompletion\", \"_onFail\"];\r\n\r\nif (_unit != ACE_player) exitWith {};\r\n\r\n_timeToCut = if ([ACE_player] call EFUNC(common,isEngineer)) then {7.5} else {11};\r\n\r\n[ACE_player, \"AinvPknlMstpSnonWnonDr_medic5\", 0] call EFUNC(common,doAnimation);\r\n\r\n_onCompletion = {\r\n    TRACE_1(\"_onCompletion\",_this);\r\n    (_this select 0) params [\"_fenceObject\", \"\", \"_unit\"];\r\n    _fenceObject setdamage 1;\r\n    [_unit, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\r\n};\r\n\r\n_onFail = {\r\n    TRACE_1(\"_onFail\", _this);\r\n    (_this select 0) params [\"\", \"\", \"_unit\"];\r\n    [_unit, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\r\n};\r\n\r\n_progressCheck = {\r\n    params [\"_args\", \"_passedTime\"];\r\n    _args params [\"_fenceObject\", \"_lastSoundEffectTime\"];\r\n\r\n    if (_passedTime > (_lastSoundEffectTime + SOUND_CLIP_TIME_SPACEING)) then {\r\n        playSound3D [QUOTE(PATHTO_R(sound\\wirecut.ogg)), objNull, false, (getPosASL ACE_player), 3, 1, 10];\r\n        _args set [1, _passedTime];\r\n    };\r\n\r\n    ((!isNull _fenceObject) && {(damage _fenceObject) < 1} && {(\"ACE_wirecutter\" in (items ACE_player))})\r\n};\r\n\r\n[_timeToCut, [_fenceObject,0,_unit], _onCompletion, _onFail, localize LSTRING(CuttingFence), _progressCheck] call EFUNC(common,progressBar);\r\n"},{"name":"ace_logistics_wirecutter_fnc_interactEH","file":"logistics_wirecutter/functions/fnc_interactEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * When interact_menu starts rendering (from \"interact_keyDown\" event)\r\n *\r\n * Arguments:\r\n * Interact Menu Type (0 - world, 1 - self) <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [0] call ace_logistics_wirecutter_fnc_interactEH\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_interactionType\"];\r\n\r\n//Ignore self-interaction menu or mounted vehicle interaction\r\nif ((_interactionType != 0) || {(vehicle ACE_player) != ACE_player}) exitWith {};\r\n\r\n//for performance only do stuff it they have a wirecutter item\r\n//(if they somehow get one durring keydown they'll just have to reopen)\r\nif (!(\"ACE_wirecutter\" in (items ace_player))) exitWith {};\r\n\r\nTRACE_1(\"Starting wire-cut action PFEH\",_interactionType);\r\n\r\n[{\r\n    private [\"_fncStatement\", \"_attachedFence\", \"_fncCondition\", \"_helper\", \"_action\"];\r\n    params [\"_args\", \"_pfID\"];\r\n    _args params [\"_setPosition\", \"_addedHelpers\", \"_fencesHelped\"];\r\n\r\n    if (!EGVAR(interact_menu,keyDown)) then {\r\n        {deleteVehicle _x; nil} count _addedHelpers;\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n    } else {\r\n        // Prevent Rare Error when ending mission with interact key down:\r\n        if (isNull ace_player) exitWith {};\r\n\r\n        //If player moved >5 meters from last pos, then rescan\r\n        if (((getPosASL ace_player) distance _setPosition) > 5) then {\r\n\r\n            _fncStatement = {\r\n                params [\"\", \"_player\", \"_attachedFence\"];\r\n                [_player, _attachedFence] call FUNC(cutDownFence);\r\n            };\r\n            _fncCondition = {\r\n                params [\"_helper\", \"_player\", \"_attachedFence\"];\r\n                if (!([_player, _attachedFence, []] call EFUNC(common,canInteractWith))) exitWith {false};\r\n                ((!isNull _attachedFence) && {(damage _attachedFence) < 1} && {(\"ACE_wirecutter\" in (items _player))} && {\r\n                    //Custom LOS check for fence\r\n                    private _headPos = ACE_player modelToWorldVisual (ACE_player selectionPosition \"pilot\");\r\n                    ((!(lineIntersects [AGLtoASL _headPos, AGLtoASL (_helper modelToWorldVisual [0,0,1.25]), _attachedFence, ACE_player])) ||\r\n                    {!(lineIntersects [AGLtoASL _headPos, getPosASL _attachedFence, _attachedFence, ACE_player])})\r\n                })\r\n            };\r\n\r\n            {\r\n                if (!(_x in _fencesHelped)) then {\r\n                    if ([_x] call FUNC(isFence)) then {\r\n                        _fencesHelped pushBack _x;\r\n                        _helper = \"ACE_LogicDummy\" createVehicleLocal (getpos _x);\r\n                        _action = [QGVAR(helperCutFence), (localize LSTRING(CutFence)), QPATHTOF(ui\\wirecutter_ca.paa), _fncStatement, _fncCondition, {}, _x, {[0,0,0]}, 5.5, [false, false, false, false, true]] call EFUNC(interact_menu,createAction);\r\n                        [_helper, 0, [],_action] call EFUNC(interact_menu,addActionToObject);\r\n                        _helper setPosASL ((getPosASL _x) vectorAdd [0,0,1.25]);\r\n                        _addedHelpers pushBack _helper;\r\n                    };\r\n                };\r\n                nil\r\n            } count nearestObjects [ace_player, [], 15];\r\n\r\n            _args set [0, (getPosASL ace_player)];\r\n        };\r\n    };\r\n}, 0.1, [((getPosASL ace_player) vectorAdd [-100,0,0]), [], []]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_logistics_wirecutter_fnc_isFence","file":"logistics_wirecutter/functions/fnc_isFence.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Checks if object is a fence.  Should work on any fence type, even (typeOf == \"\").\r\n * Call is fairly expensive because of all of the string checking.\r\n *\r\n * Arguments:\r\n * 0: An Object To Test <OBJECT>\r\n *\r\n * Return Value:\r\n * Is it a fence <BOOL>\r\n *\r\n * Example:\r\n * [aFence] call ace_logistics_wirecutter_fnc_isFence\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\nTRACE_1(\"params\",_object);\r\n\r\nprivate _typeOf = typeOf _object;\r\n\r\nprivate _returnValue = if (_typeOf != \"\") then {\r\n    //If the fence has configEntry we can check it directly\r\n    (1 == (getNumber (configFile >> \"CfgVehicles\" >> _typeOf >> QGVAR(isFence))));\r\n} else {\r\n    //Check the p3d name against list (in script_component.hpp)\r\n    ((getModelInfo _object) select 0) in FENCE_P3DS;\r\n};\r\n\r\n_returnValue\r\n"}],"magazinerepack":[{"name":"ace_magazinerepack_fnc_getMagazineChildren","file":"magazinerepack/functions/fnc_getMagazineChildren.sqf","text":"/*\r\n * Author: PabstMirror, commy2, esteldunedain, Ruthberg\r\n * Gets magazine children for interaciton menu.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * ChildActions <ARRAY>\r\n *\r\n * Example:\r\n * [player, player] call ace_magazinerepack_fnc_getMagazineChildren\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_player\"];\r\n\r\n// get all mags and ammo count\r\nprivate _unitMagazines = [];\r\nprivate _unitMagCounts = [];\r\n{\r\n    private \"_xFullMagazineCount\";\r\n    _x params [\"_xClassname\", \"_xCount\", \"_xLoaded\", \"_xType\"];\r\n\r\n    _xFullMagazineCount = getNumber (configFile >> \"CfgMagazines\" >> _xClassname >> \"count\");\r\n\r\n    //for every partial magazine, that is either in inventory or can be moved there\r\n    if ((_xCount < _xFullMagazineCount) && {_xCount > 0} && {(!_xLoaded) || {_player canAdd _xClassname}}) then {\r\n        private _index = _unitMagazines find _xClassname;\r\n        if (_index == -1) then {\r\n            _unitMagazines pushBack _xClassname;\r\n            _unitMagCounts pushBack [_xCount];\r\n        } else {\r\n            (_unitMagCounts select _index) pushBack _xCount;\r\n        };\r\n    };\r\n} forEach (magazinesAmmoFull _player);\r\n\r\n//Create the action children for all appropriate magazines\r\nprivate _actions = [];\r\n{\r\n    if ((count (_unitMagCounts select _forEachIndex)) >= 2) then {// Ignore invalid magazines types (need 2+ partial mags to do anything)\r\n        private _displayName = getText (configFile >> \"CfgMagazines\" >> _x >> \"displayName\");\r\n        private _picture = getText (configFile >> \"CfgMagazines\" >> _x >> \"picture\");\r\n\r\n        private _action = [_x, _displayName, _picture, {_this call FUNC(startRepackingMagazine)}, {true}, {}, _x] call EFUNC(interact_menu,createAction);\r\n        _actions pushBack [_action, [], _player];\r\n    };\r\n} forEach _unitMagazines;\r\n\r\n_actions\r\n"},{"name":"ace_magazinerepack_fnc_magazineRepackFinish","file":"magazinerepack/functions/fnc_magazineRepackFinish.sqf","text":"/*\r\n * Author: PabstMirror (based on repack from commy2, esteldunedain, Ruthberg)\r\n * Simulates repacking a set of magazines.\r\n * Returns the timing and magazines counts at every stage.\r\n *\r\n * Arguments:\r\n * 0: Arguments [classname,lastAmmoStatus,events] <ARRAY>\r\n * 1: Elapsed Time <NUMBER>\r\n * 2: Total Time Repacking Will Take <NUMBER>\r\n * 3: Error Code <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * (args from progressBar) call ace_magazinerepack_fnc_magazineRepackFinish\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_args\", \"_elapsedTime\", \"_totalTime\", \"_errorCode\"];\r\n_args params [\"_magazineClassname\", \"_lastAmmoCount\"];\r\n\r\nprivate _fullMagazineCount = getNumber (configFile >> \"CfgMagazines\" >> _magazineClassname >> \"count\");\r\n\r\n// Don't show anything if player can't interact\r\nif (!([ACE_player, objNull, [\"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith))) exitWith {};\r\n\r\n// Count mags\r\nprivate _fullMags = 0;\r\nprivate _partialMags = 0;\r\n{\r\n    _x params [\"_classname\", \"_count\"];\r\n\r\n    if (_classname == _magazineClassname && {_count > 0}) then {\r\n        if (_count == _fullMagazineCount) then {\r\n            _fullMags = _fullMags + 1;\r\n        } else {\r\n            _partialMags = _partialMags + 1;\r\n        };\r\n    };\r\n} forEach (magazinesAmmoFull ACE_player);\r\n\r\nprivate _repackedMagsText = format [localize LSTRING(RepackedMagazinesCount), _fullMags, _partialMags];\r\n\r\nprivate _structuredOutputText = if (_errorCode == 0) then {\r\n    format [\"<t align='center'>%1</t><br/>%2\", localize LSTRING(RepackComplete), _repackedMagsText];\r\n} else {\r\n    format [\"<t align='center'>%1</t><br/>%2\", localize LSTRING(RepackInterrupted), _repackedMagsText];\r\n};\r\n\r\nprivate _picture = getText (configFile >> \"CfgMagazines\" >> _magazineClassname >> \"picture\");\r\n[_structuredOutputText, _picture, nil, nil, 2.5] call EFUNC(common,displayTextPicture);\r\n"},{"name":"ace_magazinerepack_fnc_magazineRepackProgress","file":"magazinerepack/functions/fnc_magazineRepackProgress.sqf","text":"/*\r\n * Author: PabstMirror (based on repack from commy2, esteldunedain, Ruthberg)\r\n * Handles each frame durring the repack progressBar.\r\n * On each event (repacked bullet or move to new mag) it plays a sound and syncs up the new magazines to the player.\r\n *\r\n * Arguments:\r\n * 0: Arguments [classname,lastAmmoStatus,events] <ARRAY>\r\n * 1: Elapsed Time <NUMBER>\r\n * 2: Total Time Repacking Will Take <NUMBER>\r\n *\r\n * Return Value:\r\n * Keep going (on missing mags return false) <BOOL>\r\n *\r\n * Example:\r\n * (args from progressBar) call ace_magazinerepack_fnc_magazineRepackProgress\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_ars\", \"_elapsedTime\", \"_totalTime\"];\r\n_args params [\"_magazineClassname\", \"_lastAmmoCount\", \"_simEvents\"];\r\n\r\nif !((_simEvents select 0) params [\"_nextEventTime\", \"_nextEventIsBullet\", \"_nextEventMags\"]) exitWith { ERROR(\"No Event\"); false };\r\n\r\n\r\nif (_nextEventTime > _elapsedTime) exitWith { true };//waiting on next event\r\n\r\n//Verify we aren't missing any ammo\r\nprivate _currentAmmoCount = [];\r\n{\r\n    _x params [\"_xClassname\", \"_xCount\"];\r\n    if (_xClassname == _magazineClassname) then {\r\n        _currentAmmoCount pushBack _xCount;\r\n    };\r\n} forEach (magazinesAmmo ACE_player);  //only inventory mags\r\n\r\n//Go through mags we currently have and check off the ones we should have\r\nprivate _addedMagazines = +_currentAmmoCount;\r\nprivate _missingAmmo = false;\r\n{\r\n    if (_x > 0) then {\r\n        private _index = _addedMagazines find _x;\r\n        if (_index != -1) then {\r\n            _addedMagazines deleteAt _index;\r\n        } else {\r\n            _missingAmmo = true;\r\n        };\r\n    };\r\n} forEach _lastAmmoCount;\r\n\r\nif (_missingAmmo) exitWith { false };  //something removed ammo that was being repacked (could be other players or scripts)\r\n\r\nprivate _updateMagazinesOnPlayerFnc = {\r\n    ACE_player removeMagazines _magazineClassname;  //remove inventory magazines\r\n    {\r\n        if (_x > 0) then {\r\n            ACE_player addMagazine [_magazineClassname, _x];\r\n        };\r\n    } forEach (_addedMagazines + _nextEventMags);\r\n    _args set [1, _nextEventMags];  //store the new magazine\r\n};\r\n\r\nif (_nextEventIsBullet) then {\r\n    playSound QGVAR(soundRoundFinished);\r\n    if ((((count _simEvents) % 3) == 0) || {(count _simEvents) == 1}) then {\r\n        //For performance - only update mags every 3 bullets (or if it's the last event)\r\n        call _updateMagazinesOnPlayerFnc;\r\n    };\r\n} else {\r\n    playSound QGVAR(soundMagazineFinished);\r\n    call _updateMagazinesOnPlayerFnc;\r\n};\r\n\r\n_simEvents deleteAt 0; //pop off the event\r\n\r\ntrue\r\n"},{"name":"ace_magazinerepack_fnc_simulateRepackEvents","file":"magazinerepack/functions/fnc_simulateRepackEvents.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Simulates repacking a set of magazines.\r\n * Returns the timing and magazines counts at every stage.\r\n *\r\n * Arguments:\r\n * 0: How many rounds in a full magazine <NUMBER>\r\n * 1: Array of rounds in magazines <ARRAY>\r\n * 2: Magazine is a belt <BOOL>\r\n *\r\n * Return Value:\r\n * Array in format [time, isBullet, array of ammo counts] <ARRAY>\r\n *\r\n * Example:\r\n * [10, [1,2,3,8], false] call ace_magazinerepack_fnc_simulateRepackEvents =\r\n * [[1.5,true,[0,2,3,9]],[3.5,false,[0,2,3,9]],[5,true,[0,1,3,10]],[7,false,[0,1,3,10]],[8.5,true,[0,0,4,10]],[10.5,false,[0,0,4,10]]]\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_fullMagazineCount\", \"_arrayOfAmmoCounts\", \"_isBelt\"];\r\n\r\n// Sort Ascending - Don't modify original\r\n_arrayOfAmmoCounts = +_arrayOfAmmoCounts;\r\n_arrayOfAmmoCounts sort true;\r\n\r\nprivate _fnc_newMag = {\r\n    _time = _time + GVAR(TimePerMagazine);\r\n    _events pushBack [_time, false, +_arrayOfAmmoCounts];\r\n};\r\n\r\nprivate _lowIndex = 0;\r\nprivate _highIndex = (count _arrayOfAmmoCounts) - 1;\r\nprivate _ammoToTransfer = 0;\r\nprivate _ammoAvailable = 0;\r\nprivate _time = 0;\r\nprivate _events = [];\r\n\r\nwhile {_lowIndex < _highIndex} do {\r\n    private _ammoNeeded = _fullMagazineCount - (_arrayOfAmmoCounts select _highIndex);\r\n    _ammoAvailable = _arrayOfAmmoCounts select _lowIndex;\r\n\r\n    if (_ammoAvailable == 0) then {\r\n        _lowIndex = _lowIndex + 1;\r\n        call _fnc_newMag;\r\n    } else {\r\n        if (_ammoNeeded == 0) then {\r\n            _highIndex = _highIndex - 1;\r\n            call _fnc_newMag;\r\n        } else {\r\n            private _ammoSwaped = _ammoAvailable min _ammoNeeded;\r\n            if (_isBelt) then {\r\n                _time = _time + GVAR(TimePerBeltLink);\r\n                _arrayOfAmmoCounts set [_lowIndex, (_arrayOfAmmoCounts select _lowIndex) - _ammoSwaped];\r\n                _arrayOfAmmoCounts set [_highIndex, (_arrayOfAmmoCounts select _highIndex) + _ammoSwaped];\r\n                _events pushBack [_time, true, +_arrayOfAmmoCounts];\r\n            } else {\r\n                for \"_swapProgress\" from 0 to (_ammoSwaped - 1) do {\r\n                    _time = _time + GVAR(TimePerAmmo);\r\n                    _arrayOfAmmoCounts set [_lowIndex, (_arrayOfAmmoCounts select _lowIndex) - 1];\r\n                    _arrayOfAmmoCounts set [_highIndex, (_arrayOfAmmoCounts select _highIndex) + 1];\r\n                    _events pushBack [_time, true, +_arrayOfAmmoCounts];\r\n                };\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n_events\r\n"},{"name":"ace_magazinerepack_fnc_startRepackingMagazine","file":"magazinerepack/functions/fnc_startRepackingMagazine.sqf","text":"/*\r\n * Author: PabstMirror (based on repack from commy2, esteldunedain, Ruthberg)\r\n * Starts repacking a specific magazine classname.\r\n * If room in inventory, unload magazine from weapon to be repacked.\r\n * Precalcs all the event timings and starts the progressBar.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Player <OBJECT>\r\n * 2: Magazine Classname <STRING>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, player, \"30Rnd_65x39_caseless_mag\"] call ace_magazinerepack_fnc_startRepackingMagazine\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_player\", \"_magazineClassname\"];\r\n\r\nif (isNil \"_magazineClassname\" || {_magazineClassname == \"\"}) exitWith {ERROR(\"Bad Mag Classname\");};\r\nprivate _magazineCfg = configFile >> \"CfgMagazines\" >> _magazineClassname;\r\n// Calculate actual ammo to transfer during repack\r\nprivate _fullMagazineCount = getNumber (_magazineCfg >> \"count\");\r\n//Is linked belt magazine:\r\nprivate _isBelt = isNumber (_magazineCfg >> \"ACE_isBelt\") && {(getNumber (_magazineCfg >> \"ACE_isBelt\")) == 1};\r\n\r\n//Check canInteractWith:\r\nif !([_player, objNull, [\"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {};\r\n\r\n[_player] call EFUNC(common,goKneeling);\r\n\r\nprivate _startingAmmoCounts = [];\r\n{\r\n    _x params [\"_xClassname\", \"_xCount\", \"_xLoaded\", \"_xType\"];\r\n    if (_xClassname == _magazineClassname && {_xCount != _fullMagazineCount && {_xCount > 0}}) then {\r\n        if (_xLoaded) then {\r\n            //Try to Remove from weapon and add to inventory, otherwise ignore\r\n            if (_player canAdd _magazineClassname) then {\r\n                switch (_xType) do {\r\n                    case (1): {_player removePrimaryWeaponItem _magazineClassname};\r\n                    case (2): {_player removeHandgunItem _magazineClassname};\r\n                    case (4): {_player removeSecondaryWeaponItem _magazineClassname};\r\n                    default {ERROR(\"Loaded Location Invalid\");};\r\n                };\r\n                _player addMagazine [_magazineClassname, _xCount];\r\n                _startingAmmoCounts pushBack _xCount;\r\n            };\r\n        } else {\r\n            _startingAmmoCounts pushBack _xCount;\r\n        };\r\n    };\r\n} forEach (magazinesAmmoFull _player);\r\n\r\nif (count _startingAmmoCounts < 2) exitWith {ERROR(\"Not Enough Mags to Repack\");};\r\n\r\nprivate _simEvents = [_fullMagazineCount, _startingAmmoCounts, _isBelt] call FUNC(simulateRepackEvents);\r\nprivate _totalTime = _simEvents select (count _simEvents - 1) select 0;\r\n\r\n[\r\n    _totalTime,\r\n    [_magazineClassname, _startingAmmoCounts, _simEvents],\r\n    {_this call FUNC(magazineRepackFinish)},\r\n    {_this call FUNC(magazineRepackFinish)},\r\n    (localize LSTRING(RepackingMagazine)),\r\n    {_this call FUNC(magazineRepackProgress)},\r\n    [\"isNotInside\", \"isNotSitting\"]\r\n] call EFUNC(common,progressBar);\r\n"}],"main":[],"map":[{"name":"ace_map_fnc_blueForceTrackingModule","file":"map/functions/fnc_blueForceTrackingModule.sqf","text":"/*\r\n* Author: KoffeinFlummi\r\n* Initializes the blue force tracking module.\r\n*\r\n* Arguments:\r\n* Whatever the module provides. (I dunno.)\r\n*\r\n* Return Value:\r\n* None\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {};\r\n\r\nparams [\"_logic\"];\r\n\r\n[_logic, QGVAR(BFT_Enabled), \"Enabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(BFT_Interval), \"Interval\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(BFT_HideAiGroups), \"HideAiGroups\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(BFT_ShowPlayerNames), \"ShowPlayerNames\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO_3(\"Blue Force Tracking Module Initialized:\", GVAR(BFT_Enabled), GVAR(BFT_Interval), GVAR(BFT_HideAiGroups));\r\n"},{"name":"ace_map_fnc_blueForceTrackingUpdate","file":"map/functions/fnc_blueForceTrackingUpdate.sqf","text":"// #define ENABLE_PERFORMANCE_COUNTERS\r\n#include \"script_component.hpp\"\r\n// BEGIN_COUNTER(blueForceTrackingUpdate);\r\n\r\nprivate [\"_groupsToDrawMarkers\", \"_playersToDrawMarkers\", \"_playerSide\", \"_anyPlayers\", \"_colour\", \"_marker\"];\r\n\r\n// Delete last set of markers (always)\r\n{\r\n    deleteMarkerLocal _x;\r\n} forEach GVAR(BFT_markers);\r\n\r\nGVAR(BFT_markers) = [];\r\n\r\nif (GVAR(BFT_Enabled) and {(!isNil \"ACE_player\") and {alive ACE_player}}) then {\r\n\r\n    _groupsToDrawMarkers = [];\r\n    _playerSide = call EFUNC(common,playerSide);\r\n\r\n    _groupsToDrawMarkers = allGroups select {side _x == _playerSide};\r\n\r\n    if (GVAR(BFT_HideAiGroups)) then {\r\n        _groupsToDrawMarkers = _groupsToDrawMarkers select {\r\n            {\r\n                _x call EFUNC(common,isPlayer);\r\n            } count units _x > 0;\r\n        };\r\n    };\r\n\r\n    if (GVAR(BFT_ShowPlayerNames)) then {\r\n        _playersToDrawMarkers = allPlayers select {side _x == _playerSide};\r\n\r\n        {\r\n            private _markerType = [_x] call EFUNC(common,getMarkerType);\r\n            private _colour = format [\"Color%1\", side _x];\r\n\r\n            private _marker = createMarkerLocal [format [\"ACE_BFT_%1\", _forEachIndex], [(getPos _x) select 0, (getPos _x) select 1]];\r\n            _marker setMarkerTypeLocal _markerType;\r\n            _marker setMarkerColorLocal _colour;\r\n            _marker setMarkerTextLocal (name _x);\r\n\r\n            GVAR(BFT_markers) pushBack _marker;\r\n        } forEach _playersToDrawMarkers;\r\n\r\n        _groupsToDrawMarkers = _groupsToDrawMarkers select {\r\n            {\r\n                !(_x call EFUNC(common,isPlayer));\r\n            } count units _x > 0;\r\n        };\r\n    };\r\n\r\n    {\r\n        private _markerType = [_x] call EFUNC(common,getMarkerType);\r\n        private _colour = format [\"Color%1\", side _x];\r\n\r\n        private _marker = createMarkerLocal [format [\"ACE_BFT_%1\", _forEachIndex], [(getPos leader _x) select 0, (getPos leader _x) select 1]];\r\n        _marker setMarkerTypeLocal _markerType;\r\n        _marker setMarkerColorLocal _colour;\r\n        _marker setMarkerTextLocal (groupId _x);\r\n\r\n        GVAR(BFT_markers) pushBack _marker;\r\n    } forEach _groupsToDrawMarkers;\r\n};\r\n\r\n// END_COUNTER(blueForceTrackingUpdate);\r\n"},{"name":"ace_map_fnc_compileFlashlightMenu","file":"map/functions/fnc_compileFlashlightMenu.sqf","text":"/*\r\n * Author: voiper\r\n * Compile list of flashlight classnames and add to the \"Flashlight\" parent menu.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Player <OBJECT>\r\n * 3: Parameters <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_player, _player, []] call ace_map_fnc_compileFlashlightMenu;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"_player\"];\r\n\r\nprivate[\"_action\", \"_actions\", \"_cfg\", \"_displayName\", \"_flashlights\", \"_icon\", \"_statement\"];\r\n\r\n_actions = [];\r\n_flashlights = [_player] call FUNC(getUnitFlashlights);\r\n\r\n//add all carried flashlight menus and on/off submenu actions\r\n{\r\n    _cfg = (configFile >> \"CfgWeapons\" >> _x);\r\n    _displayName = getText (_cfg >> \"displayName\");\r\n    _icon = getText (_cfg >> \"picture\");\r\n\r\n    _statement = if (GVAR(flashlightInUse) == _x) then {\r\n        _displayName = format [localize LSTRING(turnLightOff), _displayName];\r\n        {[\"\"] call FUNC(switchFlashlight)}\r\n    } else {\r\n        _displayName = format [localize LSTRING(turnLightOn), _displayName];\r\n        {[_this select 2] call FUNC(switchFlashlight)}\r\n    };\r\n\r\n    _action = [_x, _displayName, _icon, _statement, {true}, {}, _x] call EFUNC(interact_menu,createAction);\r\n    _actions pushBack [_action, [], _player];\r\n} forEach _flashlights;\r\n\r\n_actions\r\n"},{"name":"ace_map_fnc_determineMapLight","file":"map/functions/fnc_determineMapLight.sqf","text":"/*\r\n* Author: Rocko and esteldunedain\r\n* Calculates the current map illumination for a given unit\r\n*\r\n* Arguments:\r\n* 0: Unit <OBJECT>\r\n*\r\n* Return Value:\r\n* 0: Does the map needs shading? <BOOL>\r\n* 1: Color of the overlay <ARRAY>\r\n*\r\n* Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\nparams [\"_unit\"];\r\n\r\nprivate [\"_fnc_blendColor\", \"_lightTint\", \"_fnc_calcColor\", \"_l\", \"_lightLevel\", \"_vehicle\", \"_isEnclosed\", \"_nearObjects\", \"_light\", \"_ll\", \"_flashlight\", \"_flareTint\"];\r\n\r\n// Blend two colors\r\n_fnc_blendColor = {\r\n    params [\"_c1\", \"_c2\", \"_alpha\"];\r\n    [(_c1 select 0) * (1 - _alpha) + (_c2 select 0) * _alpha,\r\n     (_c1 select 1) * (1 - _alpha) + (_c2 select 1) * _alpha,\r\n     (_c1 select 2) * (1 - _alpha) + (_c2 select 2) * _alpha,\r\n     (_c1 select 3) * (1 - _alpha) + (_c2 select 3) * _alpha]\r\n};\r\n\r\n// Ambient light tint depending on time of day\r\n_lightTint = call {\r\n    if (sunOrMoon == 1.0) exitWith { [0.5,0.5,0.5,1] };\r\n    if (sunOrMoon > 0.80) exitWith { [[1.0 - overcast,0.2,0,1], [1,1,1,1],   (sunOrMoon - 0.8)/0.2] call _fnc_blendColor };\r\n    if (sunOrMoon > 0.50) exitWith { [[0,0,0.1,1], [1.0 - overcast,0.2,0,1], (sunOrMoon - 0.5)/0.3] call _fnc_blendColor };\r\n    if (sunOrMoon <= 0.5) exitWith { [0,0,0.1,1] };\r\n    [0,0,0,0]\r\n};\r\n\r\n// Calculates overlay color from tint and light level\r\n_fnc_calcColor = {\r\n    params [\"_c1\", \"_lightLevel\"];\r\n\r\n    if (_lightLevel < 0.5) then {\r\n        _l = _lightLevel / 0.5;\r\n        [(_c1 select 0) * _l,\r\n         (_c1 select 1) * _l,\r\n         (_c1 select 2) * _l,\r\n         (_c1 select 3) * (1 - _lightLevel)]\r\n    } else {\r\n        _l = (_lightLevel - 0.5) / 0.5;\r\n        [(_c1 select 0) * (1 - _l) + _l,\r\n         (_c1 select 1) * (1 - _l) + _l,\r\n         (_c1 select 2) * (1 - _l) + _l,\r\n         (_c1 select 3) * (1 - _lightLevel)]\r\n    };\r\n};\r\n\r\n_lightLevel = 0.04 + (0.96 * call EFUNC(common,ambientBrightness));\r\n\r\n/*\r\n// check if player has NVG enabled\r\nif (currentVisionMode _unit == 1) exitWith {\r\n    // stick to nvg color\r\n    [true, [154/255,253/255,177/255,0.5]]\r\n};\r\n*/\r\n\r\n// Do not obscure the map if the ambient light level is above 0.95\r\nif (_lightLevel > 0.95) exitWith {\r\n    [false, [0.5,0.5,0.5,0]]\r\n};\r\n\r\n_vehicle = vehicle _unit;\r\n\r\n// Do not obscure the map if the player is on a enclosed vehicle (assume internal illumination)\r\nif (_vehicle != _unit) then {\r\n    // Player is in a vehicle\r\n    if (!isTurnedOut _unit && { _vehicle isKindOf \"Tank\" || { ( _vehicle isKindOf \"Helicopter\" || _vehicle isKindOf \"Plane\" ) && { (driver _vehicle) == _unit || { (gunner _vehicle) == _unit } } } || {_vehicle isKindOf \"Wheeled_APC\"}}) then {\r\n        _isEnclosed = true;\r\n    };\r\n};\r\nif (_isEnclosed) exitWith {\r\n    TRACE_1(\"Player in a enclosed vehicle\",\"\");\r\n    [false, [1,1,1,0]]\r\n};\r\n\r\n// Player is not in a vehicle\r\nTRACE_1(\"Player is on foot or in an open vehicle\",\"\");\r\n\r\n// Check if player is near a campfires, streetlamps, units with flashlights, vehicles with lights on, etc. - 40m\r\n{\r\n    _lightLevel = _lightLevel max ([_unit, _x] call EFUNC(common,lightIntensityFromObject));\r\n} forEach nearestObjects [_unit, [\"All\"], 40];\r\n\r\n// @todo: Illumination flares (timed)\r\n\r\n// Using chemlights\r\n_nearObjects = (_unit nearObjects [\"SmokeShell\", 4]) select {alive _x && {toLower typeOf _x in [\"chemlight_red\", \"chemlight_green\", \"chemlight_blue\", \"chemlight_yellow\"]}};\r\n\r\nif (count (_nearObjects) > 0) then {\r\n    _light = _nearObjects select 0;\r\n\r\n    _ll = (1 - ((((_unit distance _light) - 2)/2) max 0)) * 0.4;\r\n    if (_ll > _lightLevel) then {\r\n        _flareTint = switch (toLower typeOf _light) do {\r\n            case \"chemlight_red\" : {[1,0,0,1]};\r\n            case \"chemlight_green\" : {[0,1,0,1]};\r\n            case \"chemlight_blue\" : {[0,0,1,1]};\r\n            case \"chemlight_yellow\" : {[1,1,0,1]};\r\n        };\r\n        _lightTint = [_lightTint, _flareTint, (_ll - _lightLevel)/(1 - _lightLevel)] call _fnc_blendColor;\r\n        _lightLevel = _ll;\r\n        TRACE_1(\"player near chemlight\",\"\");\r\n    };\r\n};\r\n\r\n// Do not obscure the map if the ambient light level is above 0.95\r\nif (_lightLevel > 0.95) exitWith {\r\n    [false, [0.5,0.5,0.5,0]]\r\n};\r\n\r\n// Calculate resulting map color\r\n[true, [_lightTint, _lightLevel] call _fnc_calcColor]\r\n"},{"name":"ace_map_fnc_determineZoom","file":"map/functions/fnc_determineZoom.sqf","text":"/*\r\n* Author: Rocko\r\n* Calculate the maximum zoom level allowed for the current map\r\n*\r\n* Arguments:\r\n* None\r\n*\r\n* Return Value:\r\n* None\r\n*\r\n* Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_grids\", \"_fourSize\", \"_sixSize\", \"_continue\", \"_size\", \"_i\"];\r\n_grids = (configFile >> \"CfgWorlds\" >> worldName >> \"Grid\");\r\n_fourSize = -1;\r\n_sixSize = -1;\r\nfor \"_i\" from 1 to 10 do {\r\n    _continue = false;\r\n    if (isClass(_grids >> format[\"Zoom%1\", _i])) then {\r\n        _continue = true;\r\n        _size = getText(_grids >> format[\"Zoom%1\", _i] >> \"formatX\");\r\n        if ((count toArray(_size)) == 2) then {\r\n            _fourSize = getNumber(_grids >> format[\"Zoom%1\", _i] >> \"zoomMax\");\r\n        };\r\n        if ((count toArray(_size)) == 3) then {\r\n            _sixSize = getNumber(_grids >> format[\"Zoom%1\", _i] >> \"zoomMax\");\r\n        };\r\n        if (_fourSize != -1 && {_sixSize != -1}) then {\r\n            _continue = false;\r\n        };\r\n    };\r\n    if (!_continue) exitWith {};\r\n};\r\n\r\nif(_fourSize != -1 && {_sixSize != -1}) then {\r\n    if (isNil QGVAR(minMapSize)) then {\r\n        GVAR(minMapSize) = _sixSize + 0.01\r\n    } else {\r\n        GVAR(minMapSize) = -1\r\n    };\r\n};\r\n"},{"name":"ace_map_fnc_flashlightGlow","file":"map/functions/fnc_flashlightGlow.sqf","text":"/*\r\n * Author: voiper\r\n * Add or remove global flashlight glow for when player is looking at map.\r\n *\r\n * Arguments:\r\n * 0: Flashlight classname (\"\" for off) <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"ACE_Flashlight_MX991\"] call ace_map_fnc_flashlightGlow;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_light\", \"_color\", \"_class\"];\r\nparams [\"_flashlight\"];\r\n\r\n_light = GVAR(glow);\r\nif (!isNull _light) then {\r\n    detach _light;\r\n    deleteVehicle _light;\r\n};\r\n\r\nif (_flashlight != \"\") then {\r\n    _color = getText (configFile >> \"CfgWeapons\" >> _flashlight >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Colour\");\r\n    if !(_color in [\"white\", \"red\", \"green\", \"blue\", \"yellow\"]) then {_color = \"white\"};\r\n    _class = format[\"ACE_FlashlightProxy_%1\", _color];\r\n\r\n    _light = _class createVehicle [0,0,0];\r\n    _light attachTo [ACE_player, [0,0.1,-0.05], \"neck\"];\r\n} else {\r\n    _light = objNull;\r\n};\r\n\r\nGVAR(glow) = _light;"},{"name":"ace_map_fnc_getUnitFlashlights","file":"map/functions/fnc_getUnitFlashlights.sqf","text":"/*\r\n * Author: voiper\r\n * Check a unit for any flashlights that can be used on map.\r\n *\r\n * Arguments:\r\n * 0: Unit to check <OBJECT>\r\n *\r\n * Return Value:\r\n * Flashlight classnames (empty for none) <ARRAY>\r\n *\r\n * Example:\r\n * [unit] call ace_map_fnc_getUnitFlashlights;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _flashlights = [];\r\n\r\n{\r\n    if ((isText (configFile >> \"CfgWeapons\" >> _x >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Colour\")) && !(_x in _flashlights)) then {\r\n        _flashlights pushBack _x;\r\n    };\r\n} forEach (items _unit);\r\n\r\n_flashlights\r\n"},{"name":"ace_map_fnc_moduleMap","file":"map/functions/fnc_moduleMap.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Initializes the Map module.\r\n *\r\n * Arguments:\r\n * Whatever the module provides. (I dunno.)\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(mapIllumination),          \"MapIllumination\"         ] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(mapGlow),                  \"MapGlow\"                 ] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(mapShake),                 \"MapShake\"                ] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(mapLimitZoom),             \"MapLimitZoom\"            ] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(mapShowCursorCoordinates), \"MapShowCursorCoordinates\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(DefaultChannel),           \"DefaultChannel\"          ] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO(\"Map Module Initialized.\");\r\n"},{"name":"ace_map_fnc_onDrawMap","file":"map/functions/fnc_onDrawMap.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\n((_this select 0) displayCtrl 1016) ctrlShow GVAR(mapShowCursorCoordinates);\r\n\r\n// hide clock when no watch in inventory, or whatever never ever\r\n((_this select 0) displayCtrl 101) ctrlShow GVAR(hasWatch);\r\n"},{"name":"ace_map_fnc_simulateMapLight","file":"map/functions/fnc_simulateMapLight.sqf","text":"/*\r\n* Author: voiper\r\n* Draw nearby lighting and sexy flashlight beams on main map.\r\n*\r\n* Arguments:\r\n* 0: Map control <CONTROL>\r\n* 1: Map zoom level <NUMBER>\r\n* 2: Current map centre <ARRAY>\r\n* 3: Light level from ace_map_fnc_determineMapLight <ARRAY>\r\n*\r\n* Return Value:\r\n* None\r\n*\r\n* Public: No\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_hmd\", \"_flashlight\", \"_screenSize\", \"_realViewPortY\", \"_realViewPortX\", \"_fillTex\", \"_colourAlpha\", \"_shadeAlpha\", \"_colourList\", \"_maxColour\"];\r\nparams [\"_mapCtrl\", \"_mapScale\", \"_mapCentre\", \"_lightLevel\"];\r\n\r\n_hmd = hmd ACE_player;\r\n_flashlight = GVAR(flashlightInUse);\r\n\r\n//map width (on screen) in pixels\r\n_screenSize = 640 * safeZoneWAbs;\r\n\r\n//resolution params (every frame in case resolution change)\r\ngetResolution params [\"_resX\", \"_resY\", \"_viewPortX\", \"_viewPortY\", \"\", \"_uiScale\"];\r\n\r\n//engine rounds the viewport ratios, when they should be fractions; this can cause problems\r\n_realViewPortY = _resY * _uiScale;\r\n_realViewPortX = _realViewPortY * 4/3;\r\n\r\n//textures\r\n_fillTex = \"#(rgb,8,8,3)color(0,0,0,1)\";\r\n\r\n//colour/alpha\r\n_lightLevel params [\"_r\", \"_g\", \"_b\", \"_a\"];\r\n_colourAlpha = (_r + _g + _b) min _a;\r\n_shadeAlpha = _a;\r\n\r\n_colourList = [_r, _g, _b];\r\n_colourList sort false;\r\n_maxColour = _colourList select 0;\r\n\r\n//ambient colour fill\r\n_mapCtrl drawIcon [format[\"#(rgb,8,8,3)color(%1,%2,%3,1)\", _r / _maxColour, _g / _maxColour, _b / _maxColour], [1,1,1,_colourAlpha], _mapCentre, _screenSize, _screenSize, 0, \"\", 0];\r\n\r\nif (_flashlight == \"\") then {\r\n    //ambient shade fill\r\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], _mapCentre, _screenSize, _screenSize, 0, \"\", 0];\r\n} else {\r\n    private [\"_mousePos\", \"_colour\", \"_size\", \"_flashTex\", \"_beamSize\", \"_viewPortRatioFixY\", \"_offsetX\", \"_offsetYDown\", \"_offsetYUp\"];\r\n    //mouse pos\r\n    _mousePos = GVAR(mousePos);\r\n\r\n    //flashlight settings\r\n    _colour = getText (configFile >> \"CfgWeapons\" >> _flashlight >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Colour\");\r\n    if !(_colour in [\"white\", \"red\", \"green\", \"blue\", \"yellow\"]) then {_colour = \"white\"};\r\n    _size = getNumber (configFile >> \"CfgWeapons\" >> _flashlight >> \"ItemInfo\" >> \"FlashLight\" >> \"ACE_Flashlight_Size\");\r\n    _flashTex = format[QUOTE(PATHTOF_SYS(ace,flashlights,UI\\Flashlight_Beam_%1_ca.paa)), _colour];\r\n    _beamSize = (safeZoneW/safeZoneWAbs) * _screenSize / _size;\r\n\r\n    //after 5x zoom, it's simulated to be fixed (it actually gets bigger relative to zoom)\r\n    if (_mapScale < 0.2) then {_beamSize = _beamSize / (_mapScale * (1 / 0.2))};\r\n\r\n    //assign corrective ratio to fix sub-pixel gaps/overlaps (symptom of viewport * X/Y resolution rounding)\r\n    _viewPortRatioFixY = if (_realViewPortY != _viewPortY) then {\r\n        _realViewPortX / (_realViewPortY / _viewPortY * _viewPortX)\r\n    } else {\r\n        if (_realViewPortX != _viewPortX) then {\r\n            _realViewPortX / _viewPortX\r\n        } else {\r\n            1\r\n        };\r\n    };\r\n\r\n    //offset the elements\r\n    _offsetX = _mapScale * GVAR(worldSize) * (_screenSize * 2 + _beamSize);\r\n    _offsetYDown = _mapScale * GVAR(worldSize) * (_screenSize + _beamSize) * _viewPortRatioFixY;\r\n    //up is bigger because of a potential exploit\r\n    _offsetYUp = _mapScale * GVAR(worldSize) * (_screenSize * 4 + _beamSize) * _viewPortRatioFixY;\r\n\r\n    //draw the matrix /whoa\r\n    _mapCtrl drawIcon [_flashTex, [1,1,1,_shadeAlpha], _mousePos, _beamSize, _beamSize, 0, \"\", 0]; //centre beam\r\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0) - _offsetX, (_mousePos select 1)], _screenSize * 2, _beamSize, 0, \"\", 0]; //left\r\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0) + _offsetX, (_mousePos select 1)], _screenSize * 2, _beamSize, 0, \"\", 0]; //right\r\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0), (_mousePos select 1) - _offsetYDown], _screenSize * 4, _screenSize, 0, \"\", 0]; //down\r\n    _mapCtrl drawIcon [_fillTex, [1,1,1,_shadeAlpha], [(_mousePos select 0), (_mousePos select 1) + _offsetYUp], _screenSize * 4, _screenSize * 4, 0, \"\", 0]; //up\r\n};\r\n"},{"name":"ace_map_fnc_switchFlashlight","file":"map/functions/fnc_switchFlashlight.sqf","text":"/*\r\n * Author: voioper\r\n * Switch flashlight.\r\n *\r\n * Arguments:\r\n * 0: Flashlight classname (\"\" for off) <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"ACE_Flashlight_MX991\"] call ace_map_fnc_switchFlashlight;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_flashlight\"];\r\n\r\nGVAR(flashlightInUse) = _flashlight;\r\nif (GVAR(mapGlow)) then {\r\n    [GVAR(flashlightInUse)] call FUNC(flashlightGlow);\r\n};\r\nplaySound \"ACE_map_flashlightClick\";"},{"name":"ace_map_fnc_updateMapEffects","file":"map/functions/fnc_updateMapEffects.sqf","text":"/*\r\n* Author: Rocko and esteldunedain\r\n* On map draw, updates the effects\r\n*\r\n* Arguments:\r\n* None\r\n*\r\n* Return Value:\r\n* None\r\n*\r\n* Public: No\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\nprivate [\"_mapCtrl\", \"_mapScale\", \"_mapCentre\", \"_light\"];\r\n_mapCtrl = findDisplay 12 displayCtrl 51;\r\n_mapScale = ctrlMapScale _mapCtrl;\r\n_mapCentre = _mapCtrl ctrlMapScreenToWorld [0.5, 0.5];\r\n\r\nif (GVAR(mapIllumination)) then {\r\n    //get nearby lighting\r\n    _light = [[ACE_player], FUNC(determineMapLight), missionNamespace, QGVAR(mapLight), 0.1] call EFUNC(common,cachedCall);\r\n\r\n    _light params [\"_applyLighting\", \"_lightLevel\"];\r\n\r\n    if (_applyLighting) then {\r\n        [_mapCtrl, _mapScale, _mapCentre, _lightLevel] call FUNC(simulateMapLight);\r\n    };\r\n};\r\n\r\nif (GVAR(mapShake)) then {\r\n    private [\"_speed\",\"_amplitude\", \"_time\", \"_shakePos\"];\r\n\r\n    // Only shake map while moving on foot\r\n    _speed = 0;\r\n    if (vehicle ACE_player == ACE_player) then {\r\n        _speed = vectorMagnitude (velocity ACE_player);\r\n    };\r\n\r\n    // If speed is large enough, create anims to shake map\r\n    if (_speed > 0.1) then {\r\n        if (ctrlMapAnimDone _mapCtrl) then {\r\n\r\n            _amplitude = (_speed - 0.1) / 5 * (1000 * _mapScale);\r\n            _time = 0.1;\r\n\r\n            _shakePos = [(GVAR(lastStillPosition) select 0) + sin((CBA_missionTime + _time - GVAR(lastStillTime))*100) * _amplitude * 0.25,\r\n                         (GVAR(lastStillPosition) select 1) + sin((CBA_missionTime + _time - GVAR(lastStillTime))*260) * _amplitude];\r\n\r\n            _mapCtrl ctrlMapAnimAdd [_time, _mapScale, _shakePos];\r\n            ctrlMapAnimCommit _mapCtrl;\r\n\r\n            GVAR(isShaking) = true;\r\n        };\r\n    } else {\r\n        if (GVAR(isShaking)) then {\r\n            // Stop shaking, return to original position\r\n            ctrlMapAnimClear _mapCtrl;\r\n            _mapCtrl ctrlMapAnimAdd [0, _mapScale, GVAR(lastStillPosition)];\r\n            ctrlMapAnimCommit _mapCtrl;\r\n            GVAR(isShaking) = false;\r\n        } else {\r\n            // The map is still, store state\r\n            GVAR(lastStillPosition) = _mapCentre;\r\n            GVAR(lastStillTime) = CBA_missionTime;\r\n        };\r\n    };\r\n};\r\n\r\nif (GVAR(mapLimitZoom)) then {\r\n    if (GVAR(minMapSize) >= _mapScale) then {\r\n        ctrlMapAnimClear _mapCtrl;\r\n        _mapCtrl ctrlMapAnimAdd [0, GVAR(minMapSize) + 0.001, _mapCentre];\r\n        ctrlMapAnimCommit _mapCtrl;\r\n    };\r\n};\r\n"}],"map_gestures":[{"name":"ace_map_gestures_fnc_assignClientIDOnServer","file":"map_gestures/functions/fnc_assignClientIDOnServer.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Assign readable client ID to unit on the server.\r\n *\r\n * Arguments:\r\n * 0: Unit name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"MikeMatrix\"] call ace_map_gestures_fnc_assignClientIDOnServer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unitName\"];\r\n\r\n{\r\n    if (name _x == _unitName) exitWith {\r\n        _x setVariable [QGVAR(owner_id), owner _x, true];\r\n    };\r\n} count playableUnits;\r\n"},{"name":"ace_map_gestures_fnc_drawMapGestures","file":"map_gestures/functions/fnc_drawMapGestures.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Receives and draws map gestures from nearby players.\r\n *\r\n * Arguments:\r\n * 0: Map Handle <CONTROL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [findDisplay 12 displayCtrl 51] call ace_map_gesutres_fnc_drawMapGestures\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define ICON_RENDER_SIZE 55\r\n#define ICON_TEXT_ALIGN \"left\"\r\n#define ICON_ANGLE 0\r\n#define ICON_SHADOW 1\r\n#define TEXT_FONT \"RobotoCondensedBold\"\r\n#define TEXT_ICON_RENDER_SIZE 20\r\n#define TEXT_SIZE 0.030\r\n#define TEXT_SHADOW 0\r\n\r\nif (!GVAR(enabled) || !visibleMap) exitWith {};\r\n\r\nprivate[\"_color\", \"_drawPosVariableName\", \"_group\", \"_grpName\", \"_pos\", \"_unitUID\"];\r\n\r\nparams [\"_mapHandle\"];\r\n\r\n// Iterate over all nearby players and render their pointer if player is transmitting.\r\n{\r\n    // Data variable name for unit\r\n    _unitUID = getPlayerUID _x;\r\n    _drawPosVariableName = if (!isNil \"_unitUID\" && _unitUID != \"\") then {format [QGVAR(%1_DrawPos), _unitUID]} else {nil};\r\n\r\n    if (!isNil \"_drawPosVariableName\") then {\r\n        if (isNil {missionNamespace getVariable _drawPosVariableName}) then {missionNamespace setVariable [_drawPosVariableName, [1, 1, 1]];};\r\n        _pos = missionNamespace getVariable _drawPosVariableName;\r\n\r\n        // Only render if the unit is alive and transmitting\r\n        if (alive _x && {_x getVariable QGVAR(Transmit)}) then {\r\n            _group = group _x;\r\n            _grpName = groupID _group;\r\n\r\n            // If color settings for the group exist, then use those, otherwise fall back to the default colors\r\n            _color = if (HASH_HASKEY(GVAR(GroupColorConfigurationMapping),_grpName)) then {\r\n                (GVAR(GroupColorConfigurations) select (HASH_GET(GVAR(GroupColorConfigurationMapping),_grpName))) select (_x != leader _group)\r\n            } else {\r\n                if (_x == leader _group) then {GVAR(defaultLeadColor)} else {GVAR(defaultColor)};\r\n            };\r\n\r\n            // Render icon and player name\r\n            _mapHandle drawIcon [\"\\a3\\ui_f\\data\\gui\\cfg\\Hints\\icon_text\\group_1_ca.paa\", _color, _pos, ICON_RENDER_SIZE, ICON_RENDER_SIZE, ICON_ANGLE, \"\", ICON_SHADOW, TEXT_SIZE, TEXT_FONT, ICON_TEXT_ALIGN];\r\n            _mapHandle drawIcon [\"#(argb,8,8,3)color(0,0,0,0)\", GVAR(nameTextColor), _pos, TEXT_ICON_RENDER_SIZE, TEXT_ICON_RENDER_SIZE, ICON_ANGLE, name _x, TEXT_SHADOW, TEXT_SIZE, TEXT_FONT, ICON_TEXT_ALIGN];\r\n        };\r\n    };\r\n    nil\r\n} count ([ACE_player, GVAR(maxRange)] call FUNC(getProximityPlayers));\r\n"},{"name":"ace_map_gestures_fnc_endTransmit","file":"map_gestures/functions/fnc_endTransmit.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Ensure that all variables used to indicate transmission are disabled.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_map_gestures_fnc_endTransmit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!GVAR(enabled)) exitWith {};\r\n\r\nACE_player setVariable [QGVAR(Transmit), false, true];\r\nGVAR(EnableTransmit) = false;\r\n"},{"name":"ace_map_gestures_fnc_getProximityPlayers","file":"map_gestures/functions/fnc_getProximityPlayers.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Returns all players in a given range and in the units vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Range <NUMBER>\r\n *\r\n * Return Value:\r\n * All units in proximity <ARRAY>\r\n *\r\n * Example:\r\n * [\"example value\"] call ace_module_fnc_functionName\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_proximityPlayers\";\r\n\r\nparams [\"_unit\", \"_range\"];\r\n\r\n_proximityPlayers = (getPos _unit) nearEntities [[\"CAMAnBase\"], _range];\r\n_proximityPlayers deleteAt (_proximityPlayers find _unit);\r\n_proximityPlayers append (crew vehicle _unit);\r\n_proximityPlayers\r\n"},{"name":"ace_map_gestures_fnc_initTransmit","file":"map_gestures/functions/fnc_initTransmit.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Initializes transmitting map gestures.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_map_gestures_fnc_initTransmit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!GVAR(enabled)) exitWith {};\r\n\r\nGVAR(EnableTransmit) = true;\r\n[FUNC(transmit), GVAR(interval), []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_map_gestures_fnc_isValidColorArray","file":"map_gestures/functions/fnc_isValidColorArray.sqf","text":"/*\r\n * Author: MikeMatrix\r\n * Validate if an array is in the propper color format.\r\n *\r\n * Arguments:\r\n * 0: Color Array <ARRAY>\r\n *\r\n * Return Value:\r\n * Is valid Color Array <BOOL>\r\n *\r\n * Example:\r\n * [[1, 0.2, 1, 0.5]] call ace_map_gestures_fnc_isValidColorArray\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nscopeName \"main\";\r\n\r\nparams [\"_colorArray\"];\r\n\r\nif (isNil \"_colorArray\") exitWith {false};\r\nif (!(_colorArray isEqualType [])) exitWith {false};\r\nif (count _colorArray != 4) exitWith {false};\r\n\r\n{\r\n    if ((!(_x isEqualType 0)) || {_x < 0 || _x > 1}) exitWith {false breakOut \"main\"};\r\n} count _colorArray;\r\n\r\ntrue\r\n"},{"name":"ace_map_gestures_fnc_moduleGroupSettings","file":"map_gestures/functions/fnc_moduleGroupSettings.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Initializes Settings for the groups modules and transcodes settings to a useable format.\r\n *\r\n * Arguments:\r\n * 0: Logic <LOGIC>\r\n * 1: Units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [module, [player], true] call ace_map_gestures_fnc_moduleGroupSettings\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_color\", \"_configurationGroupMappings\", \"_configurationIndex\", \"_configurations\", \"_leadColor\"];\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif (!_activated || !isServer) exitWith {};\r\n\r\n// Transcode string setting into usable array. Example: \"1,1,1,1\" -> [1, 1, 1, 1]\r\n_leadColor = call compile (\"[\" + (_logic getVariable [\"leadColor\", \"\"]) + \"]\");\r\nif (!([_leadColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"leadColor is not a valid color array.\")};\r\n_color = call compile (\"[\" + (_logic getVariable [\"color\", \"\"]) + \"]\");\r\nif (!([_color] call FUNC(isValidColorArray))) exitWith {ERROR(\"color is not a valid color array.\")};\r\n\r\n// If we already have color configurations from another source, use those, otherwise use default.\r\n_configurations = if (isNil QGVAR(GroupColorConfigurations)) then { [] } else { +GVAR(GroupColorConfigurations) };\r\n_configurationGroupMappings = if(isNil QGVAR(GroupColorConfigurationMapping)) then { HASH_CREATE } else { +GVAR(GroupColorConfigurationMapping) };\r\n\r\n// Save custom color configuration and keep the index of the entry.\r\n_configurationIndex = _configurations pushBack [_leadColor, _color];\r\n\r\n// Add all synchronized groups and reference custom configuration for them\r\n{\r\n    HASH_SET(_configurationGroupMappings,groupID (group _x),_configurationIndex);\r\n} count _units;\r\n\r\n[QGVAR(GroupColorConfigurations), _configurations, false, true] call EFUNC(common,setSetting);\r\n[QGVAR(GroupColorConfigurationMapping), _configurationGroupMappings, false, true] call EFUNC(common,setSetting);\r\n"},{"name":"ace_map_gestures_fnc_moduleSettings","file":"map_gestures/functions/fnc_moduleSettings.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Initializes Settings for the module and transcodes settings to a useable format.\r\n *\r\n * Arguments:\r\n * 0: Logic <LOGIC>\r\n * 1: Units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [module, [player], true] call ace_map_gestures_fnc_moduleGroupSettings\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"\", \"_activated\"];\r\n\r\nif (!_activated || !isServer) exitWith {};\r\n\r\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(maxRange), \"maxRange\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(interval), \"interval\"] call EFUNC(common,readSettingFromModule);\r\n\r\n//For default fallback colors, setting to empty (\"\") will not force on clients\r\nprivate _defaultLeadColor = _logic getVariable [\"defaultLeadColor\", \"\"];\r\nif (_defaultLeadColor != \"\") then {\r\n    _defaultLeadColor = call compile (\"[\" + _defaultLeadColor + \"]\");\r\n    if (!([_defaultLeadColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"defaultLeadColor is not a valid color array.\")};\r\n    [QGVAR(defaultLeadColor), _defaultLeadColor, true, true] call EFUNC(common,setSetting);\r\n};\r\n\r\nprivate _defaultColor = _logic getVariable [\"defaultColor\", \"\"];\r\nif (_defaultColor != \"\") then {\r\n    _defaultColor = call compile (\"[\" + _defaultColor + \"]\");\r\n    if (!([_defaultColor] call FUNC(isValidColorArray))) exitWith {ERROR(\"defaultColor is not a valid color array.\")};\r\n    [QGVAR(defaultColor), _defaultColor, true, true] call EFUNC(common,setSetting);\r\n};\r\n\r\nACE_LOGINFO(\"Map Gestures Module Initialized.\");\r\n"},{"name":"ace_map_gestures_fnc_receiverInit","file":"map_gestures/functions/fnc_receiverInit.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Initializes the receiver and hooks it to the Draw event of the map.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_map_gestures_fnc_receiverInit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_player setVariable [QGVAR(Transmit), false, true];\r\nGVAR(EnableTransmit) = false;\r\n\r\nif (!isNil QGVAR(DrawMapHandlerID)) then {\r\n    (findDisplay 12 displayCtrl 51) ctrlRemoveEventHandler [\"Draw\", GVAR(DrawMapHandlerID)];\r\n    GVAR(DrawMapHandlerID) = nil;\r\n};\r\nGVAR(DrawMapHandlerID) = findDisplay 12 displayCtrl 51 ctrlAddEventHandler [\"Draw\", FUNC(drawMapGestures)];\r\n"},{"name":"ace_map_gestures_fnc_transmit","file":"map_gestures/functions/fnc_transmit.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Transmit PFH\r\n *\r\n * Arguments:\r\n * 0: Arguments <ARRAY>\r\n * 1: PFH ID <NUMBER>\r\n *\r\n * Return Value:\r\n * Return description <TYPE>\r\n *\r\n * Example:\r\n * [[], 2] call ace_map_gestures_fnc_transmit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_ownerID\", \"_unitUID\", \"_drawPosVariableName\", \"_playerOwnerID\"];\r\n\r\nparams [\"\", \"_pfhId\"];\r\n\r\nif (!visibleMap) then {\r\n    call FUNC(endTransmit);\r\n};\r\n\r\nif (!GVAR(EnableTransmit) || !visibleMap) exitWith {\r\n    [_pfhId] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n{\r\n    _ownerID = _x getVariable QGVAR(owner_id);\r\n    if (isNil \"_ownerID\") then {\r\n        [QGVAR(noOwnerID), [name _x]] call CBA_fnc_serverEvent;\r\n    } else {\r\n        _playerOwnerID = ACE_player getVariable QGVAR(owner_id);\r\n        if (!isNil \"_playerOwnerID\" && _ownerID != _playerOwnerID) then {\r\n            _unitUID = getPlayerUID ACE_Player;\r\n            _drawPosVariableName = if (!isNil \"_unitUID\" && _unitUID != \"\") then {format [QGVAR(%1_DrawPos), _unitUID]} else {nil};\r\n            if (!isNil \"_drawPosVariableName\") then {\r\n                _ownerID publicVariableClient _drawPosVariableName;\r\n            };\r\n        };\r\n    };\r\n} count ([ACE_player, GVAR(maxRange)] call FUNC(getProximityPlayers));\r\n"},{"name":"ace_map_gestures_fnc_transmitterInit","file":"map_gestures/functions/fnc_transmitterInit.sqf","text":"/*\r\n * Author: Dslyecxi, MikeMatrix\r\n * Initializes the transmitting event handlers.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_map_gestures_fnc_transmitterInit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_mapCtrl\", \"_unitUID\", \"_drawPosVariableName\"];\r\n\r\ndisableSerialization;\r\n\r\n_mapCtrl = findDisplay 12 displayCtrl 51;\r\n\r\n// MouseMoving EH.\r\nif (!isNil QGVAR(MouseMoveHandlerID)) then {\r\n    _mapCtrl ctrlRemoveEventHandler [\"MouseMoving\", GVAR(MouseMoveHandlerID)];\r\n    GVAR(MouseMoveHandlerID) = nil;\r\n};\r\nGVAR(MouseMoveHandlerID) = _mapCtrl ctrlAddEventHandler [\"MouseMoving\", {\r\n    // Don't transmit any data if we're using the map tools\r\n    if (!GVAR(EnableTransmit) || EGVAR(maptools,mapTool_isDragging) || EGVAR(maptools,mapTool_isRotating)) exitWith {};\r\n\r\n    params [\"_control\", \"_posX\", \"_posY\"];\r\n\r\n    if (!(ACE_player getVariable QGVAR(Transmit))) then {\r\n        ACE_player setVariable [QGVAR(Transmit), true, true];\r\n    };\r\n\r\n    _unitUID = getPlayerUID ACE_player;\r\n    _drawPosVariableName = if (!isNil \"_unitUID\" && _unitUID != \"\") then {format [QGVAR(%1_DrawPos), _unitUID]} else {nil};\r\n    if (!isNil \"_drawPosVariableName\") then {\r\n        missionNamespace setVariable [_drawPosVariableName, _control ctrlMapScreenToWorld [_posX, _posY]];\r\n    };\r\n}];\r\n\r\n// MouseDown EH\r\nif (!isNil QGVAR(MouseDownHandlerID)) then {\r\n    _mapCtrl ctrlRemoveEventHandler [\"MouseButtonDown\",GVAR(MouseDownHandlerID)];\r\n    GVAR(MouseDownHandlerID) = nil;\r\n};\r\nGVAR(MouseDownHandlerID) = _mapCtrl ctrlAddEventHandler [\"MouseButtonDown\", {\r\n    if (!GVAR(enabled)) exitWith {};\r\n\r\n    params [\"\", \"_button\"];\r\n\r\n    if (_button == 0) then {call FUNC(initTransmit);};\r\n}];\r\n\r\n// MouseUp EH\r\nif (!isNil QGVAR(MouseUpHandlerID)) then {\r\n    _mapCtrl ctrlRemoveEventHandler [\"MouseButtonUp\", GVAR(MouseUpHandlerID)];\r\n    GVAR(MouseUpHandlerID) = nil;\r\n};\r\nGVAR(MouseUpHandlerID) = _mapCtrl ctrlAddEventHandler [\"MouseButtonUp\", {\r\n    if (!GVAR(enabled)) exitWith {};\r\n\r\n    params [\"\", \"_button\"];\r\n\r\n    if (_button == 0) then {call FUNC(endTransmit);};\r\n}];\r\n"}],"maptools":[{"name":"ace_maptools_fnc_calculateMapScale","file":"maptools/functions/fnc_calculateMapScale.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Returns the equivalent of 100m in screen coordinates\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * No\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _pos = ((findDisplay 12) displayCtrl 51) ctrlMapScreenToWorld [0.5, 0.5];\r\nprivate _screenOffset = ((findDisplay 12) displayCtrl 51) posWorldToScreen [(_pos select 0) + 100, (_pos select 1)];\r\n\r\n(_screenOffset select 0) - 0.5\r\n"},{"name":"ace_maptools_fnc_canUseMapGPS","file":"maptools/functions/fnc_canUseMapGPS.sqf","text":"/*\r\n * Author: esteldunedain\r\n * canUseMapGPS\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nvisibleMap &&\r\n{alive ACE_player} &&\r\n{\"ItemGPS\" in (assignedItems ACE_player)}\r\n"},{"name":"ace_maptools_fnc_canUseMapTools","file":"maptools/functions/fnc_canUseMapTools.sqf","text":"/*\r\n * Author: esteldunedain\r\n * canUseMapTools\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nvisibleMap &&\r\n{alive ACE_player} &&\r\n{\r\n    scopeName \"hasMap\";\r\n    {\r\n        if (_x isKindOf [\"ItemMap\", configFile >> \"CfgWeapons\"]) exitWith {true breakOut \"hasMap\"};\r\n    } forEach (assignedItems ACE_player);\r\n    false\r\n} &&\r\n{\"ACE_MapTools\" in (items ACE_player)} &&\r\n{!GVAR(mapTool_isDragging)} &&\r\n{!GVAR(mapTool_isRotating)}\r\n"},{"name":"ace_maptools_fnc_handleMouseButton","file":"maptools/functions/fnc_handleMouseButton.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Handle mouse buttons.\r\n *\r\n * Arguments:\r\n * 0: 1 if mouse down down, 0 if mouse button up (Number)\r\n * 1: Parameters of the mouse button event\r\n *\r\n * Return Value:\r\n * Boolean, true if event was handled\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_dir\", \"_params\"];\r\n_params params [\"_control\", \"_button\", \"_screenPosX\", \"_screenPosY\", \"_shiftKey\", \"_ctrlKey\", \"_altKey\"];\r\nTRACE_2(\"params\",_dir,_params);\r\n\r\nprivate _handled = false;\r\n\r\n// If it's not a left button event, exit\r\nif (_button != 0) exitWith {_handled};\r\n\r\n// If releasing\r\nif (_dir != 1) then {\r\n    if (GVAR(mapTool_isDragging) || GVAR(mapTool_isRotating)) then {\r\n        GVAR(mapTool_isDragging) = false;\r\n        GVAR(mapTool_isRotating) = false;\r\n        _handled = true;\r\n    };\r\n} else {\r\n    // If clicking\r\n    if !(call FUNC(canUseMapTools)) exitWith {};\r\n\r\n    // Transform mouse screen position to coordinates\r\n    private _pos = _control ctrlMapScreenToWorld [_screenPosX, _screenPosY];\r\n    _pos set [count _pos, 0];\r\n\r\n    GVAR(mapTool_isDragging) = false;\r\n    GVAR(mapTool_isRotating) = false;\r\n\r\n    // If no map tool marker then exit\r\n    if (GVAR(mapTool_Shown) == 0) exitWith {};\r\n\r\n    // Check if clicking the maptool\r\n    if (_pos call FUNC(isInsideMapTool)) exitWith {\r\n        // Store data for dragging\r\n        GVAR(mapTool_startPos) = + GVAR(mapTool_pos);\r\n        GVAR(mapTool_startDragPos) = + _pos;\r\n\r\n        private _rotateKeyPressed = switch (GVAR(rotateModifierKey)) do {\r\n            case (1): {_altKey};\r\n            case (2): {_ctrlKey};\r\n            case (3): {_shiftKey};\r\n            default {false};\r\n        };\r\n\r\n        if (_rotateKeyPressed) then {\r\n            // Store data for rotating\r\n            GVAR(mapTool_startAngle) = + GVAR(mapTool_angle);\r\n            GVAR(mapTool_startDragAngle) = (180 + ((GVAR(mapTool_startDragPos) select 0) - (GVAR(mapTool_startPos) select 0)) atan2 ((GVAR(mapTool_startDragPos) select 1) - (GVAR(mapTool_startPos) select 1)) mod 360);\r\n            // Start rotating\r\n            GVAR(mapTool_isRotating) = true;\r\n        } else {\r\n            // Start dragging\r\n            GVAR(mapTool_isDragging) = true;\r\n        };\r\n        _handled = true;\r\n    };\r\n};\r\n\r\n_handled\r\n"},{"name":"ace_maptools_fnc_handleMouseMove","file":"maptools/functions/fnc_handleMouseMove.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Handle mouse movement over the map tool.\r\n *\r\n * Arguments:\r\n * 0: Map Control\r\n * 1: Mouse position on screen coordinates\r\n *\r\n * Return Value:\r\n * Boolean, true if event was handled\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_control\", \"_mousePosX\", \"_mousePosY\"];\r\nTRACE_3(\"params\",_control,_mousePosX,_mousePosY);\r\n\r\n// If have no map tools, then exit\r\nif (((isNull ACE_player) || {!(\"ACE_MapTools\" in items ACE_player)})) exitWith {\r\n    false\r\n};\r\n\r\n// If map tools not shown, then exit\r\nif (GVAR(mapTool_Shown) == 0) exitWith {false};\r\n\r\nprivate _mousePosition = _control ctrlMapScreenToWorld [_mousePosX, _mousePosY];\r\n\r\n// Translation\r\nif (GVAR(mapTool_isDragging)) exitWith {\r\n    GVAR(mapTool_pos) set [0, (GVAR(mapTool_startPos) select 0) + (_mousePosition select 0) - (GVAR(mapTool_startDragPos) select 0)];\r\n    GVAR(mapTool_pos) set [1, (GVAR(mapTool_startPos) select 1) + (_mousePosition select 1) - (GVAR(mapTool_startDragPos) select 1)];\r\n\r\n    true\r\n};\r\n\r\n// Rotation\r\nif (GVAR(mapTool_isRotating)) exitWith {\r\n    // Get new angle\r\n    private _angle =  (180 + ((_mousePosition select 0) - (GVAR(mapTool_startPos) select 0)) atan2 ((_mousePosition select 1) - (GVAR(mapTool_startPos) select 1)) mod 360);\r\n    GVAR(mapTool_angle) = GVAR(mapTool_startAngle) + _angle - GVAR(mapTool_startDragAngle);\r\n\r\n    true\r\n};\r\n\r\nfalse\r\n"},{"name":"ace_maptools_fnc_isInsideMapTool","file":"maptools/functions/fnc_isInsideMapTool.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Return true if the position is inside the map marker (to allow dragging).\r\n *\r\n * Arguments:\r\n * 0: x Position (in meters) <NUMBER>\r\n * 1: y Position (in meters) <NUMBER>\r\n *\r\n * Return Value:\r\n * Boolean\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define TEXTURE_WIDTH_IN_M           6205\r\n#define DIST_BOTTOM_TO_CENTER_PERC  -0.33\r\n#define DIST_TOP_TO_CENTER_PERC      0.65\r\n#define DIST_LEFT_TO_CENTER_PERC     0.30\r\n\r\nif (GVAR(mapTool_Shown) == 0) exitWith {false};\r\nprivate _textureWidth = [TEXTURE_WIDTH_IN_M, TEXTURE_WIDTH_IN_M / 2] select (GVAR(mapTool_Shown) - 1);\r\n\r\nprivate _pos = [_this select 0, _this select 1, 0];\r\nprivate _relPos = _pos vectorDiff [GVAR(mapTool_pos) select 0, GVAR(mapTool_pos) select 1, 0];\r\nprivate _dirVector = [sin(GVAR(mapTool_angle)), cos(GVAR(mapTool_angle)), 0];\r\n\r\n// Projection of the relative position over the longitudinal axis of the map tool\r\nprivate _lambdaLong = _dirVector vectorDotProduct _relPos;\r\nif (_lambdaLong < DIST_BOTTOM_TO_CENTER_PERC * _textureWidth) exitWith {false};\r\n\r\n// Projection of the relative position over the trasversal axis of the map tool\r\nprivate _lambdaTrasAbs = vectorMagnitude (_relPos vectorDiff (_dirVector vectorMultiply _lambdaLong));\r\nif (_lambdaLong > DIST_TOP_TO_CENTER_PERC * _textureWidth) exitWith {false};\r\nif (_lambdaTrasAbs > DIST_LEFT_TO_CENTER_PERC * _textureWidth) exitWith {false};\r\n\r\ntrue\r\n"},{"name":"ace_maptools_fnc_openMapGps","file":"maptools/functions/fnc_openMapGps.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Opens or closes the gps on the map screen, showing coordinates\r\n *\r\n * Arguments:\r\n * 0: Open GPS? <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_shouldOpenGps\"];\r\n\r\nprivate _isOpen = !(isNull (uiNamespace getVariable [QGVAR(ui_mapGpsDisplay), displayNull]));\r\n\r\nif (_shouldOpenGps && {\"ItemGPS\" in assignedItems ACE_player} && {!_isOpen}) then {\r\n    (\"RscACE_MapGps\" call BIS_fnc_rscLayer) cutRsc [\"RscACE_MapGps\",\"PLAIN\"];\r\n\r\n    [FUNC(openMapGpsUpdate), 0.5, []] call CBA_fnc_addPerFrameHandler;  //update bearing/altitude every 0.5 sec (ticktime)\r\n} else {\r\n    (\"RscACE_MapGps\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\r\n};\r\n"},{"name":"ace_maptools_fnc_openMapGpsUpdate","file":"maptools/functions/fnc_openMapGpsUpdate.sqf","text":"//esteldunedain\r\n//update gps display\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif ((!(\"ItemGPS\" in assigneditems ACE_player)) || {isNull (uiNamespace getVariable [QGVAR(ui_mapGpsDisplay), displayNull])}) exitWith {\r\n    (\"RscACE_MapGps\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];  // Close GPS RSC\r\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;  // Remove frameHandler\r\n};\r\ndisableSerialization;\r\n\r\nprivate _mapGpsDisplay = uiNamespace getVariable [QGVAR(ui_mapGpsDisplay), displayNull];\r\nprivate _ctrl = _mapGpsDisplay displayCtrl 913590;\r\n_ctrl ctrlSetText str (round (getDir ACE_player));  // Set Heading\r\n_ctrl = _mapGpsDisplay displayCtrl 913591;\r\n_ctrl ctrlSetText str (round ((getPosASL ACE_player) select 2) + EGVAR(common,mapAltitude)); // Set Altitude\r\n_ctrl = _mapGpsDisplay displayCtrl 913592;\r\n_ctrl ctrlSetText mapGridPosition ACE_player; // Set grid cords\r\n"},{"name":"ace_maptools_fnc_updateMapToolMarkers","file":"maptools/functions/fnc_updateMapToolMarkers.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Update the map tool markers, position, size, rotation and visibility.\r\n *\r\n * Arguments:\r\n * 0: The Map <CONTROL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define TEXTURE_WIDTH_IN_M    6205\r\n#define CENTER_OFFSET_Y_PERC  0.1606\r\n#define CONSTANT_SCALE        0.2\r\n\r\nparams [\"_theMap\"];\r\n\r\nif ((GVAR(mapTool_Shown) == 0) || {!(\"ACE_MapTools\" in items ACE_player)}) exitWith {};\r\n\r\nprivate _rotatingTexture = \"\";\r\nprivate _textureWidth = 0;\r\nif (GVAR(mapTool_Shown) == 1) then {\r\n    _rotatingTexture = QPATHTOF(data\\mapToolRotatingNormal.paa);\r\n    _textureWidth = TEXTURE_WIDTH_IN_M;\r\n} else {\r\n    _rotatingTexture = QPATHTOF(data\\mapToolRotatingSmall.paa);\r\n    _textureWidth = TEXTURE_WIDTH_IN_M / 2;\r\n};\r\n\r\n// Update scale of both parts\r\ngetResolution params [\"_resWidth\", \"_resHeight\", \"\", \"\", \"_aspectRatio\"];\r\nprivate _scaleX = 32 * _textureWidth * CONSTANT_SCALE * (call FUNC(calculateMapScale));\r\nprivate _scaleY = _scaleX * ((_resWidth / _resHeight) / _aspectRatio); //handle bad aspect ratios\r\n\r\n// Position of the fixed part\r\nprivate _xPos = GVAR(mapTool_pos) select 0;\r\nprivate _yPos = (GVAR(mapTool_pos) select 1) + _textureWidth * CENTER_OFFSET_Y_PERC;\r\n\r\n_theMap drawIcon [QPATHTOF(data\\mapToolFixed.paa), [1,1,1,1], [_xPos,_yPos], _scaleX, _scaleY, 0, \"\", 0];\r\n\r\n// Position and rotation of the rotating part\r\n_xPos = (GVAR(mapTool_pos) select 0) + sin(GVAR(mapTool_angle)) * _textureWidth * CENTER_OFFSET_Y_PERC;\r\n_yPos = (GVAR(mapTool_pos) select 1) + cos(GVAR(mapTool_angle)) * _textureWidth * CENTER_OFFSET_Y_PERC;\r\n\r\n_theMap drawIcon [_rotatingTexture, [1,1,1,1], [_xPos,_yPos], _scaleX, _scaleY, GVAR(mapTool_angle), \"\", 0];\r\n"}],"markers":[{"name":"ace_markers_fnc_getEnabledChannels","file":"markers/functions/fnc_getEnabledChannels.sqf","text":"/*\r\n * Author: commy2\r\n * Return enabled channels.\r\n *\r\n * Arguments:\r\n * 0: false - use channel id, true - use localized channel names <BOOl> (default: false)\r\n *\r\n * Return Value:\r\n * Enabled Channels <ARRAY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_localize\", false, [false]]];\r\n\r\nprivate _currentChannel = currentChannel;\r\nprivate _enabledChannels = [];\r\n\r\nif (_localize) then {\r\n    if (setCurrentChannel 0) then {\r\n        _enabledChannels pushBack localize \"str_channel_global\";\r\n    };\r\n\r\n    if (setCurrentChannel 1) then {\r\n        _enabledChannels pushBack localize \"str_channel_side\";\r\n    };\r\n\r\n    if (setCurrentChannel 2) then {\r\n        _enabledChannels pushBack localize \"str_channel_command\";\r\n    };\r\n\r\n    if (setCurrentChannel 3) then {\r\n        _enabledChannels pushBack localize \"str_channel_group\";\r\n    };\r\n\r\n    if (setCurrentChannel 4) then {\r\n        _enabledChannels pushBack localize \"str_channel_vehicle\";\r\n    };\r\n\r\n    if (setCurrentChannel 5) then {\r\n        _enabledChannels pushBack localize \"str_channel_direct\";\r\n    };\r\n} else {\r\n    for \"_i\" from 0 to 5 do {\r\n        if (setCurrentChannel _i) then {\r\n            _enabledChannels pushBack _i;\r\n        };\r\n    };\r\n};\r\n\r\nsetCurrentChannel _currentChannel;\r\n\r\n_enabledChannels\r\n"},{"name":"ace_markers_fnc_initInsertMarker","file":"markers/functions/fnc_initInsertMarker.sqf","text":"/*\r\n * Author: BIS, commy2\r\n * Sets up the marker placement\r\n * Run instead of \\a3\\ui_f\\scripts\\GUI\\RscDisplayInsertMarker.sqf\r\n *\r\n * Arguments:\r\n * 0: RscDisplayInsertMarker <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [onLoad] call ace_markers_fnc_initInsertMarker;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define BORDER 0.005\r\n\r\n[{\r\n    disableserialization;\r\n    params [\"_display\"];\r\n    TRACE_1(\"params\",_display);\r\n\r\n    //Can't place markers when can't interact\r\n    if !([ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)) exitWith {\r\n        _display closeDisplay 2;  //emulate \"Cancel\" button\r\n    };\r\n\r\n    //BIS Controls:\r\n    private _text = _display displayctrl 101;\r\n    private _picture = _display displayctrl 102;\r\n    private _channel = _display displayctrl 103;\r\n    private _buttonOK = _display displayctrl 1;\r\n    private _buttonCancel = _display displayctrl 2;\r\n    private _description = _display displayctrl 1100;\r\n    private _title = _display displayctrl 1001;\r\n    private _descriptionChannel = _display displayctrl 1101;\r\n\r\n    //ACE Controls:\r\n    // _sizeX = _display displayctrl 1200;\r\n    // _sizeY = _display displayctrl 1201;\r\n    private _aceShapeLB = _display displayctrl 1210;\r\n    private _aceColorLB = _display displayctrl 1211;\r\n    private _aceAngleSlider = _display displayctrl 1220;\r\n    private _aceAngleSliderText = _display displayctrl 1221;\r\n\r\n    ////////////////////\r\n    // Install MapDrawEH on current map\r\n    private _mapIDD = -1;\r\n\r\n    {\r\n        if (!isNull (findDisplay _x)) exitWith {\r\n            _mapIDD = _x;\r\n        };\r\n        false\r\n    } count [12, 37, 52, 53, 160];\r\n\r\n    if (_mapIDD == -1) exitWith {\r\n        ERROR(\"No Map?\");\r\n    };\r\n\r\n    if !(_mapIDD in GVAR(mapDisplaysWithDrawEHs)) then {\r\n        GVAR(mapDisplaysWithDrawEHs) pushBack _mapIDD;\r\n        ((finddisplay _mapIDD) displayctrl 51) ctrlAddEventHandler [\"Draw\", {_this call FUNC(mapDrawEH)}]; // @todo check if persistent\r\n    };\r\n\r\n    ////////////////////\r\n    // Calculate center position of the marker placement ctrl\r\n    private _pos = ctrlPosition _picture;\r\n    _pos = [(_pos select 0) + (_pos select 2) / 2, (_pos select 1) + (_pos select 3) / 2];\r\n\r\n    GVAR(currentMarkerPosition) = ((findDisplay _mapIDD) displayCtrl 51) ctrlMapScreenToWorld _pos;\r\n\r\n    //Hide the bis picture:\r\n    _picture ctrlShow false;\r\n\r\n    // prevent vanilla key input\r\n    _display displayAddEventHandler [\"KeyDown\", {(_this select 1) in [200, 208]}];\r\n\r\n\r\n    //Focus on the text input\r\n    ctrlSetFocus _text;\r\n\r\n    //--- Background\r\n    _pos = ctrlposition _text;\r\n    _pos params [\"_posX\", \"_posY\", \"_posW\", \"_posH\"];\r\n    _posX = _posX + 0.01;\r\n    _posY = _posY min ((safeZoneH + safeZoneY) - (8 * _posH + 8 * BORDER));  //prevent buttons being placed below bottom edge of screen\r\n    _pos set [0, _posX];\r\n    _pos set [1, _posY];\r\n    _text ctrlSetPosition _pos;\r\n    _text ctrlCommit 0;\r\n\r\n    //--- Title\r\n    _pos set [1, _posY - 2 * _posH - BORDER];\r\n    _pos set [3, _posH];\r\n    _title ctrlSetPosition _pos;\r\n    _title ctrlCommit 0;\r\n\r\n    //--- Description\r\n    _pos set [1, _posY - 1 * _posH];\r\n    _pos set [3,6 * _posH + 6 * BORDER];\r\n    _description ctrlEnable false;\r\n    _description ctrlSetPosition _pos;\r\n    _description ctrlSetStructuredText parseText format [\"<t size='0.8'>%1</t>\", localize \"str_lib_label_description\"];\r\n    _description ctrlCommit 0;\r\n\r\n    //--- Shape\r\n    _pos set [1, _posY + 1 * _posH + 2 * BORDER];\r\n    _pos set [2, _posW];\r\n    _pos set [3, _posH];\r\n    _aceShapeLB ctrlSetPosition _pos;\r\n    _aceShapeLB ctrlCommit 0;\r\n\r\n    //--- Color\r\n    _pos set [1, _posY + 2 * _posH + 3 * BORDER];\r\n    _pos set [2, _posW];\r\n    _aceColorLB ctrlSetPosition _pos;\r\n    _aceColorLB ctrlCommit 0;\r\n\r\n    //--- Angle\r\n    _pos set [1, _posY + 3 * _posH + 4 * BORDER];\r\n    _pos set [2, _posW];\r\n    _aceAngleSlider ctrlSetPosition _pos;\r\n    _aceAngleSlider ctrlCommit 0;\r\n\r\n    //--- Angle Text\r\n    _pos set [1, _posY + 4 * _posH + 5 * BORDER];\r\n    _pos set [2, _posW];\r\n    _aceAngleSliderText ctrlSetPosition _pos;\r\n    _aceAngleSliderText ctrlCommit 0;\r\n\r\n    private _offsetButtons = 0;\r\n\r\n    if (isMultiplayer) then {\r\n        _pos set [1,_posY + 5 * _posH + 7 * BORDER];\r\n        _pos set [3,_posH];\r\n        _descriptionChannel ctrlSetStructuredText parseText format [\"<t size='0.8'>%1:</t>\", localize \"str_a3_cfgvehicles_modulerespawnposition_f_arguments_marker_0\"];\r\n        _descriptionChannel ctrlSetPosition _pos;\r\n        _descriptionChannel ctrlCommit 0;\r\n\r\n        _pos set [1,_posY + 6 * _posH + 7 * BORDER];\r\n        _pos set [3,_posH];\r\n        _channel ctrlSetPosition _pos;\r\n        _channel ctrlCommit 0;\r\n\r\n        // channels are added by engine and not script. we have to manually delete them. requires channel names to be unique?\r\n        private _enabledChannels = true call FUNC(getEnabledChannels);\r\n        private _i = 0;\r\n\r\n        while {_i < lbSize _channel} do {\r\n            private _channelName = _channel lbText _i;\r\n\r\n            // _enabledChannels can not include custom channels names. Therefore also check if it's a custom one. Blame BI if the unit should not access the channel.\r\n            if (_channelName in _enabledChannels || {!(_channelName in CHANNEL_NAMES)}) then {\r\n                _i = _i + 1;\r\n            } else {\r\n                _channel lbDelete _i;\r\n            };\r\n        };\r\n\r\n        private _currentChannelName = CHANNEL_NAMES param [currentChannel, localize \"str_channel_group\"];\r\n\r\n        // select current channel in list box, must be done after lbDelete\r\n        for \"_j\" from 0 to (lbSize _channel - 1) do {\r\n            if (_channel lbText _j == _currentChannelName) then {\r\n                _channel lbSetCurSel _j;\r\n            };\r\n        };\r\n\r\n        _channel ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedChannel)}];\r\n\r\n        _offsetButtons = 7 * _posH + 8 * BORDER;\r\n    } else {\r\n        _descriptionChannel ctrlShow false;\r\n        _channel ctrlShow false;\r\n        _offsetButtons = 5 * _posH + 7 * BORDER;\r\n    };\r\n\r\n    //--- ButtonOK\r\n    _pos set [1, _posY + _offsetButtons];\r\n    _pos set [2, _posW / 2 - BORDER];\r\n    _pos set [3, _posH];\r\n    _buttonOk ctrlSetPosition _pos;\r\n    _buttonOk ctrlCommit 0;\r\n\r\n    //--- ButtonCancel\r\n    _pos set [0, _posX + _posW / 2];\r\n    _pos set [1, _posY + _offsetButtons];\r\n    _pos set [2, _posW / 2];\r\n    _pos set [3, _posH];\r\n    _buttonCancel ctrlSetPosition _pos;\r\n    _buttonCancel ctrlCommit 0;\r\n\r\n    ////////////////////\r\n    // init marker shape lb\r\n    lbClear _aceShapeLB;\r\n    {\r\n        _x params [\"_add\", \"_set\", \"_pic\"];\r\n        _aceShapeLB lbAdd _add;\r\n        _aceShapeLB lbSetValue [_forEachIndex, _set];\r\n        _aceShapeLB lbSetPicture [_forEachIndex, _pic];\r\n    } forEach GVAR(MarkersCache);\r\n\r\n    private _curSelShape = GETGVAR(curSelMarkerShape,0);\r\n    _aceShapeLB lbSetCurSel _curSelShape;\r\n\r\n    //Update now and add eventHandler:\r\n    [_aceShapeLB, _curSelShape] call FUNC(onLBSelChangedShape);\r\n    _aceShapeLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedShape)}];\r\n\r\n    ////////////////////\r\n    // init marker color lb\r\n    lbClear _aceColorLB;\r\n    {\r\n        _x params [\"_add\", \"_set\", \"_pic\"];\r\n        _aceColorLB lbAdd _add;\r\n        _aceColorLB lbSetValue [_forEachIndex, _set];\r\n        _aceColorLB lbSetPicture [_forEachIndex, _pic];\r\n    } forEach GVAR(MarkerColorsCache);\r\n\r\n    private _curSelColor = GETGVAR(curSelMarkerColor,0);\r\n    _aceColorLB lbSetCurSel _curSelColor;\r\n\r\n    //Update now and add eventHandler:\r\n    [_aceColorLB, _curSelColor] call FUNC(onLBSelChangedColor);\r\n    _aceColorLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedColor)}];\r\n\r\n    ////////////////////\r\n    // init marker angle slider\r\n    _aceAngleSlider sliderSetRange [-180, 180];\r\n\r\n    private _curSelAngle = GETGVAR(currentMarkerAngle,0);\r\n    _aceAngleSlider sliderSetPosition _curSelAngle;\r\n\r\n    //Update now and add eventHandler:\r\n    [_aceAngleSlider, _curSelAngle] call FUNC(onSliderPosChangedAngle);\r\n    _aceAngleSlider ctrlAddEventHandler [\"SliderPosChanged\", {_this call FUNC(onSliderPosChangedAngle)}];\r\n}, _this] call CBA_fnc_execNextFrame;\r\n"},{"name":"ace_markers_fnc_mapDisplayInitEH","file":"markers/functions/fnc_mapDisplayInitEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles XEH DisplayLoad for the various map displays (RscDiary)\r\n *\r\n * Arguments:\r\n * 0: Map Display (idd 12,37,52,53) <Display>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [display] call ace_markers_fnc_mapDisplayInitEH\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_display\"];\r\nTRACE_1(\"params\",_display);\r\n\r\nprivate _bisShapeLB = _display displayctrl 1091;\r\nprivate _curSelShape = missionNamespace getVariable [QGVAR(curSelMarkerShape), 0];\r\nTRACE_2(\"shape\",_bisShapeLB,_curSelShape);\r\n_bisShapeLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedShape)}];\r\n_bisShapeLB lbSetCurSel _curSelShape;\r\n\r\n\r\nprivate _bisColorLB = _display displayctrl 1090;\r\nprivate _curSelColor = missionNamespace getVariable [QGVAR(curSelMarkerColor), 0];\r\nTRACE_2(\"color\",_bisColorLB,_curSelColor);\r\n_bisColorLB ctrlAddEventHandler [\"LBSelChanged\", {_this call FUNC(onLBSelChangedColor)}];\r\n_bisColorLB lbSetCurSel _curSelColor;\r\n"},{"name":"ace_markers_fnc_mapDrawEH","file":"markers/functions/fnc_mapDrawEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Draws the current temp marker.  Allows rotation.\r\n *\r\n * Arguments:\r\n * 0: TheMap <Control>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [theMapControl] call ace_markers_fnc_mapDrawEH;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_theMap\"];\r\n// TRACE_1(\"params\",_theMap);\r\n\r\n//Only show if marker place is open:\r\nif (isNull findDisplay 54) exitWith {};\r\n//Error checking:\r\nif (GVAR(currentMarkerConfigName) == \"\" || {GVAR(currentMarkerColorConfigName) == \"\"} || {GVAR(currentMarkerPosition) isEqualTo []}) exitWith {\r\n    ERROR(\"Bad Data\");\r\n};\r\n\r\nprivate _sizeX = 1;\r\nprivate _sizeY = 1;\r\n\r\nprivate _textureConfig = configFile >> \"CfgMarkers\" >> GVAR(currentMarkerConfigName);\r\nprivate _texture = getText (_textureConfig >> \"icon\");\r\nprivate _markerSize = getNumber (_textureConfig >> \"size\");\r\nprivate _markerShadow = getNumber (_textureConfig >> \"shadow\");\r\nprivate _colorConfig = (configFile >> \"CfgMarkerColors\" >> GVAR(currentMarkerColorConfigName));\r\nprivate _drawColor = getArray (_colorConfig >> \"color\");\r\n\r\n//Convert possible code into numbers\r\n{\r\n    if (_x isEqualType \"\") then {\r\n        _drawColor set [_forEachIndex, call compile _x];\r\n    };\r\n} forEach _drawColor;\r\n\r\n_drawColor set [3, (_drawColor select 3) * 0.875]; //Arma adds a slight transparency\r\n\r\n_theMap drawIcon [\r\n    _texture,\r\n    _drawColor,\r\n    GVAR(currentMarkerPosition),\r\n    _sizeX * _markerSize,\r\n    _sizeY * _markerSize,\r\n    GVAR(currentMarkerAngle),\r\n    \"\",\r\n    _markerShadow\r\n];\r\n"},{"name":"ace_markers_fnc_onLBSelChangedChannel","file":"markers/functions/fnc_onLBSelChangedChannel.sqf","text":"/*\r\n * Author: commy2\r\n * When the channel list box is changed.\r\n *\r\n * Arguments:\r\n * 0: Channel ListBox (idc 103) <CONTROL>\r\n * 1: Selected Index <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_ctrl\", \"_index\"];\r\nTRACE_2(\"params\",_ctrl,_index);\r\n\r\nprivate _channelName = _ctrl lbText _index;\r\n\r\nsetCurrentChannel (CHANNEL_NAMES find _channelName);\r\n"},{"name":"ace_markers_fnc_onLBSelChangedColor","file":"markers/functions/fnc_onLBSelChangedColor.sqf","text":"/*\r\n * Author: commy2\r\n * When the color list box is changed.\r\n *\r\n * Arguments:\r\n * 0: Color ListBox (idc 1211) <CONTROL>\r\n * 1: Selected Index <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ColorLB, 5] call ace_markers_fnc_onLBSelChangedColor;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_ctrl\", \"_index\"];\r\nTRACE_2(\"params\",_ctrl,_index);\r\n\r\nprivate _data = _ctrl lbValue _index;\r\n\r\nGVAR(curSelMarkerColor) = _index;\r\n\r\nprivate _config = (configFile >> \"CfgMarkerColors\") select _data;\r\n\r\nGVAR(currentMarkerColorConfigName) = configName _config;\r\n\r\n//Set map display to same color:\r\nprivate _bisColorLB = switch (false) do {\r\n    case (isNull findDisplay 12): {(findDisplay 12) displayCtrl 1090};\r\n    case (isNull findDisplay 52): {(findDisplay 52) displayCtrl 1090};\r\n    case (isNull findDisplay 53): {(findDisplay 53) displayCtrl 1090};\r\n    case (isNull findDisplay 37): {(findDisplay 37) displayCtrl 1090};\r\n    default {controlNull};\r\n};\r\nif (_ctrl != _bisColorLB) then { //Don't set what we got a EH from\r\n    _bisColorLB lbSetCurSel GVAR(curSelMarkerColor);\r\n};\r\n"},{"name":"ace_markers_fnc_onLBSelChangedShape","file":"markers/functions/fnc_onLBSelChangedShape.sqf","text":"/*\r\n * Author: commy2\r\n * When the shape list box is changed.\r\n *\r\n * Arguments:\r\n * 0: Shape ListBox (idc 1210) <CONTROL>\r\n * 1: Selected Index <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ColorLB, 5] call ace_markers_fnc_onLBSelChangedShape;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_ctrl\", \"_index\"];\r\nTRACE_2(\"params\",_ctrl,_index);\r\n\r\nprivate _data = _ctrl lbValue _index;\r\n\r\nGVAR(curSelMarkerShape) = _index;\r\n\r\nprivate _config = (configFile >> \"CfgMarkers\") select _data;\r\n\r\nGVAR(currentMarkerConfigName) = configName _config;\r\n\r\n//Set map display to same shape:\r\nprivate _bisShapeLB = switch (false) do {\r\n    case (isNull findDisplay 12): {(findDisplay 12) displayCtrl 1091};\r\n    case (isNull findDisplay 52): {(findDisplay 52) displayCtrl 1091};\r\n    case (isNull findDisplay 53): {(findDisplay 53) displayCtrl 1091};\r\n    case (isNull findDisplay 37): {(findDisplay 37) displayCtrl 1091};\r\n    default {controlNull};\r\n};\r\nif (_ctrl != _bisShapeLB) then { //Don't set what we got a EH from\r\n    _bisShapeLB lbSetCurSel GVAR(curSelMarkerShape);\r\n};\r\n"},{"name":"ace_markers_fnc_onSliderPosChangedAngle","file":"markers/functions/fnc_onSliderPosChangedAngle.sqf","text":"/*\r\n * Author: commy2\r\n * Angle Slider Pos changed\r\n *\r\n * Arguments:\r\n * 0: Slider (idc 1210) <CONTROL>\r\n * 1: Slider Data (angle: -180..180) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [Slider, 2] call ace_markers_fnc_onSliderPosChangedAngle;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_ctrl\", \"_data\"];\r\nTRACE_2(\"params\",_ctrl,_data);\r\n\r\nprivate _direction = round _data;\r\n\r\nif (_direction < 0) then {\r\n    _direction = _direction + 360;\r\n};\r\n\r\n((ctrlParent _ctrl) displayCtrl 1221) ctrlSetText format [localize LSTRING(MarkerDirection), _direction];\r\n\r\nGVAR(currentMarkerAngle) = _data;\r\n"},{"name":"ace_markers_fnc_placeMarker","file":"markers/functions/fnc_placeMarker.sqf","text":"/*\r\n * Author: commy2\r\n * MarkerPlacement closed\r\n *\r\n * Arguments:\r\n * 0: RscDisplayInsertMarker <DISPLAY>\r\n * 1: CloseNumber (1 = ButtonOk) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [onUnloadEvent] call ace_markers_fnc_placeMarker;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableserialization;\r\nparams [\"_display\", \"_closeNum\"];\r\nTRACE_2(\"params\",_display,_closeNum);\r\n\r\nif (_closeNum == 1) then {\r\n    // set and send marker data the next frame. the actual marker isn't created yet\r\n    [{\r\n        [QGVAR(setMarkerNetwork), [\r\n            allMapMarkers select (count allMapMarkers - 1), [\r\n                GETGVAR(currentMarkerConfigName,\"\"),\r\n                GETGVAR(currentMarkerColorConfigName,\"\"),\r\n                GETGVAR(currentMarkerPosition,[]),\r\n                GETGVAR(currentMarkerAngle,0)\r\n            ]\r\n        ]] call CBA_fnc_globalEvent;\r\n\r\n    }, []] call CBA_fnc_execNextFrame;\r\n};\r\n"},{"name":"ace_markers_fnc_sendMarkersJIP","file":"markers/functions/fnc_sendMarkersJIP.sqf","text":"/*\r\n * Author: commy2\r\n * Server: Recives a dummy logic, sends marker data back to the owner.\r\n *\r\n * Arguments:\r\n * 0: Logic <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [onUnloadEvent] call ace_markers_fnc_sendMarkerJIP;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\nTRACE_1(\"params\",_logic);\r\n\r\n[\r\n    QGVAR(setMarkerJIP),\r\n    [GETGVAR(allMapMarkers,[]), GETGVAR(allMapMarkersProperties,[])],\r\n    [_logic]\r\n] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_markers_fnc_setMarkerJIP","file":"markers/functions/fnc_setMarkerJIP.sqf","text":"/*\r\n * Author: commy2\r\n * Client: Recives a marker data from server.\r\n *\r\n * Arguments:\r\n * 0: Array of map marker names <ARRAY>\r\n * 1: Array of map marker data <ARRAY>\r\n * 2: Logic <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[],[],dummyLogic] call ace_markers_fnc_setMarkerJIP;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_allMapMarkers\", \"_allMapMarkersProperties\"];\r\nTRACE_3(\"params\",_allMapMarkers,_allMapMarkersProperties);\r\n\r\n{\r\n    private _index = _allMapMarkers find _x;\r\n\r\n    if (_index != -1) then {\r\n        private _data = _allMapMarkersProperties select _index;\r\n        _data params [\"_markerClassname\", \"_colorClassname\", \"_pos\", \"_dir\"];\r\n\r\n        private _config = (configfile >> \"CfgMarkers\") >> _markerClassname;\r\n\r\n        if (!isClass _config) then {\r\n            WARNING(\"CfgMarker not found, changed to milDot\");\r\n            _config = configFile >> \"CfgMarkers\" >> \"MilDot\";\r\n        };\r\n\r\n        _x setMarkerTypeLocal configName _config;\r\n\r\n        _config = configfile >> \"CfgMarkerColors\" >> _colorClassname;\r\n\r\n        if (!isClass _config) then {\r\n            WARNING(\"CfgMarkerColors not found, changed to Default\");\r\n            _config = configFile >> \"CfgMarkerColors\" >> \"Default\";\r\n        };\r\n\r\n        _x setMarkerColorLocal configName _config;\r\n\r\n        _x setMarkerPosLocal _pos;\r\n        _x setMarkerDirLocal _dir;\r\n    };\r\n    false\r\n} count allMapMarkers;\r\n\r\nprivate _group = group GVAR(localLogic);\r\ndeleteVehicle GVAR(localLogic);\r\nGVAR(localLogic) = nil;\r\ndeleteGroup _group;\r\n"},{"name":"ace_markers_fnc_setMarkerNetwork","file":"markers/functions/fnc_setMarkerNetwork.sqf","text":"/*\r\n * Author: commy2\r\n * Sets newly placed marker\r\n * Handles the QGVAR(setMarkerNetwork) event.\r\n *\r\n * Arguments:\r\n * 0: Markername <STRING>\r\n * 1: Marker Data <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[],[],dummyLogic] call ace_markers_fnc_setMarkerJIP;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_marker\", \"_data\"];\r\nTRACE_2(\"params\",_marker,_data);\r\n_data params [\"_markerClassname\", \"_colorClassname\", \"_pos\", \"_dir\"];\r\n\r\nprivate _config = configfile >> \"CfgMarkers\" >> _markerClassname;\r\n\r\nif (!isClass _config) then {\r\n    WARNING(\"CfgMarker not found, changed to milDot\");\r\n    _config = configFile >> \"CfgMarkers\" >> \"MilDot\";\r\n};\r\n\r\n_marker setMarkerTypeLocal configName _config;\r\n\r\n_config = configfile >> \"CfgMarkerColors\" >> _colorClassname;\r\n\r\nif (!isClass _config) then {\r\n    WARNING(\"CfgMarkerColors not found, changed to Default\");\r\n    _config = configFile >> \"CfgMarkerColors\" >> \"Default\";\r\n};\r\n\r\n_marker setMarkerColorLocal configName _config;\r\n\r\n_marker setMarkerPosLocal _pos;\r\n_marker setMarkerDirLocal _dir;\r\n\r\n// save properties on server machine for JIP, marker editing ready\r\nif (isMultiplayer && {isServer}) then {\r\n    private _allMapMarkers = GETGVAR(allMapMarkers,[]);\r\n    private _allMapMarkersProperties = GETGVAR(allMapMarkersProperties,[]);\r\n\r\n    private _index = _allMapMarkers find _marker;\r\n\r\n    if (_index == -1) then {\r\n        _allMapMarkers pushBack _marker;\r\n        _allMapMarkersProperties pushBack _data;\r\n    } else {\r\n        _allMapMarkers set [_index, _marker];\r\n        _allMapMarkersProperties set [_index, _data];\r\n    };\r\n\r\n    GVAR(allMapMarkers) = _allMapMarkers;\r\n    GVAR(allMapMarkersProperties) = _allMapMarkersProperties;\r\n};\r\n"}],"medical":[{"name":"ace_medical_fnc_actionCheckBloodPressure","file":"medical/functions/fnc_actionCheckBloodPressure.sqf","text":"/*\r\n* Author: Glowbal\r\n* Action for checking the blood pressure of the patient\r\n*\r\n* Arguments:\r\n* 0: The medic <OBJECT>\r\n* 1: The patient <OBJECT>\r\n*\r\n* Return Value:\r\n* None\r\n*\r\n* Public: No\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\"];\r\nif (local _target) then {\r\n    [QGVAR(actionCheckBloodPressureLocal), [_caller, _target, _selectionName]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(actionCheckBloodPressureLocal), [_caller, _target, _selectionName], _target] call CBA_fnc_targetEvent;\r\n};\r\n"},{"name":"ace_medical_fnc_actionCheckBloodPressureLocal","file":"medical/functions/fnc_actionCheckBloodPressureLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Local callback for checking the blood pressure of a patient\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\"];\r\n\r\nprivate _bloodPressure = if (!alive _target) then {\r\n    [0,0]\r\n} else {\r\n    [_target] call FUNC(getBloodPressure)\r\n};\r\n_bloodPressure params [ \"_bloodPressureLow\", \"_bloodPressureHigh\"];\r\nprivate _output = \"\";\r\nprivate _logOutPut = \"\";\r\nif ([_caller] call FUNC(isMedic)) then {\r\n    _output = LSTRING(Check_Bloodpressure_Output_1);\r\n    _logOutPut = format[\"%1/%2\",round(_bloodPressureHigh),round(_bloodPressureLow)];\r\n} else {\r\n    if (_bloodPressureHigh > 20) then {\r\n        _output = LSTRING(Check_Bloodpressure_Output_2);\r\n        _logOutPut = LSTRING(Check_Bloodpressure_Low);\r\n        if (_bloodPressureHigh > 100) then {\r\n            _output = LSTRING(Check_Bloodpressure_Output_3);\r\n            _logOutPut = LSTRING(Check_Bloodpressure_Normal);\r\n            if (_bloodPressureHigh > 160) then {\r\n                _output = LSTRING(Check_Bloodpressure_Output_4);\r\n                _logOutPut = LSTRING(Check_Bloodpressure_High);\r\n            };\r\n\r\n        };\r\n    } else {\r\n        if (random(10) > 3) then {\r\n            _output = LSTRING(Check_Bloodpressure_Output_5);\r\n            _logOutPut = LSTRING(Check_Bloodpressure_NoBloodpressure);\r\n        } else {\r\n            _output = LSTRING(Check_Bloodpressure_Output_6);\r\n            //Fail to find pressure, no logoutput\r\n        };\r\n    };\r\n};\r\n\r\nif (_selectionName in [\"hand_l\",\"hand_r\"] && {[_unit, _selectionName] call FUNC(hasTourniquetAppliedTo)}) then {\r\n    _output = LSTRING(Check_Bloodpressure_Output_6);\r\n    _logOutPut = \"\";\r\n};\r\n\r\n[QEGVAR(common,displayTextStructured), [[_output, [_target] call EFUNC(common,getName), round(_bloodPressureHigh),round(_bloodPressureLow)], 1.75, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n\r\nif (_logOutPut != \"\") then {\r\n    [_target,\"activity\", LSTRING(Check_Bloodpressure_Log), [[_caller, false, true] call EFUNC(common,getName), _logOutPut]] call FUNC(addToLog);\r\n    [_target,\"quick_view\", LSTRING(Check_Bloodpressure_Log), [[_caller, false, true] call EFUNC(common,getName), _logOutPut]] call FUNC(addToLog);\r\n};\r\n"},{"name":"ace_medical_fnc_actionCheckPulse","file":"medical/functions/fnc_actionCheckPulse.sqf","text":"/*\r\n* Author: Glowbal\r\n* Action for checking the pulse or heart rate of the patient\r\n*\r\n* Arguments:\r\n* 0: The medic <OBJECT>\r\n* 1: The patient <OBJECT>\r\n*\r\n* Return Value:\r\n* None\r\n*\r\n* Public: No\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\",\"_target\", \"_selectionName\"];\r\nif (local _target) then {\r\n    [QGVAR(actionCheckPulseLocal), [_caller, _target, _selectionName]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(actionCheckPulseLocal), [_caller, _target, _selectionName], _target] call CBA_fnc_targetEvent;\r\n};\r\n"},{"name":"ace_medical_fnc_actionCheckPulseLocal","file":"medical/functions/fnc_actionCheckPulseLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Local callback for checking the pulse of a patient\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_unit\", \"_selectionName\"];\r\n\r\nprivate _heartRate = _unit getVariable [QGVAR(heartRate), 80];\r\nif (!alive _unit) then {\r\n    _heartRate = 0;\r\n};\r\nprivate _heartRateOutput = LSTRING(Check_Pulse_Output_5);\r\nprivate _logOutPut = LSTRING(Check_Pulse_None);\r\n\r\nif (_heartRate > 1.0) then {\r\n    if ([_caller] call FUNC(isMedic)) then {\r\n        _heartRateOutput = LSTRING(Check_Pulse_Output_1);\r\n        _logOutPut = format[\"%1\",round(_heartRate)];\r\n    } else {\r\n        // non medical personel will only find a pulse/HR\r\n        _heartRateOutput = LSTRING(Check_Pulse_Output_2);\r\n        _logOutPut = LSTRING(Check_Pulse_Weak);\r\n        if (_heartRate > 60) then {\r\n            if (_heartRate > 100) then {\r\n                _heartRateOutput = LSTRING(Check_Pulse_Output_3);\r\n                _logOutPut = LSTRING(Check_Pulse_Strong);\r\n            } else {\r\n                _heartRateOutput = LSTRING(Check_Pulse_Output_4);\r\n                _logOutPut = LSTRING(Check_Pulse_Normal);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nif (_selectionName in [\"hand_l\",\"hand_r\"] && {[_unit, _selectionName] call FUNC(hasTourniquetAppliedTo)}) then {\r\n    _heartRateOutput = LSTRING(Check_Pulse_Output_5);\r\n    _logOutPut = LSTRING(Check_Pulse_None);\r\n};\r\n\r\n[QEGVAR(common,displayTextStructured), [[_heartRateOutput, [_unit] call EFUNC(common,getName), round(_heartRate)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n\r\nif (_logOutPut != \"\") then {\r\n    [_unit,\"activity\", LSTRING(Check_Pulse_Log),[[_caller] call EFUNC(common,getName),_logOutPut]] call FUNC(addToLog);\r\n    [_unit,\"quick_view\", LSTRING(Check_Pulse_Log),[[_caller] call EFUNC(common,getName),_logOutPut]] call FUNC(addToLog);\r\n};\r\n"},{"name":"ace_medical_fnc_actionCheckResponse","file":"medical/functions/fnc_actionCheckResponse.sqf","text":"/*\r\n * Author: Glowbal\r\n * Action for checking the response status of the patient\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\"];\r\n\r\nprivate _output = [LSTRING(Check_Response_Unresponsive), LSTRING(Check_Response_Responsive)] select ([_target] call EFUNC(common,isAwake));\r\n\r\n[QEGVAR(common,displayTextStructured), [[_output, [_target] call EFUNC(common,getName)], 2, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n\r\n[_target ,\"activity\", _output, [[_target, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n[_target, \"quick_view\", _output, [[_target, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n"},{"name":"ace_medical_fnc_actionDiagnose","file":"medical/functions/fnc_actionDiagnose.sqf","text":"/*\r\n* Author: Glowbal\r\n* Action for diagnosing in basic medical\r\n*\r\n* Arguments:\r\n* 0: The medic <OBJECT>\r\n* 1: The patient <OBJECT>\r\n*\r\n* Return Value:\r\n* None\r\n*\r\n* Public: No\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_genericMessages\";\r\nparams [\"_caller\", \"_target\"];\r\n\r\nprivate _genericMessages = [LSTRING(diagnoseMessage), [_target] call EFUNC(common,getName)];\r\n\r\nif (alive _target) then {\r\n    _genericMessages pushBack LSTRING(diagnoseAlive);\r\n} else {\r\n    _genericMessages pushBack LSTRING(diagnoseDead);\r\n};\r\n\r\nif (_target getVariable[QGVAR(hasLostBlood), 0] > 0) then {\r\n    if (_target getVariable[QGVAR(hasLostBlood), 0] > 1) then {\r\n        _genericMessages pushBack LSTRING(lostBloodALot);\r\n    } else {\r\n        _genericMessages pushBack LSTRING(lostBlood);\r\n    };\r\n} else {\r\n    _genericMessages pushBack LSTRING(noBloodloss);\r\n};\r\n\r\nif (alive _target) then {\r\n    if (_target getVariable[QGVAR(hasPain), false]) then {\r\n        _genericMessages pushBack LSTRING(inPain);\r\n    } else {\r\n        _genericMessages pushBack LSTRING(noPain);\r\n    };\r\n};\r\n\r\n[QEGVAR(common,displayTextStructured), [_genericMessages, 3.0, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_medical_fnc_actionLoadUnit","file":"medical/functions/fnc_actionLoadUnit.sqf","text":"/*\r\n * Author: Glowbal\r\n * Action for loading an unconscious or dead unit in the nearest vechile\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_vehicle\";\r\nparams [\"_caller\", \"_target\"];\r\n\r\nif ([_target] call EFUNC(common,isAwake)) exitWith {\r\n    [QEGVAR(common,displayTextStructured), [[LSTRING(CanNotLoaded), [_target] call EFUNC(common,getName)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n};\r\nif ([_target] call FUNC(isBeingCarried)) then {\r\n    [_caller, _target] call EFUNC(dragging,dropObject_carry);\r\n};\r\nif ([_target] call FUNC(isBeingDragged)) then {\r\n    [_caller, _target] call EFUNC(dragging,dropObject);\r\n};\r\n\r\n_vehicle = [_caller, _target] call EFUNC(common,loadPerson);\r\n"},{"name":"ace_medical_fnc_actionPlaceInBodyBag","file":"medical/functions/fnc_actionPlaceInBodyBag.sqf","text":"/*\r\n * Author: Glowbal\r\n * Replace a (dead) body by a body bag\r\n *\r\n * Arguments:\r\n * 0: The actor <OBJECT>\r\n * 1: The patient <OBJECT>\r\n *\r\n * Return Value:\r\n * body bag (will return objNull when run where target is not local) <OBJECT>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_medical_fnc_actionPlaceInBodyBag\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\"];\r\nTRACE_2(\"params\",_caller,_target);\r\n\r\nif (!local _target) exitWith {\r\n    TRACE_1(\"running where local\",local _target);\r\n    [QGVAR(actionPlaceInBodyBag), [_caller, _target], [_target]] call CBA_fnc_targetEvent;\r\n    objNull\r\n};\r\n\r\nif (alive _target) then {\r\n    TRACE_1(\"manually killing with setDead\",_target);\r\n    [_target, true] call FUNC(setDead);\r\n};\r\n\r\nprivate _position = (getPosASL _target) vectorAdd [0, 0, 0.2];\r\n\r\nprivate _headPos  = _target modelToWorldVisual (_target selectionPosition \"head\");\r\nprivate _spinePos = _target modelToWorldVisual (_target selectionPosition \"Spine3\");\r\nprivate _dirVect = _headPos vectorFromTo _spinePos;\r\nprivate _direction = _dirVect call CBA_fnc_vectDir;\r\n\r\n//move the body away now, so it won't physX the bodyBag object (this setPos seems to need to be called where object is local)\r\n_target setPosASL [-5000, -5000, 0];\r\n\r\nprivate _bodyBag = createVehicle [\"ACE_bodyBagObject\", _position, [], 0, \"\"];\r\n\r\n// prevent body bag from flipping\r\n_bodyBag setPosASL _position;\r\n_bodyBag setDir _direction;\r\n\r\n[\"ace_placedInBodyBag\", [_target, _bodyBag]] call CBA_fnc_globalEvent; //hide and delete body on server\r\n\r\n_bodyBag\r\n"},{"name":"ace_medical_fnc_actionRemoveTourniquet","file":"medical/functions/fnc_actionRemoveTourniquet.sqf","text":"/*\r\n * Author: Glowbal\r\n * Action for removing the tourniquet on specified selection\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\"];\r\nTRACE_3(\"params\",_caller,_target,_selectionName);\r\n\r\n// grab the required data\r\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\r\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\r\n\r\n// Check if there is a tourniquet on this bodypart\r\nif ((_tourniquets select _part) == 0) exitWith {\r\n    [QEGVAR(common,displayTextStructured), [LSTRING(noTourniquetOnBodyPart), 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n};\r\n\r\n// Removing the tourniquet\r\n_tourniquets set [_part, 0];\r\n_target setVariable [QGVAR(tourniquets), _tourniquets, true];\r\n\r\n// Adding the tourniquet item to the caller\r\n_caller addItem \"ACE_tourniquet\";\r\n\r\n//Handle all injected medications now that blood is flowing:\r\nprivate _delayedMedications = _target getVariable [QGVAR(occludedMedications), []];\r\nprivate _updatedArray = false;\r\nTRACE_2(\"meds\",_part,_delayedMedications);\r\n{\r\n    _x params [\"\", \"\", \"_medPartNum\"];\r\n    if (_part == _medPartNum) then {\r\n        TRACE_1(\"delayed medication call after tourniquet removeal\",_x);\r\n        [QGVAR(treatmentAdvanced_medicationLocal), _x, [_target]] call CBA_fnc_targetEvent;\r\n        _delayedMedications set [_forEachIndex, -1];\r\n        _updatedArray = true;\r\n    };\r\n} forEach _delayedMedications;\r\n\r\nif (_updatedArray) then {\r\n    _delayedMedications = _delayedMedications - [-1];\r\n    _target setVariable [QGVAR(occludedMedications), _delayedMedications, true];\r\n};\r\n"},{"name":"ace_medical_fnc_actionUnloadUnit","file":"medical/functions/fnc_actionUnloadUnit.sqf","text":"/*\r\n * Author: Glowbal\r\n * Action for unloading an unconscious or dead unit from a vechile\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: Drag after unload <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", [\"_drag\", false]];\r\n\r\n// cannot unload a unit not in a vehicle.\r\nif (vehicle _target == _target) exitWith {};\r\nif (([_target] call EFUNC(common,isAwake))) exitWith {};\r\n\r\n[\"ace_unloadPersonEvent\", [_target, vehicle _target, _caller], _target] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_medical_fnc_addDamageToUnit","file":"medical/functions/fnc_addDamageToUnit.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Manually Apply Damage to a unit (can cause lethal damage)\r\n * NOTE: because of caching, this will not have instant effects (~3 frame delay)\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Damage to Add <NUMBER>\r\n * 2: Selection (\"head\", \"body\", \"hand_l\", \"hand_r\", \"leg_l\", \"leg_r\") <STRING>\r\n * 3: Projectile Type <STRING>\r\n *\r\n * Return Value:\r\n * HandleDamage's return <NUMBER>\r\n *\r\n * Example:\r\n * [player, 0.8, \"leg_r\", \"bullet\"] call ace_medical_fnc_addDamageToUnit\r\n * [cursorTarget, 1, \"body\", \"stab\"] call ace_medical_fnc_addDamageToUnit\r\n *\r\n * Public: Yes\r\n */\r\n// #define DEBUG_MODE_FULL\r\n// #define DEBUG_TESTRESULTS\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_damageToAdd\", -1, [0]], [\"_selection\", \"\", [\"\"]], [\"_typeOfDamage\", \"\", [\"\"]]];\r\nTRACE_4(\"params\",_unit,_damageToAdd,_selection,_typeOfDamage);\r\n\r\n_selection = toLower _selection;\r\nif ((isNull _unit) || {!local _unit} || {!alive _unit}) exitWith {ACE_LOGERROR_1(\"addDamageToUnit - badUnit %1\", _this); -1};\r\nif (_damageToAdd < 0) exitWith {ACE_LOGERROR_1(\"addDamageToUnit - bad damage %1\", _this); -1};\r\nif (!(_selection in GVAR(SELECTIONS))) exitWith {ACE_LOGERROR_1(\"addDamageToUnit - bad selection %1\", _this); -1};\r\n\r\n//Get the hitpoint and the index\r\nprivate _hitpoint = [_unit, _selection, true] call ace_medical_fnc_translateSelections;\r\n(getAllHitPointsDamage _unit) params [[\"_allHitPoints\", []]];\r\nprivate _hitpointIndex = -1;\r\n{   //case insensitive find\r\n    if (_x == _hitpoint) exitWith {_hitpointIndex = _forEachIndex;};\r\n} forEach _allHitPoints;\r\nif (_hitpointIndex < 0) exitWith {ACE_LOGERROR_1(\"addDamageToUnit - bad hitpointIndex %1\", _this); -1};\r\n\r\nprivate _currentDamage = _unit getHitIndex _hitpointIndex;\r\n\r\n#ifdef DEBUG_TESTRESULTS\r\nprivate _checkAtFrame = diag_frameno + 5;\r\nprivate _partNumber = [_selection] call FUNC(selectionNameToNumber);\r\nprivate _startDmg = (_unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]]) select _partNumber;\r\nprivate _debugCode = {\r\n    params [\"\", \"_unit\", \"_startDmg\", \"_damageToAdd\", \"_partNumber\"];\r\n    private _endDmg = (_unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]]) select _partNumber;\r\n    if ((!alive _unit) || {_endDmg > _startDmg}) then {\r\n        ACE_LOGINFO_6(\"addDamageToUnit - PASSED - [unit:%1, partNo:%2, addDmg:%3] results:[alive:%4 old:%5 new:%6]\", _unit, _partNumber, _damageToAdd, alive _unit, _startDmg, _endDmg);\r\n    } else {\r\n        ACE_LOGERROR_6(\"addDamageToUnit - FAILED - [unit:%1, partNo:%2, addDmg:%3] results:[alive:%4 old:%5 new:%6]\", _unit, _partNumber, _damageToAdd, alive _unit, _startDmg, _endDmg);\r\n    };\r\n};\r\n[{diag_frameno > (_this select 0)}, _debugCode, [_checkAtFrame, _unit, _startDmg, _damageToAdd, _partNumber]] call CBA_fnc_waitUntilAndExecute;\r\n#endif\r\n\r\nprivate _return = [_unit, _selection, (_currentDamage + _damageToAdd), _unit, _typeOfDamage, _hitpointIndex] call FUNC(handleDamage);\r\nTRACE_1(\"handleDamage called\",_return);\r\n\r\n_return\r\n"},{"name":"ace_medical_fnc_addHeartRateAdjustment","file":"medical/functions/fnc_addHeartRateAdjustment.sqf","text":"/*\r\n * Author: Glowbal, KoffeinFlummi\r\n * Increase the Heart Rate of a local unit by given number within given amount of seconds.\r\n *\r\n * Arguments:\r\n * 0: The unit <OBJECT>\r\n * 1: value <NUMBER>\r\n * 2: time in seconds <NUMBER>\r\n * 3: callback <CODE>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_value\", 0, [0]], [\"_time\", 1, [0]], [\"_callBack\", {}, [{}]]];\r\n\r\nprivate _adjustment = _unit getVariable [QGVAR(heartRateAdjustments), []];\r\n_adjustment pushBack [_value, _time, _callBack];\r\n_unit setVariable [QGVAR(heartRateAdjustments), _adjustment];\r\n\r\n[\"ace_heartRateAdjustmentAdded\", [_unit, _value, _time]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_medical_fnc_addToInjuredCollection","file":"medical/functions/fnc_addToInjuredCollection.sqf","text":"/*\r\n * Author: Glowbal\r\n * Enabled the vitals loop for a unit.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Deprecated\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nACE_DEPRECATED(\"ace_medical_fnc_addToInjuredCollection\",\"3.7.0\",\"ace_medical_fnc_addVitalLoop\");\r\n\r\n_this call FUNC(addVitalLoop);\r\n"},{"name":"ace_medical_fnc_addToLog","file":"medical/functions/fnc_addToLog.sqf","text":"/*\r\n * Author: Glowbal\r\n * Add an entry to the specified log\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: The log type <STRING>\r\n * 2: The message <STRING>\r\n * 3: The arguments for localization <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_type\", \"_message\", \"_arguments\"];\r\n\r\nif (!local _unit) exitWith {\r\n    [QGVAR(addToMedicalLog), _this, _unit] call CBA_fnc_targetEvent;\r\n};\r\n\r\ndate params [\"\", \"\", \"\", \"_hour\", \"_minute\"];\r\n\r\nprivate _moment = format [ ([\"%1:%2\", \"%1:0%2\"] select (_minute < 10)), _hour, _minute];\r\nprivate _logVarName = format[QGVAR(logFile_%1), _type];\r\n\r\nprivate _log = _unit getVariable [_logVarName, []];\r\nif (count _log >= 8) then {\r\n    private _newLog = [];\r\n    {\r\n        // ensure the first element will not be added\r\n        if (_forEachIndex > 0) then {\r\n            _newLog pushBack _x;\r\n        };\r\n    } forEach _log;\r\n    _log = _newLog;\r\n};\r\n_log pushBack [_message, _moment, _type, _arguments];\r\n\r\n_unit setVariable [_logVarName, _log, true];\r\n[\"ace_medicalLogEntryAdded\", [_unit, _type, _message, _arguments]] call CBA_fnc_localEvent;\r\n\r\nprivate _logs = _unit getVariable [QGVAR(allLogs), []];\r\nif !(_logVarName in _logs) then {\r\n    _logs pushBack _logVarName;\r\n    _unit setVariable [QGVAR(allLogs), _logs, true];\r\n};\r\n"},{"name":"ace_medical_fnc_addToTriageCard","file":"medical/functions/fnc_addToTriageCard.sqf","text":"/*\r\n * Author: Glowbal\r\n * Add an entry to the triage card\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: The new item classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_newItem\"];\r\n\r\nif (!local _unit) exitWith {\r\n    [QGVAR(addToTriageCard), _this, _unit] call CBA_fnc_targetEvent;\r\n};\r\n\r\nprivate _log = _unit getVariable [QGVAR(triageCard), []];\r\nprivate _inList = false;\r\nprivate _amount = 1;\r\n{\r\n    if ((_x select 0) == _newItem) exitWith {\r\n        private _info = _log select _forEachIndex;\r\n        _info set [1,(_info select 1) + 1];\r\n        _info set [2, CBA_missionTime];\r\n        _log set [_forEachIndex, _info];\r\n\r\n        _amount = (_info select 1);\r\n        _inList = true;\r\n    };\r\n} forEach _log;\r\n\r\nif (!_inList) then {\r\n    _log pushBack [_newItem, 1, CBA_missionTime];\r\n};\r\n_unit setVariable [QGVAR(triageCard), _log, true];\r\n[\"ace_triageCardItemAdded\", [_unit, _newItem, _amount]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_medical_fnc_addUnconsciousCondition","file":"medical/functions/fnc_addUnconsciousCondition.sqf","text":"/*\r\n * Author: Glowbal\r\n * Adds new condition for the unconscious state. Conditions are not actively checked for units unless unit is in unconscious state.\r\n *\r\n * Arguments:\r\n * 0-N: Code, should return a boolean <CODE>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (isnil QGVAR(unconsciousConditions)) then {\r\n    GVAR(unconsciousConditions) = [];\r\n};\r\nif (_this isEqualType []) then {\r\n    {\r\n        if (_x isEqualType {}) then {\r\n            GVAR(unconsciousConditions) pushback _x;\r\n        };\r\n    } foreach _this;\r\n};\r\n"},{"name":"ace_medical_fnc_addUnloadPatientActions","file":"medical/functions/fnc_addUnloadPatientActions.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Create one unload action per unconscious passenger\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Player <OBJECT>\r\n * 3: Parameters <ARRAY>\r\n *\r\n * Return Value:\r\n * Children actions <ARRAY>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_vehicle\", \"_player\", \"_parameters\"];\r\n\r\nprivate _actions = [];\r\n\r\n{\r\n    private _unit = _x;\r\n    if (_unit != _player && {(alive _unit) && {_unit getVariable [\"ACE_isUnconscious\", false]}}) then {\r\n        _actions pushBack\r\n            [\r\n                [\r\n                    str(_unit),\r\n                    [_unit, true] call EFUNC(common,getName),\r\n                    \"\",\r\n                    {[_player, (_this select 2) select 0] call FUNC(actionUnloadUnit);},\r\n                    {true},\r\n                    {},\r\n                    [_unit]\r\n                ] call EFUNC(interact_menu,createAction),\r\n                [],\r\n                _unit\r\n            ];\r\n    };\r\n} forEach crew _vehicle;\r\n\r\n_actions\r\n"},{"name":"ace_medical_fnc_addVitalLoop","file":"medical/functions/fnc_addVitalLoop.sqf","text":"/*\r\n * Author: Glowbal\r\n * Enabled the vitals loop for a unit.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_force\", false]];\r\n\r\nif !([_unit] call FUNC(hasMedicalEnabled) || _force) exitWith {};\r\n\r\nif !(local _unit) exitWith {\r\n    [QGVAR(addVitalLoop), [_unit, _force], _unit] call CBA_fnc_targetEvent;\r\n};\r\n\r\n// Quit if the unit already has a vital loop, or is dead, unless it's forced\r\nif ((_unit getVariable[QGVAR(addedToUnitLoop),false] || !alive _unit) && !_force) exitWith{};\r\n\r\n// Schedule the loop to be executed again 1 sec later\r\n// @todo: should the loop be started righ away instead?\r\n_unit setVariable [QGVAR(addedToUnitLoop), true, true];\r\n[DFUNC(vitalLoop), [_unit, CBA_missionTime], 1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_medical_fnc_adjustPainLevel","file":"medical/functions/fnc_adjustPainLevel.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Interface to allow external modules to safely adjust pain levels.\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: Added ammount of pain (can be negative) <NUMBER>\r\n *\r\n * Return Value:\r\n * The new pain level <NUMBER>\r\n *\r\n * Example:\r\n * [guy, 0.5] call ace_medical_fnc_adjustPainLevel\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_pain\"];\r\n\r\nparams [\"_unit\", \"_addedPain\"];\r\n//Only run on local units:\r\nif (!local _unit) exitWith {ERROR(\"unit is not local\");};\r\nTRACE_3(\"ACE_DEBUG: adjustPainLevel Called\",_unit, _pain, _addedPain);\r\n\r\n//Ignore if medical system disabled:\r\nif (GVAR(level) == 0) exitWith {};\r\n\r\nprivate _pain = ((_unit getVariable [QGVAR(pain), 0]) + _addedPain) max 0;\r\n\r\nif (GVAR(level) == 1) then {_pain = _pain min 1;}; //for basic, cap at 1\r\n\r\n_unit setVariable [QGVAR(pain), _pain];\r\n\r\n//Start up the vital watching (if not already running)\r\n[_unit] call FUNC(addVitalLoop);\r\n\r\n_pain;\r\n"},{"name":"ace_medical_fnc_bodyCleanupLoop","file":"medical/functions/fnc_bodyCleanupLoop.sqf","text":"/*\r\n * Author: Glowbal, esteldunedain\r\n * Loop that cleans up litter\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n{\r\n    TRACE_2(\"body\",_x,isPlayer _x);\r\n    if ((!isNull _x) && {!isPlayer _x}) then {deleteVehicle _x};\r\n} forEach GVAR(bodiesToDelete);\r\n\r\n// deleteVehicle doesn't have instant results so it won't usualy be filtered until next run\r\nGVAR(bodiesToDelete) = GVAR(bodiesToDelete) - [objNull];\r\n\r\n// If no more bodies remain, exit the loop\r\nif (GVAR(bodiesToDelete) isEqualTo []) exitWith {\r\n    TRACE_1(\"array emptied - rem PFEH\",GVAR(bodiesToDelete));\r\n};\r\n\r\n// Schedule the loop to be executed again 20 sec later\r\n[DFUNC(bodyCleanupLoop), [], 20] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_medical_fnc_canAccessMedicalEquipment","file":"medical/functions/fnc_canAccessMedicalEquipment.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if caller can access targets medical equipment, based upon accessLevel.\r\n *\r\n * Arguments:\r\n * 0: The caller <OBJECT>\r\n * 1: The target <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Can Treat <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\"];\r\n\r\nprivate _accessLevel = _target getVariable [QGVAR(allowSharedEquipmentAccess), -1];\r\n\r\nprivate _return = false;\r\n\r\nif (_accessLevel >= 0) then {\r\n    if (_accessLevel == 0) exitWith { _return = true; };\r\n    if (_accessLevel == 1) exitWith { _return = (side _target == side _caller); };\r\n    if (_accessLevel == 2) exitWith { _return = (group _target == group _caller); };\r\n};\r\n\r\n_return;\r\n"},{"name":"ace_medical_fnc_canTreat","file":"medical/functions/fnc_canTreat.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if the treatment action can be performed.\r\n *\r\n * Arguments:\r\n * 0: The caller <OBJECT>\r\n * 1: The target <OBJECT>\r\n * 2: Selection name <STRING>\r\n * 3: ACE_Medical_Treatments Classname <STRING>\r\n *\r\n * ReturnValue:\r\n * Can Treat <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget, \"Head\", \"SurgicalKit\"] call ace_medical_fnc_canTreat\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\"];\r\n\r\nif !(_target isKindOf \"CAManBase\") exitWith { false };\r\n\r\nprivate _config = (ConfigFile >> \"ACE_Medical_Actions\" >> ([\"Basic\", \"Advanced\"] select (GVAR(level)>=2)) >> _className);\r\n\r\nif !(isClass _config) exitwith {false};\r\n\r\n// Allow self treatment check\r\nif (_caller == _target && {getNumber (_config >> \"allowSelfTreatment\") == 0}) exitwith {false};\r\n\r\nprivate _medicRequired = if (isNumber (_config >> \"requiredMedic\")) then {\r\n    getNumber (_config >> \"requiredMedic\");\r\n} else {\r\n    // Check for required class\r\n    if (isText (_config >> \"requiredMedic\")) exitwith {\r\n        missionNamespace getVariable [(getText (_config >> \"requiredMedic\")), 0]\r\n    };\r\n    0;\r\n};\r\nif !([_caller, _medicRequired] call FUNC(isMedic)) exitwith { false };\r\n\r\nprivate _items = getArray (_config >> \"items\");\r\nif (count _items > 0 && {!([_caller, _target, _items] call FUNC(hasItems))}) exitwith { false };\r\n\r\nprivate _allowedSelections = getArray (_config >> \"allowedSelections\");\r\nif !(\"All\" in _allowedSelections || {(_selectionName in _allowedSelections)}) exitwith { false };\r\n\r\nprivate _return = true;\r\nif (getText (_config >> \"condition\") != \"\") then {\r\n    private _condition = getText (_config >> \"condition\");\r\n    if (isnil _condition) then {\r\n        _condition = compile _condition;\r\n    } else {\r\n        _condition = missionNamespace getVariable _condition;\r\n    };\r\n    if (_condition isEqualType false) then {\r\n        _return = _condition;\r\n    } else {\r\n        _return = [_caller, _target, _selectionName, _className] call _condition;\r\n    };\r\n};\r\nif (!_return) exitwith { false };\r\n\r\nprivate _patientStateCondition = if (isText(_config >> \"patientStateCondition\")) then {\r\n    missionNamespace getVariable [getText(_config >> \"patientStateCondition\"), 0]\r\n} else {\r\n    getNumber(_config >> \"patientStateCondition\")\r\n};\r\nif (_patientStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitwith {false};\r\n\r\nprivate _locations = getArray (_config >> \"treatmentLocations\");\r\nif (\"All\" in _locations) exitwith { true };\r\n\r\nprivate _medFacility = {([_caller] call FUNC(isInMedicalFacility)) || ([_target] call FUNC(isInMedicalFacility))};\r\nprivate _medVeh = {([_caller] call FUNC(isInMedicalVehicle)) || ([_target] call FUNC(isInMedicalVehicle))};\r\n\r\n{\r\n    if (_x == \"field\") exitwith {_return = true;};\r\n    if (_x == \"MedicalFacility\" && _medFacility) exitwith {_return = true;};\r\n    if (_x == \"MedicalVehicle\" && _medVeh) exitwith {_return = true;};\r\n    if !(isnil _x) exitwith {\r\n        private _val = missionNamespace getVariable _x;\r\n        if (_val isEqualType 0) then {\r\n            _return = switch (_val) do {\r\n                case 0: {true}; //AdvancedMedicalSettings_anywhere\r\n                case 1: {call _medVeh}; //AdvancedMedicalSettings_vehicle\r\n                case 2: {call _medFacility}; //AdvancedMedicalSettings_facility\r\n                case 3: {(call _medFacility) || {call _medVeh}}; //AdvancedMedicalSettings_vehicleAndFacility\r\n                default {false}; //Disabled\r\n            };\r\n        };\r\n    };\r\n} foreach _locations;\r\n\r\n_return;\r\n"},{"name":"ace_medical_fnc_canTreatCached","file":"medical/functions/fnc_canTreatCached.sqf","text":"/*\r\n * Author: Glowbal\r\n * Cached Check if the treatment action can be performed.\r\n *\r\n * Arguments:\r\n * 0: The caller <OBJECT>\r\n * 1: The target <OBJECT>\r\n * 2: Selection name <STRING>\r\n * 3: ACE_Medical_Treatments Classname <STRING>\r\n *\r\n * ReturnValue:\r\n * Can Treat <BOOL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n#define MAX_DURATION_CACHE 2\r\nparams [\"\", \"_target\", \"_selection\", \"_classname\"];\r\n\r\n// parameters, function, namespace, uid\r\n[_this, DFUNC(canTreat), _target, format [QGVAR(canTreat_%1_%2), _selection, _classname], MAX_DURATION_CACHE, \"clearConditionCaches\"] call EFUNC(common,cachedCall);\r\n"},{"name":"ace_medical_fnc_copyDeadBody","file":"medical/functions/fnc_copyDeadBody.sqf","text":"/*\r\n * Author: Glowbal\r\n * Makes a copy of a dead body. For handling dead bodies for actions such as load and carry.\r\n *\r\n * Arguments:\r\n * 0: The oldbody <OBJECT>\r\n * 1: The caller <OBJECT>\r\n *\r\n * Return Value:\r\n * Returns the copy of the unit. If no copy could be made, returns the oldBody <OBJECT>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_newUnit\", \"_class\", \"_group\", \"_position\", \"_side\", \"_name\"];\r\nparams [\"_oldBody\", \"_caller\"];\r\n\r\nif (alive _oldBody) exitWith {_oldBody}; // we only want to do this for dead bodies\r\n\r\n_name = _oldBody getVariable [\"ACE_name\", \"unknown\"];\r\n_class = typeOf _oldBody;\r\n_side = side _caller;\r\n_group = createGroup _side;\r\n_position = getPos _oldBody;\r\n\r\n_newUnit = _group createUnit [typeOf _oldBody, _position, [], 0, \"NONE\"];\r\n_newUnit setVariable [\"ACE_name\", _name, true];\r\n\r\n_newUnit disableAI \"TARGET\";\r\n_newUnit disableAI \"AUTOTARGET\";\r\n_newUnit disableAI \"MOVE\";\r\n_newUnit disableAI \"ANIM\";\r\n_newUnit disableAI \"FSM\";\r\n\r\nremoveallweapons _newUnit;\r\nremoveallassigneditems _newUnit;\r\nremoveUniform _newUnit;\r\nremoveHeadgear _newUnit;\r\nremoveBackpack _newUnit;\r\nremoveVest _newUnit;\r\n\r\n_newUnit addHeadgear (headgear _oldBody);\r\n_newUnit addBackpack (backpack _oldBody);\r\nclearItemCargoGlobal (backpackContainer _newUnit);\r\nclearMagazineCargoGlobal (backpackContainer _newUnit);\r\nclearWeaponCargoGlobal (backpackContainer _newUnit);\r\n\r\n_newUnit addVest (vest _oldBody);\r\nclearItemCargoGlobal (backpackContainer _newUnit);\r\nclearMagazineCargoGlobal (backpackContainer _newUnit);\r\nclearWeaponCargoGlobal (backpackContainer _newUnit);\r\n\r\n_newUnit addUniform (uniform _oldBody);\r\nclearItemCargoGlobal (backpackContainer _newUnit);\r\nclearMagazineCargoGlobal (backpackContainer _newUnit);\r\nclearWeaponCargoGlobal (backpackContainer _newUnit);\r\n\r\n{_newUnit addMagazine _x} count (magazines _oldBody);\r\n{_newUnit addWeapon _x} count (weapons _oldBody);\r\n{_newUnit addItem _x} count (items _oldBody);\r\n\r\n_newUnit selectWeapon (primaryWeapon _newUnit);\r\n\r\n// We are attaching the old unit and hiding it, so we can keep the original unit until later.\r\n_oldBody attachTo [_newUnit, [0,0,0]];\r\nif (isMultiplayer) then {\r\n    hideObjectGlobal _oldBody;\r\n} else {\r\n    hideObject _oldBody;\r\n};\r\n\r\n_newUnit setVariable [QGVAR(copyOfUnit), _oldBody, true];\r\n_oldBody setVariable [QGVAR(hasCopy), _newUnit, true];\r\n_newUnit setVariable [\"ACE_isDead\", true, true];\r\n_newUnit setVariable [\"ACE_isUnconscious\", true, true];\r\n_newUnit setVariable [QGVAR(disableInteraction), true, true];\r\n_oldBody setVariable [QGVAR(disableInteraction), true, true];\r\n\r\n[_newUnit, 0.89] call FUNC(setStructuralDamage);\r\n_newUnit;\r\n"},{"name":"ace_medical_fnc_createLitter","file":"medical/functions/fnc_createLitter.sqf","text":"/*\r\n * Author: Glowbal\r\n * Spawns litter for the treatment action on the ground around the target\r\n *\r\n * Arguments:\r\n * 0: The Caller <OBJECT>\r\n * 1: The target <OBJECT>\r\n * 2: The treatment Selection Name <STRING>\r\n * 3: The treatment classname <STRING>\r\n * 4: ?\r\n * 5: Users of Items <?>\r\n * 6: Blood Loss on selection (previously called _previousDamage) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n#define MIN_ENTRIES_LITTER_CONFIG 3\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"\", \"_usersOfItems\", \"_bloodLossOnSelection\"];\r\n\r\n//Ensures comptibilty with other possible medical treatment configs\r\nprivate _previousDamage = _bloodLossOnSelection;\r\n\r\nif !(GVAR(allowLitterCreation)) exitwith {};\r\nif (vehicle _caller != _caller || vehicle _target != _target) exitwith {};\r\n\r\nprivate _config = if (GVAR(level) >= 2) then {\r\n    (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\r\n} else {\r\n    (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className)\r\n};\r\nif !(isClass _config) exitwith {false};\r\n\r\nif !(isArray (_config >> \"litter\")) exitwith {};\r\nprivate _litter = getArray (_config >> \"litter\");\r\n\r\nprivate _createLitter = {\r\n    params [\"_unit\", \"_litterClass\"];\r\n    // @TODO: handle carriers over water\r\n    // For now, don't spawn litter if we are over water to avoid floating litter\r\n    if (surfaceIsWater (getPos _unit)) exitWith { false };\r\n\r\n    private _position = getPosATL _unit;\r\n    _position params [\"_posX\", \"_posY\", \"_posZ\"];\r\n    _position = [_posX + (random 2) - 1, _posY + (random 2) - 1, _posZ];\r\n\r\n    private _direction = (random 360);\r\n\r\n    // Create the litter, and timeout the event based on the cleanup delay\r\n    // The cleanup delay for events in MP is handled by the server side\r\n    [QGVAR(createLitter), [_litterClass, _position, _direction], 0] call EFUNC(common,syncedEvent);\r\n\r\n    true\r\n};\r\n\r\nprivate _createdLitter = [];\r\n{\r\n    if (_x isEqualType []) then {\r\n        if (count _x < MIN_ENTRIES_LITTER_CONFIG) exitwith {};\r\n\r\n        _x params [\"_selection\", \"_litterCondition\", \"_litterOptions\"];\r\n\r\n        if (toLower _selection in [toLower _selectionName, \"all\"]) then { // in is case sensitve. We can be forgiving here, so lets use toLower.\r\n\r\n            if (isnil _litterCondition) then {\r\n                _litterCondition = if (_litterCondition != \"\") then {compile _litterCondition} else {{true}};\r\n            } else {\r\n                _litterCondition = missionNamespace getVariable _litterCondition;\r\n                if (!(_litterCondition isEqualType {})) then {_litterCondition = {false}};\r\n            };\r\n            if !([_caller, _target, _selectionName, _className, _usersOfItems, _bloodLossOnSelection] call _litterCondition) exitwith {};\r\n\r\n            if (_litterOptions isEqualType []) then {\r\n                // Loop through through the litter options and place the litter\r\n                {\r\n                    if (_x isEqualType [] && {(count _x > 0)}) then {\r\n                        [_target, selectRandom _x] call _createLitter;\r\n                    };\r\n                    if (_x isEqualType \"\") then {\r\n                        [_target, _x] call _createLitter;\r\n                    };\r\n                } foreach _litterOptions;\r\n            };\r\n        };\r\n    };\r\n} foreach _litter;\r\n"},{"name":"ace_medical_fnc_determineIfFatal","file":"medical/functions/fnc_determineIfFatal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Determine If Fatal\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Part <NUMBER>\r\n * 2: with Damage <NUMBER> (default: 0)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define INCREASE_CHANCE_HEAD 0.05\r\n#define INCREASE_CHANCE_TORSO 0.03\r\n#define INCREASE_CHANGE_LIMB 0.01\r\n\r\n#define CHANGE_FATAL_HEAD 0.7\r\n#define CHANGE_FATAL_TORSO 0.6\r\n#define CHANGE_FATAL_LIMB 0.1\r\n\r\nparams [\"_unit\", \"_part\", [\"_withDamage\", 0]];\r\n\r\nif (!alive _unit) exitWith {true};\r\nif ((vehicle _unit != _unit) && {!alive (vehicle _unit)}) exitWith { true };\r\nif (_part < 0 || _part > 5) exitWith {false};\r\n\r\n// Find the correct Damage threshold for unit.\r\nprivate _damageThreshold = [1,1,1];\r\nif ([_unit] call EFUNC(common,IsPlayer)) then {\r\n    _damageThreshold =_unit getVariable[QGVAR(unitDamageThreshold), [GVAR(playerDamageThreshold), GVAR(playerDamageThreshold), GVAR(playerDamageThreshold) * 1.7]];\r\n} else {\r\n    _damageThreshold =_unit getVariable[QGVAR(unitDamageThreshold), [GVAR(AIDamageThreshold), GVAR(AIDamageThreshold), GVAR(AIDamageThreshold) * 1.7]];\r\n};\r\n_damageThreshold params [\"_thresholdHead\", \"_thresholdTorso\",  \"_thresholdLimbs\"];\r\n\r\nprivate _damageBodyPart = ((_unit getVariable [QGVAR(bodyPartStatus),[0, 0, 0, 0, 0, 0]]) select _part) + _withDamage;\r\n\r\n// Check if damage to body part is higher as damage head\r\nif (_part == 0) exitWith {\r\n    private _chanceFatal = CHANGE_FATAL_HEAD + ((INCREASE_CHANCE_HEAD * (_damageBodyPart - _thresholdHead)) * 10);\r\n    (_damageBodyPart >= _thresholdHead && {(_chanceFatal >= random(1))});\r\n};\r\n\r\n// Check if damage to body part is higher as damage torso\r\nif (_part == 1) exitWith {\r\n    private _chanceFatal = CHANGE_FATAL_TORSO + ((INCREASE_CHANCE_TORSO * (_damageBodyPart - _thresholdTorso)) * 10);\r\n    (_damageBodyPart >= _thresholdTorso && {(_chanceFatal >= random(1))});\r\n};\r\n// Check if damage to body part is higher as damage limbs\r\n// We use a slightly lower decrease for limbs, as we want any injuries done to those to be less likely to be fatal compared to head shots or torso.\r\nprivate _chanceFatal = CHANGE_FATAL_LIMB + ((INCREASE_CHANGE_LIMB * (_damageBodyPart - _thresholdLimbs)) * 10);\r\n(_damageBodyPart >= _thresholdLimbs && {(_chanceFatal >= random(1))});\r\n"},{"name":"ace_medical_fnc_displayPatientInformation","file":"medical/functions/fnc_displayPatientInformation.sqf","text":"/*\r\n * Author: Glowbal\r\n * Displays the patient information for given unit.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Show <BOOL> (default: true)\r\n * 2: Selection <NUMBER> (default: 0)\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define MAX_DISTANCE 10\r\n\r\n// Exit for basic medical\r\nif (GVAR(level) < 2) exitWith {};\r\n\r\nparams [\"_target\", [\"_show\", true], [\"_selectionN\", 0]];\r\n\r\nGVAR(currentSelectedSelectionN) = [0, _selectionN] select (IS_SCALAR(_selectionN));\r\nGVAR(displayPatientInformationTarget) = [ObjNull, _target] select _show;\r\n\r\nif (USE_WOUND_EVENT_SYNC) then {\r\n    [_target, ACE_player] call FUNC(requestWoundSync);\r\n};\r\n\r\nif (_show) then {\r\n    (\"ACE_MedicalRscDisplayInformation\" call BIS_fnc_rscLayer) cutRsc [QGVAR(DisplayInformation),\"PLAIN\"];\r\n\r\n    [{\r\n        private [\"_target\", \"_display\", \"_alphaLevel\", \"_damaged\", \"_availableSelections\", \"_openWounds\", \"_selectionBloodLoss\", \"_red\", \"_green\", \"_blue\", \"_alphaLevel\", \"_allInjuryTexts\", \"_lbCtrl\", \"_genericMessages\"];\r\n        params [\"_args\", \"_idPFH\"];\r\n        _args params [\"_target\", \"_selectionN\"];\r\n\r\n        if (GVAR(displayPatientInformationTarget) != _target || GVAR(currentSelectedSelectionN) != _selectionN) exitwith {\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n        if (ACE_player distance _target > MAX_DISTANCE) exitwith {\r\n            (\"ACE_MedicalRscDisplayInformation\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n            [QEGVAR(common,displayTextStructured), [[LSTRING(DistanceToFar), [_target] call EFUNC(common,getName)], 1.75, ACE_player], [ACE_player]] call CBA_fnc_targetEvent;\r\n        };\r\n\r\n        disableSerialization;\r\n        private _display = uiNamespace getVariable QGVAR(DisplayInformation);\r\n        if (isnil \"_display\") exitwith {\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n\r\n        private _allInjuryTexts = [];\r\n        private _genericMessages = [];\r\n\r\n        if (GVAR(level) >= 2 && {([_unit] call FUNC(hasMedicalEnabled))}) then {\r\n            private _partText = [LSTRING(Head), LSTRING(Torso), LSTRING(LeftArm) ,LSTRING(RightArm) ,LSTRING(LeftLeg), LSTRING(RightLeg)] select _selectionN;\r\n            _genericMessages pushback [localize _partText, [1, 1, 1, 1]];\r\n        };\r\n\r\n        if (_target getVariable[QGVAR(isBleeding), false]) then {\r\n            _genericMessages pushback [localize LSTRING(Status_Bleeding), [1, 0.1, 0.1, 1]];\r\n        };\r\n        if (_target getVariable[QGVAR(hasLostBlood), 0] > 1) then {\r\n            _genericMessages pushback [localize LSTRING(Status_Lost_Blood), [1, 0.1, 0.1, 1]];\r\n        };\r\n\r\n        if (((_target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]]) select _selectionN) > 0) then {\r\n            _genericMessages pushback [localize LSTRING(Status_Tourniquet_Applied), [0.77, 0.51, 0.08, 1]];\r\n        };\r\n        if (_target getVariable[QGVAR(hasPain), false]) then {\r\n            _genericMessages pushback [localize LSTRING(Status_Pain), [1, 1, 1, 1]];\r\n        };\r\n\r\n        private _totalIvVolume = 0;\r\n        {\r\n            private _value = _target getVariable _x;\r\n            if !(isnil \"_value\") then {\r\n                _totalIvVolume = _totalIvVolume + (_target getVariable [_x, 0]);\r\n            };\r\n        } foreach GVAR(IVBags);\r\n        if (_totalIvVolume >= 1) then {\r\n            _genericMessages pushback [format[localize LSTRING(receivingIvVolume), floor _totalIvVolume], [1, 1, 1, 1]];\r\n        };\r\n\r\n        private _damaged = [false, false, false, false, false, false];\r\n        private _selectionBloodLoss = [0,0,0,0,0,0];\r\n        if (GVAR(level) >= 2 && {([_target] call FUNC(hasMedicalEnabled))}) then {\r\n            private _openWounds = _target getVariable [QGVAR(openWounds), []];\r\n            {\r\n                _x params [\"\", \"_x1\", \"_selectionX\", \"_amountOf\", \"_x4\"];\r\n                // Find how much this bodypart is bleeding\r\n                if (_amountOf > 0) then {\r\n                    _damaged set [_selectionX, true];\r\n                    _selectionBloodLoss set [_selectionX, (_selectionBloodLoss select _selectionX) + (20 * (_x4 * _amountOf))];\r\n\r\n                    if (_selectionN == _selectionX) then {\r\n                    // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\r\n                        if (_amountOf >= 1) then {\r\n                            // TODO localization\r\n                            _allInjuryTexts pushback [format[\"%2x %1\", (GVAR(AllWoundInjuryTypes) select _x1) select 6, ceil _amountOf], [1,1,1,1]];\r\n                        } else {\r\n                            // TODO localization\r\n                            _allInjuryTexts pushback [format[\"Partial %1\", (GVAR(AllWoundInjuryTypes) select _x1) select 6], [1,1,1,1]];\r\n                        };\r\n                    };\r\n                };\r\n            } foreach _openWounds;\r\n\r\n            private _bandagedwounds = _target getVariable [QGVAR(bandagedWounds), []];\r\n            {\r\n                _x params [\"\", \"\", \"_selectionX\", \"_amountOf\", \"_x4\"];\r\n                // Find how much this bodypart is bleeding\r\n                if !(_damaged select _selectionX) then {\r\n                    _selectionBloodLoss set [_selectionX, (_selectionBloodLoss select _selectionX) + (20 * (_x4 * _amountOf))];\r\n                };\r\n                if (_selectionN == _selectionX) then {\r\n                    // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\r\n                    if (_amountOf > 0) then {\r\n                        if (_amountOf >= 1) then {\r\n                            // TODO localization\r\n                            _allInjuryTexts pushback [format[\"[B] %2x %1\", (GVAR(AllWoundInjuryTypes) select (_x select 1)) select 6, ceil _amountOf], [0.88,0.7,0.65,1]];\r\n                        } else {\r\n                            // TODO localization\r\n                            _allInjuryTexts pushback [format[\"[B] Partial %1\", (GVAR(AllWoundInjuryTypes) select (_x select 1)) select 6], [0.88,0.7,0.65,1]];\r\n                        };\r\n                    };\r\n                };\r\n            } foreach _bandagedwounds;\r\n        } else {\r\n            _damaged = [true, true, true, true, true, true];\r\n            {\r\n                private _hitPoint = [_target, _x, true] call FUNC(translateSelections);\r\n                _selectionBloodLoss set [_forEachIndex, _target getHitPointDamage _hitPoint];\r\n                if (_target getHitPointDamage _hitPoint > 0 && {_forEachIndex == _selectionN}) then {\r\n                    private _pointDamage = _target getHitPointDamage _hitPoint;\r\n                    private _severity = switch (true) do {\r\n                        case (_pointDamage > 0.5): {localize LSTRING(HeavilyWounded)};\r\n                        case (_pointDamage > 0.1): {localize LSTRING(LightlyWounded)};\r\n                        default                    {localize LSTRING(VeryLightlyWounded)};\r\n                    };\r\n                    private _part = localize ([\r\n                        LSTRING(Head),\r\n                        LSTRING(Torso),\r\n                        LSTRING(LeftArm),\r\n                        LSTRING(RightArm),\r\n                        LSTRING(LeftLeg),\r\n                        LSTRING(RightLeg)\r\n                    ] select _forEachIndex);\r\n                    _allInjuryTexts pushBack [format [\"%1 %2\", _severity, toLower _part], [1,1,1,1]];\r\n                };\r\n            } forEach GVAR(SELECTIONS);\r\n        };\r\n\r\n        // Handle the body image coloring\r\n\r\n        private _availableSelections = [50,51,52,53,54,55];\r\n        {\r\n            private _total = _x;\r\n            private _red = 1;\r\n            private _green = 1;\r\n            private _blue = 1;\r\n\r\n            if (_total > 0) then {\r\n                if (_damaged select _forEachIndex) then {\r\n                    _green = (0.9 - _total) max 0;\r\n                    _blue = _green;\r\n                } else {\r\n                    _green = (0.9 - _total) max 0;\r\n                    _red = _green;\r\n                    //_blue = _green;\r\n                };\r\n            };\r\n            (_display displayCtrl (_availableSelections select _foreachIndex)) ctrlSetTextColor [_red, _green, _blue, 1.0];\r\n        } foreach _selectionBloodLoss;\r\n\r\n        private _lbCtrl = (_display displayCtrl 200);\r\n        lbClear _lbCtrl;\r\n        {\r\n            _x params [\"_add\", \"_color\"];\r\n            _lbCtrl lbAdd _add;\r\n            _lbCtrl lbSetColor [_foreachIndex, _color];\r\n        } foreach _genericMessages;\r\n\r\n        private _amountOfGeneric = count _genericMessages;\r\n        {\r\n            _x params [\"_add\", \"_color\"];\r\n            _lbCtrl lbAdd _add;\r\n            _lbCtrl lbSetColor [_foreachIndex + _amountOfGeneric, _color];\r\n        } foreach _allInjuryTexts;\r\n        if (count _allInjuryTexts == 0) then {\r\n            _lbCtrl lbAdd (localize LSTRING(NoInjuriesBodypart));\r\n        };\r\n\r\n        private _logCtrl = (_display displayCtrl 302);\r\n        lbClear _logCtrl;\r\n\r\n        private _logs = _target getVariable [QGVAR(logFile_Activity), []];\r\n        {\r\n            _x params [\"_message\", \"_moment\", \"_type\", \"_arguments\"];\r\n            if (isLocalized _message) then {\r\n                _message = localize _message;\r\n            };\r\n\r\n            {\r\n                if (_x isEqualType \"\" && {isLocalized _x}) then {\r\n                    _arguments set [_foreachIndex, localize _x];\r\n                };\r\n            } foreach _arguments;\r\n            _message = format([_message] + _arguments);\r\n            _logCtrl lbAdd format[\"%1 %2\", _moment, _message];\r\n        } foreach _logs;\r\n\r\n        private _triageStatus = [_target] call FUNC(getTriageStatus);\r\n        (_display displayCtrl 303) ctrlSetText (_triageStatus select 0);\r\n        (_display displayCtrl 303) ctrlSetBackgroundColor (_triageStatus select 2);\r\n\r\n    }, 0, [_target, GVAR(currentSelectedSelectionN)]] call CBA_fnc_addPerFrameHandler;\r\n\r\n} else {\r\n    (\"ACE_MedicalRscDisplayInformation\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\r\n};\r\n"},{"name":"ace_medical_fnc_displayTriageCard","file":"medical/functions/fnc_displayTriageCard.sqf","text":"/*\r\n * Author: Glowbal\r\n * Display triage card for a unit\r\n *\r\n * Arguments:\r\n * 0: The unit <OBJECT>\r\n * 1: Show <BOOL> (default: true)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", [\"_show\", true]];\r\n\r\nGVAR(TriageCardTarget) = if (_show) then {_target} else {ObjNull};\r\n\r\nif (_show) then {\r\n    //(\"ACE_MedicalTriageCard\" call BIS_fnc_rscLayer) cutRsc [QGVAR(triageCard),\"PLAIN\"];\r\n    createDialog QGVAR(triageCard);\r\n\r\n    [{\r\n        params [\"_args\", \"_idPFH\"];\r\n        _args params [\"_target\"];\r\n        if (GVAR(TriageCardTarget) != _target) exitWith {\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n\r\n        disableSerialization;\r\n        private _display = uiNamespace getVariable QGVAR(triageCard);\r\n        if (isNil \"_display\") exitWith {\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n\r\n        private _triageCardTexts = [];\r\n\r\n        // TODO fill the lb with the appropiate information for the patient\r\n        private _lbCtrl = (_display displayCtrl 200);\r\n        lbClear _lbCtrl;\r\n\r\n        private _log = _target getVariable [QGVAR(triageCard), []];\r\n        {\r\n            _x params [\"_item\", \"_amount\"];\r\n            private _message = _item;\r\n            if (isClass(configFile >> \"CfgWeapons\" >> _item)) then {\r\n                _message = getText(configFile >> \"CfgWeapons\" >> _item >> \"DisplayName\");\r\n            } else {\r\n                if (isLocalized _message) then {\r\n                    _message = localize _message;\r\n                };\r\n            };\r\n            _triageCardTexts pushBack format[\"%1x - %2\", _amount, _message];\r\n        } forEach _log;\r\n\r\n        if (count _triageCardTexts == 0) then {\r\n            _lbCtrl lbAdd (localize LSTRING(TriageCard_NoEntry));\r\n        };\r\n        {\r\n            _lbCtrl lbAdd _x;\r\n        } forEach _triageCardTexts;\r\n\r\n        private _triageStatus = [_target] call FUNC(getTriageStatus);\r\n        _triageStatus params [\"_text\", \"\", \"_color\"];\r\n\r\n        (_display displayCtrl 2000) ctrlSetText _text;\r\n        (_display displayCtrl 2000) ctrlSetBackgroundColor _color;\r\n\r\n    }, 0, [_target]] call CBA_fnc_addPerFrameHandler;\r\n\r\n} else {\r\n    //(\"ACE_MedicalTriageCard\" call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\"];\r\n    closeDialog 7010;\r\n};\r\n"},{"name":"ace_medical_fnc_dropDownTriageCard","file":"medical/functions/fnc_dropDownTriageCard.sqf","text":"/*\r\n * Author: Glowbal\r\n * Display triage card for a unit\r\n *\r\n * Arguments:\r\n * 0: Show <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_show\"];\r\n\r\ndisableSerialization;\r\nprivate _display = uiNamespace getVariable QGVAR(triageCard);\r\nif (isNil \"_display\") exitWith {};\r\n\r\nprivate _pos = [0,0,0,0];\r\nif (_show) then {\r\n    _pos = ctrlPosition (_display displayCtrl 2001);\r\n};\r\nfor \"_idc\" from 2002 to 2006 step 1 do {\r\n    _pos set [1, (_pos select 1) + (_pos select 3)];\r\n    private _ctrl = (_display displayCtrl _idc);\r\n    _ctrl ctrlSetPosition _pos;\r\n    _ctrl ctrlCommit 0;\r\n};\r\n"},{"name":"ace_medical_fnc_getBloodLoss","file":"medical/functions/fnc_getBloodLoss.sqf","text":"/*\r\n * Author: Glowbal\r\n * Calculate the total blood loss of a unit.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Total blood loss of unit <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n#define BLOODLOSSRATE_BASIC 0.2\r\n\r\nprivate [\"_totalBloodLoss\",\"_tourniquets\",\"_openWounds\", \"_cardiacOutput\", \"_internalWounds\"];\r\n// TODO Only use this calculation if medium or higher, otherwise use vanilla calculations (for basic medical).\r\nparams [\"_unit\"];\r\n_totalBloodLoss = 0;\r\n\r\n// Advanced medical bloodloss handling\r\nif (GVAR(level) >= 2) then {\r\n    _tourniquets = _unit getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\r\n    _openWounds = _unit getVariable [QGVAR(openWounds), []];\r\n    //_cardiacOutput = [_unit] call FUNC(getCardiacOutput);\r\n\r\n    {\r\n        if ((_tourniquets select (_x select 2)) == 0) then {\r\n            // total bleeding ratio * percentage of injury left\r\n            _totalBloodLoss = _totalBloodLoss + ((_x select 4) * (_x select 3));\r\n\r\n            // (((BLOODLOSS_SMALL_WOUNDS * (_x select 0))) + ((BLOODLOSS_MEDIUM_WOUNDS * (_x select 1))) + ((BLOODLOSS_LARGE_WOUNDS * (_x select 2))) * (_cardiacOutput / DEFAULT_CARDIAC_OUTPUT));\r\n        };\r\n    } forEach _openWounds;\r\n\r\n    _internalWounds = _unit getVariable [QGVAR(internalWounds), []];\r\n    {\r\n        _totalBloodLoss = _totalBloodLoss + ((_x select 4) * (_x select 3));\r\n    } forEach _internalWounds;\r\n\r\n    // cap the blood loss to be no greater as the current cardiac output\r\n    //(_totalBloodLoss min _cardiacOutput);\r\n} else {\r\n    { _totalBloodLoss = _totalBloodLoss + _x } forEach (_unit getVariable [QGVAR(bodyPartStatus), []]);\r\n    _totalBloodLoss = (_totalBloodLoss / 6) * BLOODLOSSRATE_BASIC;\r\n};\r\n_totalBloodLoss * ((_unit getVariable [QGVAR(bleedingCoefficient), GVAR(bleedingCoefficient)]) max 0);\r\n"},{"name":"ace_medical_fnc_getBloodPressure","file":"medical/functions/fnc_getBloodPressure.sqf","text":"/*\r\n * Author: Glowbal\r\n * Calculates the blood volume change and decreases the IVs given to the unit.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * 0: BloodPressure Low <NUMBER>\r\n * 1: BloodPressure High <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n// Value is taken because with cardic output and resistance at default values, it will put blood pressure High at 120.\r\n#define MODIFIER_BP_HIGH     0.229\r\n\r\n// Value is taken because with cardic output and resistance at default values, it will put blood pressure Low at 80.\r\n#define MODIFIER_BP_LOW     0.1524\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _cardiacOutput = [_unit] call FUNC(getCardiacOutput);\r\nprivate _resistance = _unit getVariable [QGVAR(peripheralResistance), 100];\r\n\r\nprivate _bloodPressureHigh = (_cardiacOutput * MODIFIER_BP_HIGH) * _resistance;\r\nprivate _bloodPressureLow = (_cardiacOutput * MODIFIER_BP_LOW) * _resistance;\r\n\r\n[_bloodPressureLow max 0, _bloodPressureHigh max 0]\r\n"},{"name":"ace_medical_fnc_getBloodVolumeChange","file":"medical/functions/fnc_getBloodVolumeChange.sqf","text":"/*\r\n * Author: Glowbal\r\n * Calculates the blood volume change and decreases the IVs given to the unit.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Current cardiac output <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n/*\r\n    IV Change per second calculation:\r\n    250ml should take 60 seconds to fill. 250/60 = 4.166.\r\n*/\r\n#define IV_CHANGE_PER_SECOND         -4.166\r\n\r\n/*\r\n    Blood Change per second calculation for IVs:\r\n    250ml should take 60 seconds to fill in. Total blood volume is 7000ml = 100%.\r\n    7000/100 = 70 = 1%\r\n    250 / 70 = 3.571428571%\r\n    3.571428571 / 60 = 0.0595% per second.\r\n*/\r\n#define BLOOD_CHANGE_PER_SECOND        0.0595\r\n\r\n#define EMPTY_IV_BAG_VALUE 0\r\n#define IV_VOLUME (_unit getVariable [_x, EMPTY_IV_BAG_VALUE]) + IV_CHANGE_PER_SECOND\r\n\r\nprivate [\"_bloodVolume\", \"_bloodVolumeChange\", \"_ivVolume\"];\r\nparams [\"_unit\"];\r\n\r\nprivate _bloodVolume = _unit getVariable [QGVAR(bloodVolume), 100];\r\nprivate _bloodVolumeChange = -([_unit] call FUNC(getBloodLoss));\r\n\r\nif (_bloodVolume < 100) then {\r\n    {\r\n        if ((_unit getVariable [_x, EMPTY_IV_BAG_VALUE]) > EMPTY_IV_BAG_VALUE) then {\r\n            _bloodVolumeChange = _bloodVolumeChange + BLOOD_CHANGE_PER_SECOND;\r\n            _unit setVariable [_x, IV_VOLUME];\r\n        };\r\n    } forEach GVAR(IVBags);\r\n} else {\r\n    {\r\n        if ((_unit getVariable [_x, EMPTY_IV_BAG_VALUE]) > EMPTY_IV_BAG_VALUE) then {\r\n            _unit setVariable [_x, EMPTY_IV_BAG_VALUE]; // lets get rid of exessive IV volume\r\n        };\r\n    } forEach GVAR(IVBags);\r\n};\r\n\r\n_bloodVolumeChange;\r\n"},{"name":"ace_medical_fnc_getCardiacOutput","file":"medical/functions/fnc_getCardiacOutput.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the cardiac output from the Heart, based on current Heart Rate and Blood Volume.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Current cardiac output <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n/*\r\n    Cardiac output (Q or or CO ) is the volume of blood being pumped by the heart, in particular by a left or right ventricle in the CBA_missionTime interval of one minute. CO may be measured in many ways, for example dm3/min (1 dm3 equals 1 litre).\r\n\r\n    Source: http://en.wikipedia.org/wiki/Cardiac_output\r\n*/\r\n\r\n// to limit the amount of complex calculations necessary, we take a set modifier to calculate Stroke Volume.\r\n#define MODIFIER_CARDIAC_OUTPUT     19.04761\r\n\r\nparams [\"_unit\"];\r\n\r\n((_unit getVariable [QGVAR(bloodVolume), 100])/MODIFIER_CARDIAC_OUTPUT) + ((_unit getVariable [QGVAR(heartRate), 80])/80-1);\r\n"},{"name":"ace_medical_fnc_getHeartRateChange","file":"medical/functions/fnc_getHeartRateChange.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the change in the heart rate. Used for the vitals calculations. Calculated in one seconds.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Change in heart Rate <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n#define HEART_RATE_MODIFIER 0.02\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _hrIncrease = 0;\r\nif (!(_unit getVariable [QGVAR(inCardiacArrest),false])) then {\r\n    private _heartRate = _unit getVariable [QGVAR(heartRate), 80];\r\n    private _bloodLoss = [_unit] call FUNC(getBloodLoss);\r\n\r\n    private _adjustment = _unit getVariable [QGVAR(heartRateAdjustments), []];\r\n    {\r\n        _x params [\"_values\", \"_time\", \"_callBack\"];\r\n        if (abs _values > 0) then {\r\n            if (_time <= 0) then {\r\n                _time = 1;\r\n            };\r\n            private _change = (_values / _time);\r\n            _hrIncrease = _hrIncrease + _change;\r\n\r\n            if ( (_time - 1) <= 0) then {\r\n                 _time = 0;\r\n                 _adjustment set [_forEachIndex, ObjNull];\r\n                 [_unit] call _callBack;\r\n            } else {\r\n                _time = _time - 1;\r\n                _adjustment set [_forEachIndex, [_values - _change, _time]];\r\n            };\r\n        } else {\r\n            _adjustment set [_forEachIndex, ObjNull];\r\n            [_unit] call _callBack;\r\n        };\r\n    } forEach _adjustment;\r\n\r\n    _adjustment = _adjustment - [ObjNull];\r\n    _unit setVariable [QGVAR(heartRateAdjustments), _adjustment];\r\n\r\n    private _bloodVolume = _unit getVariable [QGVAR(bloodVolume), 100];\r\n    if (_bloodVolume > 75) then {\r\n        if (_bloodLoss > 0.0) then {\r\n            if (_bloodLoss < 0.5) then {\r\n                if (_heartRate < 126) then {\r\n                    _hrIncrease = _hrIncrease + 0.05;\r\n                };\r\n            } else {\r\n                if (_bloodLoss < 1) then {\r\n                    if (_heartRate < 161) then {\r\n                        _hrIncrease = _hrIncrease + 0.1;\r\n                    };\r\n                } else {\r\n                    if (_heartRate < 220) then {\r\n                        _hrIncrease = _hrIncrease + 0.15;\r\n                    };\r\n                };\r\n            };\r\n        } else {\r\n            // Stabalize it\r\n            if (_heartRate < (60 + round(random(10)))) then {\r\n                _hrIncrease = _hrIncrease + HEART_RATE_MODIFIER;\r\n            } else {\r\n                if (_heartRate > (77 + round(random(10)))) then {\r\n                    _hrIncrease = _hrIncrease - HEART_RATE_MODIFIER;\r\n                };\r\n            };\r\n        };\r\n    } else {\r\n        _hrIncrease = _hrIncrease - HEART_RATE_MODIFIER;\r\n    };\r\n};\r\n_hrIncrease\r\n"},{"name":"ace_medical_fnc_getTriageStatus","file":"medical/functions/fnc_getTriageStatus.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the triage status and information from a unit\r\n *\r\n * Arguments:\r\n * 0: The unit <OBJECT>\r\n *\r\n * Return Value:\r\n * 0: Name <STRING>\r\n * 1: Status ID <NUMBER>\r\n * 2: Color <ARRAY <NUMBER>>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_unit\",\"_return\",\"_status\"];\r\nparams [\"_unit\"];\r\n_status = _unit getVariable [QGVAR(triageLevel), -1];\r\n_return = switch (_status) do {\r\n    case 1: {[localize LSTRING(Triage_Status_Minor), 1, [0, 0.5, 0, 0.9]]};\r\n    case 2: {[localize LSTRING(Triage_Status_Delayed), 2, [0.7, 0.5, 0, 0.9]]};\r\n    case 3: {[localize LSTRING(Triage_Status_Immediate), 3, [0.4, 0.07, 0.07, 0.9]]};\r\n    case 4: {[localize LSTRING(Triage_Status_Deceased), 4, [0, 0, 0, 0.9]]};\r\n    default {[localize LSTRING(Triage_Status_None), 0, [0, 0, 0, 0.9]]};\r\n};\r\n_return\r\n"},{"name":"ace_medical_fnc_getTypeOfDamage","file":"medical/functions/fnc_getTypeOfDamage.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the type of damage based upon the projectile.\r\n *\r\n * Arguments:\r\n * 0: The projectile classname or object <STRING>\r\n *\r\n * ReturnValue:\r\n * Type of damage <STRING>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_typeOfProjectile\"];\r\n\r\n\r\nif (_typeOfProjectile isKindOf \"BulletBase\") exitWith {\"bullet\"};\r\nif (_typeOfProjectile isKindOf \"ShotgunBase\") exitWith {\"bullet\"};\r\nif (_typeOfProjectile isKindOf \"GrenadeCore\") exitWith {\"grenade\"};\r\nif (_typeOfProjectile isKindOf \"TimeBombCore\") exitWith {\"explosive\"};\r\nif (_typeOfProjectile isKindOf \"MineCore\") exitWith {\"explosive\"};\r\nif (_typeOfProjectile isKindOf \"FuelExplosion\") exitWith {\"explosive\"};\r\nif (_typeOfProjectile isKindOf \"ShellBase\") exitWith {\"shell\"};\r\nif (_typeOfProjectile isKindOf \"RocketBase\") exitWith {\"explosive\"};\r\nif (_typeOfProjectile isKindOf \"MissileBase\") exitWith {\"explosive\"};\r\nif (_typeOfProjectile isKindOf \"LaserBombCore\") exitWith {\"explosive\"};\r\nif (_typeOfProjectile isKindOf \"BombCore\") exitWith {\"explosive\"};\r\nif (_typeOfProjectile isKindOf \"Grenade\") exitWith {\"grenade\"};\r\ntoLower _typeOfProjectile\r\n"},{"name":"ace_medical_fnc_getUnconsciousCondition","file":"medical/functions/fnc_getUnconsciousCondition.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get whatever or not a unit should be or stay unconscious.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Should the unit stay unconscious? <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (isnil QGVAR(unconsciousConditions)) then {\r\n    GVAR(unconsciousConditions) = [];\r\n};\r\n\r\nprivate _return = false;\r\n{\r\n    if ((_x isEqualType {}) && {([_unit] call _x)}) exitwith {\r\n       _return = true;\r\n    };\r\n} foreach GVAR(unconsciousConditions);\r\n\r\n_return\r\n"},{"name":"ace_medical_fnc_handleBandageOpening","file":"medical/functions/fnc_handleBandageOpening.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handles the bandage of a patient.\r\n *\r\n * Arguments:\r\n * 0: The target <OBJECT>\r\n * 1: The impact <NUMBER>\r\n * 2: Selection part number <NUMBER>\r\n * 3: Injury index <NUMBER>\r\n * 4: Injury <ARRAY>\r\n * 5: Used Bandage type <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_className\", \"_reopeningChance\", \"_reopeningMinDelay\", \"_reopeningMaxDelay\", \"_config\", \"_woundTreatmentConfig\", \"_bandagedWounds\", \"_exist\", \"_injuryId\", \"_existingInjury\", \"_delay\", \"_openWounds\", \"_selectedInjury\", \"_bandagedInjury\"];\r\nparams [\"_target\", \"_impact\", \"_part\", \"_injuryIndex\", \"_injury\", \"_bandage\"];\r\n\r\nprivate _classID = _injury select 1;\r\nprivate _className = GVAR(woundClassNames) select _classID;\r\n\r\n// default, just in case..\r\nprivate _reopeningChance = 0.1;\r\nprivate _reopeningMinDelay = 120;\r\nprivate _reopeningMaxDelay = 200;\r\n\r\n// Get the default values for the used bandage\r\nprivate _config = (ConfigFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Bandaging\");\r\nif (isClass (_config >> _bandage)) then {\r\n    _config = (_config >> _bandage);\r\n    _reopeningChance = getNumber (_config >> \"reopeningChance\");\r\n    _reopeningMinDelay = getNumber (_config >> \"reopeningMinDelay\");\r\n    _reopeningMaxDelay = getNumber (_config >> \"reopeningMaxDelay\") max _reopeningMinDelay;\r\n} else {\r\n    ACE_LOGWARNING_2(\"No config for bandage [%1] config base [%2]\", _bandage, _config);\r\n};\r\n\r\nif (isClass (_config >> _className)) then {\r\n    private _woundTreatmentConfig = (_config >> _className);\r\n    if (isNumber (_woundTreatmentConfig >> \"reopeningChance\")) then {\r\n        _reopeningChance = getNumber (_woundTreatmentConfig >> \"reopeningChance\");\r\n    };\r\n    if (isNumber (_woundTreatmentConfig >> \"reopeningMinDelay\")) then {\r\n        _reopeningMinDelay = getNumber (_woundTreatmentConfig >> \"reopeningMinDelay\");\r\n    };\r\n    if (isNumber (_woundTreatmentConfig >> \"reopeningMaxDelay\")) then {\r\n        _reopeningMaxDelay = getNumber (_woundTreatmentConfig >> \"reopeningMaxDelay\") max _reopeningMinDelay;\r\n    };\r\n} else {\r\n    ACE_LOGWARNING_2(\"No config for wound type [%1] config base [%2]\", _className, _config);\r\n};\r\nTRACE_5(\"configs\",_bandage,_className,_reopeningChance,_reopeningMinDelay,_reopeningMaxDelay);\r\n\r\nprivate _bandagedWounds = _target getVariable [QGVAR(bandagedWounds), []];\r\nprivate _injuryType = _injury select 1;\r\nprivate _exist = false;\r\nprivate _bandagedInjury = [];\r\n{\r\n    if ((_x select 1) == _injuryType && (_x select 2) == (_injury select 2)) exitwith {\r\n        _exist = true;\r\n        _existingInjury = _x;\r\n        _existingInjury set [3, (_existingInjury select 3) + _impact];\r\n        _bandagedWounds set [_foreachIndex, _existingInjury];\r\n\r\n        _bandagedInjury = _existingInjury;\r\n    };\r\n} foreach _bandagedWounds;\r\n\r\nif !(_exist) then {\r\n    // [ID, classID, bodypart, percentage treated, bloodloss rate]\r\n    _bandagedInjury = [_injury select 0, _injury select 1, _injury select 2, _impact, _injury select 4];\r\n    _bandagedWounds pushback _bandagedInjury;\r\n};\r\n\r\n_target setVariable [QGVAR(bandagedWounds), _bandagedWounds, true];\r\n\r\nTRACE_1(\"\",_reopeningChance);\r\n// Check if we are ever going to reopen this\r\nif (random(1) <= _reopeningChance) then {\r\n    _delay = _reopeningMinDelay + random(_reopeningMaxDelay - _reopeningMinDelay);\r\n    TRACE_1(\"Will open\",_delay);\r\n    [{\r\n        params [\"_target\", \"_impact\", \"_part\", \"_injuryIndex\", \"_injury\"];\r\n        TRACE_5(\"params\",_target,_impact,_part,_injuryIndex,_injury);\r\n\r\n        //if (alive _target) then {\r\n            private _openWounds = _target getVariable [QGVAR(openWounds), []];\r\n            if ((count _openWounds) - 1 < _injuryIndex) exitwith {};\r\n            private _selectedInjury = _openWounds select _injuryIndex;\r\n            if (_selectedInjury select 1 == _injury select 1 && (_selectedInjury select 2) == (_injury select 2)) then { // matching the IDs\r\n\r\n                private _bandagedWounds = _target getVariable [QGVAR(bandagedWounds), []];\r\n                private _exist = false;\r\n                private _injuryId = _injury select 1;\r\n                {\r\n                    if ((_x select 1) == _injuryId && (_x select 2) == (_injury select 2)) exitwith {\r\n                        _exist = true;\r\n                        _existingInjury = _x;\r\n                        _existingInjury set [3, ((_existingInjury select 3) - _impact) max 0];\r\n                        _bandagedWounds set [_foreachIndex, _existingInjury];\r\n                    };\r\n                } foreach _bandagedWounds;\r\n\r\n                if (_exist) then {\r\n                    TRACE_2(\"Reopening Wound\",_bandagedWounds,_openWounds);\r\n                    _selectedInjury set [3, (_selectedInjury select 3) + _impact];\r\n                    _openWounds set [_injuryIndex, _selectedInjury];\r\n                    _target setVariable [QGVAR(bandagedWounds), _bandagedWounds, true];\r\n                    _target setVariable [QGVAR(openWounds), _openWounds, true];\r\n                };\r\n            };\r\n            // Otherwise something went wrong, we we don't reopen them..\r\n       //};\r\n    }, [_target, _impact, _part, _injuryIndex, +_injury], _delay] call CBA_fnc_waitAndExecute;\r\n};\r\n"},{"name":"ace_medical_fnc_handleCollisionDamage","file":"medical/functions/fnc_handleCollisionDamage.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_newDamage\"];\r\n\r\nprivate [\"_selection\", \"_totalDamage\"];\r\n\r\n_selection = \"body\";\r\n\r\n_totalDamage = (_unit getHit _selection) + _newDamage;\r\n\r\n_unit setHit [_selection, _totalDamage];\r\n\r\nsystemChat format [\"collision: %1\", _this];\r\n"},{"name":"ace_medical_fnc_handleCreateLitter","file":"medical/functions/fnc_handleCreateLitter.sqf","text":"/*\r\n * Author: Glowbal\r\n * handle Litter Create\r\n *\r\n * Arguments:\r\n * 0: Litter Class <STRING>\r\n * 1: Position <ARRAY>\r\n * 2: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif(!hasInterface) exitWith { false };\r\n\r\nparams [\"_litterClass\", \"_position\", \"_direction\"];\r\nprivate[\"_litterObject\", \"_maxLitterCount\"];\r\n//IGNORE_PRIVATE_WARNING(_values);\r\n\r\nif (isNil QGVAR(allCreatedLitter)) then {\r\n    GVAR(allCreatedLitter) = [];\r\n    GVAR(litterPFHRunning) = false;\r\n};\r\n\r\n_litterObject = _litterClass createVehicleLocal _position;\r\n_litterObject setDir _direction;\r\n_litterObject setPosATL _position;\r\n// Move the litter next frame to get rid of HORRIBLE spacing, fixes #1112\r\n[{ params [\"_object\", \"_pos\"]; _object setPosATL _pos; }, [_litterObject, _position]] call CBA_fnc_execNextFrame;\r\n\r\n_maxLitterCount = getArray (configFile >> \"ACE_Settings\" >> QGVAR(litterSimulationDetail) >> \"_values\") select GVAR(litterSimulationDetail);\r\nif((count GVAR(allCreatedLitter)) > _maxLitterCount ) then {\r\n    // gank the first litter object, and spawn ours.\r\n    private[\"_oldLitter\"];\r\n    _oldLitter = GVAR(allCreatedLitter) deleteAt 0;\r\n    {\r\n        deleteVehicle _x;\r\n    } forEach (_oldLitter select 1);\r\n};\r\n\r\nGVAR(allCreatedLitter) pushBack [CBA_missionTime, [_litterObject]];\r\n\r\nif(!GVAR(litterPFHRunning) && {GVAR(litterCleanUpDelay) > 0}) then {\r\n    // Start the litter cleanup loop\r\n    GVAR(litterPFHRunning) = true;\r\n    call FUNC(litterCleanupLoop);\r\n};\r\n"},{"name":"ace_medical_fnc_handleDamage_advanced","file":"medical/functions/fnc_handleDamage_advanced.sqf","text":"/*\r\n * Author: Glowbal\r\n * Advanced HandleDamage EH function.\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter <OBJECT>\r\n * 4: Projectile <STRING>\r\n * 5: Hit part index of the hit point <NUMBER>\r\n * 6: Current damage to be returned <NUMBER>\r\n *\r\n * //On 1.63 dev:\r\n * 6: Shooter? <OBJECT>\r\n * 7: Current damage to be returned <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfProjectile\", \"_hitPointNumber\", \"_newDamage\"];\r\n\r\n//Temp fix for 1.63 handleDamage changes\r\nif (_newDamage isEqualType objNull) then {\r\n    _newDamage = _this select 7;\r\n};\r\n\r\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\r\nif (_part < 0) exitWith {};\r\n\r\nprivate _hitPoints = [\"HitHead\", \"HitBody\", \"HitLeftArm\", \"HitRightArm\", \"HitLeftLeg\", \"HitRightLeg\"];\r\n// Sorting out the damage\r\nprivate _damageBodyParts = _unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\r\n\r\n_damageBodyParts set [_part, (_damageBodyParts select _part) + _newDamage];\r\n_unit setVariable [QGVAR(bodyPartStatus), _damageBodyParts, true];\r\n\r\nprivate _typeOfDamage = [_typeOfProjectile] call FUNC(getTypeOfDamage);\r\n\r\n[_unit, _selectionName, _newDamage, _typeOfProjectile, _typeOfDamage] call FUNC(handleDamage_assignWounds);\r\n\r\n// TODO Disabled until implemented fully\r\n//if (GVAR(enableAirway)) then {\r\n//    [_unit,_selectionName,_newDamage,_sourceOfDamage, _typeOfDamage] call FUNC(handleDamage_airway);\r\n//};\r\n//if (GVAR(enableFractures)) then {\r\n//    [_unit,_selectionName,_newDamage,_sourceOfDamage, _typeOfDamage] call FUNC(handleDamage_fractures);\r\n//};\r\n//if (GVAR(enableInternalBleeding)) then {\r\n//    [_unit,_selectionName,_newDamage,_sourceOfDamage, _typeOfDamage] call FUNC(handleDamage_internalInjuries);\r\n//};\r\n\r\nif (alive _unit && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\r\n    // If it reaches this, we can assume that the hit did not kill this unit, as this function is called 3 frames after the damage has been passed.\r\n    if ([_unit, _part, if (_part > 1) then {_newDamage * 1.3} else {_newDamage * 2}] call FUNC(determineIfFatal)) then {\r\n        [_unit] call FUNC(setUnconscious);\r\n    };\r\n};\r\n"},{"name":"ace_medical_fnc_handleDamage_advancedSetDamage","file":"medical/functions/fnc_handleDamage_advancedSetDamage.sqf","text":"/*\r\n * Author: Glowbal\r\n * Sets the hitpoint damage for au nit to the correct values\r\n *\r\n * Arguments:\r\n * 0: Unit for which the hitpoint damage will be sorted out <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (!local _unit) exitWith {};\r\n\r\n// [\"head\", \"body\", \"hand_l\", \"hand_r\", \"leg_l\", \"leg_r\"]\r\nprivate _bodyStatus = _unit getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\r\n\r\n_bodyStatus params [\"_headDamage\", \"_torsoDamage\", \"_handsDamageR\", \"_handsDamageL\", \"_legsDamageR\", \"_legsDamageL\"];\r\n\r\n_unit setHitPointDamage [\"hitHead\", _headDamage min 0.95];\r\n_unit setHitPointDamage [\"hitBody\", _torsoDamage min 0.95];\r\n_unit setHitPointDamage [\"hitHands\", (_handsDamageR + _handsDamageL) min 0.95];\r\n_unit setHitPointDamage [\"hitLegs\", (_legsDamageR + _legsDamageL) min 0.95];\r\n\r\nif (_bodyStatus isEqualTo [0,0,0,0,0,0]) then {\r\n    _unit setDamage 0;\r\n};\r\n"},{"name":"ace_medical_fnc_handleDamage_airway","file":"medical/functions/fnc_handleDamage_airway.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handling of the airway injuries upon the handleDamage eventhandler.\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter or source of the damage <OBJECT>\r\n * 4: Type of the damage done <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_bodyPartn\";\r\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfDamage\"];\r\n_bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\r\n\r\nif (_bodyPartn > 1) exitWith {};\r\n\r\nif (_amountOfDamage > 0.5) then {\r\n    if (random(1) >= 0.8) then {\r\n        if !(_unit getVariable[QGVAR(airwayCollapsed), false]) then {\r\n            _unit setVariable [QGVAR(airwayCollapsed), true, true];\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_medical_fnc_handleDamage_basic","file":"medical/functions/fnc_handleDamage_basic.sqf","text":"/*\r\n * Author: KoffeinFlummi, Glowbal\r\n * Handle damage basic medical\r\n *\r\n * Arguments:\r\n *\r\n * Return Value:\r\n * <nil>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\nTRACE_1(\"ACE_DEBUG: HandleDamage_BASIC Called\",_target);\r\n\r\nprivate _damageBodyParts = _target getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\r\nprivate _cache_params = _target getVariable [QGVAR(cachedHandleDamageParams), []];\r\nprivate _cache_damages = _target getVariable QGVAR(cachedDamages);\r\n\r\nTRACE_4(\"ACE_DEBUG: HandleDamage BASIC\",_unit, _damageBodyParts,_cache_params,_cache_damages);\r\n\r\n{\r\n    _x params [\"_unit\",\"_selectionName\",\"_amountOfDamage\",\"_sourceOfDamage\",\"_typeOfProjectile\",\"_typeOfDamage\"];\r\n    TRACE_6(\"_x\",_unit,_selectionName,_amountOfDamage,_sourceOfDamage,_typeOfProjectile,_typeOfDamage);\r\n    if !(isNull _sourceOfDamage && {_typeOfProjectile == \"\"} && {vehicle _unit == _unit} && {(_selectionName == \"head\" || isBurning _unit)}) then {\r\n        _part = [_selectionName] call FUNC(selectionNameToNumber);\r\n        if (_part < 0) exitwith {};\r\n\r\n        private [\"_newDamage\", \"_pain\"];\r\n        _newDamage = (_cache_damages select _foreachIndex);\r\n        _damageBodyParts set [_part, (_damageBodyParts select _part) + _newDamage];\r\n        _unit setVariable [QGVAR(bodyPartStatus), _damageBodyParts];\r\n\r\n        if (alive _unit && {!(_unit getVariable [\"ACE_isUnconscious\", false])}) then {\r\n            // If it reaches this, we can assume that the hit did not kill this unit, as this function is called 3 frames after the damage has been passed.\r\n            if ([_unit, _part, if (_part > 1) then {_newDamage * 1.3} else {_newDamage * 2}] call FUNC(determineIfFatal)) then {\r\n                [_unit, true, 0.5+random(10)] call FUNC(setUnconscious);\r\n            };\r\n        };\r\n        _pain = _unit getVariable [QGVAR(pain), 0];\r\n        _pain = _pain + (_newDamage / 4) * (1 - (_unit getVariable [QGVAR(morphine), 0]));\r\n        _unit setVariable [QGVAR(pain), _pain min 1, true];\r\n    };\r\n}foreach _cache_params;\r\n\r\n// We broadcast the value across the net here, in order to avoid broadcasting it multiple times earlier in the above code block\r\n_target setVariable [QGVAR(bodyPartStatus), _damageBodyParts, true];\r\nTRACE_2(\"ACE_DEBUG: HandleDamage BASIC Broadcast value here\",_unit, _target getVariable QGVAR(bodyPartStatus));\r\n\r\nEXPLODE_6_PVT(_damageBodyParts,_headDamage,_torsoDamage,_handsDamageR,_handsDamageL,_legsDamageR,_legsDamageL);\r\n_target setHitPointDamage [\"hitHead\", _headDamage min 0.95];\r\n_target setHitPointDamage [\"hitBody\", _torsoDamage min 0.95];\r\n_target setHitPointDamage [\"hitHands\", (_handsDamageR + _handsDamageL) min 0.95];\r\n_target setHitPointDamage [\"hitLegs\", (_legsDamageR + _legsDamageL) min 0.95];\r\n\r\n{\r\n    private _hitPointName = [_target, _x, true] call FUNC(translateSelections);\r\n    _target setHitPointDamage [_hitPointName, (_damageBodyParts select _foreachIndex) min 0.95];\r\n}foreach GVAR(SELECTIONS);\r\n"},{"name":"ace_medical_fnc_handleDamage_caching","file":"medical/functions/fnc_handleDamage_caching.sqf","text":"/*\r\n * Author: KoffeinFlummi, Glowbal\r\n * Cache a handleDamage call to execute it 3 frames later\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter <OBJECT>\r\n * 4: Projectile <STRING>\r\n * 5: HitPointIndex (-1 for structural) <NUMBER>\r\n *\r\n * Return Value:\r\n * <nil>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_hitSelections\", \"_hitPoints\", \"_impactVelocity\", \"_newDamage\", \"_cache_hitpoints\", \"_cache_projectiles\", \"_cache_params\", \"_cache_damages\"];\r\nparams [\"_unit\", \"_selectionName\", \"_damage\", \"_source\", \"_projectile\", \"_hitPointIndex\"];\r\n\r\n_hitSelections = GVAR(SELECTIONS);\r\n\r\n// Calculate change in damage - use getHitIndex because selection is translated (hitdiaphragm->body)\r\n_newDamage = _damage - (damage _unit);\r\nif (_hitPointIndex >= 0) then {_newDamage = _damage - (_unit getHitIndex _hitPointIndex)};\r\n\r\nTRACE_7(\"ACE_DEBUG: HandleDamage_Caching Called\",_unit, _selectionName, _damage, _source, _projectile,_hitPointIndex,_newDamage);\r\n\r\n// Check for vehicle crash\r\nprivate _vehicle = vehicle _unit;\r\nif ((_vehicle != _unit) && {!(_vehicle isKindOf \"StaticWeapon\")} && {_source in [objNull, driver _vehicle, _vehicle]} && {_projectile == \"\"} && {_selectionName == \"\"}) then {\r\n    if (GVAR(enableVehicleCrashes)) then {\r\n        _selectionName = selectRandom _hitSelections;\r\n        _projectile = \"vehiclecrash\";\r\n        _this set [1, _selectionName];\r\n        _this set [4, _projectile];\r\n    };\r\n};\r\n\r\n// Handle falling damage\r\n_impactVelocity = (velocity _unit) select 2;\r\nif (_impactVelocity < -5 && {_vehicle == _unit}) then {\r\n     TRACE_1(\"Starting isFalling\", time);\r\n    _unit setVariable [QGVAR(isFalling), true];\r\n    _unit setVariable [QGVAR(impactVelocity), _impactVelocity];\r\n} else {\r\n    if ((_unit getVariable [QGVAR(isFalling), false]) && {diag_frameno > (_unit getVariable [QGVAR(frameNo_damageCaching), -3]) + 2}) then {\r\n        TRACE_1(\"Ending isFalling\", time);\r\n        _unit setVariable [QGVAR(isFalling), false];\r\n    };\r\n};\r\nif (_unit getVariable [QGVAR(isFalling), false]) then {\r\n    if !(_selectionName in [\"\", \"leg_l\", \"leg_r\"]) then {\r\n        if (_selectionName == \"body\") then {\r\n            _newDamage = _newDamage * abs(_unit getVariable [QGVAR(impactVelocity), _impactVelocity]) / 50;\r\n        } else {\r\n            _newDamage = _newDamage * 0.5;\r\n        };\r\n        if (_newDamage < 0.075) then {_newDamage = 0;}; //Filter minor falling damage to non-leg hitpoints\r\n    } else {\r\n        if (_selectionName == \"\") then {\r\n            _selectionName = selectRandom [\"leg_l\", \"leg_r\"];\r\n            _this set [1, _selectionName];\r\n        };\r\n        _newDamage = _newDamage * 0.7;\r\n    };\r\n    _projectile = \"falling\";\r\n    _this set [4, \"falling\"];\r\n};\r\n\r\n// Finished with the current frame, reset variables\r\n// Note: sometimes handleDamage spans over 2 or even 3 frames.\r\nif (diag_frameno > (_unit getVariable [QGVAR(frameNo_damageCaching), -3]) + 2) then {\r\n    _unit setVariable [QGVAR(frameNo_damageCaching), diag_frameno];\r\n\r\n    // handle the cached damages 3 frames later\r\n    [{\r\n        private [\"_args\", \"_params\"];\r\n        params [\"_args\", \"_idPFH\"];\r\n        _args params [\"_unit\", \"_frameno\"];\r\n        if (diag_frameno >= _frameno + 2) then {\r\n            _unit setDamage 0;\r\n\r\n            if (GVAR(level) < 2 || {!([_unit] call FUNC(hasMedicalEnabled))}) then {\r\n                [_unit] call FUNC(handleDamage_basic);\r\n            } else {\r\n                _cache_params = _unit getVariable [QGVAR(cachedHandleDamageParams), []];\r\n                _cache_damages = _unit getVariable QGVAR(cachedDamages);\r\n                {\r\n                    _params = _x + [_cache_damages select _forEachIndex];\r\n                    _params call FUNC(handleDamage_advanced);\r\n                } forEach _cache_params;\r\n                [_unit] call FUNC(handleDamage_advancedSetDamage);\r\n            };\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n    }, 0, [_unit, diag_frameno] ] call CBA_fnc_addPerFrameHandler;\r\n\r\n    _unit setVariable [QGVAR(cachedProjectiles), []];\r\n    _unit setVariable [QGVAR(cachedHitPoints), []];\r\n    _unit setVariable [QGVAR(cachedDamages), []];\r\n    _unit setVariable [QGVAR(cachedHandleDamageParams), []];\r\n};\r\n\r\n// Caching of the damage events\r\nif (_selectionName != \"\") then {\r\n    _cache_projectiles = _unit getVariable QGVAR(cachedProjectiles);\r\n    private [\"_index\",\"_otherDamage\"];\r\n    _index = _cache_projectiles find _projectile;\r\n    // Check if the current projectile has already been handled once\r\n    if (_index >= 0 && {_projectile != \"falling\"}) exitWith {\r\n        _cache_damages = _unit getVariable QGVAR(cachedDamages);\r\n        // Find the previous damage this projectile has done\r\n        _otherDamage = (_cache_damages select _index);\r\n\r\n        // Take the highest damage of the two\r\n        if (_newDamage > _otherDamage) then {\r\n            _cache_params = _unit getVariable QGVAR(cachedHandleDamageParams);\r\n            _cache_hitpoints = _unit getVariable QGVAR(cachedHitPoints);\r\n\r\n            private [\"_hitPoint\", \"_restore\"];\r\n            // Restore the damage before the previous damage was processed\r\n            _hitPoint = _cache_hitpoints select _index;\r\n            _restore = ((_unit getHitIndex _hitPoint) - _otherDamage) max 0;\r\n            _unit setHitIndex [_hitPoint, _restore];\r\n\r\n            _cache_hitpoints set [_index, _hitPointIndex];\r\n            _cache_damages set [_index, _newDamage];\r\n            _cache_params set[_index, _this];\r\n\r\n            _unit setVariable [QGVAR(cachedProjectiles), _cache_projectiles];\r\n            _unit setVariable [QGVAR(cachedHitPoints), _cache_hitpoints];\r\n            _unit setVariable [QGVAR(cachedDamages), _cache_damages];\r\n            _unit setVariable [QGVAR(cachedHandleDamageParams), _cache_params];\r\n        };\r\n    };\r\n\r\n    _cache_hitpoints = _unit getVariable QGVAR(cachedHitPoints);\r\n    _cache_damages = _unit getVariable QGVAR(cachedDamages);\r\n    _cache_params = _unit getVariable QGVAR(cachedHandleDamageParams);\r\n\r\n    // This is an unhandled projectile\r\n    _cache_projectiles pushBack _projectile;\r\n    _cache_hitpoints pushBack _hitPointIndex;\r\n    _cache_damages pushBack _newDamage;\r\n    _cache_params pushBack _this;\r\n\r\n    // Store the new cached values\r\n    _unit setVariable [QGVAR(cachedProjectiles), _cache_projectiles];\r\n    _unit setVariable [QGVAR(cachedHitPoints), _cache_hitpoints];\r\n    _unit setVariable [QGVAR(cachedDamages), _cache_damages];\r\n    _unit setVariable [QGVAR(cachedHandleDamageParams), _cache_params];\r\n};\r\n\r\nTRACE_8(\"ACE_DEBUG: HandleDamage_Caching\",_unit, _newDamage, _cache_params, _cache_damages, _unit getVariable QGVAR(cachedProjectiles), _unit getVariable QGVAR(cachedHitPoints), _unit getVariable QGVAR(cachedDamages), _unit getVariable QGVAR(cachedHandleDamageParams));\r\n\r\n_newDamage\r\n"},{"name":"ace_medical_fnc_handleDamage_fractures","file":"medical/functions/fnc_handleDamage_fractures.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handling of the fracture injuries upon the handleDamage eventhandler.\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter or source of the damage <OBJECT>\r\n * 4: Type of the damage done <STRING>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_bodyPartn\", \"_fractures\", \"_fractureType\"];\r\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfDamage\"];\r\n_bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\r\n\r\n_fractureType = 1;\r\nif (_amountOfDamage > 0.05) then {\r\n\r\n    // TODO specify fractures based off typeOfInjury details better.\r\n    switch (_typeOfDamage) do {\r\n        case \"Bullet\": {\r\n            _fractureType = round(random(2));\r\n        };\r\n        case \"Grenade\": {\r\n            _fractureType = round(random(2));\r\n            if (_fractureType < 1) then {\r\n                _fractureType = 1;\r\n            };\r\n        };\r\n        case \"Explosive\": {\r\n            _fractureType = round(random(2));\r\n            if (_fractureType < 1) then {\r\n                _fractureType = 1;\r\n            };\r\n        };\r\n        case \"Shell\": {\r\n            _fractureType = round(random(2));\r\n            if (_fractureType < 1) then {\r\n                _fractureType = 1;\r\n            };\r\n        };\r\n        case \"Unknown\": {\r\n            _fractureType = round(random(1));\r\n        };\r\n        case \"VehicleCrash\": {\r\n            _fractureType = round(random(0));\r\n        };\r\n        default {\r\n            _fractureType = round(random(1));\r\n        };\r\n    };\r\n\r\n    private [\"_fractures\", \"_fractureID\", \"_amountOf\"];\r\n    _fractures = _unit getVariable[QGVAR(fractures), []];\r\n    _fractureID = 1;\r\n    _amountOf = count _fractures;\r\n    if (_amountOf > 0) then {\r\n        _fractureID = (_fractures select (_amountOf - 1) select 0) + 1;\r\n    };\r\n    _fractures pushBack [_fractureID, _fractureType, _bodyPartn, 1 /* percentage treated */];\r\n    _unit setVariable [QGVAR(fractures), _fractures, true];\r\n};\r\n"},{"name":"ace_medical_fnc_handleDamage_internalInjuries","file":"medical/functions/fnc_handleDamage_internalInjuries.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handling of the internal injuries upon the handleDamage eventhandler.\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter or source of the damage <OBJECT>\r\n * 4: Type of the damage done <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_bodyPartn\";\r\nparams [\"_unit\", \"_selectionName\", \"_amountOfDamage\", \"_sourceOfDamage\", \"_typeOfDamage\"];\r\n_bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\r\n\r\n// TODO implement internal injuries\r\n"},{"name":"ace_medical_fnc_handleDamage_wounds","file":"medical/functions/fnc_handleDamage_wounds.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handling of the open wounds & injuries upon the handleDamage eventhandler.\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter or source of the damage <OBJECT>\r\n * 4: Type of the damage done <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_bodyPartn\", \"_injuryTypeInfo\", \"_allInjuriesForDamageType\", \"_allPossibleInjuries\", \"_highestPossibleDamage\", \"_highestPossibleSpot\", \"_minDamage\", \"_openWounds\", \"_woundID\", \"_toAddInjury\", \"_painToAdd\", \"_bloodLoss\", \"_bodyPartNToAdd\", \"_classType\", \"_damageLevels\", \"_foundIndex\", \"_i\", \"_injury\", \"_maxDamage\", \"_pain\", \"_painLevel\", \"_selections\", \"_toAddClassID\", \"_woundsCreated\"];\r\nparams [\"_unit\", \"_selectionName\", \"_damage\", \"_typeOfProjectile\", \"_typeOfDamage\"];\r\nTRACE_6(\"ACE_DEBUG: HandleDamage Called\",_unit, _selectionName, _damage, _shooter, _typeOfProjectile,_typeOfDamage);\r\n\r\n// Administration for open wounds and ids\r\n_openWounds = _unit getVariable[QGVAR(openWounds), []];\r\n_woundID = _unit getVariable[QGVAR(lastUniqueWoundID), 1];\r\n\r\n_extensionOutput = \"ace_medical\" callExtension format [\"HandleDamageWounds,%1,%2,%3,%4\", _selectionName, _damage, _typeOfDamage, _woundID];\r\n\r\n_painToAdd = 0;\r\n_woundsCreated = [];\r\n\r\ncall compile _extensionOutput;\r\n{\r\n    _foundIndex = -1;\r\n    _toAddClassID = _x select 1;\r\n    _bodyPartNToAdd = _x select 2;\r\n    {\r\n        // Check if we have an id of the given class on the given bodypart already\r\n        if (_x select 1 == _toAddClassID && {_x select 2 == _bodyPartNToAdd}) exitWith {\r\n            _foundIndex = _forEachIndex;\r\n        };\r\n    } forEach _openWounds;\r\n\r\n    if (_foundIndex < 0) then {\r\n        // Since it is a new injury, we will have to add it to the open wounds array to store it\r\n        _openWounds pushBack _x;\r\n    } else {\r\n        // We already have one of these, so we are just going to increase the number that we have of it with a new one.\r\n        _injury = _openWounds select _foundIndex;\r\n        _injury set [3, (_injury select 3) + 1];\r\n    };\r\n} forEach _woundsCreated;\r\n\r\n_unit setVariable [QGVAR(openWounds), _openWounds, true];\r\n\r\n// Only update if new wounds have been created\r\nif (count _woundsCreated > 0) then {\r\n    _unit setVariable [QGVAR(lastUniqueWoundID), _woundID, true];\r\n};\r\n\r\n_painLevel = _unit getVariable [QGVAR(pain), 0];\r\n_unit setVariable [QGVAR(pain), _painLevel + _painToAdd];\r\nTRACE_6(\"ACE_DEBUG: HandleDamage_WoundsOLD\",_unit, _painLevel, _painToAdd, _unit getVariable QGVAR(pain), _unit getVariable QGVAR(openWounds),_woundsCreated);\r\n"},{"name":"ace_medical_fnc_handleDamage_woundsOld","file":"medical/functions/fnc_handleDamage_woundsOld.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handling of the open wounds & injuries upon the handleDamage eventhandler.\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter or source of the damage <OBJECT>\r\n * 4: Type of the damage done <STRING>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_bodyPartn\", \"_injuryTypeInfo\", \"_allInjuriesForDamageType\", \"_allPossibleInjuries\", \"_highestPossibleDamage\", \"_highestPossibleSpot\", \"_minDamage\", \"_openWounds\", \"_woundID\", \"_toAddInjury\", \"_painToAdd\", \"_bloodLoss\", \"_bodyPartNToAdd\", \"_classType\", \"_damageLevels\", \"_foundIndex\", \"_i\", \"_injury\", \"_maxDamage\", \"_pain\", \"_painLevel\", \"_selections\", \"_toAddClassID\", \"_woundsCreated\"];\r\nparams [\"_unit\", \"_selectionName\", \"_damage\", \"_typeOfProjectile\", \"_typeOfDamage\"];\r\nTRACE_6(\"ACE_DEBUG: HandleDamage_WoundsOLD Called\",_unit, _selectionName, _damage, _shooter, _typeOfProjectile,_typeOfDamage);\r\n\r\n// Convert the selectionName to a number and ensure it is a valid selection.\r\n_bodyPartn = [_selectionName] call FUNC(selectionNameToNumber);\r\nif (_bodyPartn < 0) exitWith {};\r\n\r\n// Get the injury type information. Format: [typeDamage thresholds, selectionSpecific, woundTypes]\r\n_injuryTypeInfo = missionNamespace getVariable [format[QGVAR(woundInjuryType_%1), _typeOfDamage],[[], false, []]];\r\n\r\n// This are the available injuries for this damage type. Format [[classtype, selections, bloodloss, minimalDamage, pain], ..]\r\n_allInjuriesForDamageType = _injuryTypeInfo select 2;\r\n// It appears we are dealing with an unknown type of damage.\r\n\r\nif (count _allInjuriesForDamageType == 0) then {\r\n    // grabbing the configuration for unknown damage type\r\n    _injuryTypeInfo = missionNamespace getVariable [QGVAR(woundInjuryType_unknown),[[], false, []]];\r\n    _allInjuriesForDamageType = _injuryTypeInfo select 2;\r\n};\r\n\r\n// find the available injuries for this damage type and damage amount\r\n_highestPossibleSpot = -1;\r\n_highestPossibleDamage = -1;\r\n_allPossibleInjuries = [];\r\n{\r\n    _damageLevels = _x select 4;\r\n    _minDamage = _damageLevels select 0;\r\n    _maxDamage = _damageLevels select 1;\r\n\r\n    // Check if the damage is higher as the min damage for the specific injury\r\n    if (_damage >= _minDamage && {_damage <= _maxDamage || _maxDamage < 0}) then {\r\n        //_classType = _x select 0;\r\n        _selections = _x select 1;\r\n        //_bloodLoss = _x select 2;\r\n        //_pain = _x select 3;\r\n\r\n        // Check if the injury can be applied to the given selection name\r\n        if (\"All\" in _selections || _selectionName in _selections) then {\r\n\r\n            // Find the wound which has the highest minimal damage, so we can use this later on for adding the correct injuries\r\n            if (_minDamage > _highestPossibleDamage) then {\r\n                _highestPossibleSpot = _forEachIndex;\r\n                _highestPossibleDamage = _minDamage;\r\n            };\r\n\r\n            // Store the valid possible injury for the damage type, damage amount and selection\r\n            _allPossibleInjuries pushBack _x;\r\n        };\r\n    };\r\n} forEach _allInjuriesForDamageType;\r\n\r\n// No possible wounds available for this damage type or damage amount.\r\nif (_highestPossibleSpot < 0) exitWith {};\r\n\r\n// Administration for open wounds and ids\r\n_openWounds = _unit getVariable[QGVAR(openWounds), []];\r\n_woundID = _unit getVariable[QGVAR(lastUniqueWoundID), 1];\r\n\r\n_painToAdd = 0;\r\n_woundsCreated = [];\r\n{\r\n    if (_x select 0 <= _damage) exitWith {\r\n        for \"_i\" from 0 to ((_x select 1)-1) do {\r\n\r\n            // Find the injury we are going to add. Format [ classID, allowdSelections, bloodloss, painOfInjury, minimalDamage]\r\n            _toAddInjury =  if (random(1) >= 0.85) then {_allInjuriesForDamageType select _highestPossibleSpot} else {selectRandom _allPossibleInjuries};\r\n            _toAddClassID = _toAddInjury select 0;\r\n            _foundIndex = -1;\r\n\r\n            _bodyPartNToAdd = if (_injuryTypeInfo select 1) then {_bodyPartn} else {floor(random(6))};\r\n            // If the injury type is selection part specific, we will check if one of those injury types already exists and find the spot for it..\r\n            if ((_injuryTypeInfo select 1)) then {\r\n                {\r\n                    // Check if we have an id of the given class on the given bodypart already\r\n                    if (_x select 1 == _toAddClassID && {_x select 2 == _bodyPartNToAdd}) exitWith {\r\n                        _foundIndex = _forEachIndex;\r\n                    };\r\n                } forEach _openWounds;\r\n            };\r\n\r\n            _injury = [];\r\n            if (_foundIndex < 0) then {\r\n                // Create a new injury. Format [ID, classID, bodypart, percentage treated, bloodloss rate]\r\n                _injury = [_woundID, _toAddInjury select 0, _bodyPartNToAdd, 1, _toAddInjury select 2];\r\n\r\n                // Since it is a new injury, we will have to add it to the open wounds array to store it\r\n                _openWounds pushBack _injury;\r\n\r\n                // New injuries will also increase the wound ID\r\n                _woundID = _woundID + 1;\r\n            } else {\r\n                // We already have one of these, so we are just going to increase the number that we have of it with a new one.\r\n                _injury = _openWounds select _foundIndex;\r\n                _injury set [3, (_injury select 3) + 1];\r\n            };\r\n            // Store the injury so we can process it later correctly.\r\n            _woundsCreated pushBack _injury;\r\n\r\n            // Collect the pain that is caused by this injury\r\n            _painToAdd = _painToAdd + (_toAddInjury select 3);\r\n        };\r\n    };\r\n} forEach (_injuryTypeInfo select 0); // forEach damage thresholds\r\n\r\n_unit setVariable [QGVAR(openWounds), _openWounds, true];\r\n\r\n// Only update if new wounds have been created\r\nif (count _woundsCreated > 0) then {\r\n    _unit setVariable [QGVAR(lastUniqueWoundID), _woundID, true];\r\n};\r\n\r\n_painLevel = _unit getVariable [QGVAR(pain), 0];\r\n_unit setVariable [QGVAR(pain), _painLevel + _painToAdd];\r\nTRACE_6(\"ACE_DEBUG: HandleDamage_WoundsOLD\",_unit, _painLevel, _painToAdd, _unit getVariable QGVAR(pain), _unit getVariable QGVAR(openWounds),_woundsCreated);\r\n"},{"name":"ace_medical_fnc_handleDamage","file":"medical/functions/fnc_handleDamage.sqf","text":"    /*\r\n * Author: KoffeinFlummi, Glowbal, commy2\r\n * Main HandleDamage EH function.\r\n *\r\n * Arguments:\r\n * 0: Unit That Was Hit <OBJECT>\r\n * 1: Name Of Hit Selection <STRING>\r\n * 2: Amount Of Damage <NUMBER>\r\n * 3: Shooter <OBJECT>\r\n * 4: Projectile <OBJECT/STRING>\r\n * 5: HitPointIndex (-1 for structural) <NUMBER>\r\n *\r\n * Return Value:\r\n * Damage To Be Inflicted <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_selection\", \"_damage\", \"_shooter\", \"_projectile\", \"_hitPointIndex\"];\r\nTRACE_5(\"ACE_DEBUG: HandleDamage Called\",_unit, _selection, _damage, _shooter, _projectile);\r\n\r\n// bug, apparently can fire for remote units in special cases\r\nif !(local _unit) exitWith {\r\n    TRACE_2(\"ACE_DEBUG: HandleDamage on remote unit!\",_unit, isServer);\r\n    nil\r\n};\r\n\r\nprivate [\"_damageReturn\",  \"_typeOfDamage\", \"_minLethalDamage\", \"_newDamage\", \"_typeIndex\", \"_preventDeath\"];\r\n\r\n// bug, assumed fixed, @todo excessive testing, if nothing happens remove\r\nif (_projectile isEqualType objNull) then {\r\n    _projectile = typeOf _projectile;\r\n    _this set [4, _projectile];\r\n};\r\n\r\nTRACE_3(\"ACE_DEBUG: HandleDamage\",_selection,_damage,_unit);\r\n\r\n// If damage is in dummy hitpoints, \"hands\" and \"legs\", don't change anything\r\nif (_selection == \"hands\") exitWith {_unit getHit \"hands\"};\r\nif (_selection == \"legs\") exitWith {_unit getHit \"legs\"};\r\nif (_selection == \"arms\") exitWith {_unit getHit \"arms\"};\r\n\r\n// Deal with the new hitpoint and selection names introduced with Arma v1.50 and later.\r\n// This will convert new selection names into selection names that the medical system understands\r\n// TODO This should be cleaned up when we revisit the medical system at a later stage\r\n// and instead we should deal with the new hitpoints directly\r\n_selection = [_unit, _selection, _hitPointIndex] call FUNC(translateSelections);\r\n_this set [1, _selection]; // ensure that the parameters are set correctly\r\n\r\n// If the damage is being weird, we just tell it to fuck off. Ignore: \"hands\", \"legs\", \"arms\"\r\nif (_selection != \"\" && {!(_selection in GVAR(SELECTIONS))}) exitWith {0};\r\n\r\n// Exit if we disable damage temporarily\r\nif !(_unit getVariable [QGVAR(allowDamage), true]) exitWith {\r\n    TRACE_3(\"ACE_DEBUG: HandleDamage damage disabled.\",_selection,damage _unit,_unit);\r\n    if (_selection == \"\") then {\r\n        damage _unit\r\n    } else {\r\n        _unit getHit _selection\r\n    };\r\n};\r\n\r\n// Get return damage\r\n_damageReturn = _damage;\r\n\r\n_newDamage = _this call FUNC(handleDamage_caching);\r\n// handleDamage_caching may have modified the projectile string\r\n_typeOfDamage = [_projectile] call FUNC(getTypeOfDamage);\r\n\r\nTRACE_3(\"ACE_DEBUG: HandleDamage caching new damage\",_selection,_newDamage,_unit);\r\n\r\n_typeIndex = (GVAR(allAvailableDamageTypes) find _typeOfDamage);\r\n_minLethalDamage = if (_typeIndex >= 0) then {\r\n    GVAR(minLethalDamages) select _typeIndex\r\n} else {\r\n    0.01\r\n};\r\n\r\nif (!isNull _shooter) then {\r\n    _unit setvariable [QGVAR(lastDamageSource), _shooter, false];\r\n};\r\n\r\nprivate _vehicle = vehicle _unit;\r\nprivate _effectiveSelectionName = _selection;\r\nif ((_vehicle != _unit) && {!(_vehicle isKindOf \"StaticWeapon\")} && {_shooter in [objNull, driver _vehicle, _vehicle]} && {_projectile == \"\"} && {_selection == \"\"}) then {\r\n    if (GVAR(enableVehicleCrashes)) then {\r\n        _effectiveSelectionName = _this select 1; //pull random selection from HDC\r\n    };\r\n};\r\n\r\nif ((_minLethalDamage <= _newDamage) && {[_unit, [_effectiveSelectionName] call FUNC(selectionNameToNumber), _newDamage] call FUNC(determineIfFatal)}) then {\r\n    if ((_unit getVariable [QGVAR(preventInstaDeath), GVAR(preventInstaDeath)])) exitwith {\r\n        _damageReturn = 0.9;\r\n    };\r\n    if ([_unit, false, true] call FUNC(setDead)) then {\r\n        _damageReturn = 1;\r\n    } else {\r\n        _damageReturn = _damageReturn min 0.89;\r\n    };\r\n} else {\r\n    _damageReturn = _damageReturn min 0.89;\r\n};\r\n\r\n// Start the loop that tracks the unit vitals\r\n[_unit] call FUNC(addVitalLoop);\r\n\r\nif (_unit getVariable [QGVAR(preventInstaDeath), GVAR(preventInstaDeath)]) exitWith {\r\n    private _delayedUnconsicous = false;\r\n    if (_vehicle != _unit and {damage _vehicle >= 1}) then {\r\n        [_unit] call EFUNC(common,unloadPerson);\r\n        _delayedUnconsicous = true;\r\n    };\r\n\r\n    if (_damageReturn >= 0.9 && {_selection in [\"\", \"head\", \"body\"]}) exitWith {\r\n        if (_unit getVariable [\"ACE_isUnconscious\", false]) exitwith {\r\n            [_unit, false, true] call FUNC(setDead);\r\n            0.89;\r\n        };\r\n        if (_delayedUnconsicous) then {\r\n            [{\r\n                [_this select 0, true] call FUNC(setUnconscious);\r\n            }, [_unit], 0.7] call CBA_fnc_waitAndExecute;\r\n        } else {\r\n            [{\r\n                [_this select 0, true] call FUNC(setUnconscious);\r\n            }, [_unit]] call CBA_fnc_execNextFrame;\r\n        };\r\n        0.89;\r\n    };\r\n    _damageReturn min 0.89;\r\n};\r\n\r\nif (((_unit getVariable [QGVAR(enableRevive), GVAR(enableRevive)]) > 0) && {_damageReturn >= 0.9} && {_selection in [\"\", \"head\", \"body\"]}) exitWith {\r\n    if (vehicle _unit != _unit and {damage (vehicle _unit) >= 1}) then {\r\n        [_unit] call EFUNC(common,unloadPerson);\r\n    };\r\n    [_unit, false, true] call FUNC(setDead);\r\n    0.89;\r\n};\r\n\r\nTRACE_3(\"ACE_DEBUG: HandleDamage damage return\",_selection,_damageReturn,_unit);\r\n\r\n_damageReturn\r\n"},{"name":"ace_medical_fnc_handleKilled","file":"medical/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: Glowbal\r\n * Called when a unit is killed\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_openWounds\";\r\nparams [\"_unit\"];\r\nif (!local _unit) exitWith {};\r\n\r\n_unit setVariable [QGVAR(pain), 0];\r\nif (GVAR(level) >= 2) then {\r\n    _unit setVariable [QGVAR(heartRate), 0];\r\n    _unit setVariable [QGVAR(bloodPressure), [0, 0]];\r\n    _unit setVariable [QGVAR(airwayStatus), 0];\r\n};\r\n"},{"name":"ace_medical_fnc_handleLocal","file":"medical/functions/fnc_handleLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Called when a unit switched locality\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Is local <BOOL>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_local\"];\r\nif (_local) then {\r\n    // If the unit had a loop tracking its vitals, restart it locally\r\n    if (_unit getVariable[QGVAR(addedToUnitLoop),false]) then {\r\n        [_unit, true] call FUNC(addVitalLoop);\r\n    };\r\n\r\n    if ((_unit getVariable [\"ACE_isUnconscious\",false]) && {count (_unit getVariable [QGVAR(unconsciousArguments), []]) >= 6}) then {\r\n        private \"_arguments\";\r\n        _arguments = (_unit getVariable [QGVAR(unconsciousArguments), []]);\r\n        _arguments set [2, CBA_missionTime];\r\n\r\n        [DFUNC(unconsciousPFH), 0.1, _arguments ] call CBA_fnc_addPerFrameHandler;\r\n\r\n        _unit setVariable [QGVAR(unconsciousArguments), nil, true];\r\n    };\r\n};\r\n"},{"name":"ace_medical_fnc_handleUnitVitals","file":"medical/functions/fnc_handleUnitVitals.sqf","text":"/*\r\n * Author: Glowbal\r\n * Updates the vitals. Is expected to be called every second.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_interval\"];\r\nTRACE_3(\"ACE_DEBUG\",_unit,_interval,_unit);\r\nif (_interval == 0) exitWith {};\r\n\r\nprivate _lastTimeValuesSynced = _unit getVariable [QGVAR(lastMomentValuesSynced), 0];\r\nprivate _syncValues = (CBA_missionTime - _lastTimeValuesSynced >= (10 + floor(random(10))) && GVAR(keepLocalSettingsSynced));\r\nif (_syncValues) then {\r\n    _unit setVariable [QGVAR(lastMomentValuesSynced), CBA_missionTime];\r\n};\r\n\r\nprivate _bloodVolume = (_unit getVariable [QGVAR(bloodVolume), 100]) + ([_unit] call FUNC(getBloodVolumeChange));\r\n_bloodVolume = _bloodVolume max 0;\r\n\r\n_unit setVariable  [QGVAR(bloodVolume), _bloodVolume, _syncValues];\r\n\r\nTRACE_3(\"ACE_DEBUG\",_bloodVolume,_syncValues,_unit);\r\n// Set variables for synchronizing information across the net\r\nif (_bloodVolume < 100) then {\r\n    if ((_bloodVolume < 90 && (GVAR(level) == 2)) || _bloodVolume <= 45) then {\r\n        TRACE_4(\"ACE_DEBUG_ADVANCED\",_bloodVolume,_unit getVariable QGVAR(hasLostBlood),_syncValues,_unit);\r\n        if (_unit getVariable [QGVAR(hasLostBlood), 0] != 2) then {\r\n            _unit setVariable [QGVAR(hasLostBlood), 2, true];\r\n        };\r\n    } else {\r\n        TRACE_4(\"ACE_DEBUG\", _bloodVolume,_unit getVariable QGVAR(hasLostBlood),_syncValues,_unit);\r\n        if (_unit getVariable [QGVAR(hasLostBlood), 0] != 1) then {\r\n            _unit setVariable [QGVAR(hasLostBlood), 1, true];\r\n        };\r\n    }\r\n} else {\r\n    TRACE_4(\"ACE_DEBUG\",_bloodVolume,_unit getVariable QGVAR(hasLostBlood),_syncValues,_unit);\r\n    if (_unit getVariable [QGVAR(hasLostBlood), 0] != 0) then {\r\n        _unit setVariable [QGVAR(hasLostBlood), 0, true];\r\n    };\r\n};\r\n\r\nTRACE_3(\"ACE_DEBUG\",[_unit] call FUNC(getBloodLoss),_unit getVariable QGVAR(isBleeding),_unit);\r\nif (([_unit] call FUNC(getBloodLoss)) > 0) then {\r\n    if !(_unit getVariable [QGVAR(isBleeding), false]) then {\r\n        _unit setVariable [QGVAR(isBleeding), true, true];\r\n    };\r\n} else {\r\n    if (_unit getVariable [QGVAR(isBleeding), false]) then {\r\n        _unit setVariable [QGVAR(isBleeding), false, true];\r\n    };\r\n};\r\n\r\nprivate _painStatus = _unit getVariable [QGVAR(pain), 0];\r\nTRACE_4(\"ACE_DEBUG\",_painStatus,_unit getVariable QGVAR(hasPain),_unit getVariable QGVAR(painSuppress),_unit);\r\nif (_painStatus > (_unit getVariable [QGVAR(painSuppress), 0])) then {\r\n    if !(_unit getVariable [QGVAR(hasPain), false]) then {\r\n        _unit setVariable [QGVAR(hasPain), true, true];\r\n    };\r\n} else {\r\n    if (_unit getVariable [QGVAR(hasPain), false]) then {\r\n        _unit setVariable [QGVAR(hasPain), false, true];\r\n    };\r\n};\r\n\r\nif (GVAR(level) == 1) then {\r\n    TRACE_5(\"ACE_DEBUG_BASIC_VITALS\",_painStatus,_unit getVariable QGVAR(hasPain),_unit getVariable QGVAR(morphine),_syncValues,_unit);\r\n    // reduce pain\r\n    if (_painStatus > 0) then {\r\n        _unit setVariable [QGVAR(pain), (_painStatus - 0.001 * _interval) max 0, _syncValues];\r\n    };\r\n\r\n    // reduce painkillers\r\n    if (_unit getVariable [QGVAR(morphine), 0] > 0) then {\r\n        _unit setVariable [QGVAR(morphine), ((_unit getVariable [QGVAR(morphine), 0]) - 0.0015 * _interval) max 0, _syncValues];\r\n    };\r\n\r\n    // bleeding\r\n    if (_bloodVolume <= 35 and !(_unit getVariable [\"ACE_isUnconscious\", false])) then {\r\n        [_unit, true] call FUNC(setUnconscious);\r\n    };\r\n    if (_bloodVolume == 0) then {\r\n        [_unit] call FUNC(setDead);\r\n    };\r\n};\r\n\r\n// handle advanced medical, with vitals\r\nif (GVAR(level) >= 2) then {\r\n    TRACE_6(\"ACE_DEBUG_ADVANCED_VITALS\",_painStatus,_bloodVolume, _unit getVariable QGVAR(hasPain),_unit getVariable QGVAR(morphine),_syncValues,_unit);\r\n    if (_bloodVolume < 30) exitWith {\r\n        [_unit] call FUNC(setDead);\r\n    };\r\n\r\n    if ([_unit] call EFUNC(common,isAwake)) then {\r\n        if (_bloodVolume < 60) then {\r\n            if (random(1) > 0.9) then {\r\n                [_unit, true, 15 + random(20)] call FUNC(setUnconscious);\r\n            };\r\n        };\r\n    };\r\n\r\n    // Handle pain due tourniquets, that have been applied more than 120 s ago\r\n    private _oldTourniquets = (_unit getVariable [QGVAR(tourniquets), []]) select {_x > 0 && {CBA_missionTime - _x > 120}};\r\n    // Increase pain at a rate of 0.001 units/s per old tourniquet\r\n    _painStatus = _painStatus + (count _oldTourniquets) * 0.001 * _interval;\r\n\r\n    // Set the vitals\r\n    private _heartRate = (_unit getVariable [QGVAR(heartRate), 80]) + (([_unit] call FUNC(getHeartRateChange)) * _interval);\r\n    _unit setVariable  [QGVAR(heartRate), _heartRate max 0, _syncValues];\r\n\r\n    private _bloodPressure = [_unit] call FUNC(getBloodPressure);\r\n    _unit setVariable  [QGVAR(bloodPressure), _bloodPressure, _syncValues];\r\n\r\n    _painReduce = [0.001, 0.002] select (_painStatus > 5);\r\n\r\n    // @todo: replace this and the rest of the setVariable with EFUNC(common,setApproximateVariablePublic)\r\n    _unit setVariable [QGVAR(pain), (_painStatus - _painReduce * _interval) max 0, _syncValues];\r\n\r\n    TRACE_8(\"ACE_DEBUG_ADVANCED_VITALS\",_painStatus,_painReduce,_heartRate,_bloodVolume,_bloodPressure,_interval,_syncValues,_unit);\r\n    // TODO Disabled until implemented fully\r\n    // Handle airway\r\n    /*if (GVAR(setting_allowAirwayInjuries)) then {\r\n        private _airwayStatus = _unit getVariable [QGVAR(airwayStatus), 100];\r\n        if (((_unit getVariable [QGVAR(airwayOccluded), false]) || (_unit getVariable [QGVAR(airwayCollapsed), false])) && !((_unit getVariable [QGVAR(airwaySecured), false]))) then {\r\n            if (_airwayStatus >= 0.5) then {\r\n                _unit setVariable [QGVAR(airwayStatus), _airwayStatus - 0.5 * _interval, _syncValues];\r\n            };\r\n        } else {\r\n            if !((_unit getVariable [QGVAR(airwayOccluded), false]) || (_unit getVariable [QGVAR(airwayCollapsed), false])) then {\r\n                if (_airwayStatus < 100) then {\r\n                    _unit setVariable [QGVAR(airwayStatus), (_airwayStatus + 1.5 * _interval) min 100, _syncValues];\r\n                };\r\n            };\r\n        };\r\n        if (_airwayStatus < 80) then {\r\n            [_unit] call FUNC(setUnconscious);\r\n            if (_airwayStatus <= 0) then {\r\n                [_unit, true] call FUNC(setDead);\r\n            };\r\n        };\r\n    };*/\r\n\r\n    // Check vitals for medical status\r\n    // TODO check for in revive state instead of variable\r\n    _bloodPressure params [\"_bloodPressureL\", \"_bloodPressureH\"];\r\n\r\n    if (!(_unit getVariable [QGVAR(inCardiacArrest),false])) then {\r\n        if (_heartRate < 10 || _bloodPressureH < 30 || _bloodVolume < 20) then {\r\n            [_unit, true, 10+ random(20)] call FUNC(setUnconscious); // safety check to ensure unconsciousness for units if they are not dead already.\r\n        };\r\n\r\n        if ((_bloodPressureH > 260)\r\n            || {_bloodPressureL < 40 && ({_heartRate > 190})}\r\n            || {(_bloodPressureH > 145 && {_heartRate > 150})}) then {\r\n\r\n            if (random(1) > 0.7) then {\r\n                [_unit] call FUNC(setCardiacArrest);\r\n            };\r\n        };\r\n        if (_heartRate > 200 || (_heartRate < 20)) then {\r\n            [_unit] call FUNC(setCardiacArrest);\r\n        };\r\n    };\r\n\r\n    // syncing any remaining values\r\n    if (_syncValues) then {\r\n        TRACE_3(\"ACE_DEBUG_IVBAGS_SYNC\",GVAR(IVBags),_syncValues,_unit);\r\n        {\r\n            private \"_value\";\r\n            _value = _unit getVariable _x;\r\n            if !(isNil \"_value\") then {\r\n                _unit setVariable [_x,(_unit getVariable [_x, 0]), true];\r\n            };\r\n        } forEach GVAR(IVBags);\r\n    };\r\n};\r\n"},{"name":"ace_medical_fnc_hasItem","file":"medical/functions/fnc_hasItem.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if the item is present between the patient and the medic\r\n *\r\n * Arguments:\r\n * 0: Medic <OBJECT>\r\n * 1: Patient <OBJECT>\r\n * 2: Item <STRING>\r\n *\r\n * ReturnValue:\r\n * <NIL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_medic\", \"_patient\", \"_item\"];\r\n\r\nif (isNil QGVAR(setting_allowSharedEquipment)) then {\r\n    GVAR(setting_allowSharedEquipment) = true;\r\n};\r\nif (GVAR(setting_allowSharedEquipment) && {[_patient, _item] call EFUNC(common,hasItem)}) exitWith {\r\n    true\r\n};\r\n\r\nif ([_medic, _item] call EFUNC(common,hasItem)) exitWith {\r\n    true\r\n};\r\n\r\nprivate _return = false;\r\nif ((vehicle _medic != _medic) && {[vehicle _medic] call FUNC(isMedicalVehicle)}) then {\r\n    private _crew = crew vehicle _medic;\r\n    {\r\n        if ([_medic, _x] call FUNC(canAccessMedicalEquipment) && {([_x, _item] call EFUNC(common,hasItem))}) exitWith {\r\n            _return = true;\r\n        };\r\n    } forEach _crew;\r\n};\r\n\r\n_return\r\n"},{"name":"ace_medical_fnc_hasItems","file":"medical/functions/fnc_hasItems.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if all items are present between the patient and the medic.\r\n *\r\n * Arguments:\r\n * 0: Medic <OBJECT>\r\n * 1: Patient <OBJECT>\r\n * 2: Items <ARRAY<STRING>>\r\n *\r\n * ReturnValue:\r\n * Has the items <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_medic\", \"_patient\", \"_items\"];\r\n\r\nprivate _return = true;\r\n{\r\n    //\r\n    if (_x isEqualType [] && {({[_medic, _patient, _x] call FUNC(hasItem)}count _x == 0)}) exitwith {\r\n        _return = false;\r\n    };\r\n    if (_x isEqualType \"\" && {!([_medic, _patient, _x] call FUNC(hasItem))}) exitwith {\r\n        _return = false;\r\n    };\r\n}foreach _items;\r\n\r\n_return\r\n"},{"name":"ace_medical_fnc_hasMedicalEnabled","file":"medical/functions/fnc_hasMedicalEnabled.sqf","text":"\r\n/*\r\n * Author: Glowbal\r\n * Check if unit has CMS enabled\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * enabled <BOOL>\r\n *\r\n * Example:\r\n * [Unit] call ace_medical_fnc_hasMedicalEnabled\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _medicalEnabled = _unit getVariable QGVAR(enableMedical);\r\nif (isNil \"_medicalEnabled\") exitWith {\r\n    (((GVAR(enableFor) == 0 && (isPlayer _unit || (_unit getVariable [QEGVAR(common,isDeadPlayer), false])))) || (GVAR(enableFor) == 1) || GVAR(level) == 1)\r\n};\r\n\r\n_medicalEnabled\r\n"},{"name":"ace_medical_fnc_hasTourniquetAppliedTo","file":"medical/functions/fnc_hasTourniquetAppliedTo.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if unit has a tourniquet applied to the specified bodypart\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: SelectionName <STRING>\r\n *\r\n * ReturnValue:\r\n * Has tourniquet applied <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_selectionName\"];\r\n\r\n(((_target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]]) select ([_selectionName] call FUNC(selectionNameToNumber))) > 0);\r\n"},{"name":"ace_medical_fnc_init","file":"medical/functions/fnc_init.sqf","text":"/*\r\n * Author: KoffeinFlummi, commy2\r\n * Initializes unit variables.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// basic\r\n_unit setVariable [QGVAR(pain), 0, true];\r\n_unit setVariable [QGVAR(morphine), 0, true];\r\n_unit setVariable [QGVAR(bloodVolume), 100, true];\r\n_unit setVariable [\"ACE_isUnconscious\", false, true];\r\n\r\n// advanced\r\n// tourniquets\r\n_unit setVariable [QGVAR(tourniquets), [0,0,0,0,0,0], true];\r\n\r\n//Delayed Medications (from tourniquets)\r\n_unit setVariable [QGVAR(occludedMedications), nil, true];\r\n\r\n// wounds and injuries\r\n_unit setVariable [QGVAR(openWounds), [], true];\r\n_unit setVariable [QGVAR(bandagedWounds), [], true];\r\n_unit setVariable [QGVAR(internalWounds), [], true];\r\n_unit setVariable [QGVAR(lastUniqueWoundID), 1, true];\r\n\r\n// vitals\r\n_unit setVariable [QGVAR(heartRate), 80];\r\n_unit setVariable [QGVAR(heartRateAdjustments), []];\r\n_unit setVariable [QGVAR(bloodPressure), [80, 120]];\r\n_unit setVariable [QGVAR(peripheralResistance), 100];\r\n\r\n// fractures\r\n_unit setVariable [QGVAR(fractures), [], true];\r\n\r\n// triage card and logs\r\n_unit setVariable [QGVAR(triageLevel), 0, true];\r\n_unit setVariable [QGVAR(triageCard), [], true];\r\n\r\n// IVs\r\n_unit setVariable [QGVAR(salineIVVolume), 0, true];\r\n_unit setVariable [QGVAR(plasmaIVVolume), 0, true];\r\n_unit setVariable [QGVAR(bloodIVVolume), 0, true];\r\n\r\n// damage storage\r\n_unit setVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0], true];\r\n\r\n// airway\r\n_unit setVariable [QGVAR(airwayStatus), 100];\r\n_unit setVariable [QGVAR(airwayOccluded), false];\r\n_unit setVariable [QGVAR(airwayCollapsed), false];\r\n\r\n// generic medical admin\r\n_unit setVariable [QGVAR(addedToUnitLoop), false, true];\r\n_unit setVariable [QGVAR(inCardiacArrest), false, true];\r\n_unit setVariable [QGVAR(hasLostBlood), 0, true];\r\n_unit setVariable [QGVAR(isBleeding), false, true];\r\n_unit setVariable [QGVAR(hasPain), false, true];\r\n_unit setVariable [QGVAR(amountOfReviveLives), GVAR(amountOfReviveLives), true];\r\n_unit setVariable [QGVAR(painSuppress), 0, true];\r\n\r\nprivate [\"_allUsedMedication\", \"_logs\"];\r\n\r\n// medication\r\n_allUsedMedication = _unit getVariable [QGVAR(allUsedMedication), []];\r\n{\r\n   _unit setVariable [_x select 0, nil];\r\n} forEach _allUsedMedication;\r\n_unit setVariable [QGVAR(allUsedMedication), [], true];\r\n\r\n_logs = _unit getVariable [QGVAR(allLogs), []];\r\n{\r\n    _unit setVariable [_x, nil];\r\n} forEach _logs;\r\n_unit setVariable [QGVAR(allLogs), [], true];\r\n\r\n// items\r\n[{\r\n    _this call FUNC(itemCheck);\r\n}, [_unit], 0.5, 0.1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_medical_fnc_isBeingCarried","file":"medical/functions/fnc_isBeingCarried.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Returns if a target is being carried. (from ace_dragging)\r\n *\r\n * Arguments:\r\n * 0: Target Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Is being carried <BOOL>\r\n *\r\n * Example:\r\n * [bob] call ace_medical_fnc_isBeingCarried\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\nprivate \"_owner\";\r\n\r\n_owner = _target getVariable [QEGVAR(common,owner), objNull];\r\n\r\nif (isNull _owner) exitWith {false};\r\n\r\n(_owner getVariable [QEGVAR(dragging,carriedObject), objNull]) == _target\r\n"},{"name":"ace_medical_fnc_isBeingDragged","file":"medical/functions/fnc_isBeingDragged.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Returns if a target is being dragged. (from ace_dragging)\r\n *\r\n * Arguments:\r\n * 0: Target Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Is being dragged <BOOL>\r\n *\r\n * Example:\r\n * [bob] call ace_medical_fnc_isBeingDragged\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\n\r\nprivate \"_owner\";\r\n\r\n_owner = _target getVariable [QEGVAR(common,owner), objNull];\r\n\r\nif (isNull _owner) exitWith {false};\r\n\r\n(_owner getVariable [QEGVAR(dragging,draggedObject), objNull]) == _target\r\n"},{"name":"ace_medical_fnc_isInMedicalFacility","file":"medical/functions/fnc_isInMedicalFacility.sqf","text":"/*\r\n * Author: Glowbal\r\n * Checks if a unit is in a designated medical facility\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Is in medical facility <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_medical_fnc_isInMedicalFacility\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n//Cache the results as this function could be called rapidly\r\n(_unit getVariable [QGVAR(cacheInFacility), [-9, false]]) params [\"_expireTime\", \"_lastResult\"];\r\nif (CBA_missionTime < _expireTime) exitWith {_lastResult};\r\n\r\nprivate _eyePos = eyePos _unit;\r\nprivate _isInBuilding = false;\r\n\r\nprivate _medicalFacility =\r\n    [\r\n        \"TK_GUE_WarfareBFieldhHospital_Base_EP1\",\r\n        \"TK_GUE_WarfareBFieldhHospital_EP1\",\r\n        \"TK_WarfareBFieldhHospital_Base_EP1\",\r\n        \"TK_WarfareBFieldhHospital_EP1\",\r\n        \"US_WarfareBFieldhHospital_Base_EP1\",\r\n        \"US_WarfareBFieldhHospital_EP1\",\r\n        \"MASH_EP1\",\r\n        \"MASH\",\r\n        \"Land_A_Hospital\",\r\n        \"CDF_WarfareBFieldhHospital\",\r\n        \"GUE_WarfareBFieldhHospital\",\r\n        \"INS_WarfareBFieldhHospital\",\r\n        \"RU_WarfareBFieldhHospital\",\r\n        \"USMC_WarfareBFieldhHospital\"\r\n    ];\r\n\r\nprivate _objects = (lineIntersectsWith [_unit modelToWorldVisual [0, 0, (_eyePos select 2)], _unit modelToWorldVisual [0, 0, (_eyePos select 2) +10], _unit]);\r\n{\r\n    if (((typeOf _x) in _medicalFacility) || (_x getVariable [QGVAR(isMedicalFacility),false])) exitWith {\r\n        _isInBuilding = true;\r\n    };\r\n} forEach _objects;\r\nif (!_isInBuilding) then {\r\n    _objects = _unit nearObjects 7.5;\r\n    {\r\n        if (((typeOf _x) in _medicalFacility) || (_x getVariable [QGVAR(isMedicalFacility),false])) exitWith {\r\n            _isInBuilding = true;\r\n        };\r\n    } forEach _objects;\r\n};\r\n\r\n//Save the results (with a 1 second expiry)\r\n_unit setVariable [QGVAR(cacheInFacility), [CBA_missionTime + 1, _isInBuilding]];\r\n\r\n_isInBuilding;\r\n"},{"name":"ace_medical_fnc_isInMedicalVehicle","file":"medical/functions/fnc_isInMedicalVehicle.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Checks if a unit is in a medical vehicle.\r\n *\r\n * Arguments:\r\n * 0: unit to be checked <OBJECT>\r\n *\r\n * Return Value:\r\n * Is unit in medical vehicle? <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_medical_fnc_isInMedicalVehicle\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nprivate _vehicle = vehicle _unit;\r\n\r\nif (_unit == _vehicle) exitWith {false};\r\nif (_unit in [driver _vehicle, gunner _vehicle, commander _vehicle]) exitWith {false};\r\n\r\n(_vehicle getVariable [QGVAR(medicClass), getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"attendant\")]) > 0\r\n"},{"name":"ace_medical_fnc_isInStableCondition","file":"medical/functions/fnc_isInStableCondition.sqf","text":"/*\r\n* Author: Glowbal\r\n* Check if a unit is in a stable condition\r\n*\r\n* Arguments:\r\n* 0: The patient <OBJECT>\r\n*\r\n* Return Value:\r\n* Is in stable condition <BOOL>\r\n*\r\n* Public: No\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_openWounds\", \"_openWounds\"];\r\nparams [\"_unit\"];\r\n\r\nif (GVAR(level) <= 1) exitWith {\r\n    ([_unit] call FUNC(getBloodloss)) == 0;\r\n};\r\n\r\n_totalBloodLoss = 0;\r\n_openWounds = _unit getVariable [QGVAR(openWounds), []];\r\n{\r\n    // total bleeding ratio * percentage of injury left\r\n    _totalBloodLoss = _totalBloodLoss + ((_x select 4) * (_x select 3));\r\n} forEach _openWounds;\r\n\r\n(_totalBloodLoss == 0);\r\n"},{"name":"ace_medical_fnc_isMedic","file":"medical/functions/fnc_isMedic.sqf","text":"/*\r\n * Author: Glowbal, KoffeinFlummi\r\n * Check if a unit is any medical class\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Class <NUMBER> (default: 1)\r\n *\r\n * ReturnValue:\r\n * Is in of medic class <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_medical_fnc_isMedic\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_medicN\", 1]];\r\n\r\nprivate _class = _unit getVariable [QGVAR(medicClass), getNumber (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"attendant\")];\r\n\r\nif (_class >= _medicN min GVAR(medicSetting)) exitWith {true};\r\nif (!GVAR(increaseTrainingInLocations)) exitWith {false};\r\n\r\nif (([_unit] call FUNC(isInMedicalVehicle)) || {[_unit] call FUNC(isInMedicalFacility)}) then {\r\n    _class = _class + 1; //boost by one: untrained becomes medic, medic becomes doctor\r\n};\r\n\r\n_class >= _medicN min GVAR(medicSetting)\r\n"},{"name":"ace_medical_fnc_isMedicalVehicle","file":"medical/functions/fnc_isMedicalVehicle.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if vehicle is a medical vehicle\r\n *\r\n * Arguments:\r\n * 0: The Vehicle <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Is in of medic class <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\n(_vehicle getVariable [QGVAR(medicClass), getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"attendant\")]) > 0\r\n"},{"name":"ace_medical_fnc_itemCheck","file":"medical/functions/fnc_itemCheck.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Replaces vanilla items with ACE ones.\r\n *\r\n * Arguments:\r\n * 0: The unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nwhile {({_x == \"FirstAidKit\"} count items _unit) > 0} do {\r\n    _unit removeItem \"FirstAidKit\";\r\n    if (GVAR(level) >= 2) then {\r\n        _unit addItem \"ACE_fieldDressing\";\r\n        _unit addItem \"ACE_packingBandage\";\r\n        _unit addItem \"ACE_morphine\";\r\n        _unit addItem \"ACE_tourniquet\";\r\n    } else {\r\n        _unit addItem \"ACE_fieldDressing\";\r\n        _unit addItem \"ACE_fieldDressing\";\r\n        _unit addItem \"ACE_morphine\";\r\n    };\r\n};\r\n\r\nwhile {({_x == \"Medikit\"} count items _unit) > 0} do {\r\n    _unit removeItem \"Medikit\";\r\n    if (GVAR(level) >= 2) then {\r\n        _unit addItemToBackpack \"ACE_fieldDressing\";\r\n        _unit addItemToBackpack \"ACE_packingBandage\";\r\n        _unit addItemToBackpack \"ACE_packingBandage\";\r\n        _unit addItemToBackpack \"ACE_epinephrine\";\r\n        _unit addItemToBackpack \"ACE_morphine\";\r\n        _unit addItemToBackpack \"ACE_salineIV_250\";\r\n        _unit addItemToBackpack \"ACE_tourniquet\";\r\n    } else {\r\n        _unit addItemToBackpack \"ACE_epinephrine\";\r\n        _unit addItemToBackpack \"ACE_epinephrine\";\r\n        _unit addItemToBackpack \"ACE_epinephrine\";\r\n        _unit addItemToBackpack \"ACE_epinephrine\";\r\n        _unit addItemToBackpack \"ACE_bloodIV\";\r\n        _unit addItemToBackpack \"ACE_bloodIV\";\r\n    };\r\n};\r\n"},{"name":"ace_medical_fnc_litterCleanupLoop","file":"medical/functions/fnc_litterCleanupLoop.sqf","text":"/*\r\n * Author: Glowbal, esteldunedain\r\n * Loop that cleans up litter\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n{\r\n    _x params [\"_time\", \"_objects\"];\r\n    if (CBA_missionTime - _time >= GVAR(litterCleanUpDelay)) then {\r\n        {\r\n            deleteVehicle _x;\r\n        } forEach _objects;\r\n        GVAR(allCreatedLitter) set[_forEachIndex, objNull];\r\n    };\r\n} forEach GVAR(allCreatedLitter);\r\nGVAR(allCreatedLitter) = GVAR(allCreatedLitter) - [objNull];\r\n\r\n// If no more litter remaining, exit the loop\r\nif ( (count GVAR(allCreatedLitter)) == 0) exitWith {\r\n    GVAR(litterPFHRunning) = false;\r\n};\r\n\r\n// Schedule the loop to be executed again 30 sec later\r\n[DFUNC(litterCleanupLoop), [], 30] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_medical_fnc_medicationEffectLoop","file":"medical/functions/fnc_medicationEffectLoop.sqf","text":"/*\r\n * Author: Glowbal, esteldunedain\r\n * Medication effect loop for an injection.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Name of the Variable that is affected <STRING>\r\n * 2: Proportion of the effect applied <NUMBER>\r\n * 3: Rate at which the effect is applied <NUMBER>\r\n * 4: Viscosity adjustment rate <NUMBER>\r\n * 5: Pain reduction rate <NUMBER>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_variableName\", \"_amountDecreased\",\"_decreaseRate\", \"_viscosityAdjustmentRate\", \"_painReduceRate\"];\r\n\r\n// If the unit died the loop is finished\r\nif (!alive _unit) exitWith {};\r\n\r\n// If locality changed finish the local loop\r\nif (!local _unit) exitWith {};\r\n\r\n// Apply medicinal effect\r\nprivate _usedMeds = (_unit getVariable [_variableName, 0]) - _decreaseRate;\r\n_unit setVariable [_variableName, _usedMeds];\r\n\r\n// Restore the viscosity while the medication is leaving the system\r\n_unit setVariable [QGVAR(peripheralResistance), ((_unit getVariable [QGVAR(peripheralResistance), 100]) - _viscosityAdjustmentRate) max 0];\r\n_unit setVariable [QGVAR(painSuppress), ((_unit getVariable [QGVAR(painSuppress), 0]) - _painReduceRate) max 0];\r\n\r\n// Exit if the medication has finished it's effect\r\n_amountDecreased = _amountDecreased + _decreaseRate;\r\nif (_amountDecreased >= 1 || (_usedMeds <= 0) || !alive _unit) exitWith {};\r\n\r\n// Schedule the loop to be executed again 1 sec later\r\n[DFUNC(medicationEffectLoop), [_unit, _variableName, _amountDecreased, _decreaseRate, _viscosityAdjustmentRate, _painReduceRate], 1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_medical_fnc_modifyMedicalAction","file":"medical/functions/fnc_modifyMedicalAction.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Modify the visuals of a medical action point.\r\n * On Basic medical: modify the icon color based on damage on that body part.\r\n *\r\n * Arguments:\r\n * 0: The Patient Unit <OBJECT>\r\n * 1: The Diagnosing Unit <OBJECT>\r\n * 2: Selection Number <NUMBER>\r\n * 3: The action to modify <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_player\", \"_selectionN\", \"_actionData\"];\r\n\r\nif (GVAR(level) < 2 || {!([_target] call FUNC(hasMedicalEnabled))}) exitWith {\r\n    private _pointDamage = (_target getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]]) select _selectionN;\r\n\r\n    if (_pointDamage >= 0.8) exitWith {\r\n        _actionData set [2, QPATHTOF(UI\\icons\\medical_crossRed.paa)];\r\n    };\r\n    if (_pointDamage > 0) exitWith {\r\n        _actionData set [2, QPATHTOF(UI\\icons\\medical_crossYellow.paa)];\r\n    };\r\n};\r\n\r\nprivate _openWounds = _target getVariable [QGVAR(openWounds), []];\r\n{\r\n    _x params [\"\", \"\", \"_selectionX\", \"_amountOf\", \"_x4\"];\r\n    if (_amountOf > 0 && {(_selectionN == _selectionX)} && {_x4 > 0}) exitWith {\r\n        _actionData set [2, QPATHTOF(UI\\icons\\medical_crossRed.paa)];\r\n    };\r\n} forEach _openWounds;\r\n"},{"name":"ace_medical_fnc_moduleAdvancedMedicalSettings","file":"medical/functions/fnc_moduleAdvancedMedicalSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Module for adjusting the medical treatment settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(enableFor), \"enableFor\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(enableAdvancedWounds), \"enableAdvancedWounds\"] call EFUNC(common,readSettingFromModule);\r\n// TODO disabled until implemented\r\n// [_logic, QGVAR(enableAirway), \"enableAirway\"] call EFUNC(common,readSettingFromModule);\r\n// [_logic, QGVAR(enableFractures), \"enableFractures\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(medicSetting_PAK), \"medicSetting_PAK\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(medicSetting_SurgicalKit), \"medicSetting_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(consumeItem_PAK), \"consumeItem_PAK\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(consumeItem_SurgicalKit), \"consumeItem_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(useLocation_PAK), \"useLocation_PAK\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(useLocation_SurgicalKit), \"useLocation_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(useCondition_PAK), \"useCondition_PAK\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(useCondition_SurgicalKit), \"useCondition_SurgicalKit\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(healHitPointAfterAdvBandage), \"healHitPointAfterAdvBandage\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(painIsOnlySuppressed), \"painIsOnlySuppressed\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_medical_fnc_moduleAssignMedicalFacility","file":"medical/functions/fnc_moduleAssignMedicalFacility.sqf","text":"/*\r\n * Author: Glowbal\r\n * Register synchronized objects from passed object as a medical facility\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_setting\", \"_objects\"];\r\nparams [[\"_logic\", objNull, [objNull]]];\r\nif (!isNull _logic) then {\r\n    _setting = _logic getVariable [\"class\",0];\r\n    _objects = synchronizedObjects _logic;\r\n    {\r\n        if (local _x) then {\r\n            _x setVariable[QGVAR(isMedicalFacility), true, true];\r\n        };\r\n    } forEach _objects;\r\n};\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_moduleAssignMedicalVehicle","file":"medical/functions/fnc_moduleAssignMedicalVehicle.sqf","text":"/*\r\n * Author: Glowbal\r\n * Assign vehicle as a medical vehicle.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\nif (!isNull _logic) then {\r\n    private [\"_list\", \"_setting\"];\r\n    _list = _logic getVariable [\"EnableList\", \"\"];\r\n    _setting = _logic getVariable [\"enabled\", 0];\r\n\r\n    [_list, QGVAR(medicClass), _setting, true] call EFUNC(common,assignObjectsInList);\r\n    [synchronizedObjects _logic, QGVAR(medicClass), _setting, true, true] call EFUNC(common,assignObjectsInList);\r\n};\r\n"},{"name":"ace_medical_fnc_moduleAssignMedicRoles","file":"medical/functions/fnc_moduleAssignMedicRoles.sqf","text":"/*\r\n * Author: Glowbal\r\n * Assign a medical role to a unit.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\nif (!isNull _logic) then {\r\n    private [\"_list\", \"_setting\"];\r\n    _list = _logic getVariable [\"EnableList\", \"\"];\r\n    _setting = _logic getVariable [\"role\", 0];\r\n\r\n    [_list, QGVAR(medicClass), _setting, true] call EFUNC(common,assignObjectsInList);\r\n    [synchronizedObjects _logic, QGVAR(medicClass), _setting, true] call EFUNC(common,assignObjectsInList);\r\n};\r\n"},{"name":"ace_medical_fnc_moduleBasicMedicalSettings","file":"medical/functions/fnc_moduleBasicMedicalSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Module for adjusting the medical treatment settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(medicSetting_basicEpi), \"medicSetting_basicEpi\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(useLocation_basicEpi), \"useLocation_basicEpi\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_medical_fnc_moduleMedicalSettings","file":"medical/functions/fnc_moduleMedicalSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Module for adjusting the medical damage settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(level), \"level\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(medicSetting), \"medicSetting\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(increaseTrainingInLocations), \"increaseTrainingInLocations\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(allowLitterCreation), \"allowLitterCreation\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(litterCleanUpDelay), \"litterCleanUpDelay\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(enableScreams), \"enableScreams\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(playerDamageThreshold), \"playerDamageThreshold\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(AIDamageThreshold), \"AIDamageThreshold\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(enableUnconsciousnessAI), \"enableUnconsciousnessAI\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(remoteControlledAI), \"remoteControlledAI\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(preventInstaDeath), \"preventInstaDeath\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(bleedingCoefficient), \"bleedingCoefficient\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(painCoefficient), \"painCoefficient\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(keepLocalSettingsSynced), \"keepLocalSettingsSynced\"] call EFUNC(common,readSettingFromModule);\r\n// [_logic, QGVAR(delayUnconCaptive), \"delayUnconCaptive\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_medical_fnc_moduleReviveSettings","file":"medical/functions/fnc_moduleReviveSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Module for adjusting the medical revive settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(maxReviveTime), \"maxReviveTime\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(amountOfReviveLives), \"amountOfReviveLives\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(enableRevive), \"enableRevive\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_medical_fnc_onMedicationUsage","file":"medical/functions/fnc_onMedicationUsage.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handles the medication given to a patient.\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: Medication Treatment classname <STRING>\r\n * 2: The medication treatment variablename <STRING>\r\n * 3: Max dosage <NUMBER>\r\n * 4: The time in the system <NUMBER>\r\n * 5: Incompatable medication <ARRAY<STRING>>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_className\", \"_variable\", \"_maxDosage\", \"_timeInSystem\", \"_incompatabileMeds\", \"_viscosityChange\", \"_painReduce\"];\r\nTRACE_8(\"params\",_target,_className,_variable,_maxDosage,_timeInSystem,_incompatabileMeds,_viscosityChange,_painReduce);\r\n\r\nprivate _foundEntry = false;\r\nprivate _allUsedMedication = _target getVariable [QGVAR(allUsedMedication), []];\r\n{\r\n    _x params [\"_variableX\", \"_allMedsFromClassname\"];\r\n    if (_variableX== _variable) exitWith {\r\n        if !(_className in _allMedsFromClassname) then {\r\n            _allMedsFromClassname pushBack _className;\r\n            _x set [1, _allMedsFromClassname];\r\n            _allUsedMedication set [_forEachIndex, _x];\r\n            _target setVariable [QGVAR(allUsedMedication), _allUsedMedication];\r\n        };\r\n        _foundEntry = true;\r\n    };\r\n} forEach _allUsedMedication;\r\n\r\nif (!_foundEntry) then {\r\n    _allUsedMedication pushBack [_variable, [_className]];\r\n    _target setVariable [QGVAR(allUsedMedication), _allUsedMedication];\r\n};\r\n\r\n\r\nprivate _usedMeds = _target getVariable [_variable, 0];\r\nif (_usedMeds >= floor (_maxDosage + round(random(2))) && _maxDosage >= 1 && GVAR(enableOverdosing)) then {\r\n    [_target] call FUNC(setDead);\r\n};\r\n\r\nprivate _hasOverDosed = 0;\r\n{\r\n    _x params [\"_med\", \"_limit\"];\r\n    {\r\n        _x params [\"\", \"_classNamesUsed\"];\r\n        if ({_x == _med} count _classNamesUsed > _limit) then {\r\n            _hasOverDosed = _hasOverDosed + 1;\r\n        };\r\n    } forEach _allUsedMedication;\r\n} forEach _incompatabileMeds;\r\n\r\nif (_hasOverDosed > 0 && GVAR(enableOverdosing)) then {\r\n    private _medicationConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Medication\");\r\n    private _onOverDose = getText (_medicationConfig >> \"onOverDose\");\r\n    if (isClass (_medicationConfig >> _className)) then {\r\n        _medicationConfig = (_medicationConfig >> _className);\r\n         if (isText (_medicationConfig  >> \"onOverDose\")) then { _onOverDose = getText (_medicationConfig >> \"onOverDose\"); };\r\n    };\r\n    if (isNil _onOverDose) then {\r\n        _onOverDose = compile _onOverDose;\r\n    } else {\r\n        _onOverDose = missionNamespace getVariable _onOverDose;\r\n    };\r\n    [_target, _className] call _onOverDose;\r\n};\r\n\r\nprivate _decreaseAmount = 1 / _timeInSystem;\r\nprivate _viscosityAdjustment = _viscosityChange / _timeInSystem;\r\n\r\n// Run the loop that computes the effect of the medication over time\r\n[_target, _variable, 0, _decreaseAmount, _viscosityAdjustment, _painReduce / _timeInSystem] call FUNC(medicationEffectLoop);\r\n"},{"name":"ace_medical_fnc_onPropagateWound","file":"medical/functions/fnc_onPropagateWound.sqf","text":"/*\r\n * Author: Glowbal\r\n * Adds a new injury to the wounds collection from remote clients. Is used to split up the large collection of injuries broadcasting across network.\r\n *\r\n * Arguments:\r\n * 0: The remote unit <OBJECT>\r\n * 1: injury <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_unit\", \"_injury\", \"_openWounds\", \"_injuryID\", \"_exists\"];\r\nparams [\"_unit\", \"_injury\"];\r\n\r\nif (!local _unit) then {\r\n    _openWounds = _unit getVariable[QGVAR(openWounds), []];\r\n    _injuryID = _injury select 0;\r\n\r\n    _exists = false;\r\n    {\r\n        if (_x select 0 == _injuryID) exitWith {\r\n            _exists = true;\r\n            _openWounds set [_forEachIndex, _injury];\r\n        };\r\n    } forEach _openWounds;\r\n\r\n    if (!_exists) then {\r\n        _openWounds pushBack _injury;\r\n    };\r\n    _unit setVariable [QGVAR(openWounds), _openWounds];\r\n};\r\n"},{"name":"ace_medical_fnc_onWoundUpdateRequest","file":"medical/functions/fnc_onWoundUpdateRequest.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handles an wound update request.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Origin object <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nprivate [\"_unit\", \"_openWounds\", \"_originOfrequest\"];\r\nparams [\"_unit\", \"_originOfrequest\"];\r\n\r\nif (local _unit && !(local _originOfrequest)) then {\r\n    _openWounds = _unit getVariable [QGVAR(openWounds), []];\r\n    {\r\n        [\"ace_medical_propagateWound\", [_unit, _x], [_originOfrequest]] call CBA_fnc_targetEvent;\r\n    } forEach _openWounds;\r\n};\r\n"},{"name":"ace_medical_fnc_parseConfigForInjuries","file":"medical/functions/fnc_parseConfigForInjuries.sqf","text":"/*\r\n * Author: Glowbal\r\n * Parse the ACE_Medical_Advanced config for all injury types.\r\n *\r\n * Arguments:\r\n * None\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_injuriesRootConfig\", \"_woundsConfig\", \"_allWoundClasses\", \"_amountOf\", \"_entry\",\"_classType\", \"_selections\", \"_bloodLoss\", \"_pain\",\"_minDamage\",\"_causes\", \"_damageTypesConfig\", \"_thresholds\", \"_typeThresholds\", \"_selectionSpecific\", \"_selectionSpecificType\", \"_classDisplayName\", \"_subClassDisplayName\", \"_maxDamage\", \"_subClassmaxDamage\", \"_defaultMinLethalDamage\", \"_minLethalDamage\", \"_allFoundDamageTypes\", \"_classID\", \"_configDamageTypes\", \"_i\", \"_parseForSubClassWounds\", \"_subClass\", \"_subClassConfig\", \"_subClassbloodLoss\", \"_subClasscauses\", \"_subClassminDamage\", \"_subClasspain\", \"_subClassselections\", \"_subClasstype\", \"_type\", \"_varName\", \"_woundTypes\"];\r\n\r\n_injuriesRootConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Injuries\");\r\n_allFoundDamageTypes = [];\r\n_configDamageTypes = (_injuriesRootConfig >> \"damageTypes\");\r\n\r\n// minimum lethal damage collection, mapped to damageTypes\r\n_defaultMinLethalDamage = getNumber (_configDamageTypes >> \"lethalDamage\");\r\nGVAR(minLethalDamages) = [];\r\n\r\n// Collect all available damage types from the config\r\nfor \"_i\" from 0 to (count _configDamageTypes -1) /* step +1 */ do {\r\n    // Only get the subclasses in damageType class\r\n    if (isClass(_configDamageTypes select _i)) then {\r\n        _allFoundDamageTypes pushBack (configName (_configDamageTypes select _i));\r\n        _minLethalDamage = if (isNumber((_configDamageTypes select _i) >> \"lethalDamage\")) then {\r\n            getNumber((_configDamageTypes select _i) >> \"lethalDamage\");\r\n        } else {\r\n            _defaultMinLethalDamage\r\n        };\r\n\r\n        GVAR(minLethalDamages) pushBack _minLethalDamage;\r\n    };\r\n};\r\nGVAR(allAvailableDamageTypes) = _allFoundDamageTypes;\r\nGVAR(woundClassNames) = [];\r\nGVAR(fractureClassNames) = [];\r\n\r\n// Parsing the wounds\r\n// function for parsing a sublcass of an injury\r\n_parseForSubClassWounds = {\r\n    _subClass = _this select 0;\r\n    if (isClass (_entry >> _subClass)) exitWith {\r\n        _subClassConfig = (_entry >> _subClass);\r\n        _subClasstype = _classType + (configName _subClassConfig);\r\n        _subClassselections = if (isArray(_subClassConfig >> \"selections\")) then { getArray(_subClassConfig >> \"selections\");} else { _selections };\r\n        _subClassbloodLoss = if (isNumber(_subClassConfig >> \"bleedingRate\")) then { getNumber(_subClassConfig >> \"bleedingRate\");} else { _bloodLoss };\r\n        _subClasspain = if (isNumber(_subClassConfig >> \"pain\")) then { getNumber(_subClassConfig >> \"pain\");} else { _pain };\r\n        _subClassminDamage = if (isNumber(_subClassConfig >> \"minDamage\")) then { getNumber(_subClassConfig >> \"minDamage\");} else { _minDamage };\r\n        _subClassmaxDamage = if (isNumber(_subClassConfig >> \"maxDamage\")) then { getNumber(_subClassConfig >> \"maxDamage\");} else { _maxDamage };\r\n        _subClasscauses = if (isArray(_subClassConfig >> \"causes\")) then { getArray(_subClassConfig >> \"causes\");} else { _causes };\r\n        _subClassDisplayName = if (isText(_subClassConfig >> \"name\")) then { getText(_subClassConfig >> \"name\");} else {_classDisplayName + \" \" + _subClass};\r\n        if (count _selections > 0 && {count _causes > 0}) then {\r\n            GVAR(woundClassNames) pushBack _subClasstype;\r\n            _allWoundClasses pushBack [_classID, _subClassselections, _subClassbloodLoss, _subClasspain, [_subClassminDamage, _subClassmaxDamage], _subClasscauses, _subClassDisplayName];\r\n            _classID = _classID + 1;\r\n        };\r\n        true;\r\n    };\r\n    false;\r\n};\r\n\r\n// TODO classTypes are strings currently. Convert them to unqiue IDs instead.\r\n_woundsConfig = (_injuriesRootConfig >> \"wounds\");\r\n_allWoundClasses = [];\r\n_classID = 0;\r\nif (isClass _woundsConfig) then {\r\n    _amountOf = count _woundsConfig;\r\n    for \"_i\" from 0 to (_amountOf -1) /* step +1 */ do {\r\n        _entry = _woundsConfig select _i;\r\n        if (isClass _entry) then {\r\n            _classType = (ConfigName _entry);\r\n            _selections = if (isArray(_entry >> \"selections\")) then { getArray(_entry >> \"selections\");} else {[]};\r\n            _bloodLoss = if (isNumber(_entry >> \"bleedingRate\")) then { getNumber(_entry >> \"bleedingRate\");} else {0};\r\n            _pain = if (isNumber(_entry >> \"pain\")) then { getNumber(_entry >> \"pain\");} else {0};\r\n            _minDamage = if (isNumber(_entry >> \"minDamage\")) then { getNumber(_entry >> \"minDamage\");} else {0};\r\n            _maxDamage = if (isNumber(_entry >> \"maxDamage\")) then { getNumber(_entry >> \"maxDamage\");} else {-1};\r\n            _causes = if (isArray(_entry >> \"causes\")) then { getArray(_entry >> \"causes\");} else {[]};\r\n            _classDisplayName = if (isText(_entry >> \"name\")) then { getText(_entry >> \"name\");} else {_classType};\r\n\r\n            // TODO instead of hardcoding minor, medium and large just go through all sub classes recursively until none are found\r\n            if ([\"Minor\"] call _parseForSubClassWounds || [\"Medium\"] call _parseForSubClassWounds || [\"Large\"] call _parseForSubClassWounds) exitWith {}; // continue to the next one\r\n\r\n            // There were no subclasses, so we will add this one instead.\r\n            if (count _selections > 0 && count _causes > 0) then {\r\n                GVAR(woundClassNames) pushBack _classType;\r\n                _allWoundClasses pushBack [_classID, _selections, _bloodLoss, _pain, [_minDamage, _maxDamage], _causes, _classDisplayName];\r\n                _classID = _classID + 1;\r\n            };\r\n            true;\r\n        };\r\n    };\r\n};\r\nGVAR(AllWoundInjuryTypes) = _allWoundClasses;\r\n\r\n// Linking injuries to the woundInjuryType variables.\r\n_damageTypesConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Injuries\" >> \"damageTypes\");\r\n_thresholds = getArray(_damageTypesConfig >> \"thresholds\");\r\n_selectionSpecific = getNumber(_damageTypesConfig >> \"selectionSpecific\");\r\n{\r\n    _varName = format[QGVAR(woundInjuryType_%1),_x];\r\n    _woundTypes = [];\r\n    _type = _x;\r\n    {\r\n        // Check if this type is in the causes of a wound class, if so, we will store the wound types for this damage type\r\n        if (_type in (_x select 5)) then {\r\n            _woundTypes pushBack _x;\r\n        };\r\n    } forEach _allWoundClasses;\r\n    _typeThresholds = _thresholds;\r\n    _selectionSpecificType = _selectionSpecific;\r\n    if (isClass(_damageTypesConfig >> _x)) then {\r\n        if (isArray(_damageTypesConfig >> _x >> \"thresholds\")) then { _typeThresholds = getArray(_damageTypesConfig >> _x >> \"thresholds\");};\r\n        if (isNumber(_damageTypesConfig >> _x >> \"selectionSpecific\")) then { _selectionSpecificType = getNumber(_damageTypesConfig >> _x >> \"selectionSpecific\");};\r\n    };\r\n    missionNamespace setVariable [_varName, [_typeThresholds, _selectionSpecificType > 0, _woundTypes]];\r\n\r\n    private [\"_minDamageThresholds\", \"_amountThresholds\"];\r\n    // extension loading\r\n    _minDamageThresholds = \"\";\r\n    _amountThresholds = \"\";\r\n    {\r\n        _minDamageThresholds = _minDamageThresholds + str(_x select 0);\r\n        _amountThresholds = _amountThresholds + str(_x select 1);\r\n        if (_forEachIndex < (count _typeThresholds) - 1) then {\r\n            _minDamageThresholds = _minDamageThresholds + \":\";\r\n            _amountThresholds = _amountThresholds + \":\";\r\n        };\r\n    } forEach _typeThresholds;\r\n\r\n    \"ace_medical\" callExtension format [\"addDamageType,%1,%2,%3,%4,%5\", _type, GVAR(minLethalDamages) select _forEachIndex, _minDamageThresholds, _amountThresholds, _selectionSpecificType];\r\n\r\n} forEach _allFoundDamageTypes;\r\n\r\n\r\n// Extension loading\r\n\r\n{\r\n    private [\"_classID\", \"_className\", \"_allowedSelections\", \"_bloodLoss\", \"_pain\", \"_minDamage\", \"_maxDamage\", \"_causes\", \"_classDisplayName\", \"_extensionInput\", \"_selections\", \"_causesArray\"];\r\n    // add shit to addInjuryType\r\n    _x params [\"_classID\", \"_selections\", \"_bloodLoss\", \"_pain\", \"_damage\", \"_causesArray\", \"_classDisplayName\"];\r\n    _damage params [\"_minDamage\", \"_maxDamage\"];\r\n    _className = GVAR(woundClassNames) select _forEachIndex;\r\n    _allowedSelections = \"\";\r\n\r\n    {\r\n        _allowedSelections = _allowedSelections + _x;\r\n        if (_forEachIndex < (count _selections) - 1) then {\r\n            _allowedSelections = _allowedSelections + \":\";\r\n        };\r\n    } forEach _selections;\r\n\r\n    _causes = \"\";\r\n\r\n    {\r\n        _causes = _causes + _x;\r\n        if (_forEachIndex < (count _causesArray) - 1) then {\r\n            _causes = _causes + \":\";\r\n        };\r\n    } forEach _causesArray;\r\n    _classDisplayName = _x select 6;\r\n\r\n    \"ace_medical\" callExtension format[\"addInjuryType,%1,%2,%3,%4,%5,%6,%7,%8,%9\", _classID, _className, _allowedSelections, _bloodLoss, _pain, _minDamage, _maxDamage, _causes, _classDisplayName];\r\n\r\n} forEach _allWoundClasses;\r\n\r\n\"ace_medical\" callExtension \"ConfigComplete\";\r\n"},{"name":"ace_medical_fnc_playInjuredSound","file":"medical/functions/fnc_playInjuredSound.sqf","text":"/*\r\n * Author: Glowbal\r\n * Play the injured sound for a unit if the unit is damaged. The sound broadcasted across MP.\r\n * Will not play if the unit has already played a sound within to close a time frame.\r\n * Delay: With minimal damage (below 1), the delay is (10 + random(50)) seconds. Otherwise it is 60 seconds / damage.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Amount of Pain <NUMBER>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_pain\"];\r\nif (!local _unit || !GVAR(enableScreams)) exitWith{};\r\n\r\n// Lock if the unit is already playing a sound.\r\nif ((_unit getVariable [QGVAR(playingInjuredSound),false])) exitWith {};\r\n_unit setVariable [QGVAR(playingInjuredSound),true];\r\n\r\n// Play the sound if there is any damage present.\r\nif (_pain > 0 && {[_unit] call EFUNC(common,isAwake)}) exitWith {\r\n    // Classnames of the available sounds.\r\n    private _availableSounds_A = [\r\n        \"WoundedGuyA_01\",\r\n        \"WoundedGuyA_02\",\r\n        \"WoundedGuyA_03\",\r\n        \"WoundedGuyA_04\",\r\n        \"WoundedGuyA_05\",\r\n        \"WoundedGuyA_06\",\r\n        \"WoundedGuyA_07\",\r\n        \"WoundedGuyA_08\"\r\n    ];\r\n    private _availableSounds_B = [\r\n        \"WoundedGuyB_01\",\r\n        \"WoundedGuyB_02\",\r\n        \"WoundedGuyB_03\",\r\n        \"WoundedGuyB_04\",\r\n        \"WoundedGuyB_05\",\r\n        \"WoundedGuyB_06\",\r\n        \"WoundedGuyB_07\",\r\n        \"WoundedGuyB_08\"\r\n    ];\r\n    private _availableSounds_C = [\r\n        \"WoundedGuyC_01\",\r\n        \"WoundedGuyC_02\",\r\n        \"WoundedGuyC_03\",\r\n        \"WoundedGuyC_04\",\r\n        \"WoundedGuyC_05\"\r\n    ];\r\n    private _sound = \"\";\r\n\r\n    // Select the to be played sound based upon damage amount.\r\n    if (_pain > 0.5) then {\r\n        if (random(1) > 0.5) then {\r\n            _sound = selectRandom _availableSounds_A;\r\n        } else {\r\n            _sound = selectRandom _availableSounds_B;\r\n        };\r\n    } else {\r\n        _sound = selectRandom _availableSounds_B;\r\n    };\r\n    // Play the sound\r\n    playSound3D [(getArray(configFile >> \"CfgSounds\" >> _sound >> \"sound\") select 0) + \".wss\", objNull, false, getPos _unit, 15, 1, 25]; // +2db, 15 meters.\r\n\r\n    // Figure out what the delay will be before it is possible to play a sound again.\r\n    private _delay = (30 - (random(25) * _pain)) max (3.5 + random(2));\r\n\r\n    // Clean up the lock\r\n    [{\r\n        (_this select 0) setVariable [QGVAR(playingInjuredSound), nil];\r\n    }, [_unit], _delay, _delay] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n// Clean up in case there has not been played any sounds.\r\n_unit setVariable [QGVAR(playingInjuredSound), nil];\r\n"},{"name":"ace_medical_fnc_requestWoundSync","file":"medical/functions/fnc_requestWoundSync.sqf","text":"/*\r\n * Author: Glowbal\r\n * Ask for the latest wound information.\r\n *\r\n * Arguments:\r\n * 0: The target <OBJECT>\r\n * 1: object belonging to the caller <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [ \"_target\", \"_caller\"];\r\n\r\nif (local _target || GVAR(level) < 2) exitWith {}; // if the target is local, we already got the most update to date information\r\nif (_target getVariable [QGVAR(isWoundSynced), false]) exitWith {};\r\n_target setVariable [QGVAR(isWoundSynced), true];\r\n[\"ace_medical_woundUpdateRequest\", [_target, _caller], [_target]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_medical_fnc_reviveStateLoop","file":"medical/functions/fnc_reviveStateLoop.sqf","text":"/*\r\n * Author: Glowbal, esteldunedain\r\n * Loop that handles a unit in the revive state.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// If locality changed finish the local loop\r\n// @todo: reinitiate the loop elsewhere\r\nif (!local _unit) exitWith {};\r\n\r\nprivate _startTime = _unit getVariable [QGVAR(reviveStartTime), 0];\r\n\r\n// Remove heartbeat\r\nif (GVAR(level) >= 2) then {\r\n    if (_unit getVariable [QGVAR(heartRate), 60] > 0) then {\r\n        _unit setVariable [QGVAR(heartRate), 0];\r\n    };\r\n};\r\n\r\n// If we are in revive state in a blown up vehicle, try to unload so that people can access the body\r\nif ((alive _unit) && {(vehicle _unit) != _unit} && {!alive (vehicle _unit)}) then {\r\n    TRACE_2(\"Unloading\", _unit, vehicle _unit);\r\n    [_unit] call EFUNC(common,unloadPerson);\r\n};\r\n\r\n// If the timer run out, let the unit die and exit the loop\r\nif (GVAR(maxReviveTime) > 0 && {CBA_missionTime - _startTime > GVAR(maxReviveTime)}) exitwith {\r\n    _unit setVariable [QGVAR(inReviveState), nil, true];\r\n    _unit setVariable [QGVAR(reviveStartTime), nil];\r\n    [_unit, true] call FUNC(setDead);\r\n};\r\n\r\n// If the unit was taken out from revive state, exit the loop\r\nif !(_unit getVariable [QGVAR(inReviveState), false]) exitwith {\r\n    // Revived without dieing, so in case we have lifes, remove one.\r\n    if (GVAR(amountOfReviveLives) > 0) then {\r\n        _lifesLeft = _unit getVariable[QGVAR(amountOfReviveLives), GVAR(amountOfReviveLives)];\r\n        _unit setVariable [QGVAR(amountOfReviveLives), _lifesLeft - 1, true];\r\n    };\r\n\r\n    _unit setVariable [QGVAR(reviveStartTime), nil];\r\n};\r\n\r\n// Schedule the loop to be executed again 1 sec later\r\n[DFUNC(reviveStateLoop), [_unit], 1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_medical_fnc_selectionNameToNumber","file":"medical/functions/fnc_selectionNameToNumber.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the number representation of a selection name.\r\n *\r\n * Arguments:\r\n * 0: The selection name of a unit <STRING>\r\n *\r\n * ReturnValue:\r\n * Number representation. -1 if invalid. <NUMBER>\r\n *\r\n * Public: yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n([\"head\",\"body\",\"hand_l\",\"hand_r\",\"leg_l\",\"leg_r\"] find (_this select 0));\r\n"},{"name":"ace_medical_fnc_serverRemoveBody","file":"medical/functions/fnc_serverRemoveBody.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Removes corpse. Idealy it is just deleted the next frame,\r\n * but player bodies cannot be deleted until they respawn, so it is hidden and deleted later.\r\n *\r\n * Arguments:\r\n * 0: Mr Body <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [cursorTarget] call ace_medical_fnc_serverRemoveBody\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\"];\r\nTRACE_2(\"\",_target,isPlayer _target);\r\n\r\n//Hide the body globaly\r\n[QEGVAR(common,hideObjectGlobal), [_target, true]] call CBA_fnc_serverEvent;\r\n\r\nif (isNil QGVAR(bodiesToDelete)) then {GVAR(bodiesToDelete) = [];};\r\nGVAR(bodiesToDelete) pushBack _target;\r\n\r\n// Start up a loop to wait for bodies to be free to delete\r\nif ((count GVAR(bodiesToDelete)) == 1) then {\r\n    [] call FUNC(bodyCleanupLoop);\r\n};\r\n\r\nnil\r\n"},{"name":"ace_medical_fnc_setCardiacArrest","file":"medical/functions/fnc_setCardiacArrest.sqf","text":"/*\r\n * Author: Glowbal\r\n * Triggers a unit into the Cardiac Arrest state from CMS. Will put the unit in an unconscious state and run a countdown timer until unit dies.\r\n * Timer is a random value between 120 and 720 seconds.\r\n *\r\n * Arguments:\r\n * 0: The unit that will be put in cardiac arrest state <OBJECT>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_timeInCardiacArrest\";\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(inCardiacArrest),false]) exitWith {};\r\n_unit setVariable [QGVAR(inCardiacArrest), true,true];\r\n_unit setVariable [QGVAR(heartRate), 0];\r\n\r\n[\"ace_cardiacArrestEntered\", [_unit]] call CBA_fnc_localEvent;\r\n\r\n[_unit, true] call FUNC(setUnconscious);\r\n_timeInCardiacArrest = 120 + round(random(600));\r\n\r\n[{\r\n    params [\"_args\", \"_idPFH\"];\r\n    _args params [\"_unit\", \"_startTime\", \"_timeInCardiacArrest\"];\r\n\r\n    private _heartRate = _unit getVariable [QGVAR(heartRate), 80];\r\n    if (_heartRate > 0 || !alive _unit) exitWith {\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        _unit setVariable [QGVAR(inCardiacArrest), nil,true];\r\n    };\r\n    if (CBA_missionTime - _startTime >= _timeInCardiacArrest) exitWith {\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        _unit setVariable [QGVAR(inCardiacArrest), nil,true];\r\n        [_unit] call FUNC(setDead);\r\n    };\r\n}, 1, [_unit, CBA_missionTime, _timeInCardiacArrest] ] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_medical_fnc_setDead","file":"medical/functions/fnc_setDead.sqf","text":"/*\r\n * Author: Glowbal\r\n * Either kills a unit or puts the unit in a revivable state, depending on the settings.\r\n *\r\n * Arguments:\r\n * 0: The unit that will be killed <OBJECT>\r\n * 1: Force Dead (ignore revive setting) <BOOL>\r\n * 1: Delay setDamage for a frame  <BOOL>\r\n *\r\n * ReturnValue:\r\n * Did he died? <BOOL>\r\n *\r\n * Public: yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_reviveVal\", \"_lifesLeft\"];\r\nparams [\"_unit\", [\"_force\", false], [\"_delaySetDamage\", false]];\r\n\r\nif ((!alive _unit) || {_unit getVariable [\"ACE_isDead\", false]}) exitWith {true};\r\nif (!local _unit) exitwith {\r\n    [QGVAR(setDead), [_unit, _force], _unit] call CBA_fnc_targetEvent;\r\n    false;\r\n};\r\n\r\n_reviveVal = _unit getVariable [QGVAR(enableRevive), GVAR(enableRevive)];\r\nif (((_reviveVal == 1 && {[_unit] call EFUNC(common,isPlayer)} || _reviveVal == 2)) && !_force) exitwith {\r\n    if (_unit getVariable [QGVAR(inReviveState), false]) exitwith {\r\n        if (GVAR(amountOfReviveLives) > 0) then {\r\n            _lifesLeft = _unit getVariable[QGVAR(amountOfReviveLives), GVAR(amountOfReviveLives)];\r\n            if (_lifesLeft == 0) then {\r\n                [_unit, true] call FUNC(setDead);\r\n            };\r\n        };\r\n\r\n        false;\r\n    };\r\n\r\n    _unit setVariable [QGVAR(inReviveState), true, true];\r\n    _unit setVariable [QGVAR(reviveStartTime), CBA_missionTime];\r\n    [_unit, true] call FUNC(setUnconscious);\r\n\r\n    // Run the loop that tracks the revive state\r\n    [_unit ] call FUNC(reviveStateLoop);\r\n    false;\r\n};\r\n\r\n_unit setVariable [\"ACE_isDead\", true, true];\r\nif (isPLayer _unit) then {\r\n    _unit setVariable [\"isDeadPlayer\", true, true];\r\n};\r\n\r\n[\"ace_killed\", [_unit]] call CBA_fnc_localEvent;\r\n\r\n//Delay a frame before killing the unit via scripted damage\r\n//to avoid triggering the \"Killed\" Event twice (and having the wrong killer)\r\n\r\nif (!_delaySetDamage) then {\r\n    [_unit, 1] call FUNC(setStructuralDamage);\r\n} else {\r\n    [FUNC(setStructuralDamage), [_unit, 1]] call CBA_fnc_execNextFrame;\r\n};\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_setHitPointDamage","file":"medical/functions/fnc_setHitPointDamage.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * My very own setHitPointDamage since BIS' one is buggy when affecting a remote unit.\r\n * It also doesn't change the overall damage. This does.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: HitPoint <STRING>\r\n * 2: Damage <NUMBER>\r\n * 3: Disable overall damage adjustment <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define LEGDAMAGETRESHOLD1 1\r\n#define LEGDAMAGETRESHOLD2 1.7\r\n#define ARMDAMAGETRESHOLD1 1\r\n#define ARMDAMAGETRESHOLD2 1.7\r\n\r\nprivate [\"_unit\", \"_selection\", \"_damage\", \"_selections\", \"_damages\", \"_damageOld\", \"_damageSumOld\", \"_damageNew\", \"_damageSumNew\", \"_damageFinal\", \"_armdamage\", \"_legdamage\"];\r\nparams [\"_unit\", \"_selection\", \"_damage\", [\"_disabled\", false]];\r\n\r\n// Unit isn't local, give function to machine where it is.\r\nif !(local _unit) exitWith {\r\n    [QGVAR(setHitPointDamage), _this, _unit] call CBA_fnc_targetEvent;\r\n};\r\n\r\n// Check if overall damage adjustment is disabled\r\nif (_disabled) exitWith {\r\n    _unit setHitPointDamage [_selection, _damage];\r\n};\r\n\r\n_selections = [\r\n    \"HitHead\",\r\n    \"HitBody\",\r\n    \"HitLeftArm\",\r\n    \"HitRightArm\",\r\n    \"HitLeftLeg\",\r\n    \"HitRightLeg\"\r\n];\r\n\r\nif !(_selection in _selections) exitWith {\r\n    _unit setHitPointDamage [_selection, _damage];\r\n};\r\n\r\n_damages = _selections apply {_unit getHitPointDamage _x};\r\n\r\n_damageOld = damage _unit;\r\n_damageSumOld = 0;\r\n{\r\n    _damageSumOld = _damageSumOld + _x;\r\n} forEach _damages;\r\n_damageSumOld = _damageSumOld max 0.001;\r\n\r\n_damages set [_selections find _selection, _damage];\r\n\r\n_damageSumNew = 0;\r\n{\r\n    _damageSumNew = _damageSumNew + _x;\r\n} forEach _damages;\r\n\r\n_damageNew = _damageSumNew / 6;\r\nif (_damageOld > 0) then {\r\n    _damageNew = _damageOld * (_damageSumNew / _damageSumOld);\r\n};\r\n\r\n// prevent death\r\nif (_damageNew >= 0.9) then {\r\n    _unit setDamage 0.9;\r\n    [_unit] call FUNC(setDead);\r\n} else {\r\n    _unit setDamage _damageNew;\r\n};\r\n\r\n{\r\n    _damageFinal = (_damages select _forEachIndex);\r\n    _unit setHitPointDamage [_x, _damageFinal];\r\n} forEach _selections;\r\n\r\n// Leg Damage\r\n_legdamage = (_unit getHitPointDamage \"HitLeftLeg\") + (_unit getHitPointDamage \"HitRightLeg\");\r\nif (_legdamage >= LEGDAMAGETRESHOLD1) then {\r\n    if (_unit getHitPointDamage \"HitLegs\" != 1) then {_unit setHitPointDamage [\"HitLegs\", 1]};\r\n} else {\r\n    if (_unit getHitPointDamage \"HitLegs\" != 0) then {_unit setHitPointDamage [\"HitLegs\", 0]};\r\n};\r\n// @todo: force prone for completely fucked up legs.\r\n\r\n\r\n// Arm Damage\r\n_armdamage = (_unit getHitPointDamage \"HitLeftArm\") + (_unit getHitPointDamage \"HitRightArm\");\r\nif (_armdamage >= ARMDAMAGETRESHOLD1) then {\r\n    if (_unit getHitPointDamage \"HitHands\" != 1) then {_unit setHitPointDamage [\"HitHands\", 1]};\r\n} else {\r\n    if (_unit getHitPointDamage \"HitHands\" != 0) then {_unit setHitPointDamage [\"HitHands\", 0]};\r\n};\r\n// @todo: Drop weapon for full damage.\r\n"},{"name":"ace_medical_fnc_setStructuralDamage","file":"medical/functions/fnc_setStructuralDamage.sqf","text":"/*\r\n * Author: commy2\r\n * Set the structural damage of a soldier without changing the individual hitpoints. Unit has to be local. Not safe to use with vehicles!\r\n *\r\n * Arguments:\r\n * 0: The unit <OBJECT>\r\n *\r\n * ReturnValue:\r\n * <NIL>\r\n *\r\n * Public: no?\r\n */\r\n\r\nparams [\"_unit\", \"_damage\"];\r\n\r\nif (!local _unit) exitWith {};\r\n\r\nprivate \"_allHitPoints\";\r\n_allHitPoints = getAllHitPointsDamage _unit select 2;\r\n\r\n_unit setDamage _damage;\r\n\r\n{\r\n    _unit setHitIndex [_forEachIndex, _x];\r\n} forEach _allHitPoints;\r\n"},{"name":"ace_medical_fnc_setUnconscious","file":"medical/functions/fnc_setUnconscious.sqf","text":"/*\r\n * Author: Glowbal\r\n * Sets a unit in the unconscious state.\r\n *\r\n * Arguments:\r\n * 0: The unit that will be put in an unconscious state <OBJECT>\r\n * 1: Set unconsciouns <BOOL> (default: true)\r\n * 2: Minimum unconscious time <NUMBER> (default: (round(random(10)+5)))\r\n * 3: Force AI Unconscious (skip random death chance) <BOOL> (default: false)\r\n *\r\n * ReturnValue:\r\n * nil\r\n *\r\n * Example:\r\n * [bob, true] call ace_medical_fnc_setUnconscious;\r\n *\r\n * Public: yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n#define DEFAULT_DELAY (round(random(10)+5))\r\n\r\n// only run this after the settings are initialized\r\nif !(EGVAR(common,settingsInitFinished)) exitWith {\r\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(setUnconscious), _this];\r\n};\r\n\r\nprivate [\"_animState\", \"_originalPos\", \"_startingTime\", \"_isDead\"];\r\nparams [\"_unit\", [\"_set\", true], [\"_minWaitingTime\", DEFAULT_DELAY], [\"_force\", false]];\r\n\r\n// No change, fuck off. (why is there no xor?)\r\nif (_set isEqualTo (_unit getVariable [\"ACE_isUnconscious\", false])) exitWith {};\r\n\r\nif !(_set) exitWith {\r\n    _unit setVariable [\"ACE_isUnconscious\", false, true];\r\n};\r\n\r\nif !(!(isNull _unit) && {(_unit isKindOf \"CAManBase\") && ([_unit] call EFUNC(common,isAwake))}) exitWith{};\r\n\r\nif (!local _unit) exitWith {\r\n    [QGVAR(setUnconscious), [_unit, _set, _minWaitingTime, _force], _unit] call CBA_fnc_targetEvent;\r\n};\r\n\r\n_unit setVariable [\"ACE_isUnconscious\", true, true];\r\n_unit setUnconscious true;\r\n\r\nif (_unit == ACE_player) then {\r\n    if (visibleMap) then {openMap false};\r\n    while {dialog} do {\r\n        closeDialog 0;\r\n    };\r\n};\r\n\r\n// if we have unconsciousness for AI disabled, we will kill the unit instead\r\n_isDead = false;\r\nif (!([_unit, GVAR(remoteControlledAI)] call EFUNC(common,isPlayer)) && !_force) then {\r\n    _enableUncon = _unit getVariable [QGVAR(enableUnconsciousnessAI), GVAR(enableUnconsciousnessAI)];\r\n    if (_enableUncon == 0 or {_enableUncon == 1 and (random 1) < 0.5}) then {\r\n        [_unit, true] call FUNC(setDead);\r\n        _isDead = true;\r\n    };\r\n};\r\nif (_isDead) exitWith {};\r\n\r\n// If a unit has the launcher out, it will sometimes start selecting the primairy weapon while unconscious,\r\n// therefor we force it to select the primairy weapon before going unconscious\r\nif ((vehicle _unit) isKindOf \"StaticWeapon\") then {\r\n    [_unit] call EFUNC(common,unloadPerson);\r\n};\r\nif (animationState _unit in [\"ladderriflestatic\",\"laddercivilstatic\"]) then {\r\n    _unit action [\"ladderOff\", (nearestBuilding _unit)];\r\n};\r\nif (vehicle _unit == _unit) then {\r\n    if (primaryWeapon _unit == \"\") then {\r\n        _unit addWeapon \"ACE_FakePrimaryWeapon\";\r\n    };\r\n    _unit selectWeapon (primaryWeapon _unit);\r\n};\r\n\r\n// We are storing the current animation, so we can use it later on when waking the unit up inside a vehicle\r\nif (vehicle _unit != _unit) then {\r\n    _unit setVariable [QGVAR(vehicleAwakeAnim), [(vehicle _unit), (animationState _unit)]];\r\n};\r\n\r\n//Save current stance:\r\n_originalPos = unitPos _unit;\r\n\r\n_unit setUnitPos \"DOWN\";\r\n[_unit, true] call EFUNC(common,disableAI);\r\n\r\n// So the AI does not get stuck, we are moving the unit to a temp group on its own.\r\n//Unconscious units shouldn't be put in another group #527:\r\nif (GVAR(moveUnitsFromGroupOnUnconscious)) then {\r\n    [_unit, true, \"ACE_isUnconscious\", side group _unit] call EFUNC(common,switchToGroupSide);\r\n};\r\n// Delay Unconscious so the AI dont instant stop shooting on the unit #3121\r\nif (GVAR(delayUnconCaptive) == 0) then {\r\n    [_unit, \"setCaptive\", \"ace_unconscious\", true] call EFUNC(common,statusEffect_set);\r\n} else {\r\n    [{\r\n        params [\"_unit\"];\r\n        if (_unit getVariable [\"ACE_isUnconscious\", false]) then {\r\n            [_unit, \"setCaptive\", \"ace_unconscious\", true] call EFUNC(common,statusEffect_set);\r\n        };\r\n    },[_unit], GVAR(delayUnconCaptive)] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n_anim = [_unit] call EFUNC(common,getDeathAnim);\r\n[_unit, _anim, 1, true] call EFUNC(common,doAnimation);\r\n[{\r\n    params [\"_unit\", \"_anim\"];\r\n    if ((_unit getVariable \"ACE_isUnconscious\") and (animationState _unit != _anim)) then {\r\n        [_unit, _anim, 2, true] call EFUNC(common,doAnimation);\r\n    };\r\n}, [_unit, _anim], 0.5, 0] call CBA_fnc_waitAndExecute;\r\n\r\n_startingTime = CBA_missionTime;\r\n\r\n[DFUNC(unconsciousPFH), 0.1, [_unit, _originalPos, _startingTime, _minWaitingTime, false, vehicle _unit isKindOf \"ParachuteBase\"] ] call CBA_fnc_addPerFrameHandler;\r\n\r\n// unconscious can't talk\r\n[_unit, \"isUnconscious\"] call EFUNC(common,muteUnit);\r\n\r\n[\"ace_unconscious\", [_unit, true]] call CBA_fnc_globalEvent;\r\n"},{"name":"ace_medical_fnc_showBloodEffect","file":"medical/functions/fnc_showBloodEffect.sqf","text":"/*\r\n * Author: KoffeinFlummi, Glowbal\r\n * Does the blood screen effect, just like BIS_fnc_bloodeffect, but in non-sheduled environment.\r\n *\r\n * Arguments:\r\n * 0: Effect multiplier <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_bloodRemaining\"];\r\n\r\ndisableSerialization;\r\n\r\n// get already existing controls, or create them\r\nprivate [\"_fxBloodControls\", \"_bloodCtrl1\", \"_bloodCtrl2\", \"_bloodCtrl3\"];\r\n\r\n_fxBloodControls = GETUVAR(GVAR(FXBloodControls),[]);\r\n\r\nif (count _fxBloodControls != 3) then {\r\n    _bloodCtrl1 = findDisplay 46 ctrlCreate [\"RscPicture\", -1];\r\n    _bloodCtrl2 = findDisplay 46 ctrlCreate [\"RscPicture\", -1];\r\n    _bloodCtrl3 = findDisplay 46 ctrlCreate [\"RscPicture\", -1];\r\n\r\n    // set their textures, screen position etc.\r\n    _bloodCtrl1 ctrlSetText \"A3\\Ui_f\\data\\igui\\rsctitles\\HealthTextures\\blood_lower_ca.paa\";\r\n    _bloodCtrl2 ctrlSetText \"A3\\Ui_f\\data\\igui\\rsctitles\\HealthTextures\\blood_middle_ca.paa\";\r\n    _bloodCtrl3 ctrlSetText \"A3\\Ui_f\\data\\igui\\rsctitles\\HealthTextures\\blood_upper_ca.paa\";\r\n\r\n    // positions are from config\r\n    private \"_ctrlPosition\";\r\n    _ctrlPosition = [\r\n        ((0 * safezoneW) + safezoneX) + ((safezoneW - (2.125 * safezoneW * 3/4)) / 2),\r\n        (-0.0625 * safezoneH) + safezoneY,\r\n        2.125 * safezoneW * 3/4,\r\n        1.125 * safezoneH\r\n    ];\r\n\r\n    _bloodCtrl1 ctrlSetPosition _ctrlPosition;\r\n    _bloodCtrl2 ctrlSetPosition _ctrlPosition;\r\n    _bloodCtrl3 ctrlSetPosition _ctrlPosition;\r\n\r\n    _fxBloodControls = [_bloodCtrl1, _bloodCtrl2, _bloodCtrl3];\r\n    SETUVAR(GVAR(FXBloodControls),_fxBloodControls);\r\n} else {\r\n    _bloodCtrl1 = _fxBloodControls select 0;\r\n    _bloodCtrl2 = _fxBloodControls select 1;\r\n    _bloodCtrl3 = _fxBloodControls select 2;\r\n};\r\n\r\n// reset everything\r\n_bloodCtrl1 ctrlSetFade 1;\r\n_bloodCtrl2 ctrlSetFade 1;\r\n_bloodCtrl3 ctrlSetFade 1;\r\n\r\n_bloodCtrl1 ctrlCommit 0;\r\n_bloodCtrl2 ctrlCommit 0;\r\n_bloodCtrl3 ctrlCommit 0;\r\n\r\nif (_bloodRemaining < 5) exitWith {\r\n    // nothing\r\n};\r\n\r\nif (_bloodRemaining < 25) exitWith {\r\n    _bloodCtrl1 ctrlSetFade 0.2;\r\n    _bloodCtrl1 ctrlCommit 0.2;\r\n\r\n    [{\r\n        (_this select 0) ctrlSetFade 1;\r\n        (_this select 0) ctrlCommit 0.8;\r\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\nif (_bloodRemaining < 40) exitWith {\r\n    _bloodCtrl1 ctrlSetFade 0.2;\r\n    _bloodCtrl2 ctrlSetFade 0.85;\r\n    _bloodCtrl1 ctrlCommit 0.2;\r\n    _bloodCtrl2 ctrlCommit 0.2;\r\n\r\n    [{\r\n        (_this select 0) ctrlSetFade 1;\r\n        (_this select 1) ctrlSetFade 1;\r\n        (_this select 1) ctrlCommit 1;\r\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\r\n\r\n    [{\r\n        (_this select 0) ctrlCommit 0.8;\r\n    }, _fxBloodControls, 1.2] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\nif (_bloodRemaining < 55) exitWith {\r\n    _bloodCtrl1 ctrlSetFade 0.2;\r\n    _bloodCtrl2 ctrlSetFade 0.7;\r\n    _bloodCtrl1 ctrlCommit 0.2;\r\n    _bloodCtrl2 ctrlCommit 0.2;\r\n\r\n    [{\r\n        (_this select 0) ctrlSetFade 1;\r\n        (_this select 1) ctrlSetFade 1;\r\n        (_this select 2) ctrlSetFade 1;\r\n        (_this select 1) ctrlCommit 1;\r\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\r\n\r\n    [{\r\n        (_this select 0) ctrlCommit 0.8;\r\n    }, _fxBloodControls, 1.2] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\nif (_bloodRemaining < 70) exitWith {\r\n    _bloodCtrl1 ctrlSetFade 0.2;\r\n    _bloodCtrl2 ctrlSetFade 0.7;\r\n    _bloodCtrl3 ctrlSetFade 0.85;\r\n    _bloodCtrl1 ctrlCommit 0.2;\r\n    _bloodCtrl2 ctrlCommit 0.2;\r\n    _bloodCtrl3 ctrlCommit 0.2;\r\n\r\n    [{\r\n        (_this select 0) ctrlSetFade 1;\r\n        (_this select 1) ctrlSetFade 1;\r\n        (_this select 2) ctrlSetFade 1;\r\n        (_this select 2) ctrlCommit 1.5;\r\n    }, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\r\n\r\n    [{\r\n        (_this select 1) ctrlCommit 1;\r\n    }, _fxBloodControls, 1.7] call CBA_fnc_waitAndExecute;\r\n\r\n    [{\r\n        (_this select 0) ctrlCommit 0.8;\r\n    }, _fxBloodControls, 2.2] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n//default\r\n_bloodCtrl1 ctrlSetFade 0.2;\r\n_bloodCtrl2 ctrlSetFade 0.7;\r\n_bloodCtrl3 ctrlSetFade 0.7;\r\n_bloodCtrl1 ctrlCommit 0.2;\r\n_bloodCtrl2 ctrlCommit 0.2;\r\n_bloodCtrl3 ctrlCommit 0.2;\r\n\r\n[{\r\n    (_this select 0) ctrlSetFade 1;\r\n    (_this select 1) ctrlSetFade 1;\r\n    (_this select 2) ctrlSetFade 1;\r\n    (_this select 2) ctrlCommit 1.5;\r\n}, _fxBloodControls, 0.7] call CBA_fnc_waitAndExecute;\r\n\r\n[{\r\n    (_this select 1) ctrlCommit 1;\r\n}, _fxBloodControls, 1.7] call CBA_fnc_waitAndExecute;\r\n\r\n[{\r\n    (_this select 0) ctrlCommit 0.8;\r\n}, _fxBloodControls, 2.2] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_medical_fnc_translateSelections","file":"medical/functions/fnc_translateSelections.sqf","text":"/*\r\n * Author: Glowbal\r\n * Translate selection names into medical usable hit selection names.\r\n * Aims to deal with the new hitpoint system introduced in Arma3 v1.50 and later.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: selection name <STRING>\r\n * 2: HitPoint Index/True to get hitpoint <NUMBER><BOOL>\r\n *\r\n * Return Value:\r\n * translated selection/hitpoint name <STRING>\r\n *\r\n * Example:\r\n * [bob, \"pelvis\", 4] call ace_medical_fnc_translateSelections\r\n * Returns \"body\"\r\n *\r\n * [bob, \"body\", true] call ace_medical_fnc_translateSelections\r\n * Returns \"HitBody\"\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define HEAD_SELECTIONS [\"face_hub\", \"neck\", \"head\"]\r\n#define HEAD_HITPOINTS [\"hitface\", \"hitneck\", \"hithead\"]\r\n#define TORSO_SELECTIONS [\"pelvis\", \"spine1\", \"spine2\", \"spine3\", \"body\"]\r\n#define TORSO_HITPOINTS [\"hitpelvis\", \"hitabdomen\", \"hitdiaphragm\", \"hitchest\", \"hitbody\"]\r\n#define L_ARM_SELECTIONS [\"hand_l\"]\r\n#define L_ARM_HITPOINTS [\"hitleftarm\", \"hand_l\"]\r\n#define R_ARM_SELECTIONS [\"hand_r\"]\r\n#define R_ARM_HITPOINTS [\"hitrightarm\", \"hand_r\"]\r\n#define L_LEG_SELECTIONS [\"leg_l\"]\r\n#define L_LEG_HITPOINTS [\"hitleftleg\", \"leg_l\"]\r\n#define R_LEG_SELECTIONS [\"leg_r\"]\r\n#define R_LEG_HITPOINTS [\"hitrightleg\", \"leg_r\"]\r\n\r\nparams [\"_unit\", \"_selection\", \"_hitPointIndex\"];\r\n\r\nif (_selection == \"\") exitWith {\"\"};\r\n\r\n//Get Selection from standard selection [\"head\",\"body\",\"hand_l\",\"hand_r\",\"leg_l\",\"leg_r\"]\r\nif (_hitPointIndex isEqualTo true) exitWith {\r\n    private _returnHitPoint = GVAR(HITPOINTS) select (GVAR(SELECTIONS) find _selection);\r\n    //If the selection is a valid hitpoint just return it:\r\n    if (!isNil {_unit getHitPointDamage _returnHitPoint}) exitWith {\r\n        _returnHitPoint;\r\n    };\r\n\r\n    //Those VR fuckers have weird limb hitpoints\r\n    private _hitPoints = switch (_selection) do {\r\n        case (\"hand_l\"): {L_ARM_HITPOINTS};\r\n        case (\"hand_r\"): {R_ARM_HITPOINTS};\r\n        case (\"leg_l\"): {L_LEG_HITPOINTS};\r\n        case (\"leg_r\"): {R_LEG_HITPOINTS};\r\n        case (\"head\"): {HEAD_HITPOINTS};\r\n        case (\"body\"): {TORSO_HITPOINTS};\r\n        default {[]};\r\n    };\r\n    {\r\n        if (!isNil {_unit getHitPointDamage _x}) exitWith {\r\n            _returnHitPoint = _x;\r\n        };\r\n    } forEach _hitPoints;\r\n    _returnHitPoint\r\n};\r\n\r\n\r\n//Get Selection from Selection/HitIndex:\r\n\r\nif (_selection in HEAD_SELECTIONS) exitWith {\"head\"};\r\nif (_selection in TORSO_SELECTIONS) exitWith {\"body\"};\r\n\r\n// Not necessary unless we get more hitpoints variants in an next arma update\r\n/*if (_selection in L_ARM_SELECTIONS) exitWith {\"hand_l\"};\r\nif (_selection in R_ARM_SELECTIONS) exitWith {\"hand_r\"};\r\nif (_selection in L_LEG_SELECTIONS) exitWith {\"leg_l\"};\r\nif (_selection in R_LEG_SELECTIONS) exitWith {\"leg_r\"};*/\r\n\r\n//Backup method to detect weird selections/hitpoints\r\nif ((_selection == \"?\") || {!(_selection in GVAR(SELECTIONS))}) exitWith {\r\n    if (_hitPointIndex < 0) exitWith {_selection};\r\n    private _hitPoint = toLower configName ((configProperties [(configFile >> \"CfgVehicles\" >> (typeOf _unit) >> \"HitPoints\")]) select _hitPointIndex);\r\n    TRACE_4(\"Weird sel/hit\", _unit, _selection, _hitPointIndex, _hitPoint);\r\n\r\n    if (_hitPoint in HEAD_HITPOINTS) exitWith {\"head\"};\r\n    if (_hitPoint in TORSO_HITPOINTS) exitWith {\"body\"};\r\n    if (_hitPoint in L_ARM_HITPOINTS) exitWith {\"hand_l\"};\r\n    if (_hitPoint in R_ARM_HITPOINTS) exitWith {\"hand_r\"};\r\n    if (_hitPoint in L_LEG_HITPOINTS) exitWith {\"leg_l\"};\r\n    if (_hitPoint in R_LEG_HITPOINTS) exitWith {\"leg_r\"};\r\n\r\n    _selection\r\n};\r\n\r\n_selection;\r\n"},{"name":"ace_medical_fnc_treatment_failure","file":"medical/functions/fnc_treatment_failure.sqf","text":"/*\r\n * Author: KoffeinFlummi, Glowbal\r\n * Callback when the treatment fails\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n * 4: Items available <ARRAY<STRING>>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_args\"];\r\n_args params [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\", \"_usersOfItems\"];\r\n\r\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\r\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\r\n};\r\nif (vehicle _caller == _caller) then {\r\n    private _lastAnim = _caller getVariable [QGVAR(treatmentPrevAnimCaller), \"\"];\r\n    //Don't play another medic animation (when player is rapidily treating)\r\n    TRACE_2(\"Reseting to old animation\", animationState player, _lastAnim);\r\n    switch (toLower _lastAnim) do {\r\n        case \"ainvpknlmstpslaywrfldnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWrflDnon\"};\r\n        case \"ainvppnemstpslaywrfldnon_medic\": {_lastAnim = \"AmovPpneMstpSrasWrflDnon\"};\r\n        case \"ainvpknlmstpslaywnondnon_medic\": {_lastAnim = \"AmovPknlMstpSnonWnonDnon\"};\r\n        case \"ainvppnemstpslaywpstdnon_medic\": {_lastAnim = \"AinvPpneMstpSlayWpstDnon\"};\r\n        case \"ainvpknlmstpslaywpstdnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWpstDnon\"};\r\n    };\r\n\r\n    [_caller, _lastAnim, 2] call EFUNC(common,doAnimation);\r\n};\r\n_caller setVariable [QGVAR(treatmentPrevAnimCaller), nil];\r\n\r\nprivate _weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnTreatment), []]);\r\nif ((_weaponSelect params [[\"_previousWeapon\", \"\"]]) && {(_previousWeapon != \"\") && {_previousWeapon in (weapons _caller)}}) then {\r\n    for \"_index\" from 0 to 99 do {\r\n        _caller action [\"SwitchWeapon\", _caller, _caller, _index];\r\n        //Just check weapon, muzzle and mode (ignore ammo in case they were reloading)\r\n        if (((weaponState _caller) select [0,3]) isEqualTo (_weaponSelect select [0,3])) exitWith {TRACE_1(\"Restoring\", (weaponState _caller));};\r\n        if ((weaponState _caller) isEqualTo [\"\",\"\",\"\",\"\",0]) exitWith {ERROR(\"weaponState not found\");};\r\n    };\r\n} else {\r\n    _caller action [\"SwitchWeapon\", _caller, _caller, 99];\r\n};\r\n\r\n{\r\n    _x params [\"_unit\", \"_item\"];\r\n    _unit addItem _item;\r\n} forEach _usersOfItems;\r\n\r\n// Record specific callback\r\nprivate _config = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className);\r\nif (GVAR(level) >= 2) then {\r\n    _config = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\r\n};\r\n\r\nprivate _callback = getText (_config >> \"callbackFailure\");\r\n_callback = if (isNil _callback) then {\r\n     compile _callback\r\n} else {\r\n    missionNamespace getVariable _callback\r\n};\r\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\r\n\r\n_args call _callback;\r\n"},{"name":"ace_medical_fnc_treatment_success","file":"medical/functions/fnc_treatment_success.sqf","text":"/*\r\n * Author: KoffeinFlummi, Glowbal\r\n * Callback when the treatment is completed\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n * 4: Items available <ARRAY<STRING>>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_args\"];\r\n_args params [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\", \"_usersOfItems\"];\r\n\r\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\r\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\r\n};\r\nif (vehicle _caller == _caller) then {\r\n    private _lastAnim = _caller getVariable [QGVAR(treatmentPrevAnimCaller), \"\"];\r\n    //Don't play another medic animation (when player is rapidily treating)\r\n    TRACE_2(\"Reseting to old animation\", animationState player, _lastAnim);\r\n    switch (toLower _lastAnim) do {\r\n        case \"ainvpknlmstpslaywrfldnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWrflDnon\"};\r\n        case \"ainvppnemstpslaywrfldnon_medic\": {_lastAnim = \"AmovPpneMstpSrasWrflDnon\"};\r\n        case \"ainvpknlmstpslaywnondnon_medic\": {_lastAnim = \"AmovPknlMstpSnonWnonDnon\"};\r\n        case \"ainvppnemstpslaywpstdnon_medic\": {_lastAnim = \"AinvPpneMstpSlayWpstDnon\"};\r\n        case \"ainvpknlmstpslaywpstdnon_medic\": {_lastAnim = \"AmovPknlMstpSrasWpstDnon\"};\r\n    };\r\n\r\n    [_caller, _lastAnim, 2] call EFUNC(common,doAnimation);\r\n};\r\n_caller setVariable [QGVAR(treatmentPrevAnimCaller), nil];\r\n\r\nprivate _weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnTreatment), []]);\r\nif ((_weaponSelect params [[\"_previousWeapon\", \"\"]]) && {(_previousWeapon != \"\") && {_previousWeapon in (weapons _caller)}}) then {\r\n    for \"_index\" from 0 to 99 do {\r\n        _caller action [\"SwitchWeapon\", _caller, _caller, _index];\r\n        //Just check weapon, muzzle and mode (ignore ammo in case they were reloading)\r\n        if (((weaponState _caller) select [0,3]) isEqualTo (_weaponSelect select [0,3])) exitWith {TRACE_1(\"Restoring\", (weaponState _caller));};\r\n        if ((weaponState _caller) isEqualTo [\"\",\"\",\"\",\"\",0]) exitWith {ERROR(\"weaponState not found\");};\r\n    };\r\n} else {\r\n    _caller action [\"SwitchWeapon\", _caller, _caller, 99];\r\n};\r\n\r\n// Record specific callback\r\nprivate _config = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className);\r\nif (GVAR(level) >= 2) then {\r\n    _config = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\r\n};\r\n\r\nprivate _callback = getText (_config >> \"callbackSuccess\");\r\nif (isNil _callback) then {\r\n    _callback = compile _callback;\r\n} else {\r\n    _callback = missionNamespace getVariable _callback;\r\n};\r\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\r\n\r\n//Get current blood loose on limb (for \"bloody\" litter)\r\nprivate _bloodLossOnSelection = 0;\r\nprivate _partNumber = ([_selectionName] call FUNC(selectionNameToNumber)) max 0;\r\nif ((GVAR(level) >= 2) && {([_target] call FUNC(hasMedicalEnabled))}) then {\r\n    //Advanced Medical - Add all bleeding from wounds on selection\r\n    private _openWounds = _target getvariable [QGVAR(openWounds), []];\r\n    {\r\n        _x params [\"\", \"\", \"_selectionX\", \"_amountOf\", \"_bleedingRatio\"];\r\n        if (_selectionX == _partNumber) then {\r\n            _bloodLossOnSelection = _bloodLossOnSelection + (_amountOf * _bleedingRatio);\r\n        };\r\n    } forEach _openWounds;\r\n    TRACE_1(\"advanced\",_bloodLossOnSelection);\r\n} else {\r\n    //Basic Medical (just use blodyPartStatus):\r\n    private _damageBodyParts = _target getvariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\r\n    _bloodLossOnSelection = _damageBodyParts select _partNumber;\r\n    TRACE_1(\"basic\",_bloodLossOnSelection);\r\n};\r\n\r\n_args call _callback;\r\n_args pushBack _bloodLossOnSelection;\r\n_args call FUNC(createLitter);\r\n\r\n//If we're not already tracking vitals, start:\r\nif (!(_target getVariable [QGVAR(addedToUnitLoop),false])) then {\r\n    [_target] call FUNC(addVitalLoop);\r\n};\r\n\r\n[\"ace_treatmentSucceded\", [_caller, _target, _selectionName, _className]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_medical_fnc_treatment","file":"medical/functions/fnc_treatment.sqf","text":"/*\r\n * Author: Glowbal, KoffeinFlummi\r\n * Starts the treatment process\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\"];\r\n\r\n// If the cursorMenu is open, the loading bar will fail. If we execute the function one frame later, it will work fine\r\nif (uiNamespace getVariable [QEGVAR(interact_menu,cursorMenuOpened),false]) exitwith {\r\n    [DFUNC(treatment), _this] call CBA_fnc_execNextFrame;\r\n};\r\n\r\nif !(_target isKindOf \"CAManBase\") exitWith {false};\r\n\r\nprivate _config = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\" >> _className);\r\nif (GVAR(level) >= 2) then {\r\n    _config = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\" >> _className);\r\n};\r\n\r\nif !(isClass _config) exitwith {false};\r\n\r\n// Allow self treatment check\r\nif (_caller == _target && {getNumber (_config >> \"allowSelfTreatment\") == 0}) exitwith {false};\r\n\r\nprivate _medicRequired = if (isNumber (_config >> \"requiredMedic\")) then {\r\n    getNumber (_config >> \"requiredMedic\");\r\n} else {\r\n    // Check for required class\r\n    if (isText (_config >> \"requiredMedic\")) exitwith {\r\n        missionNamespace getVariable [(getText (_config >> \"requiredMedic\")), 0];\r\n    };\r\n    0;\r\n};\r\n\r\nif !([_caller, _medicRequired] call FUNC(isMedic)) exitwith {false};\r\n\r\nprivate _allowedSelections = getArray (_config >> \"allowedSelections\");\r\nif !(\"All\" in _allowedSelections || {(_selectionName in _allowedSelections)}) exitwith {false};\r\n\r\n// Check item\r\nprivate _items = getArray (_config >> \"items\");\r\nif (count _items > 0 && {!([_caller, _target, _items] call FUNC(hasItems))}) exitwith {false};\r\n\r\nprivate _return = true;\r\nif (isText (_config >> \"Condition\")) then {\r\n    private _condition = getText(_config >> \"condition\");\r\n    if (_condition != \"\") then {\r\n        if (isnil _condition) then {\r\n            _condition = compile _condition;\r\n        } else {\r\n            _condition = missionNamespace getVariable _condition;\r\n        };\r\n        if (_condition isEqualType false) then {\r\n            _return = _condition;\r\n        } else {\r\n            _return = [_caller, _target, _selectionName, _className] call _condition;\r\n        };\r\n    };\r\n};\r\nif (!_return) exitwith {false};\r\n\r\nprivate _patientStateCondition = if (isText(_config >> \"patientStateCondition\")) then {\r\n    missionNamespace getVariable [getText(_config >> \"patientStateCondition\"), 0]\r\n} else {\r\n    getNumber(_config >> \"patientStateCondition\")\r\n};\r\nif (_patientStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitwith {false};\r\n\r\n// Check allowed locations\r\nprivate _locations = getArray (_config >> \"treatmentLocations\");\r\n\r\nif (\"All\" in _locations) then {\r\n    _return = true;\r\n} else {\r\n    private _medFacility = {([_caller] call FUNC(isInMedicalFacility)) || ([_target] call FUNC(isInMedicalFacility))};\r\n    private _medVeh = {([_caller] call FUNC(isInMedicalVehicle)) || ([_target] call FUNC(isInMedicalVehicle))};\r\n\r\n    {\r\n        if (_x == \"field\") exitwith {_return = true;};\r\n        if (_x == \"MedicalFacility\" && _medFacility) exitwith {_return = true;};\r\n        if (_x == \"MedicalVehicle\" && _medVeh) exitwith {_return = true;};\r\n        if !(isnil _x) exitwith {\r\n            private _val = missionNamespace getVariable _x;\r\n            if (_val isEqualType 0) then {\r\n                _return = switch (_val) do {\r\n                    case 0: {true}; //AdvancedMedicalSettings_anywhere\r\n                    case 1: {call _medVeh}; //AdvancedMedicalSettings_vehicle\r\n                    case 2: {call _medFacility}; //AdvancedMedicalSettings_facility\r\n                    case 3: {(call _medFacility) || {call _medVeh}}; //AdvancedMedicalSettings_vehicleAndFacility\r\n                    default {false}; //Disabled\r\n                };\r\n            };\r\n        };\r\n    } foreach _locations;\r\n};\r\n\r\nif !(_return) exitwith {false};\r\n\r\nprivate _usersOfItems = [];\r\nprivate _consumeItems = if (isNumber (_config >> \"itemConsumed\")) then {\r\n    getNumber (_config >> \"itemConsumed\");\r\n} else {\r\n    // Check for required class\r\n    if (isText (_config >> \"itemConsumed\")) exitwith {\r\n        missionNamespace getVariable [(getText (_config >> \"itemConsumed\")), 0];\r\n    };\r\n    0;\r\n};\r\nif (_consumeItems > 0) then {\r\n    _usersOfItems = ([_caller, _target, _items] call FUNC(useItems)) select 1;\r\n};\r\n\r\n// Parse the config for the progress callback\r\nprivate _callbackProgress = getText (_config >> \"callbackProgress\");\r\nif (_callbackProgress == \"\") then {\r\n    _callbackProgress = \"true\";\r\n};\r\nif (isNil _callbackProgress) then {\r\n    _callbackProgress = compile _callbackProgress;\r\n} else {\r\n    _callbackProgress = missionNamespace getVariable _callbackProgress;\r\n};\r\n\r\n// Patient Animation\r\nprivate _patientAnim = getText (_config >> \"animationPatient\");\r\nif (_target getVariable [\"ACE_isUnconscious\", false] && GVAR(allowUnconsciousAnimationOnTreatment)) then {\r\n    if !(animationState _target in (getArray (_config >> \"animationPatientUnconsciousExcludeOn\"))) then {\r\n        _patientAnim = getText (_config >> \"animationPatientUnconscious\");\r\n    };\r\n};\r\n\r\nif (_caller != _target && {vehicle _target == _target} && {_patientAnim != \"\"}) then {\r\n    if (_target getVariable [\"ACE_isUnconscious\", false]) then {\r\n        [_target, _patientAnim, 2, true] call EFUNC(common,doAnimation);\r\n    } else {\r\n        [_target, _patientAnim, 1, true] call EFUNC(common,doAnimation);\r\n    };\r\n};\r\n\r\n// Player Animation\r\nprivate _callerAnim = [getText (_config >> \"animationCaller\"), getText (_config >> \"animationCallerProne\")] select (stance _caller == \"PRONE\");\r\nif (_caller == _target) then {\r\n    _callerAnim = [getText (_config >> \"animationCallerSelf\"), getText (_config >> \"animationCallerSelfProne\")] select (stance _caller == \"PRONE\");\r\n};\r\n\r\n_caller setVariable [QGVAR(selectedWeaponOnTreatment), (weaponState _caller)];\r\n\r\n// Cannot use secondairy weapon for animation\r\nif (currentWeapon _caller == secondaryWeapon _caller) then {\r\n    _caller selectWeapon (primaryWeapon _caller);\r\n};\r\n\r\nprivate _wpn = [\"non\", \"rfl\", \"pst\"] select (1 + ([primaryWeapon _caller, handgunWeapon _caller] find (currentWeapon _caller)));\r\nprivate _callerAnim = [_callerAnim, \"[wpn]\", _wpn] call CBA_fnc_replace;\r\nif (vehicle _caller == _caller && {_callerAnim != \"\"}) then {\r\n    if (primaryWeapon _caller == \"\") then {\r\n        _caller addWeapon \"ACE_FakePrimaryWeapon\";\r\n    };\r\n    if (currentWeapon _caller == \"\") then {\r\n        _caller selectWeapon (primaryWeapon _caller); // unit always has a primary weapon here\r\n    };\r\n\r\n    if (isWeaponDeployed _caller) then {\r\n        TRACE_1(\"Weapon Deployed, breaking out first\",(stance _caller));\r\n        [_caller, \"\", 0] call EFUNC(common,doAnimation);\r\n    };\r\n\r\n    if ((stance _caller) == \"STAND\") then {\r\n        switch (_wpn) do {//If standing, end in a crouched animation based on their current weapon\r\n            case (\"rfl\"): {_caller setVariable [QGVAR(treatmentPrevAnimCaller), \"AmovPknlMstpSrasWrflDnon\"];};\r\n            case (\"pst\"): {_caller setVariable [QGVAR(treatmentPrevAnimCaller), \"AmovPknlMstpSrasWpstDnon\"];};\r\n            case (\"non\"): {_caller setVariable [QGVAR(treatmentPrevAnimCaller), \"AmovPknlMstpSnonWnonDnon\"];};\r\n        };\r\n    } else {\r\n        _caller setVariable [QGVAR(treatmentPrevAnimCaller), animationState _caller];\r\n    };\r\n    [_caller, _callerAnim] call EFUNC(common,doAnimation);\r\n};\r\n\r\n//Get treatment time\r\nprivate _treatmentTime = if (isNumber (_config >> \"treatmentTime\")) then {\r\n    getNumber (_config >> \"treatmentTime\");\r\n} else {\r\n    if (isText (_config >> \"treatmentTime\")) exitwith {\r\n        private _treatmentTimeConfig = getText(_config >> \"treatmentTime\");\r\n        if (isnil _treatmentTimeConfig) then {\r\n            _treatmentTimeConfig = compile _treatmentTimeConfig;\r\n        } else {\r\n            _treatmentTimeConfig = missionNamespace getVariable _treatmentTimeConfig;\r\n        };\r\n        if (_treatmentTimeConfig isEqualType 0) exitwith {\r\n            _treatmentTimeConfig;\r\n        };\r\n        [_caller, _target, _selectionName, _className] call _treatmentTimeConfig;\r\n    };\r\n    0;\r\n};\r\n\r\n// Start treatment\r\n[\r\n    _treatmentTime,\r\n    [_caller, _target, _selectionName, _className, _items, _usersOfItems],\r\n    DFUNC(treatment_success),\r\n    DFUNC(treatment_failure),\r\n    getText (_config >> \"displayNameProgress\"),\r\n    _callbackProgress,\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n\r\n// Display Icon\r\nprivate _iconDisplayed = getText (_config >> \"actionIconPath\");\r\nif (_iconDisplayed != \"\") then {\r\n    [QGVAR(treatmentActionIcon), true, _iconDisplayed, [1,1,1,1], getNumber(_config >> \"actionIconDisplayTime\")] call EFUNC(common,displayIcon);\r\n};\r\n\r\n// handle display of text/hints\r\nprivate _displayText = \"\";\r\nif (_target != _caller) then {\r\n    _displayText = getText(_config >> \"displayTextOther\");\r\n} else {\r\n    _displayText = getText(_config >> \"displayTextSelf\");\r\n};\r\n\r\nif (_displayText != \"\") then {\r\n    [QEGVAR(common,displayTextStructured), [[_displayText, [_caller] call EFUNC(common,getName), [_target] call EFUNC(common,getName)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n};\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_bandage","file":"medical/functions/fnc_treatmentAdvanced_bandage.sqf","text":"/*\r\n * Author: Glowbal\r\n * IV Treatment callback\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n * 4: Item <STRING>\r\n * 5: specific Spot <NUMBER> (default: -1)\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\", \"\", [\"_specificSpot\", -1]];\r\n\r\n[_target, \"activity\", LSTRING(Activity_bandagedPatient), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n[_target, \"activity_view\", LSTRING(Activity_bandagedPatient), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\r\n\r\nif !([_target] call FUNC(hasMedicalEnabled)) exitWith {\r\n    _this call FUNC(treatmentBasic_bandage);\r\n};\r\n\r\nif (local _target) then {\r\n    [QGVAR(treatmentAdvanced_bandageLocal), [_target, _className, _selectionName, _specificSpot]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(treatmentAdvanced_bandageLocal), [_target, _className, _selectionName, _specificSpot], _target] call CBA_fnc_targetEvent;\r\n};\r\n\r\n/*    {\r\n    if (_x != \"\") then {\r\n        [_target, _x] call FUNC(addToTriageCard);\r\n    };\r\n}forEach _items;*/\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_bandageLocal","file":"medical/functions/fnc_treatmentAdvanced_bandageLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handles the bandage of a patient.\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: Treatment classname <STRING>\r\n *\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_bandage\", \"_selectionName\", [\"_specificClass\", -1]];\r\n\r\n// Ensure it is a valid bodypart\r\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\r\nif (_part < 0) exitWith {false};\r\n\r\n// Get the open wounds for this unit\r\nprivate _openWounds = _target getVariable [QGVAR(openWounds), []];\r\nif (count _openWounds == 0) exitWith {false}; // nothing to do here!\r\n\r\n// Get the default effectiveness for the used bandage\r\nprivate _config = (ConfigFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Bandaging\");\r\nprivate _effectiveness = getNumber (_config >> \"effectiveness\");\r\nif (isClass (_config >> _bandage)) then {\r\n    _config = (_config >> _bandage);\r\n    if (isNumber (_config >> \"effectiveness\")) then { _effectiveness = getNumber (_config >> \"effectiveness\");};\r\n};\r\n\r\n// Figure out which injury for this bodypart is the best choice to bandage\r\nprivate _mostEffectiveSpot = 0;\r\nprivate _effectivenessFound = -1;\r\nprivate _mostEffectiveInjury = _openWounds select 0;\r\nprivate _exit = false;\r\n{\r\n    _x params [\"\", \"_classID\", \"_partX\"];\r\n    TRACE_2(\"OPENWOUND: \", _target, _x);\r\n    // Only parse injuries that are for the selected bodypart.\r\n    if (_partX == _part) then {\r\n        private _woundEffectiveness = _effectiveness;\r\n\r\n        // Select the classname from the wound classname storage\r\n        private _className = GVAR(woundClassNames) select _classID;\r\n\r\n        // Check if this wound type has attributes specified for the used bandage\r\n        if (isClass (_config >> _className)) then {\r\n            // Collect the effectiveness from the used bandage for this wound type\r\n            private _woundTreatmentConfig = (_config >> _className);\r\n            if (isNumber (_woundTreatmentConfig >> \"effectiveness\")) then {\r\n                _woundEffectiveness = getNumber (_woundTreatmentConfig >> \"effectiveness\");\r\n            };\r\n        } else {\r\n            ACE_LOGWARNING_2(\"No config for wound type [%1] config base [%2]\", _className, _config);\r\n        };\r\n\r\n        TRACE_2(\"Wound classes: \", _specificClass, _classID);\r\n        if (_specificClass == _classID) exitWith {\r\n            _effectivenessFound = _woundEffectiveness;\r\n            _mostEffectiveSpot = _forEachIndex;\r\n            _mostEffectiveInjury = _x;\r\n            _exit = true;\r\n        };\r\n\r\n        // Check if this is the currently most effective found.\r\n        if (_woundEffectiveness * ((_x select 4) * (_x select 3)) > _effectivenessFound * ((_mostEffectiveInjury select 4) * (_mostEffectiveInjury select 3))) then {\r\n            _effectivenessFound = _woundEffectiveness;\r\n            _mostEffectiveSpot = _forEachIndex;\r\n            _mostEffectiveInjury = _x;\r\n        };\r\n    };\r\n    if (_exit) exitWith {};\r\n} forEach _openWounds;\r\n\r\nif (_effectivenessFound == -1) exitWith {}; // Seems everything is patched up on this body part already..\r\n\r\n\r\n// TODO refactor this part\r\n// Find the impact this bandage has and reduce the amount this injury is present\r\nprivate _impact = if ((_mostEffectiveInjury select 3) >= _effectivenessFound) then {_effectivenessFound} else { (_mostEffectiveInjury select 3) };\r\n_mostEffectiveInjury set [ 3, ((_mostEffectiveInjury select 3) - _impact) max 0];\r\n_openWounds set [_mostEffectiveSpot, _mostEffectiveInjury];\r\n\r\n_target setVariable [QGVAR(openWounds), _openWounds, !USE_WOUND_EVENT_SYNC];\r\n\r\nif (USE_WOUND_EVENT_SYNC) then {\r\n    [\"ace_medical_propagateWound\", [_target, _mostEffectiveInjury]] call CBA_fnc_globalEvent;\r\n};\r\n// Handle the reopening of bandaged wounds\r\nif (_impact > 0 && {GVAR(enableAdvancedWounds)}) then {\r\n    [_target, _impact, _part, _mostEffectiveSpot, _mostEffectiveInjury, _bandage] call FUNC(handleBandageOpening);\r\n};\r\n\r\n// If all wounds to a body part have been bandaged, reset damage to that body part to zero\r\n// so that the body part functions normally and blood is removed from the uniform.\r\n// Arma combines left and right arms into a single body part (HitHands), same with left and right legs (HitLegs).\r\n// Arms are actually hands.\r\nif (GVAR(healHitPointAfterAdvBandage)) then {\r\n    // Get the list of the wounds the target is currently suffering from.\r\n    private _currentWounds = _target getVariable [QGVAR(openWounds), []];\r\n\r\n    // Tally of unbandaged wounds to each body part.\r\n    private _headWounds = 0;\r\n    private _bodyWounds = 0;\r\n    private _legsWounds = 0;\r\n    private _armWounds  = 0;\r\n\r\n    // Loop through all current wounds and add up the number of unbandaged wounds on each body part.\r\n    {\r\n        _x params [\"\", \"\", \"_bodyPart\", \"_numOpenWounds\", \"_bloodLoss\"];\r\n\r\n        // Use switch/case for early termination if wounded limb is found before all six are checked.\r\n        // Number of wounds multiplied by blood loss will return zero for a fully\r\n        // bandaged body part, not incrementing the wound counter; or it will return\r\n        // some other number which will increment the wound counter.\r\n        switch (_bodyPart) do {\r\n            // Head\r\n            case 0: {\r\n                _headWounds = _headWounds + (_numOpenWounds * _bloodLoss);\r\n            };\r\n\r\n            // Body\r\n            case 1: {\r\n                _bodyWounds = _bodyWounds + (_numOpenWounds * _bloodLoss);\r\n            };\r\n\r\n            // Left Arm\r\n            case 2: {\r\n                _armWounds = _armWounds + (_numOpenWounds * _bloodLoss);\r\n            };\r\n\r\n            // Right Arm\r\n            case 3: {\r\n                _armWounds = _armWounds + (_numOpenWounds * _bloodLoss);\r\n            };\r\n\r\n            // Left Leg\r\n            case 4: {\r\n                _legsWounds = _legsWounds + (_numOpenWounds * _bloodLoss);\r\n            };\r\n\r\n            // Right Leg\r\n            case 5: {\r\n                _legsWounds = _legsWounds + (_numOpenWounds * _bloodLoss);\r\n            };\r\n        };\r\n    } forEach _currentWounds;\r\n\r\n    // Any body part that has no wounds is healed to full health\r\n    if (_headWounds == 0) then {\r\n        _target setHitPointDamage [\"hitHead\",  0.0];\r\n    };\r\n\r\n    if (_bodyWounds == 0) then {\r\n        _target setHitPointDamage [\"hitBody\",  0.0];\r\n    };\r\n\r\n    if (_armWounds == 0) then {\r\n        _target setHitPointDamage [\"hitHands\", 0.0];\r\n    };\r\n\r\n    if (_legsWounds == 0) then {\r\n        _target setHitPointDamage [\"hitLegs\",  0.0];\r\n    };\r\n};\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_CPR","file":"medical/functions/fnc_treatmentAdvanced_CPR.sqf","text":"/*\r\n * Author: Glowbal\r\n * Callback for the CPR treatment action on success.\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\r\n\r\nif (alive _target && {(_target getVariable [QGVAR(inCardiacArrest), false] || _target getVariable [QGVAR(inReviveState), false])}) then {\r\n    [_target, \"activity_view\", LSTRING(Activity_cpr), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n\r\n    if (local _target) then {\r\n        [QGVAR(treatmentAdvanced_CPRLocal), [_caller, _target]] call CBA_fnc_localEvent;\r\n    } else {\r\n        [QGVAR(treatmentAdvanced_CPRLocal), [_caller, _target], _target] call CBA_fnc_targetEvent;\r\n    };\r\n};\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_CPRLocal","file":"medical/functions/fnc_treatmentAdvanced_CPRLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * local Callback for the CPR treatment action on success.\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\",\"_target\"];\r\n\r\nif (_target getVariable [QGVAR(inReviveState), false]) then {\r\n    private _reviveStartTime = _target getVariable [QGVAR(reviveStartTime),0];\r\n    if (_reviveStartTime > 0) then {\r\n        _target setVariable [QGVAR(reviveStartTime), (_reviveStartTime + random(20)) min CBA_missionTime];\r\n    };\r\n};\r\n\r\nif (GVAR(level) > 1 && {(random 1) >= 0.6}) then {\r\n    _target setVariable [QGVAR(inCardiacArrest), nil,true];\r\n    _target setVariable [QGVAR(heartRate), 40];\r\n    _target setVariable [QGVAR(bloodPressure), [50,70]];\r\n};\r\n\r\n[_target, \"activity\", LSTRING(Activity_CPR), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n[_target, \"activity_view\", LSTRING(Activity_CPR), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_fullHeal","file":"medical/functions/fnc_treatmentAdvanced_fullHeal.sqf","text":"/**\r\n * fn_heal.sqf\r\n * @Descr: N/A\r\n * @Author: Glowbal\r\n *\r\n * @Arguments: []\r\n * @Return:\r\n * @PublicAPI: false\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\r\n\r\nif (local _target) then {\r\n    [QGVAR(treatmentAdvanced_fullHealLocal), [_caller, _target]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(treatmentAdvanced_fullHealLocal), [_caller, _target], _target] call CBA_fnc_targetEvent;\r\n};\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_fullHealLocal","file":"medical/functions/fnc_treatmentAdvanced_fullHealLocal.sqf","text":"/**\r\n * fn_healLocal.sqf\r\n * @Descr: N/A\r\n * @Author: Glowbal\r\n *\r\n * @Arguments: []\r\n * @Return:\r\n * @PublicAPI: false\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\"];\r\n\r\nif (alive _target) exitWith {\r\n\r\n    _target setVariable [QGVAR(pain), 0, true];\r\n    _target setVariable [QGVAR(morphine), 0, true];\r\n    _target setVariable [QGVAR(bloodVolume), 100, true];\r\n\r\n    // tourniquets\r\n    _target setVariable [QGVAR(tourniquets), [0,0,0,0,0,0], true];\r\n\r\n    // wounds and injuries\r\n    _target setVariable [QGVAR(openWounds), [], true];\r\n    _target setVariable [QGVAR(bandagedWounds), [], true];\r\n    _target setVariable [QGVAR(internalWounds), [], true];\r\n\r\n    // vitals\r\n    _target setVariable [QGVAR(heartRate), 80];\r\n    _target setVariable [QGVAR(heartRateAdjustments), []];\r\n    _target setVariable [QGVAR(bloodPressure), [80, 120]];\r\n    _target setVariable [QGVAR(peripheralResistance), 100];\r\n\r\n    // fractures\r\n    _target setVariable [QGVAR(fractures), []];\r\n\r\n    // IVs\r\n    _target setVariable [QGVAR(salineIVVolume), 0];\r\n    _target setVariable [QGVAR(plasmaIVVolume), 0];\r\n    _target setVariable [QGVAR(bloodIVVolume), 0];\r\n\r\n    // damage storage\r\n    _target setVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0], true];\r\n\r\n    // airway\r\n    _target setVariable [QGVAR(airwayStatus), 100, true];\r\n    _target setVariable [QGVAR(airwayOccluded), false, true];\r\n    _target setVariable [QGVAR(airwayCollapsed), false, true];\r\n\r\n    // generic medical admin\r\n    _target setVariable [QGVAR(addedToUnitLoop), false, true];\r\n    _target setVariable [QGVAR(inCardiacArrest), false, true];\r\n    _target setVariable [QGVAR(inReviveState), false, true];\r\n    _target setVariable [\"ACE_isUnconscious\", false, true];\r\n    _target setVariable [QGVAR(hasLostBlood), 0, true];\r\n    _target setVariable [QGVAR(isBleeding), false, true];\r\n    _target setVariable [QGVAR(hasPain), false, true];\r\n    _target setVariable [QGVAR(painSuppress), 0, true];\r\n\r\n    // medication\r\n    private _allUsedMedication = _target getVariable [QGVAR(allUsedMedication), []];\r\n    {\r\n       _target setVariable [_x select 0, nil];\r\n    } forEach _allUsedMedication;\r\n\r\n    // Resetting damage\r\n    _target setDamage 0;\r\n\r\n    [_target, \"activity\", LSTRING(Activity_fullHeal), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n    [_target, \"activity_view\", LSTRING(Activity_fullHeal), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\r\n};\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_fullHealTreatmentTime","file":"medical/functions/fnc_treatmentAdvanced_fullHealTreatmentTime.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the personal aid kit treatment time based on amount of damage to heal\r\n *\r\n * Arguments:\r\n * unit <OBJECT>\r\n *\r\n * Return Value:\r\n * treatment time <NUMBER>\r\n *\r\n * Example:\r\n * [_target] call ace_medical_fnc_treatmentAdvanced_fullHealTreatmentTime\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _totalDamage = 0;\r\n\r\n{\r\n    _totalDamage = _totalDamage + _x;\r\n} forEach (_this getVariable [QGVAR(bodyPartStatus), []]);\r\n\r\n(10 max (_totalDamage * 10) min 120)\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_medication","file":"medical/functions/fnc_treatmentAdvanced_medication.sqf","text":"/*\r\n * Author: Glowbal\r\n * IV Treatment callback\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n * 4: Items Used <ARRAY>\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\r\nTRACE_5(\"params\",_caller,_target,_selectionName,_className,_items);\r\n\r\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\r\n\r\n[QGVAR(treatmentAdvanced_medicationLocal), [_target, _className, _part], [_target]] call CBA_fnc_targetEvent;\r\n\r\n{\r\n    if (_x != \"\") then {\r\n        [_target, _x] call FUNC(addToTriageCard);\r\n        [_target, \"activity\", LSTRING(Activity_usedItem), [[_caller, false, true] call EFUNC(common,getName), getText (configFile >> \"CfgWeapons\" >> _x >> \"displayName\")]] call FUNC(addToLog);\r\n        [_target, \"activity_view\", LSTRING(Activity_usedItem), [[_caller, false, true] call EFUNC(common,getName), getText (configFile >> \"CfgWeapons\" >> _x >> \"displayName\")]] call FUNC(addToLog);\r\n    };\r\n} forEach _items;\r\n\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_medicationLocal","file":"medical/functions/fnc_treatmentAdvanced_medicationLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handles the medication given to a patient.\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: Treatment classname <STRING>\r\n * 2: Injection Site Part Number <NUMBER>\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_className\", \"_partNumber\"];\r\nTRACE_3(\"params\",_target,_className,_partNumber);\r\n\r\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\r\nif ((_tourniquets select _partNumber) > 0) exitWith {\r\n    TRACE_1(\"unit has tourniquets blocking blood flow on injection site\",_tourniquets);\r\n    private _delayedMedications = _target getVariable [QGVAR(occludedMedications), []];\r\n    _delayedMedications pushBack _this;\r\n    _target setVariable [QGVAR(occludedMedications), _delayedMedications, true];\r\n    true\r\n};\r\n\r\n// We have added a new dose of this medication to our system, so let's increase it\r\nprivate _varName = format[QGVAR(%1_inSystem), _className];\r\nprivate _currentInSystem = _target getVariable [_varName, 0];\r\n_target setVariable [_varName, _currentInSystem + 1];\r\n\r\n// Find the proper attributes for the used medication\r\nprivate _medicationConfig = (configFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"Medication\");\r\nprivate _painReduce = getNumber (_medicationConfig >> \"painReduce\");\r\nprivate _hrIncreaseLow = getArray (_medicationConfig >> \"hrIncreaseLow\");\r\nprivate _hrIncreaseNorm = getArray (_medicationConfig >> \"hrIncreaseNormal\");\r\nprivate _hrIncreaseHigh = getArray (_medicationConfig >> \"hrIncreaseHigh\");\r\nprivate _timeInSystem = getNumber (_medicationConfig >> \"timeInSystem\");\r\nprivate _maxDose = getNumber (_medicationConfig >> \"maxDose\");\r\nprivate _viscosityChange = getNumber (_medicationConfig >> \"viscosityChange\");\r\nprivate _hrCallback = getText (_medicationConfig >> \"hrCallback\");\r\n\r\nprivate _inCompatableMedication = [];\r\nif (isClass (_medicationConfig >> _className)) then {\r\n    _medicationConfig = (_medicationConfig >> _className);\r\n    if (isNumber (_medicationConfig >> \"painReduce\")) then { _painReduce = getNumber (_medicationConfig >> \"painReduce\");};\r\n    if (isArray (_medicationConfig >> \"hrIncreaseLow\")) then { _hrIncreaseLow = getArray (_medicationConfig >> \"hrIncreaseLow\"); };\r\n    if (isArray (_medicationConfig >> \"hrIncreaseNormal\")) then { _hrIncreaseNorm = getArray (_medicationConfig >> \"hrIncreaseNormal\"); };\r\n    if (isArray (_medicationConfig >> \"hrIncreaseHigh\")) then { _hrIncreaseHigh = getArray (_medicationConfig >> \"hrIncreaseHigh\"); };\r\n    if (isNumber (_medicationConfig >> \"timeInSystem\")) then { _timeInSystem = getNumber (_medicationConfig >> \"timeInSystem\"); };\r\n    if (isNumber (_medicationConfig >> \"maxDose\")) then { _maxDose = getNumber (_medicationConfig >> \"maxDose\"); };\r\n    if (isArray (_medicationConfig >> \"inCompatableMedication\")) then { _inCompatableMedication = getArray (_medicationConfig >> \"inCompatableMedication\"); };\r\n    if (isNumber (_medicationConfig >> \"viscosityChange\")) then { _viscosityChange = getNumber (_medicationConfig >> \"viscosityChange\"); };\r\n    if (isText (_medicationConfig >> \"hrCallback\")) then { _hrCallback = getText (_medicationConfig >> \"hrCallback\"); };\r\n};\r\nif (isNil _hrCallback) then {\r\n    _hrCallback = compile _hrCallback;\r\n} else {\r\n    _hrCallback = missionNamespace getVariable _hrCallback;\r\n};\r\nif (!(_hrCallback isEqualType {})) then {_hrCallback = {TRACE_1(\"callback was NOT code\",_hrCallback)};};\r\n\r\n// Adjust the heart rate based upon config entry\r\nprivate _heartRate = _target getVariable [QGVAR(heartRate), 70];\r\nif (alive _target) then {\r\n    if (_heartRate > 0) then {\r\n        if (_heartRate <= 45) then {\r\n            [_target, ((_hrIncreaseLow select 0) + random ((_hrIncreaseLow select 1) - (_hrIncreaseLow select 0))), (_hrIncreaseLow select 2), _hrCallback] call FUNC(addHeartRateAdjustment);\r\n        } else {\r\n            if (_heartRate > 120) then {\r\n                [_target, ((_hrIncreaseHigh select 0) + random ((_hrIncreaseHigh select 1) - (_hrIncreaseHigh select 0))), (_hrIncreaseHigh select 2), _hrCallback] call FUNC(addHeartRateAdjustment);\r\n            } else {\r\n                [_target, ((_hrIncreaseNorm select 0) + random ((_hrIncreaseNorm select 1) - (_hrIncreaseNorm select 0))), (_hrIncreaseNorm select 2), _hrCallback] call FUNC(addHeartRateAdjustment);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\nif (_painReduce > 0) then {\r\n    // Reduce pain\r\n    private _painSuppress = _target getVariable [QGVAR(painSuppress), 0];\r\n    _target setVariable [QGVAR(painSuppress), (_painSuppress + _painReduce) max 0];\r\n    if (!GVAR(painIsOnlySuppressed)) then {\r\n        _pain = _target getVariable [QGVAR(pain), 0];\r\n        _target setVariable [QGVAR(pain), (_pain - _painReduce) max 0, true];\r\n    };\r\n};\r\n\r\nprivate _resistance = _target getVariable [QGVAR(peripheralResistance), 100];\r\n_target setVariable [QGVAR(peripheralResistance), (_resistance + _viscosityChange) max 0];\r\n\r\n// Call back to ensure that the medication is decreased over time\r\n[_target, _classname, _varName, _maxDose, _timeInSystem, _inCompatableMedication, _viscosityChange, _painReduce] call FUNC(onMedicationUsage);\r\n\r\ntrue\r\n"},{"name":"ace_medical_fnc_treatmentAdvanced_surgicalKit_onProgress","file":"medical/functions/fnc_treatmentAdvanced_surgicalKit_onProgress.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Handles treatment via surgical kit per frame\r\n *\r\n * Arguments:\r\n * 0: Arguments <ARRAY>\r\n *  0: Caller <OBJECT>\r\n *  1: Target <OBJECT>\r\n * 1: Elapsed Time <NUMBER>\r\n * 2: Total Time <NUMBER>\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n\r\nprivate \"_bandagedWounds\";\r\nparams [\"_args\", \"_elapsedTime\", \"_totalTime\"];\r\n_args params [\"_caller\", \"_target\"];\r\n\r\n_bandagedWounds = _target getVariable [QGVAR(bandagedWounds), []];\r\n\r\n//In case two people stitch up one patient and the last wound has already been closed we can stop already\r\nif (count _bandagedWounds == 0) exitWith { false };\r\n\r\n//Has enough time elapsed that we can close another wound?\r\nif ((_totalTime - _elapsedTime) <= (((count _bandagedWounds) - 1) * 5)) then {\r\n    _bandagedWounds deleteAt 0;\r\n    _target setVariable [QGVAR(bandagedWounds), _bandagedWounds, true];\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_medical_fnc_treatmentBasic_bandage","file":"medical/functions/fnc_treatmentBasic_bandage.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Callback when the bandaging treatment is complete\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: Selection Name <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define BANDAGEHEAL 0.8\r\n\r\nprivate [\"_hitSelections\", \"_hitPoints\", \"_point\", \"_damage\"];\r\nparams [\"_caller\", \"_target\", \"_selection\", \"_className\"];\r\n\r\nif (local _target) then {\r\n    [QGVAR(treatmentBasic_bandageLocal), [_target, _selection]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(treatmentBasic_bandageLocal), [_target, _selection], _target] call CBA_fnc_targetEvent;\r\n};\r\n"},{"name":"ace_medical_fnc_treatmentBasic_bandageLocal","file":"medical/functions/fnc_treatmentBasic_bandageLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handles the bandage of a patient.\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: Treatment classname <STRING>\r\n *\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define BANDAGEHEAL 0.8\r\n\r\nparams [\"_target\", \"_selectionName\"];\r\n\r\nprivate _damageBodyParts = _target getVariable [QGVAR(bodyPartStatus), [0,0,0,0,0,0]];\r\n\r\n// Ensure it is a valid bodypart\r\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\r\nif (_part < 0) exitwith {false};\r\n\r\nif ((_damageBodyParts select _part) > 0) then {\r\n    private _damageOnPart = (_damageBodyParts select _part);\r\n    // Temp quick fix to change in behaviour of basic medical bandaging\r\n    if (_damageOnPart - BANDAGEHEAL > 0) then {\r\n        _damageOnPart = _damageOnPart - (_damageOnPart * BANDAGEHEAL);\r\n    } else {\r\n        _damageOnPart = _damageOnPart - BANDAGEHEAL;\r\n    };\r\n    _damageBodyParts set [_part, _damageOnPart max 0];\r\n    _target setVariable [QGVAR(bodyPartStatus), _damageBodyParts, true];\r\n    TRACE_2(\"ACE_DEBUG: Treatment BASIC Bandage Broadcast value here\",_unit, _target getVariable QGVAR(bodyPartStatus));\r\n};\r\n\r\nEXPLODE_6_PVT(_damageBodyParts,_headDamage,_torsoDamage,_handsDamageR,_handsDamageL,_legsDamageR,_legsDamageL);\r\n_target setHitPointDamage [\"hitHead\", _headDamage min 0.95];\r\n_target setHitPointDamage [\"hitBody\", _torsoDamage min 0.95];\r\n_target setHitPointDamage [\"hitHands\", (_handsDamageR + _handsDamageL) min 0.95];\r\n_target setHitPointDamage [\"hitLegs\", (_legsDamageR + _legsDamageL) min 0.95];\r\n\r\n{\r\n    private _hitPointName = [_target, _x, true] call FUNC(translateSelections);\r\n    _target setHitPointDamage [_hitPointName, (_damageBodyParts select _foreachIndex) min 0.95];\r\n}foreach GVAR(SELECTIONS);\r\n\r\ntrue;\r\n"},{"name":"ace_medical_fnc_treatmentBasic_bloodbag","file":"medical/functions/fnc_treatmentBasic_bloodbag.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Callback when the bloodbag treatment is complete\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: Selection Name <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_treatmentClassname\"];\r\n\r\nif (local _target) then {\r\n    [QGVAR(treatmentBasic_bloodbagLocal), [_target, _treatmentClassname]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(treatmentBasic_bloodbagLocal), [_target, _treatmentClassname], _target] call CBA_fnc_targetEvent;\r\n};\r\n"},{"name":"ace_medical_fnc_treatmentBasic_bloodbagLocal","file":"medical/functions/fnc_treatmentBasic_bloodbagLocal.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Local callback when the bloodbag treatment is complete\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: Treatment Classname <STRING>\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define BLOODBAGHEAL 70\r\n\r\nparams [\"_target\", \"_treatmentClassname\"];\r\n\r\nprivate _bloodAdded = switch (true) do {\r\n    case (_treatmentClassname == \"BloodIV_250\"): {0.25 * BLOODBAGHEAL};\r\n    case (_treatmentClassname == \"BloodIV_500\"): {0.5 * BLOODBAGHEAL};\r\n    default {BLOODBAGHEAL};\r\n};\r\n\r\nprivate _blood = ((_target getVariable [QGVAR(bloodVolume), 100]) + _bloodAdded) min 100;\r\n_target setVariable [QGVAR(bloodVolume), _blood, true];\r\n"},{"name":"ace_medical_fnc_treatmentBasic_epipen","file":"medical/functions/fnc_treatmentBasic_epipen.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Callback when the epipen treatment is complete\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: Selection Name <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\",\"_className\"];\r\n\r\n[_target, false] call FUNC(setUnconscious);\r\n\r\nif (_target getVariable [QGVAR(inReviveState), false]) then {\r\n    _target setVariable [QGVAR(inReviveState), nil, true];\r\n};\r\n"},{"name":"ace_medical_fnc_treatmentBasic_morphine","file":"medical/functions/fnc_treatmentBasic_morphine.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Callback when the morphine treatment is complete\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: Selection Name <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define MORPHINEHEAL 0.4\r\n\r\nparams [\"_caller\", \"_target\"];\r\n\r\nif (local _target) then {\r\n    [QGVAR(treatmentBasic_morphineLocal), [_target]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(treatmentBasic_morphineLocal), [_target], _target] call CBA_fnc_targetEvent;\r\n};\r\n"},{"name":"ace_medical_fnc_treatmentBasic_morphineLocal","file":"medical/functions/fnc_treatmentBasic_morphineLocal.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Local callback when the morphine treatment is complete\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define MORPHINEHEAL 0.4\r\n\r\nparams [\"_target\"];\r\n\r\n// reduce pain, pain sensitivity\r\nprivate _morphine = ((_target getVariable [QGVAR(morphine), 0]) + MORPHINEHEAL) min 1;\r\n_target setVariable [QGVAR(morphine), _morphine, true];\r\n\r\nprivate _pain = ((_target getVariable [QGVAR(pain), 0]) - MORPHINEHEAL) max 0;\r\n_target setVariable [QGVAR(pain), _pain, true];\r\n\r\n// @todo overdose\r\n"},{"name":"ace_medical_fnc_treatmentIV","file":"medical/functions/fnc_treatmentIV.sqf","text":"/*\r\n * Author: Glowbal\r\n * Patient IV Treatment callback\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_removeItem\";\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\r\n\r\nif (count _items == 0) exitWith {false};\r\n\r\n_removeItem = _items select 0;\r\nif (local _target) then {\r\n    [QGVAR(treatmentIVLocal), [_target, _className]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(treatmentIVLocal), [_target, _className], _target] call CBA_fnc_targetEvent;\r\n};\r\n\r\n[_target, _removeItem] call FUNC(addToTriageCard);\r\n[_target, \"activity\", LSTRING(Activity_gaveIV), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n[_target, \"activity_view\", LSTRING(Activity_gaveIV), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\r\n\r\ntrue\r\n"},{"name":"ace_medical_fnc_treatmentIVLocal","file":"medical/functions/fnc_treatmentIVLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * IV Treatment local callback\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: Treatment classname <STRING>\r\n *\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_treatmentClassname\"];\r\n\r\nprivate _bloodVolume = _target getVariable [QGVAR(bloodVolume), 100];\r\nif (_bloodVolume >= 100) exitWith {};\r\n\r\n// Find the proper attributes for the used IV\r\nprivate _config = (configFile >> \"ACE_Medical_Advanced\" >> \"Treatment\" >> \"IV\");\r\nprivate _volumeAdded = getNumber (_config >> \"volume\");\r\nprivate _typeOf = getText (_config >> \"type\");\r\n\r\nif (isClass (_config >> _treatmentClassname)) then {\r\n    _config = (_config >> _treatmentClassname);\r\n    if (isNumber (_config >> \"volume\")) then { _volumeAdded = getNumber (_config >> \"volume\");};\r\n    if (isText (_config >> \"type\")) then { _typeOf = getText (_config >> \"type\"); };\r\n} else {\r\n    ERROR(\"IV Treatment Classname not found\");\r\n};\r\n\r\nprivate _varName = format[\"ACE_Medical_IVVolume_%1\",_typeOf];\r\n_target setVariable [_varName, (_target getVariable [_varName, 0]) + _volumeAdded, true];\r\n\r\nif !(_varName in GVAR(IVBags)) then {\r\n    GVAR(IVBags) pushBack _varName;\r\n    publicVariable QGVAR(IVBags);\r\n};\r\n"},{"name":"ace_medical_fnc_treatmentTourniquet","file":"medical/functions/fnc_treatmentTourniquet.sqf","text":"/*\r\n * Author: Glowbal\r\n * Apply a tourniquet to the patient\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: SelectionName <STRING>\r\n * 3: Treatment classname <STRING>\r\n *\r\n *\r\n * Return Value:\r\n * Succesful treatment started <BOOL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_selectionName\", \"_className\", \"_items\"];\r\n\r\nif (count _items == 0) exitWith {false};\r\n\r\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\r\nif (_part == 0 || _part == 1) exitWith {\r\n    // [QEGVAR(common,displayTextStructured), [\"You cannot apply a CAT on this body part!\"], [_caller]] call CBA_fnc_targetEvent;\r\n    false;\r\n};\r\n\r\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\r\nif ((_tourniquets select _part) > 0) exitWith {\r\n   _output = \"There is already a tourniquet on this body part!\"; // TODO localization\r\n   [QEGVAR(common,displayTextStructured), [_output, 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n    false;\r\n};\r\n\r\nprivate _removeItem = _items select 0;\r\nif (local _target) then {\r\n    [QGVAR(treatmentTourniquetLocal), [_target, _removeItem, _selectionName]] call CBA_fnc_localEvent;\r\n} else {\r\n    [QGVAR(treatmentTourniquetLocal), [_target, _removeItem, _selectionName], _target] call CBA_fnc_targetEvent;\r\n};\r\n\r\n[_target, _removeItem] call FUNC(addToTriageCard);\r\n[_target, \"activity\", LSTRING(Activity_appliedTourniquet), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog);\r\n[_target, \"activity_view\", LSTRING(Activity_appliedTourniquet), [[_caller, false, true] call EFUNC(common,getName)]] call FUNC(addToLog); // TODO expand message\r\n\r\ntrue\r\n"},{"name":"ace_medical_fnc_treatmentTourniquetLocal","file":"medical/functions/fnc_treatmentTourniquetLocal.sqf","text":"/*\r\n * Author: Glowbal\r\n * Apply a tourniquet to the patient, local callback.\r\n *\r\n * Arguments:\r\n * 0: The patient <OBJECT>\r\n * 1: Item used classname <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_tourniquetItem\", \"_selectionName\"];\r\n\r\n//If we're not already tracking vitals, start:\r\n[_target] call FUNC(addVitalLoop);\r\n\r\nprivate _part = [_selectionName] call FUNC(selectionNameToNumber);\r\n\r\n// Place a tourniquet on the bodypart\r\nprivate _tourniquets = _target getVariable [QGVAR(tourniquets), [0,0,0,0,0,0]];\r\n_tourniquets set [_part, CBA_missionTime];\r\n_target setVariable [QGVAR(tourniquets), _tourniquets, true];\r\n"},{"name":"ace_medical_fnc_unconsciousPFH","file":"medical/functions/fnc_unconsciousPFH.sqf","text":"/*\r\n * Author: Glowbal\r\n * PFH logic for unconscious state\r\n *\r\n * Arguments:\r\n * 0: PFEH - Args\r\n *      0: The unit that will be put in an unconscious state <OBJECT>\r\n *      1: unitPos (stance) <STRING>\r\n *      2: Starting Time <NUMBER>\r\n *      3: Minimum Waiting Time <NUMBER>\r\n *      4: Has Moved Out <BOOL>\r\n *      5: Parachute Check <BOOL>\r\n * 1: PFEH ID <NUMBER>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_unit\", \"_minWaitingTime\", \"_slotInfo\", \"_hasMovedOut\", \"_parachuteCheck\", \"_args\", \"_originalPos\", \"_startingTime\", \"_awakeInVehicleAnimation\", \"_oldVehicleAnimation\", \"_vehicle\"];\r\nparams [\"_args\", \"_idPFH\"];\r\n_args params [\"_unit\", \"_originalPos\", \"_startingTime\", \"_minWaitingTime\", \"_hasMovedOut\", \"_parachuteCheck\"];\r\n\r\nTRACE_6(\"ACE_DEBUG_Unconscious_PFH\",_unit, _originalPos, _startingTime, _minWaitingTime, _hasMovedOut, _parachuteCheck);\r\n\r\nif (!alive _unit) exitWith {\r\n    if (\"ACE_FakePrimaryWeapon\" in (weapons _unit)) then {\r\n        TRACE_1(\"Removing fake weapon [on death]\",_unit);\r\n        _unit removeWeapon \"ACE_FakePrimaryWeapon\";\r\n    };\r\n    if (GVAR(moveUnitsFromGroupOnUnconscious)) then {\r\n        [_unit, false, \"ACE_isUnconscious\", side group _unit] call EFUNC(common,switchToGroupSide);\r\n    };\r\n    [_unit, \"setCaptive\", \"ace_unconscious\", false] call EFUNC(common,statusEffect_set);\r\n    [_unit, false] call EFUNC(common,disableAI);\r\n    //_unit setUnitPos _originalPos;\r\n    _unit setUnconscious false;\r\n\r\n    [_unit, \"isUnconscious\"] call EFUNC(common,unmuteUnit);\r\n    [\"ace_unconscious\", [_unit, false]] call CBA_fnc_globalEvent;\r\n\r\n    TRACE_3(\"ACE_DEBUG_Unconscious_Exit\",_unit, (!alive _unit) , \"ace_unconscious\");\r\n\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// In case the unit is no longer in an unconscious state, we are going to check if we can already reset the animation\r\nif !(_unit getVariable [\"ACE_isUnconscious\",false]) exitWith {\r\n    TRACE_7(\"ACE_DEBUG_Unconscious_PFH\",_unit, _args, [_unit] call FUNC(isBeingCarried), [_unit] call FUNC(isBeingDragged), _idPFH, _unit getVariable QGVAR(unconsciousArguments),animationState _unit);\r\n    // TODO, handle this with carry instead, so we can remove the PFH here.\r\n    // Wait until the unit isn't being carried anymore, so we won't end up with wierd animations\r\n    if !(([_unit] call FUNC(isBeingCarried)) || ([_unit] call FUNC(isBeingDragged))) then {\r\n        if (\"ACE_FakePrimaryWeapon\" in (weapons _unit)) then {\r\n            TRACE_1(\"Removing fake weapon [on wakeup]\",_unit);\r\n            _unit removeWeapon \"ACE_FakePrimaryWeapon\";\r\n        };\r\n\r\n        if (vehicle _unit == _unit) then {\r\n            if (animationState _unit == \"AinjPpneMstpSnonWrflDnon\") then {\r\n                [_unit,\"AinjPpneMstpSnonWrflDnon_rolltofront\", 2] call EFUNC(common,doAnimation);\r\n                [_unit,\"amovppnemstpsnonwnondnon\", 1] call EFUNC(common,doAnimation);\r\n            } else {\r\n                [_unit,\"amovppnemstpsnonwnondnon\", 2] call EFUNC(common,doAnimation);\r\n            };\r\n        } else {\r\n            _vehicle = vehicle _unit;\r\n            _oldVehicleAnimation = _unit getVariable [QGVAR(vehicleAwakeAnim), []];\r\n            _awakeInVehicleAnimation = \"\";\r\n            if (((count _oldVehicleAnimation) > 0) && {(_oldVehicleAnimation select 0) == _vehicle}) then {\r\n                _awakeInVehicleAnimation = _oldVehicleAnimation select 1;\r\n            };\r\n            //Make sure we have a valid, non-terminal animation:\r\n            if ((_awakeInVehicleAnimation != \"\") && {(getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> _awakeInVehicleAnimation >> \"terminal\")) == 0}) then {\r\n                [_unit, _awakeInVehicleAnimation, 2] call EFUNC(common,doAnimation);\r\n            } else {\r\n                //Don't have a valid animation saved, reset the unit animation with a moveInXXX\r\n                TRACE_1(\"No Valid Animation, doing seat reset\", _awakeInVehicleAnimation);\r\n                _slotInfo = [];\r\n                {if ((_x select 0) == _unit) exitWith {_slotInfo = _x;};} forEach (fullCrew _vehicle);\r\n                if (_slotInfo isEqualTo []) exitWith {ERROR(\"No _slotInfo?\");};\r\n                //Move the unit out:\r\n                _unit setPosASL ((getPosASL _unit) vectorAdd [0,0,100]);\r\n                //Move the unit back into old seat:\r\n                if ((_slotInfo select 1) == \"driver\") then {\r\n                    _unit moveInDriver _vehicle;\r\n                } else {\r\n                    if ((_slotInfo select 1) == \"cargo\") then {\r\n                        _unit moveInCargo [_vehicle, (_slotInfo select 2)];\r\n                    } else {\r\n                        _unit moveInTurret [_vehicle, (_slotInfo select 3)];\r\n                    };\r\n                };\r\n            };\r\n        };\r\n        _unit setVariable [QGVAR(vehicleAwakeAnim), nil];\r\n\r\n        [\"ace_unconscious\", [_unit, false]] call CBA_fnc_globalEvent;\r\n        // EXIT PFH\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n    if (!_hasMovedOut) then {\r\n        // Reset the unit back to the previous captive state.\r\n        [_unit, \"setCaptive\", \"ace_unconscious\", false] call EFUNC(common,statusEffect_set);\r\n\r\n        // Swhich the unit back to its original group\r\n        //Unconscious units shouldn't be put in another group #527:\r\n        if (GVAR(moveUnitsFromGroupOnUnconscious)) then {\r\n            [_unit, false, \"ACE_isUnconscious\", side group _unit] call EFUNC(common,switchToGroupSide);\r\n        };\r\n        [_unit, false] call EFUNC(common,disableAI);\r\n        _unit setUnitPos _originalPos; // This is not position but stance (DOWN, MIDDLE, UP)\r\n\r\n        _unit setUnconscious false;\r\n\r\n        [_unit, \"isUnconscious\"] call EFUNC(common,unmuteUnit);\r\n\r\n        // ensure this statement runs only once\r\n        _args set [4, true];\r\n    };\r\n};\r\n\r\nif (_parachuteCheck) then {\r\n    if !(vehicle _unit isKindOf \"ParachuteBase\") then {\r\n        [_unit, [_unit] call EFUNC(common,getDeathAnim), 1, true] call EFUNC(common,doAnimation);\r\n        _args set [5, false];\r\n    };\r\n};\r\n\r\nif (!local _unit) exitWith {\r\n    TRACE_6(\"ACE_DEBUG_Unconscious_PFH\",_unit, _args, _startingTime, _minWaitingTime, _idPFH, _unit getVariable QGVAR(unconsciousArguments));\r\n    _args set [3, _minWaitingTime - (CBA_missionTime - _startingTime)];\r\n    _unit setVariable [QGVAR(unconsciousArguments), _args, true];\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n// Ensure we are waiting at least a minimum period before checking if we can wake up the unit again, allows for temp knock outs\r\nif ((CBA_missionTime - _startingTime) >= _minWaitingTime) exitWith {\r\n    TRACE_2(\"ACE_DEBUG_Unconscious_Temp knock outs\",_unit, [_unit] call FUNC(getUnconsciousCondition));\r\n    if (!([_unit] call FUNC(getUnconsciousCondition))) then {\r\n        _unit setVariable [\"ACE_isUnconscious\", false, true];\r\n    };\r\n};\r\n"},{"name":"ace_medical_fnc_useItem","file":"medical/functions/fnc_useItem.sqf","text":"/*\r\n * Author: Glowbal\r\n * Use Equipment if any is available. Priority: 1) Medic, 2) Patient. If in vehicle: 3) Crew\r\n *\r\n * Arguments:\r\n * 0: Medic <OBJECT>\r\n * 1: Patient <OBJECT>\r\n * 2: Item <STRING>\r\n *\r\n * ReturnValue:\r\n * 0: success <BOOL>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_medic\", \"_patient\", \"_item\"];\r\n\r\nif (isNil QGVAR(setting_allowSharedEquipment)) then {\r\n    GVAR(setting_allowSharedEquipment) = true;\r\n};\r\n\r\nif (GVAR(setting_allowSharedEquipment) && {[_patient, _item] call EFUNC(common,hasItem)}) exitWith {\r\n    if (local _patient) then {\r\n        [\"ace_useItem\", [_patient, _item]] call CBA_fnc_localEvent;\r\n    } else {\r\n        [\"ace_useItem\", [_patient, _item], _patient] call CBA_fnc_targetEvent;\r\n    };\r\n    [true, _patient];\r\n};\r\n\r\nif ([_medic, _item] call EFUNC(common,hasItem)) exitWith {\r\n    if (local _medic) then {\r\n        [\"ace_useItem\", [_medic, _item]] call CBA_fnc_localEvent;\r\n    } else {\r\n        [\"ace_useItem\", [_medic, _item], _medic] call CBA_fnc_targetEvent;\r\n    };\r\n    [true, _medic];\r\n};\r\n\r\nprivate _return = [false, objNull];\r\nif ([vehicle _medic] call FUNC(isMedicalVehicle) && {vehicle _medic != _medic}) then {\r\n    private _crew = crew vehicle _medic;\r\n    {\r\n        if ([_medic, _x] call FUNC(canAccessMedicalEquipment) && {([_x, _item] call EFUNC(common,hasItem))}) exitWith {\r\n            _return = [true, _x];\r\n            if (local _x) then {\r\n                [\"ace_useItem\", [_x, _item]] call CBA_fnc_localEvent;\r\n            } else {\r\n                [\"ace_useItem\", [_x, _item], _x] call CBA_fnc_targetEvent;\r\n            };\r\n        };\r\n    } forEach _crew;\r\n};\r\n\r\n_return\r\n"},{"name":"ace_medical_fnc_useItems","file":"medical/functions/fnc_useItems.sqf","text":"/*\r\n * Author: Glowbal\r\n * Use Equipment items if any is available. Priority: 1) Medic, 2) Patient. If in vehicle: 3) Crew\r\n *\r\n * Arguments:\r\n * 0: Medic <OBJECT>\r\n * 1: Patient <OBJECT>\r\n * 2: Items <ARRAY<STRING>>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_medic\", \"_patient\", \"_items\"];\r\n\r\nprivate _itemsUsedBy = [];\r\n{\r\n    // handle a one of type use item\r\n    if (_x isEqualType []) then {\r\n        {\r\n            private _itemUsedInfo = [_medic, _patient, _x] call FUNC(useItem);\r\n            if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushBack [(_itemUsedInfo select 1), _x]};\r\n        } forEach _x;\r\n    };\r\n\r\n    // handle required item\r\n    if (_x isEqualType \"\") then {\r\n        private _itemUsedInfo = [_medic, _patient, _x] call FUNC(useItem);\r\n        if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushBack [(_itemUsedInfo select 1), _x]};\r\n    };\r\n} forEach _items;\r\n\r\n[count _items == count _itemsUsedBy, _itemsUsedBy];\r\n"},{"name":"ace_medical_fnc_vitalLoop","file":"medical/functions/fnc_vitalLoop.sqf","text":"/*\r\n * Author: Glowbal, esteldunedain\r\n * Vital loop for a unit.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Time of last computation <NUMBER>\r\n *\r\n * ReturnValue:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_lastTime\"];\r\n\r\n// If the unit died the loop is finished\r\nif (!alive _unit) exitWith {};\r\n\r\n// If locality changed, broadcast the last medical state and finish the local loop\r\nif (!local _unit) exitWith {\r\n    if (GVAR(level) >= 2) then {\r\n        _unit setVariable [QGVAR(heartRate), _unit getVariable [QGVAR(heartRate), 80], true];\r\n        _unit setVariable [QGVAR(bloodPressure), _unit getVariable [QGVAR(bloodPressure), [80, 120]], true];\r\n    };\r\n    _unit setVariable [QGVAR(bloodVolume), _unit getVariable [QGVAR(bloodVolume), 100], true];\r\n};\r\n\r\n// Handle unit vitals\r\n[_unit, CBA_missionTime - _lastTime] call FUNC(handleUnitVitals);\r\n\r\n// Play injured sounds\r\nprivate _pain = _unit getVariable [QGVAR(pain), 0];\r\nif (_pain > (_unit getVariable [QGVAR(painSuppress), 0])) then {\r\n    // This introduces wierd unconscious behaviour for basic medical and possibly also advanced.\r\n    // TODO This is disabled as it's considered non critical code.\r\n    // We will need to decide if we want unconscious triggered on high pain levels or if we can get rid of this entirely.\r\n    /*if (_pain > 0.7 && {random(1) > 0.6}) then {\r\n        [_unit] call FUNC(setUnconscious);\r\n    };*/\r\n\r\n    [_unit, _pain] call FUNC(playInjuredSound);\r\n};\r\n\r\n// Schedule the loop to be executed again 1 sec later\r\n[DFUNC(vitalLoop), [_unit, CBA_missionTime], 1] call CBA_fnc_waitAndExecute;\r\n"}],"medical_menu":[{"name":"ace_medical_menu_fnc_canOpenMenu","file":"medical_menu/functions/fnc_canOpenMenu.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if ACE_player can Open the medical menu\r\n *\r\n * Arguments:\r\n * 0: Caller <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Can open <BOOL>\r\n *\r\n * Example:\r\n * [player, cursorTarget] call ace_medical_menu_fnc_canOpenMenu\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\"];\r\n\r\n(alive _caller)\r\n&& {!isNull _target}\r\n&& {((_caller distance _target) < GVAR(maxRange)) || {(vehicle _caller) == (vehicle _target)}} //for now, ignore range when in same vehicle\r\n&& {(GVAR(allow) == 1) || {(GVAR(allow) == 2) && {(vehicle _caller != _caller) || {vehicle _target != _target}}}}\r\n&& {(GVAR(useMenu) == 1) || {(GVAR(useMenu) == 2) && {(vehicle _caller != _caller) || {vehicle _target != _target}}}}\r\n"},{"name":"ace_medical_menu_fnc_collectActions","file":"medical_menu/functions/fnc_collectActions.sqf","text":"/*\r\n * Author: Glowbal\r\n * Collect treatment actions from medical config\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_medical_menu_fnc_collectActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _configBasic = (configFile >> \"ACE_Medical_Actions\" >> \"Basic\");\r\nprivate _configAdvanced = (configFile >> \"ACE_Medical_Actions\" >> \"Advanced\");\r\n\r\nprivate _fnc_compileActionsLevel = {\r\n    params [\"_config\"];\r\n    private _actions = [];\r\n\r\n    {\r\n        if (isClass _x) then {\r\n            private _displayName = getText (_x >> \"displayName\");\r\n            private _category = getText (_x >> \"category\");\r\n            private _condition = format[QUOTE([ARR_4(ACE_player, GVAR(INTERACTION_TARGET), EGVAR(medical,SELECTIONS) select GVAR(selectedBodyPart), '%1')] call DEFUNC(medical,canTreatCached)), configName _x];\r\n            private _statement = format[QUOTE([ARR_4(ACE_player, GVAR(INTERACTION_TARGET), EGVAR(medical,SELECTIONS) select GVAR(selectedBodyPart), '%1')] call DEFUNC(medical,treatment)), configName _x];\r\n            _actions pushBack [_displayName, _category, compile _condition, compile _statement];\r\n        };\r\n        nil\r\n    } count (\"true\" configClasses _config);\r\n\r\n    _actions;\r\n};\r\n\r\nGVAR(actionsBasic) = [_configBasic] call _fnc_compileActionsLevel;\r\nGVAR(actionsAdvanced) = [_configAdvanced] call _fnc_compileActionsLevel;\r\n\r\n//Manually add the drag actions, if dragging exists.\r\nif ([\"ace_dragging\"] call EFUNC(common,isModLoaded)) then {\r\n    private _condition = {\r\n        (ACE_player != GVAR(INTERACTION_TARGET)) && {[ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,canDrag)}\r\n    };\r\n    private _statement = {\r\n        GVAR(pendingReopen) = false; //No medical_treatmentSuccess event after drag, so don't want this true\r\n        [ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,startDrag);\r\n    };\r\n    GVAR(actionsBasic) pushBack [localize ELSTRING(dragging,Drag), \"drag\", _condition, _statement];\r\n    GVAR(actionsAdvanced) pushBack [localize ELSTRING(dragging,Drag), \"drag\", _condition, _statement];\r\n\r\n    private _condition = {\r\n        (ACE_player != GVAR(INTERACTION_TARGET)) && {[ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,canCarry)}\r\n    };\r\n    private _statement = {\r\n        GVAR(pendingReopen) = false; //No medical_treatmentSuccess event after drag, so don't want this true\r\n        [ACE_player, GVAR(INTERACTION_TARGET)] call EFUNC(dragging,startCarry);\r\n    };\r\n    GVAR(actionsBasic) pushBack [localize ELSTRING(dragging,Carry), \"drag\", _condition, _statement];\r\n    GVAR(actionsAdvanced) pushBack [localize ELSTRING(dragging,Carry), \"drag\", _condition, _statement];\r\n};\r\n"},{"name":"ace_medical_menu_fnc_getTreatmentOptions","file":"medical_menu/functions/fnc_getTreatmentOptions.sqf","text":"/*\r\n * Author: Glowbal\r\n * Grab available treatment options for given category\r\n *\r\n * Arguments:\r\n * 0: The medic <OBJECT>\r\n * 1: The patient <OBJECT>\r\n * 2: Category name <STRING>\r\n *\r\n * Return Value:\r\n * Available actions <ARRAY>\r\n *\r\n * Exmaple:\r\n * [ACE_player, poor_dude, \"some category\"] call ace_medical_menu_fnc_getTreatmentOptions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\", \"_name\"];\r\n\r\nif (!([ACE_player, _target, [\"isNotInside\"]] call EFUNC(common,canInteractWith))) exitWith {[]};\r\n\r\nprivate _actions = if (EGVAR(medical,level) == 2) then {\r\n    GVAR(actionsAdvanced);\r\n} else {\r\n    GVAR(actionsBasic);\r\n};\r\n\r\nprivate _collectedActions = [];\r\nprivate _bodyPart = EGVAR(medical,SELECTIONS) select GVAR(selectedBodyPart);\r\n{\r\n    _x params [\"\", \"_currentCategory\", \"_currentCondition\"];\r\n    if (_name == _currentCategory && {call _currentCondition}) then {\r\n        _collectedActions pushBack _x;\r\n    };\r\n    nil\r\n} count _actions;\r\n\r\n_collectedActions;\r\n"},{"name":"ace_medical_menu_fnc_handleUI_DisplayOptions","file":"medical_menu/functions/fnc_handleUI_DisplayOptions.sqf","text":"/*\r\n * Author: Glowbal\r\n * Display the available treatment options in category\r\n *\r\n * Arguments:\r\n * 0: Category name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"some category\"] call ace_medical_menu_fnc_handleUI_DisplayOptions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define START_IDC 20\r\n#define END_IDC 27\r\n#define AMOUNT_OF_ENTRIES (count _entries)\r\n\r\nif (!hasInterface) exitWith{};\r\n\r\nprivate [\"_entries\", \"_display\", \"_newTarget\", \"_ctrl\", \"_code\"];\r\n\r\nparams [\"_name\"];\r\n\r\ndisableSerialization;\r\n\r\n_display = uiNamespace getVariable QGVAR(medicalMenu);\r\nif (isNil \"_display\") exitWith {}; // no valid dialog present\r\n\r\nif (_name isEqualTo \"toggle\") exitWith {\r\n    _newTarget = ACE_player;\r\n    //If we are on the player, and only if our old target is still valid, switch to it:\r\n    if ((GVAR(INTERACTION_TARGET) == ACE_player) &&\r\n            {[ACE_player, GVAR(INTERACTION_TARGET_PREVIOUS), [\"isNotInside\"]] call EFUNC(common,canInteractWith)} &&\r\n            {[ACE_player, GVAR(INTERACTION_TARGET_PREVIOUS)] call FUNC(canOpenMenu)}) then {\r\n        _newTarget = GVAR(INTERACTION_TARGET_PREVIOUS);\r\n    };\r\n\r\n    GVAR(INTERACTION_TARGET_PREVIOUS) = GVAR(INTERACTION_TARGET);\r\n\r\n    closeDialog 0;\r\n    [{\r\n        [_this select 0] call FUNC(openMenu);\r\n    }, [_newTarget], 0.1] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n// Clean the dropdown options list from all actions\r\nfor [{_x = START_IDC}, {_x <= END_IDC}, {_x = _x + 1}] do {\r\n    _ctrl = (_display displayCtrl (_x));\r\n    _ctrl ctrlSetText \"\";\r\n    _ctrl ctrlShow false;\r\n    _ctrl ctrlSetEventHandler [\"ButtonClick\",\"\"];\r\n    _ctrl ctrlSetTooltip \"\";\r\n    _ctrl ctrlCommit 0;\r\n};\r\n\r\nGVAR(LatestDisplayOptionMenu) = _name;\r\n\r\n// The triage card has no options available\r\nlbClear 212;\r\nif (_name isEqualTo \"triage\") exitWith {\r\n\r\n    ctrlEnable [212, true];\r\n    private [\"_log\", \"_triageCardTexts\", \"_message\"];\r\n    _log = GVAR(INTERACTION_TARGET) getVariable [QEGVAR(medical,triageCard), []];\r\n    _triageCardTexts = [];\r\n    {\r\n        _x params [\"_item\", \"_amount\", \"_time\"];\r\n        _message = _item;\r\n        if (isClass(configFile >> \"CfgWeapons\" >> _item)) then {\r\n            _message = getText(configFile >> \"CfgWeapons\" >> _item >> \"DisplayName\");\r\n        } else {\r\n            if (isLocalized _message) then {\r\n                _message = localize _message;\r\n            };\r\n        };\r\n        _triageCardTexts pushBack format[\"%1x - %2 (%3m)\", _amount, _message, round((CBA_missionTime - _time) / 60)];\r\n        nil;\r\n    } count _log;\r\n\r\n    if (count _triageCardTexts == 0) exitWith {\r\n        lbAdd [212,(localize ELSTRING(medical,TriageCard_NoEntry))];\r\n    };\r\n    {\r\n        lbAdd [212,_x];\r\n        nil;\r\n    }count _triageCardTexts;\r\n};\r\n\r\nctrlEnable [212, false];\r\n\r\n_entries = [ACE_player, GVAR(INTERACTION_TARGET), _name] call FUNC(getTreatmentOptions);\r\n\r\n{\r\n    //player sidechat format[\"TRIGGERED: %1\",_x];\r\n    if (_forEachIndex > END_IDC) exitWith {};\r\n    _ctrl = (_display displayCtrl (START_IDC + _forEachIndex));\r\n    if (!(_forEachIndex > AMOUNT_OF_ENTRIES)) then {\r\n        _ctrl ctrlSetText (_x select 0);\r\n        _code = format [\"ace_medical_menu_pendingReopen = true; call %1;\", (_x select 3)];\r\n        _ctrl ctrlSetEventHandler [\"ButtonClick\", _code];\r\n        _ctrl ctrlSetTooltip (_x select 0); // TODO implement\r\n        _ctrl ctrlShow true;\r\n    } else {\r\n        _ctrl ctrlSetText \"\";\r\n        _ctrl ctrlSetEventHandler [\"ButtonClick\", \"\"];\r\n    };\r\n    _ctrl ctrlCommit 0;\r\n} forEach _entries;\r\n"},{"name":"ace_medical_menu_fnc_handleUI_dropDownTriageCard","file":"medical_menu/functions/fnc_handleUI_dropDownTriageCard.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handle the triage card display\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_medical_menu_fnc_handleUI_dropDownTriageCard\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nprivate _display = uiNamespace getVariable QGVAR(medicalMenu);\r\nprivate _pos = [0, 0, 0, 0];\r\nprivate _currentPos = ctrlPosition (_display displayCtrl 2002);\r\n_currentPos params [\"_currentPosX\", \"_currentPosY\"];\r\nif (_currentPosX == 0 && _currentPosY == 0) then {\r\n    _pos = ctrlPosition (_display displayCtrl 2001);\r\n};\r\n\r\nfor \"_idc\" from 2002 to 2006 step 1 do {\r\n    _pos set [1, (_pos select 1) + (_pos select 3)];\r\n    private _ctrl = _display displayCtrl _idc;\r\n    _ctrl ctrlSetPosition _pos;\r\n    _ctrl ctrlCommit 0;\r\n};\r\n"},{"name":"ace_medical_menu_fnc_module","file":"medical_menu/functions/fnc_module.sqf","text":"/*\r\n * Author: Glowbal\r\n * Module for adjusting the medical menu settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(allow), \"allow\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_medical_menu_fnc_onMenuClose","file":"medical_menu/functions/fnc_onMenuClose.sqf","text":"/*\r\n * Author: joko // Jonas\r\n * Handle medical menu closed\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_medical_menu_fnc_onMenuClosed\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (EGVAR(interact_menu,menuBackground)==1) then {[QGVAR(id), false] call EFUNC(common,blurScreen);};\r\nif (EGVAR(interact_menu,menuBackground)==2) then {(uiNamespace getVariable [QEGVAR(interact_menu,menuBackground), displayNull]) closeDisplay 0;};\r\n\r\n[GVAR(MenuPFHID)] call CBA_fnc_removePerFrameHandler;\r\nGVAR(MenuPFHID) = -1;\r\n"},{"name":"ace_medical_menu_fnc_onMenuOpen","file":"medical_menu/functions/fnc_onMenuOpen.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handle medical menu opened\r\n *\r\n * Arguments:\r\n * 0: Medical Menu display <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [medical_menu] call ace_medical_menu_fnc_onMenuOpen\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n#define MAX_DISTANCE 10\r\n\r\nparams [\"_display\"];\r\n\r\nif (isNil \"_display\") exitWith {};\r\n\r\nif (EGVAR(interact_menu,menuBackground)==1) then {[QGVAR(id), true] call EFUNC(common,blurScreen);};\r\nif (EGVAR(interact_menu,menuBackground)==2) then {0 cutRsc[QEGVAR(interact_menu,menuBackground), \"PLAIN\", 1, false];};\r\n\r\nif (isNil QGVAR(LatestDisplayOptionMenu)) then {\r\n    GVAR(LatestDisplayOptionMenu) = \"triage\";\r\n} else {\r\n    if (GVAR(LatestDisplayOptionMenu) == \"toggle\") then {\r\n        GVAR(LatestDisplayOptionMenu) = \"triage\";\r\n        GVAR(INTERACTION_TARGET) = GVAR(INTERACTION_TARGET_PREVIOUS);\r\n    };\r\n};\r\n\r\nprivate _target = GVAR(INTERACTION_TARGET);\r\nif (isNil QGVAR(INTERACTION_TARGET_PREVIOUS)) then {\r\n    GVAR(INTERACTION_TARGET_PREVIOUS) = _target;\r\n};\r\n[GVAR(LatestDisplayOptionMenu)] call FUNC(handleUI_DisplayOptions);\r\n\r\ndisableSerialization;\r\n\r\n[_target, _display] call FUNC(updateUIInfo);\r\n\r\n(_display displayCtrl 11) ctrlSetTooltip localize LSTRING(VIEW_TRIAGE_CARD);\r\n(_display displayCtrl 12) ctrlSetTooltip localize LSTRING(EXAMINE_PATIENT);\r\n(_display displayCtrl 13) ctrlSetTooltip localize LSTRING(BANDAGE_FRACTURES);\r\n(_display displayCtrl 14) ctrlSetTooltip localize LSTRING(MEDICATION);\r\n(_display displayCtrl 15) ctrlSetTooltip localize LSTRING(AIRWAY_MANAGEMENT);\r\n(_display displayCtrl 16) ctrlSetTooltip localize LSTRING(ADVANCED_TREATMENT);\r\n(_display displayCtrl 17) ctrlSetTooltip localize LSTRING(DRAG_CARRY);\r\n(_display displayCtrl 18) ctrlSetTooltip localize LSTRING(TOGGLE_SELF);\r\n\r\n(_display displayCtrl 301) ctrlSetTooltip localize LSTRING(SELECT_HEAD);\r\n(_display displayCtrl 302) ctrlSetTooltip localize LSTRING(SELECT_TORSO);\r\n(_display displayCtrl 303) ctrlSetTooltip localize LSTRING(SELECT_ARM_R);\r\n(_display displayCtrl 304) ctrlSetTooltip localize LSTRING(SELECT_ARM_L);\r\n(_display displayCtrl 305) ctrlSetTooltip localize LSTRING(SELECT_LEG_R);\r\n(_display displayCtrl 306) ctrlSetTooltip localize LSTRING(SELECT_LEG_L);\r\n(_display displayCtrl 2001) ctrlSetTooltip localize LSTRING(SELECT_TRIAGE_STATUS);\r\n\r\n(_display displayCtrl 1) ctrlSetText format [\"%1\", [_target] call EFUNC(common,getName)];\r\nsetMousePosition [0.4, 0.4];\r\n\r\nif (GVAR(MenuPFHID) != -1) exitWith {ERROR(\"PFID already running\");};\r\n\r\nGVAR(MenuPFHID) = [{\r\n\r\n    (_this select 0) params [\"_display\"];\r\n    if (isNull GVAR(INTERACTION_TARGET)) then {\r\n        GVAR(INTERACTION_TARGET) = ACE_player;\r\n    };\r\n    [GVAR(INTERACTION_TARGET), _display] call FUNC(updateUIInfo);\r\n    [GVAR(INTERACTION_TARGET)] call FUNC(updateIcons);\r\n    [GVAR(LatestDisplayOptionMenu)] call FUNC(handleUI_DisplayOptions);\r\n\r\n    //Check that it's valid to stay open:\r\n    if !(([ACE_player, GVAR(INTERACTION_TARGET), [\"isNotInside\"]] call EFUNC(common,canInteractWith)) && {[ACE_player, GVAR(INTERACTION_TARGET)] call FUNC(canOpenMenu)}) then {\r\n        closeDialog 314412;\r\n        //If we failed because of distance check, show UI message:\r\n        if ((ACE_player distance GVAR(INTERACTION_TARGET)) > GVAR(maxRange)) then {\r\n            [[ELSTRING(medical,DistanceToFar), [GVAR(INTERACTION_TARGET)] call EFUNC(common,getName)], 2] call EFUNC(common,displayTextStructured);\r\n        };\r\n    };\r\n\r\n}, 0, [_display]] call CBA_fnc_addPerFrameHandler;\r\n\r\n[\"ace_medicalMenuOpened\", [ACE_player, _target]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_medical_menu_fnc_openMenu","file":"medical_menu/functions/fnc_openMenu.sqf","text":"/*\r\n * Author: Glowbal\r\n * Open the medical menu for target\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * If action was taken <BOOL>\r\n *\r\n * Example:\r\n * [some_player] call ace_medical_menu_fnc_openMenu\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_interactionTarget\"];\r\n\r\nif (dialog || {isNull _interactionTarget}) exitWith {\r\n    disableSerialization;\r\n\r\n    private _display = uiNamespace getVariable QGVAR(medicalMenu);\r\n    if (!isNil \"_display\") then {\r\n        closeDialog 314412;\r\n    };\r\n};\r\n\r\nGVAR(INTERACTION_TARGET) = _interactionTarget;\r\n\r\ncreateDialog QGVAR(medicalMenu);\r\nGVAR(lastOpenedOn) = CBA_missionTime;\r\n\r\ntrue\r\n"},{"name":"ace_medical_menu_fnc_setTriageStatus","file":"medical_menu/functions/fnc_setTriageStatus.sqf","text":"/*\r\n * Author: Glowbal\r\n * Set the triage status of object\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Status <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_status\"];\r\n\r\n_target setVariable [QEGVAR(medical,triageLevel), _status, true];\r\n"},{"name":"ace_medical_menu_fnc_updateActivityLog","file":"medical_menu/functions/fnc_updateActivityLog.sqf","text":"/*\r\n * Author: Glowbal\r\n * Update the activity log\r\n *\r\n * Arguments:\r\n * 0: display <DISPLAY>\r\n * 1: log collection <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [some_display, log] call ace_medical_menu_fnc_updateActivityLog\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\", \"_logs\"];\r\n\r\nprivate _logCtrl = _display displayCtrl 214;\r\nlbClear _logCtrl;\r\n\r\n{\r\n    _x params [\"_message\", \"_moment\", \"\", \"_arguments\"];\r\n\r\n    if (isLocalized _message) then {\r\n        _message = localize _message;\r\n    };\r\n\r\n    {\r\n        if (_x isEqualType \"\" && {isLocalized _x}) then {\r\n            _arguments set [_foreachIndex, localize _x];\r\n        };\r\n    } forEach _arguments;\r\n\r\n    _message = format ([_message] + _arguments);\r\n    _logCtrl lbAdd format [\"%1 %2\", _moment, _message];\r\n    nil\r\n} count _logs;\r\n"},{"name":"ace_medical_menu_fnc_updateBodyImage","file":"medical_menu/functions/fnc_updateBodyImage.sqf","text":"/*\r\n * Author: Glowbal\r\n * Update the body image on the menu\r\n *\r\n * Arguments:\r\n * 0: selection bloodloss <ARRAY>\r\n * 1: damaged (array of bools) <ARRAY>\r\n * 2: display <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [0.3, some_display] call ace_medical_menu_fnc_updateBodyImage\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_selectionBloodLoss\", \"_damaged\", \"_display\"];\r\n\r\n// Handle the body image coloring\r\nprivate _availableSelections = [50, 51, 52, 53, 54, 55];\r\n{\r\n    private _red = 1;\r\n    private _green = 1;\r\n    private _blue = 1;\r\n\r\n    if (_x > 0) then {\r\n        if (_damaged select _forEachIndex) then {\r\n            _green = (0.9 - _x) max 0;\r\n            _blue = _green;\r\n        } else {\r\n            _green = (0.9 - _x) max 0;\r\n            _red = _green;\r\n            //_blue = _green;\r\n        };\r\n    };\r\n\r\n    (_display displayCtrl (_availableSelections select _forEachIndex)) ctrlSetTextColor [_red, _green, _blue, 1.0];\r\n} forEach _selectionBloodLoss;\r\n"},{"name":"ace_medical_menu_fnc_updateIcons","file":"medical_menu/functions/fnc_updateIcons.sqf","text":"/*\r\n * Author: Glowbal\r\n * Update the category icons\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_medical_menu_fnc_updateIcons\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define START_IDC 111\r\n#define END_IDC 118\r\n\r\ndisableSerialization;\r\n\r\nprivate _display = uiNamespace getVariable QGVAR(medicalMenu);\r\nprivate _options = [\"triage\" , \"examine\", \"bandage\", \"medication\", \"airway\", \"advanced\", \"drag\", \"toggle\"];\r\n\r\nfor \"_idc\" from START_IDC to END_IDC step 1 do {\r\n    private _amount = [ACE_player, GVAR(INTERACTION_TARGET), _options select (_idc - START_IDC)] call FUNC(getTreatmentOptions);\r\n    if ((count _amount) > 0 || _idc == START_IDC || _idc == END_IDC) then {\r\n        (_display displayCtrl _idc) ctrlSettextColor [1, 1, 1, 1];\r\n    } else {\r\n        (_display displayCtrl _idc) ctrlSettextColor [0.4, 0.4, 0.4, 1];\r\n    };\r\n};\r\n"},{"name":"ace_medical_menu_fnc_updateInformationLists","file":"medical_menu/functions/fnc_updateInformationLists.sqf","text":"/*\r\n * Author: Glowbal\r\n * Update the treatment information list\r\n *\r\n * Arguments:\r\n * 0: display <DISPLAY>\r\n * 1: message collection <ARRAY>\r\n * 2: injury collection <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\", \"_genericMessages\", \"_allInjuryTexts\"];\r\n\r\nprivate _lbCtrl = _display displayCtrl 213;\r\nlbClear _lbCtrl;\r\n{\r\n    _x params [\"_add\", \"_color\"];\r\n    _lbCtrl lbAdd _add;\r\n    _lbCtrl lbSetColor [_forEachIndex, _color];\r\n} forEach _genericMessages;\r\n\r\nprivate _amountOfGeneric = count _genericMessages;\r\n{\r\n    _x params [\"_add\", \"_color\"];\r\n    _lbCtrl lbAdd _add;\r\n    _lbCtrl lbSetColor [_forEachIndex + _amountOfGeneric, _color];\r\n} forEach _allInjuryTexts;\r\n\r\nif (_allInjuryTexts isEqualTo []) then {\r\n    _lbCtrl lbAdd localize ELSTRING(medical,NoInjuriesBodypart);\r\n};\r\n"},{"name":"ace_medical_menu_fnc_updateQuickViewLog","file":"medical_menu/functions/fnc_updateQuickViewLog.sqf","text":"/*\r\n * Author: Glowbal\r\n * Update the quick view log\r\n *\r\n * Arguments:\r\n * 0: display <DISPLAY>\r\n * 1: log collection <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [some_display, log] call ace_medical_menu_fnc_updateQuickViewLog\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\", \"_logs\"];\r\n\r\nprivate _logCtrl = _display displayCtrl 215;\r\nlbClear _logCtrl;\r\n\r\n{\r\n    _x params [\"_message\", \"_moment\", \"\", \"_arguments\"];\r\n\r\n    {\r\n        if (_x isEqualType \"\" && {isLocalized _x}) then {\r\n            _arguments set [_foreachIndex, localize _x];\r\n        };\r\n    } forEach _arguments;\r\n\r\n    _message = format ([([_message, localize _message] select (isLocalized _message))] + _arguments);\r\n    _logCtrl lbAdd format [\"%1 %2\", _moment, _message];\r\n    nil\r\n} count _logs;\r\n"},{"name":"ace_medical_menu_fnc_updateUIInfo","file":"medical_menu/functions/fnc_updateUIInfo.sqf","text":"/*\r\n * Author: Glowbal\r\n * Update all UI information in the medical menu\r\n *\r\n * Arguments:\r\n * 0: target <OBJECT>\r\n * 1: display <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [some_player, some_display] call ace_medical_menu_fnc_updateUIInfo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_display\"];\r\n\r\nprivate[\"_allInjuryTexts\", \"_bandagedwounds\", \"_damaged\", \"_genericMessages\", \"_logs\", \"_openWounds\", \"_part\", \"_partText\", \"_pointDamage\", \"_selectionBloodLoss\", \"_selectionN\", \"_severity\", \"_totalIvVolume\", \"_triageStatus\"];\r\n\r\nif (isNil \"_display\" || {isNull _display}) exitWith {ERROR(\"No display\");};\r\n\r\n_selectionN = GVAR(selectedBodyPart);\r\nif (_selectionN < 0 || {_selectionN > 5}) exitWith {};\r\n\r\n_genericMessages = [];\r\n_partText = [ELSTRING(medical,Head), ELSTRING(medical,Torso), ELSTRING(medical,LeftArm) ,ELSTRING(medical,RightArm) ,ELSTRING(medical,LeftLeg), ELSTRING(medical,RightLeg)] select _selectionN;\r\n_genericMessages pushBack [localize _partText, [1, 1, 1, 1]];\r\n\r\nif (_target getVariable [QEGVAR(medical,isBleeding), false]) then {\r\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Bleeding), [1, 0.1, 0.1, 1]];\r\n};\r\n\r\nif (_target getVariable [QEGVAR(medical,hasLostBlood), 0] > 1) then {\r\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Lost_Blood), [1, 0.1, 0.1, 1]];\r\n};\r\n\r\nif (((_target getVariable [QEGVAR(medical,tourniquets), [0, 0, 0, 0, 0, 0]]) select _selectionN) > 0) then {\r\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Tourniquet_Applied), [0.77, 0.51, 0.08, 1]];\r\n};\r\n\r\nif (_target getVariable [QEGVAR(medical,hasPain), false]) then {\r\n    _genericMessages pushBack [localize ELSTRING(medical,Status_Pain), [1, 1, 1, 1]];\r\n};\r\n\r\n_totalIvVolume = 0;\r\n{\r\n    private \"_value\";\r\n    _value = _target getVariable _x;\r\n    if (!isNil \"_value\") then {\r\n        _totalIvVolume = _totalIvVolume + (_target getVariable [_x, 0]);\r\n    };\r\n} count EGVAR(medical,IVBags);\r\n\r\nif (_totalIvVolume >= 1) then {\r\n    _genericMessages pushBack [format [localize ELSTRING(medical,receivingIvVolume), floor _totalIvVolume], [1, 1, 1, 1]];\r\n};\r\n\r\n_damaged = [false, false, false, false, false, false];\r\n_selectionBloodLoss = [0, 0, 0, 0, 0, 0];\r\n\r\n_allInjuryTexts = [];\r\nif ((EGVAR(medical,level) >= 2) && {([_target] call EFUNC(medical,hasMedicalEnabled))}) then {\r\n    _openWounds = _target getVariable [QEGVAR(medical,openWounds), []];\r\n    private \"_amountOf\";\r\n    {\r\n        _amountOf = _x select 3;\r\n        // Find how much this bodypart is bleeding\r\n        if (_amountOf > 0) then {\r\n            _damaged set [_x select 2, true];\r\n            _selectionBloodLoss set [_x select 2, (_selectionBloodLoss select (_x select 2)) + (20 * ((_x select 4) * _amountOf))];\r\n\r\n            if (_selectionN == (_x select 2)) then {\r\n            // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\r\n                if (_amountOf >= 1) then {\r\n                    // TODO localization\r\n                    _allInjuryTexts pushBack [format[\"%2x %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6, ceil _amountOf], [1,1,1,1]];\r\n                } else {\r\n                    // TODO localization\r\n                    _allInjuryTexts pushBack [format[\"Partial %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6], [1,1,1,1]];\r\n                };\r\n            };\r\n        };\r\n    } forEach _openWounds;\r\n\r\n    _bandagedwounds = _target getVariable [QEGVAR(medical,bandagedWounds), []];\r\n    {\r\n        _amountOf = _x select 3;\r\n        // Find how much this bodypart is bleeding\r\n        if !(_damaged select (_x select 2)) then {\r\n            _selectionBloodLoss set [_x select 2, (_selectionBloodLoss select (_x select 2)) + (20 * ((_x select 4) * _amountOf))];\r\n        };\r\n        if (_selectionN == (_x select 2)) then {\r\n            // Collect the text to be displayed for this injury [ Select injury class type definition - select the classname DisplayName (6th), amount of injuries for this]\r\n            if (_amountOf > 0) then {\r\n                if (_amountOf >= 1) then {\r\n                    // TODO localization\r\n                    _allInjuryTexts pushBack [format [\"[B] %2x %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6, ceil _amountOf], [0.88,0.7,0.65,1]];\r\n                } else {\r\n                    // TODO localization\r\n                    _allInjuryTexts pushBack [format [\"[B] Partial %1\", (EGVAR(medical,AllWoundInjuryTypes) select (_x select 1)) select 6], [0.88,0.7,0.65,1]];\r\n                };\r\n            };\r\n        };\r\n    } forEach _bandagedwounds;\r\n} else {\r\n    _damaged = [true, true, true, true, true, true];\r\n\r\n    {\r\n        _selectionBloodLoss set [_forEachIndex, _x];\r\n\r\n        if ((_x > 0) && {_forEachIndex == _selectionN}) then {\r\n            _pointDamage = _x;\r\n            _severity = switch (true) do {\r\n                case (_pointDamage > 0.5): {localize ELSTRING(medical,HeavilyWounded)};\r\n                case (_pointDamage > 0.1): {localize ELSTRING(medical,LightlyWounded)};\r\n                default                    {localize ELSTRING(medical,VeryLightlyWounded)};\r\n            };\r\n            _part = localize ([\r\n                ELSTRING(medical,Head),\r\n                ELSTRING(medical,Torso),\r\n                ELSTRING(medical,LeftArm),\r\n                ELSTRING(medical,RightArm),\r\n                ELSTRING(medical,LeftLeg),\r\n                ELSTRING(medical,RightLeg)\r\n            ] select _forEachIndex);\r\n            _allInjuryTexts pushBack [format [\"%1 %2\", _severity, toLower _part], [1,1,1,1]];\r\n        };\r\n    } forEach (_target getVariable [QEGVAR(medical,bodyPartStatus), [0,0,0,0,0,0]]);\r\n};\r\n\r\n[_selectionBloodLoss, _damaged, _display] call FUNC(updateBodyImage);\r\n[_display, _genericMessages, _allInjuryTexts] call FUNC(updateInformationLists);\r\n\r\n_logs = _target getVariable [QEGVAR(medical,logFile_activity_view), []];\r\n[_display, _logs] call FUNC(updateActivityLog);\r\n\r\n_logs = _target getVariable [QEGVAR(medical,logFile_quick_view), []];\r\n[_display, _logs] call FUNC(updateQuickViewLog);\r\n\r\n_triageStatus = [_target] call EFUNC(medical,getTriageStatus);\r\n(_display displayCtrl 2000) ctrlSetText (_triageStatus select 0);\r\n(_display displayCtrl 2000) ctrlSetBackgroundColor (_triageStatus select 2);\r\n"}],"microdagr":[{"name":"ace_microdagr_fnc_appMarkKeypadEntry","file":"microdagr/functions/fnc_appMarkKeypadEntry.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles the keypad entries from the \"Mark\" Application\r\n *\r\n * Arguments:\r\n * 0: String version of Keypad entry [\"ok\",\"del\",\"1\",...] <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"ok\"] call ace_microdagr_fnc_appMarkKeypadEntry\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_display\", \"_editText\", \"_actualPos\"];\r\n\r\nparams [\"_keypadButton\"];\r\n\r\ndisableSerialization;\r\n_display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\r\n\r\nif (isNull _display) exitWith {ERROR(\"No Display\");};\r\n\r\nif (GVAR(currentApplicationPage) != APP_MODE_MARK) exitWith {};\r\n\r\n_editText = ctrlText (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\r\n\r\nswitch (_keypadButton) do {\r\ncase (\"ok\"): {\r\n        if ((count GVAR(newWaypointPosition)) == 0) then {\r\n            _actualPos = [_editText, true] call EFUNC(common,getMapPosFromGrid);\r\n            _actualPos set [2, (getTerrainHeightASL _actualPos)];\r\n            GVAR(newWaypointPosition) = _actualPos;\r\n            [APP_MODE_MARK] call FUNC(saveCurrentAndSetNewMode);\r\n        } else {\r\n            [_editText, GVAR(newWaypointPosition)] call FUNC(deviceAddWaypoint);\r\n            [APP_MODE_WAYPOINTS] call FUNC(saveCurrentAndSetNewMode);\r\n        };\r\n    };\r\ncase (\"del\"): {\r\n        _editText = _editText select [0, (((count _editText) - 1) max 0)];\r\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText _editText;\r\n        ctrlSetFocus (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\r\n    };\r\n    default {\r\n        _editText = _editText + _keypadButton;\r\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText _editText;\r\n        ctrlSetFocus (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\r\n    };\r\n};\r\n"},{"name":"ace_microdagr_fnc_appMenuButtonConnectRangefinder","file":"microdagr/functions/fnc_appMenuButtonConnectRangefinder.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles the \"Connect To\" button from the menu application\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_microdagr_fnc_appMenuButtonConnectRangefinder\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(currentWaypoint) = [-2, -1] select (GVAR(currentWaypoint) == -2);\r\nGVAR(rangeFinderPositionASL) = [];\r\n[APP_MODE_INFODISPLAY] call FUNC(saveCurrentAndSetNewMode);\r\n"},{"name":"ace_microdagr_fnc_appSettingsLBClick","file":"microdagr/functions/fnc_appSettingsLBClick.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles double clicking on the setting listbox\r\n *\r\n * Arguments:\r\n * 0: Setting List box (not used) <CONTROL>\r\n * 1: Index <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [settingList, 1] call ace_microdagr_fnc_appSettingsLBClick\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\nparams [\"\", \"_itemClicked\"];\r\n\r\nswitch (_itemClicked) do {\r\n    case (0): { GVAR(settingUseMils) = ! GVAR(settingUseMils)};\r\n    case (1): { GVAR(settingShowAllWaypointsOnMap) = ! GVAR(settingShowAllWaypointsOnMap)};\r\n};\r\n\r\n[] call FUNC(updateDisplay);\r\n"},{"name":"ace_microdagr_fnc_appWaypointsButtonDeleteWP","file":"microdagr/functions/fnc_appWaypointsButtonDeleteWP.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles clicking the delete button from the waypoint application\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_microdagr_fnc_appWaypointsButtonDeleteWP\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_display\", \"_wpIndex\"];\r\n\r\ndisableSerialization;\r\n_display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\r\n\r\nif (isNull _display) exitWith {ERROR(\"No Display\");};\r\n\r\n_wpIndex = lbCurSel (_display displayCtrl IDC_MODEWAYPOINTS_LISTOFWAYPOINTS);\r\n\r\n//If it's our currentWP then deactivate\r\nif (GVAR(currentWaypoint) == _wpIndex) then {GVAR(currentWaypoint) = -1};\r\n\r\n//Delete from list:\r\n[_wpIndex] call FUNC(deviceDeleteWaypoint);\r\n//Update list now:\r\n[] call FUNC(updateDisplay);\r\n"},{"name":"ace_microdagr_fnc_appWaypointsButtonSetWP","file":"microdagr/functions/fnc_appWaypointsButtonSetWP.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles clicking the setWP button from the waypoint application\r\n *\r\n * Arguments:\r\n * The \"SetWP\" button <CONTROL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [1234] call ace_microdagr_fnc_appWaypointsButtonSetWP\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_wpListBox\", \"_newWpIndex\", \"_waypoints\"];\r\n\r\ndisableSerialization;\r\nparams [\"_wpButton\"];\r\n\r\n_wpListBox = (ctrlParent _wpButton) displayCtrl 144501;\r\n_newWpIndex = lbCurSel _wpListBox;\r\n_waypoints = [] call FUNC(deviceGetWaypoints);\r\n\r\nif ((_newWpIndex < 0) || (_newWpIndex > ((count _waypoints) - 1))) exitWith {\r\n    GVAR(currentWaypoint) = -1;\r\n};\r\n\r\nGVAR(currentWaypoint) = _newWpIndex;\r\n[APP_MODE_COMPASS] call FUNC(saveCurrentAndSetNewMode);\r\n"},{"name":"ace_microdagr_fnc_canShow","file":"microdagr/functions/fnc_canShow.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Tests if the dagr can be shown in a mode\r\n *\r\n * Arguments:\r\n * The display mode to test showing <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [1] call ace_microdagr_fnc_canShow\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\"_showType\"];\r\n\r\nprivate [\"_returnValue\"];\r\n\r\n_returnValue = false;\r\n\r\n_returnValue = switch (_showType) do {\r\n    case (DISPLAY_MODE_CLOSED): { true }; //Can always close\r\n    case (DISPLAY_MODE_HIDDEN): { true }; //Can always hide\r\n    case (DISPLAY_MODE_DIALOG): {\r\n         (\"ACE_microDAGR\" in (items ACE_player)) && {[ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)}\r\n    };\r\n    case (DISPLAY_MODE_DISPLAY): {\r\n        //Can't have minimap up while zoomed in on foot, but allow drivers to use while in \"Gunner\" to handle non-3d vehicles like most tanks\r\n        ((cameraView != \"GUNNER\") || {(vehicle ACE_player != ACE_player) && {driver vehicle ACE_player == ACE_player}}) &&\r\n        {\"ACE_microDAGR\" in (items ACE_player)} && \r\n        {[ACE_player, objNull, [\"notOnMap\", \"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith)}\r\n    };\r\n    default { false };\r\n};\r\n\r\n_returnValue\r\n"},{"name":"ace_microdagr_fnc_deviceAddWaypoint","file":"microdagr/functions/fnc_deviceAddWaypoint.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Adds a waypoint to the \"device\"\r\n * Device saving not implemented yet, just save to player object\r\n *\r\n * Arguments:\r\n * 0: Waypoint name <STRING>\r\n * 1: Waypoint Position ASL <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"Hill 55\", [41,324, 12]] call ace_microdagr_fnc_deviceAddWaypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_waypoints\";\r\nparams [\"_waypointName\",\"_waypointPosASL\"];\r\n\r\n\r\n\r\n_waypoints = ACE_player getVariable [QGVAR(waypoints), []];\r\n_waypoints pushBack [_waypointName, _waypointPosASL];\r\nACE_player setVariable [QGVAR(waypoints), _waypoints];\r\n"},{"name":"ace_microdagr_fnc_deviceDeleteWaypoint","file":"microdagr/functions/fnc_deviceDeleteWaypoint.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Deletes a waypoint from the \"device\"\r\n * Device saving not implemented yet, just save to player object\r\n *\r\n * Arguments:\r\n * 0: Waypoint Index <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"Hill 55\", [41,324, 12]] call ace_microdagr_fnc_deviceDeleteWaypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_waypoints\";\r\nparams [\"_wpIndex\"];\r\n\r\n_waypoints = ACE_player getVariable [QGVAR(waypoints), []];\r\n\r\nif ((_wpIndex < 0) || (_wpIndex > ((count _waypoints) - 1))) exitWith {ERROR(\"out of bounds wp\");};\r\n\r\n_waypoints deleteAt _wpIndex;\r\nACE_player setVariable [QGVAR(waypoints), _waypoints];\r\n"},{"name":"ace_microdagr_fnc_deviceGetWaypoints","file":"microdagr/functions/fnc_deviceGetWaypoints.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Gets all waypoints from the \"device\"\r\n * Device saving not implemented yet, just save to player object\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Waypoints <ARRAY>\r\n *\r\n * Example:\r\n * [[\"Hill 55\", [41,324, 12]]] = [] call ace_microdagr_fnc_deviceGetWaypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(ACE_player getVariable [QGVAR(waypoints), []])\r\n"},{"name":"ace_microdagr_fnc_dialogClosedEH","file":"microdagr/functions/fnc_dialogClosedEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles the dialog closeing, switches back to display mode\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_microdagr_fnc_dialogClosedEH\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG) then {\r\n    [-1] call FUNC(saveCurrentAndSetNewMode);\r\n    [DISPLAY_MODE_DISPLAY] call FUNC(openDisplay);\r\n};\r\n"},{"name":"ace_microdagr_fnc_mapButtonDownEH","file":"microdagr/functions/fnc_mapButtonDownEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles right clicking on the map ('dragging' the map)\r\n * Release autotrack if enabled.\r\n *\r\n * Arguments:\r\n * 0: The Map <CONTROL>\r\n * 1: MouseButton <NUMBER>\r\n * 2: MousePosX <NUMBER>\r\n * 3: MousePosY <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [minimap,0,0.5,0.5] call ace_microdagr_fnc_mapButtonDownEH\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"_mouseButton\"];\r\n\r\n//Only handle RMB\r\nif (_mouseButton != 1) exitWith {};\r\n\r\nif (GVAR(mapAutoTrackPosition)) then {\r\n    GVAR(mapAutoTrackPosition) = false;\r\n    [] call FUNC(showApplicationPage);\r\n};\r\n"},{"name":"ace_microdagr_fnc_mapDoubleTapEH","file":"microdagr/functions/fnc_mapDoubleTapEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles the double tapping either of the 2 mini-maps\r\n *\r\n * Arguments:\r\n * 0: The Map <CONTROL>\r\n * 1: MouseButton <NUMBER>\r\n * 2: MousePosX <NUMBER>\r\n * 3: MousePosY <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [minimap,0,0.5,0.5] call ace_microdagr_fnc_mapDoubleTapEH\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_theMap\", \"_mouseButton\", \"_xPos\", \"_yPos\"];\r\n\r\nprivate [\"_worldPos\"];\r\n\r\n//Only handle LMB\r\nif (_mouseButton != 0) exitWith {};\r\n\r\n_worldPos = _theMap ctrlMapScreenToWorld [_xPos, _yPos];\r\n_worldPos pushBack (getTerrainHeightASL _worldPos);\r\n\r\nGVAR(newWaypointPosition) = _worldPos;\r\n[APP_MODE_MARK] call FUNC(saveCurrentAndSetNewMode);\r\n"},{"name":"ace_microdagr_fnc_mapOnDrawEH","file":"microdagr/functions/fnc_mapOnDrawEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles the draw event from all 3 maps (compass + 2 minimaps)\r\n *\r\n * Arguments:\r\n * 0: The Map <CONTROL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [compassMap] call ace_microdagr_fnc_mapOnDrawEH\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_mapSize\", \"_waypoints\", \"_size\", \"_targetPos\", \"_relBearing\", \"_wpName\", \"_wpPos\", \"_alpha\"];\r\n\r\nparams [\"_theMap\"];\r\n\r\n_mapSize = (ctrlPosition _theMap) select 3;\r\n\r\n_waypoints = [] call FUNC(deviceGetWaypoints);\r\n\r\nif (GVAR(currentApplicationPage) == 1) then {\r\n    _theMap ctrlMapAnimAdd [0, DUMMY_ZOOM, DUMMY_POS];\r\n    ctrlMapAnimCommit _theMap;\r\n    _size = 412 * _mapSize;\r\n    _theMap drawIcon [QUOTE(PATHTO_R(images\\compass_starInverted.paa)), [1,1,1,1], DUMMY_POS, _size, _size, (-1 * (([ACE_player] call CBA_fnc_headDir) select 0)), '', 0 ];\r\n    _theMap drawIcon [QUOTE(PATHTO_R(images\\compass_needle.paa)), [0.533,0.769,0.76,1], DUMMY_POS, _size, _size, 0, '', 0 ];\r\n\r\n    if (GVAR(currentWaypoint) != -1) then {\r\n        _targetPos = [];\r\n        if (GVAR(currentWaypoint) == -2) then {\r\n            if ((count GVAR(rangeFinderPositionASL)) == 3) then {\r\n                _targetPos = GVAR(rangeFinderPositionASL);\r\n            };\r\n        } else {\r\n            if (GVAR(currentWaypoint) < (count _waypoints)) then {\r\n                _targetPos = (_waypoints select GVAR(currentWaypoint)) select 1;\r\n            };\r\n        };\r\n        if ((count _targetPos) == 3) then {\r\n            _relBearing = [ACE_player, _targetPos] call BIS_fnc_relativeDirTo;\r\n            _theMap drawIcon [QUOTE(PATHTO_R(images\\compass_needle.paa)), [1,0.564,0.564,1], DUMMY_POS, _size, _size, _relBearing, '', 0 ];\r\n        };\r\n    };\r\n\r\n} else { //Map Mode:\r\n    //Call all added minimap draw event handlers:\r\n    {_this call _x;} forEach GVAR(miniMapDrawHandlers);\r\n\r\n    if (GVAR(mapAutoTrackPosition)) then {\r\n        _theMap ctrlMapAnimAdd [0, (GVAR(mapZoom)/_mapSize), (getPosASL ACE_player)];\r\n        ctrlMapAnimCommit _theMap;\r\n    };\r\n    _size = 48 * _mapSize;\r\n    _theMap drawIcon [QUOTE(PATHTO_R(images\\icon_self.paa)), [0.533,0.769,0.76,0.75], (getPosASL ACE_player), _size, _size, (([ACE_player] call CBA_fnc_headDir) select 0), '', 0 ];\r\n\r\n    if (GVAR(settingShowAllWaypointsOnMap)) then {\r\n        _size = 32 * _mapSize;\r\n        {\r\n            _x params [\"_wpName\", \"_wpPos\"];\r\n            _alpha = if (_forEachIndex == GVAR(currentWaypoint)) then {1} else {0.5};\r\n            _theMap drawIcon [QUOTE(PATHTO_R(images\\icon_mapWaypoints.paa)), [1,1,1,_alpha], _wpPos, _size, _size, 0, '', 0 ];\r\n        } forEach _waypoints;\r\n    };\r\n};\r\n"},{"name":"ace_microdagr_fnc_modeMapButtons","file":"microdagr/functions/fnc_modeMapButtons.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Takes some arguments and returns something or other.\r\n *\r\n * Arguments:\r\n * 0: String of the map button pressed <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"autotrack\"] call ace_microdagr_fnc_modeMapButtons\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_mode\"];\r\n\r\n[-1] call FUNC(saveCurrentAndSetNewMode); //backup current draw pos/zoom\r\n\r\nif (_mode == \"autotrack\") then {\r\n    GVAR(mapAutoTrackPosition) = !GVAR(mapAutoTrackPosition);\r\n} else {\r\n    if (_mode == \"zoomin\") then {\r\n        GVAR(mapZoom) = GVAR(mapZoom) * (10/11);\r\n    } else {\r\n        GVAR(mapZoom) = GVAR(mapZoom) * (11/10);\r\n    };\r\n};\r\n[] call FUNC(showApplicationPage);\r\n"},{"name":"ace_microdagr_fnc_moduleMapFill","file":"microdagr/functions/fnc_moduleMapFill.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Function for the module (handles the map fill level)\r\n *\r\n * Arguments:\r\n * 0: logic <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [module] call ace_microdagr_fnc_moduleMapFill\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\nparams [\"_logic\"];\r\n\r\n[_logic, QGVAR(MapDataAvailable), \"MapDataAvailable\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_microdagr_fnc_openDisplay","file":"microdagr/functions/fnc_openDisplay.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Changes the display mode of the microDAGR\r\n *\r\n * Arguments:\r\n * 0: Display Mode to show the microDAGR in <NUMBER><OPTIONAL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [1] call ace_microdagr_fnc_openDisplay\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_oldShowMode\", \"_args\", \"_player\"];\r\n\r\nparams [[\"_newDisplayShowMode\", -1, [-1]]];\r\n_oldShowMode = GVAR(currentShowMode);\r\n\r\nif (_newDisplayShowMode == -1) then {\r\n    //Toggle mode button:\r\n    if (_oldShowMode in [DISPLAY_MODE_DISPLAY, DISPLAY_MODE_HIDDEN]) then {_newDisplayShowMode = DISPLAY_MODE_DIALOG};\r\n    if (_oldShowMode in [DISPLAY_MODE_DIALOG, DISPLAY_MODE_CLOSED]) then {_newDisplayShowMode = DISPLAY_MODE_DISPLAY};\r\n};\r\n\r\nif ((_newDisplayShowMode == DISPLAY_MODE_DISPLAY) && {!([DISPLAY_MODE_DISPLAY] call FUNC(canShow))}) then {_newDisplayShowMode = DISPLAY_MODE_HIDDEN};\r\nif ((_newDisplayShowMode == DISPLAY_MODE_DIALOG) && {!([DISPLAY_MODE_DIALOG] call FUNC(canShow))}) then {_newDisplayShowMode = DISPLAY_MODE_HIDDEN};\r\n\r\n\r\n//On first-startup\r\nif (GVAR(currentApplicationPage) == APP_MODE_NULL) then {\r\n    GVAR(currentApplicationPage) = APP_MODE_INFODISPLAY;\r\n    GVAR(mapPosition) = getPos ACE_player;\r\n};\r\n\r\nif (_newDisplayShowMode in [DISPLAY_MODE_CLOSED, DISPLAY_MODE_HIDDEN]) then {\r\n\r\n    //If Dialog is open, back it up before closing:\r\n    if (dialog && {!isNull (uiNamespace getVariable [QGVAR(DialogDisplay), displayNull])}) then {\r\n        [-1] call FUNC(saveCurrentAndSetNewMode);\r\n        closeDialog 0;\r\n    };\r\n\r\n    //Close the display:\r\n    (QGVAR(TheRscTitleDisplay) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\n} else {\r\n    if (_newDisplayShowMode == DISPLAY_MODE_DISPLAY) then {\r\n        //If Dialog is open, back it up before closing:\r\n        if (dialog && {!isNull (uiNamespace getVariable [QGVAR(DialogDisplay), displayNull])}) then {\r\n            [-1] call FUNC(saveCurrentAndSetNewMode);\r\n            closeDialog 0;\r\n        };\r\n        //Open the display:\r\n        (QGVAR(TheRscTitleDisplay) call BIS_fnc_rscLayer) cutRsc [QGVAR(TheRscTitleDisplay), \"PLAIN\", 0, true];\r\n    } else { //DISPLAY_MODE_DIALOG\r\n        //Close the display:\r\n        (QGVAR(TheRscTitleDisplay) call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\n        //Open the dialog:\r\n        createDialog QGVAR(TheDialog);\r\n    };\r\n};\r\n\r\nGVAR(currentShowMode) = _newDisplayShowMode;\r\n//Update display applicaiton if open:\r\nif (GVAR(currentShowMode) in [DISPLAY_MODE_DIALOG, DISPLAY_MODE_DISPLAY]) then {\r\n    [] call FUNC(showApplicationPage);\r\n};\r\n\r\nif ((_oldShowMode == DISPLAY_MODE_CLOSED) && {GVAR(currentShowMode) != DISPLAY_MODE_CLOSED}) then {\r\n    //Start a pfeh to update display and handle hiding display\r\n\r\n    [{\r\n        params [\"_args\", \"_idPFH\"];\r\n        _args params [\"_player\"];\r\n        if ((isNull ACE_player) || {!alive ACE_player} || {ACE_player != _player} || {!(\"ACE_microDAGR\" in (items ACE_player))} || {GVAR(currentShowMode) == DISPLAY_MODE_CLOSED}) then {\r\n            //Close Display if still open:\r\n            if (GVAR(currentShowMode) != DISPLAY_MODE_CLOSED) then {\r\n                [DISPLAY_MODE_CLOSED] call FUNC(openDisplay);\r\n            };\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        } else {\r\n            if (GVAR(currentShowMode) == DISPLAY_MODE_HIDDEN) then {\r\n                //If display is hidden, and we can show, then swithc modes:\r\n                if ([DISPLAY_MODE_DISPLAY] call FUNC(canShow)) then {\r\n                    [DISPLAY_MODE_DISPLAY] call FUNC(openDisplay);\r\n                };\r\n            } else {\r\n                if ([GVAR(currentShowMode)] call FUNC(canShow)) then {\r\n                    [] call FUNC(updateDisplay);\r\n                } else {\r\n                    [DISPLAY_MODE_HIDDEN] call FUNC(openDisplay);\r\n                };\r\n            };\r\n        };\r\n    }, 0.1, [ACE_player]] call CBA_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_microdagr_fnc_recieveRangefinderData","file":"microdagr/functions/fnc_recieveRangefinderData.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Recieves the data packet from the vector rangefinder\r\n *\r\n * Arguments:\r\n * 0: Slope distance (Meters) <NUMBER>\r\n * 1: Azimuth (Degrees) <NUMBER>\r\n * 2: Inclination (Degrees) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [1000, 45, 1] call ace_microdagr_fnc_recieveRangefinderData\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_horizontalDistance\", \"_verticleDistance\", \"_targetOffset\", \"_targetPosASL\"];\r\n\r\nparams [\"_slopeDistance\", \"_azimuth\", \"_inclination\"];\r\n\r\nif (GVAR(currentWaypoint) != -2) exitWith {}; //Only take waypoint when \"connected\"\r\nif (_slopeDistance < 0) exitWith {}; //Bad Data\r\n\r\n_horizontalDistance = (cos _inclination) * _slopeDistance;\r\n_verticleDistance = (sin _inclination) * _slopeDistance;\r\n\r\n_targetOffset = [((sin _azimuth) * _horizontalDistance), ((cos _azimuth) * _horizontalDistance), _verticleDistance];\r\n//This assumes the \"rangefinder view\" pos is very close to player, at worst the turret should only be a few meters different\r\n_targetPosASL = (getPosASL ACE_player) vectorAdd _targetOffset;\r\n\r\nGVAR(rangeFinderPositionASL) = _targetPosASL;\r\n"},{"name":"ace_microdagr_fnc_saveCurrentAndSetNewMode","file":"microdagr/functions/fnc_saveCurrentAndSetNewMode.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Saves the current mode and sets a new mode\r\n * Used to backup display when switching display modes\r\n *\r\n * Arguments:\r\n * 0: New Mode <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [2] call ace_microdagr_fnc_saveCurrentAndSetNewMode\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_display\", \"_theMap\", \"_centerPos\", \"_mapCtrlPos\"];\r\n\r\nparams [\"_newMode\"];\r\n\r\ndisableSerialization;\r\n_display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\r\n\r\nif (isNull _display) exitWith {ERROR(\"No Display\");};\r\n\r\nif (GVAR(currentApplicationPage) == 2) then {\r\n    _theMap = [_display displayCtrl IDC_MAPDETAILS, _display displayCtrl IDC_MAPPLAIN] select (!GVAR(mapShowTexture));\r\n    _mapCtrlPos = ctrlPosition _theMap;\r\n\r\n    _mapCtrlPos params [\"_mapCtrlPosX\", \"_mapCtrlPosY\", \"_mapCtrlPosZ\", \"_mapSize\"];\r\n    _centerPos = [(_mapCtrlPosX + _mapCtrlPosZ / 2), (_mapCtrlPosY + _mapSize / 2)];\r\n    GVAR(mapPosition) = _theMap ctrlMapScreenToWorld _centerPos;\r\n    GVAR(mapZoom) = (ctrlMapScale _theMap) * _mapSize;\r\n\r\n    //Hit button again, toggle map modes:\r\n    if (_newMode == 2) then {\r\n        if (GVAR(mapShowTexture)) then {\r\n            GVAR(mapShowTexture) = false;\r\n        } else {\r\n            if (GVAR(MapDataAvailable) == MAP_DETAIL_SAT) then {\r\n                GVAR(mapShowTexture) = true;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//Can't switch to map if no map loaded\r\nif (_newMode == APP_MODE_MAP) then {\r\n    if (GVAR(MapDataAvailable) == MAP_DETAIL_NONE) then {\r\n        _newMode = -1;\r\n    };\r\n};\r\n\r\nif (_newMode != -1) then {\r\n    GVAR(currentApplicationPage) = _newMode;\r\n    [] call FUNC(showApplicationPage);\r\n};\r\n"},{"name":"ace_microdagr_fnc_showApplicationPage","file":"microdagr/functions/fnc_showApplicationPage.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Changes the \"application page\" shown on the microDAGR\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_microdagr_fnc_showApplicationPage\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_display\", \"_theMap\", \"_mapSize\"];\r\n\r\ndisableSerialization;\r\n\r\n_display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\r\n\r\nif (isNull _display) exitWith {ERROR(\"No Display\");};\r\n\r\n//TopBar\r\n(_display displayCtrl IDC_RANGEFINDERCONNECTEDICON) ctrlShow (GVAR(currentWaypoint) == -2);\r\n\r\n//Mode: Info:\r\n(_display displayCtrl IDC_MODEDISPLAY) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_INFODISPLAY);\r\n\r\nif (GVAR(currentApplicationPage) == APP_MODE_INFODISPLAY) then {\r\n    (_display displayCtrl IDC_MODEDISPLAY_UTMGRID) ctrlSetText GVAR(mgrsGridZoneDesignator);\r\n    if (GVAR(currentWaypoint) == -1) then {\r\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTIMECG) ctrlShow true;\r\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTARGETCG) ctrlShow false;\r\n    } else {\r\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTIMECG) ctrlShow false;\r\n        (_display displayCtrl IDC_MODEDISPLAY_MODEPOSTARGETCG) ctrlShow true;\r\n        if (GVAR(currentWaypoint) == -2) then {\r\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETICON) ctrlSetText QUOTE(PATHTOF(images\\icon_menuLaser.paa));\r\n        } else {\r\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETICON) ctrlSetText QPATHTOF(images\\icon_menuMark.paa);\r\n        };\r\n    };\r\n};\r\n\r\n//Mode: Compass:\r\n(_display displayCtrl IDC_MODECOMPASS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_COMPASS);\r\n(_display displayCtrl IDC_MAPCOMPASS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_COMPASS);\r\n\r\n\r\n//Mode: Map\r\n(_display displayCtrl IDC_MODEMAP_MAPTRACKBUTTON) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MAP);\r\n(_display displayCtrl IDC_MODEMAP_MAPZOOMIN) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MAP);\r\n(_display displayCtrl IDC_MODEMAP_MAPZOOMOUT) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MAP);\r\n\r\n(_display displayCtrl IDC_MAPPLAIN) ctrlShow ((GVAR(currentApplicationPage) == APP_MODE_MAP) && {!GVAR(mapShowTexture)});\r\n(_display displayCtrl IDC_MAPDETAILS) ctrlShow ((GVAR(currentApplicationPage) == APP_MODE_MAP) && {GVAR(mapShowTexture)});\r\n\r\nif (GVAR(currentApplicationPage) == APP_MODE_MAP) then {\r\n    _theMap = if (!GVAR(mapShowTexture)) then {_display displayCtrl IDC_MAPPLAIN} else {_display displayCtrl IDC_MAPDETAILS};\r\n    _mapSize = (ctrlPosition _theMap) select 3;\r\n    _theMap ctrlMapAnimAdd [0, (GVAR(mapZoom) / _mapSize), GVAR(mapPosition)];\r\n    ctrlMapAnimCommit _theMap;\r\n    if (GVAR(mapAutoTrackPosition)) then {\r\n        (_display displayCtrl IDC_MODEMAP_MAPTRACKBUTTON) ctrlSetTextColor [1,1,1,0.8];\r\n    } else {\r\n        (_display displayCtrl IDC_MODEMAP_MAPTRACKBUTTON) ctrlSetTextColor [1,1,1,0.4];\r\n    };\r\n};\r\n\r\n//Mode: Menu\r\n(_display displayCtrl IDC_MODEMENU) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_MENU);\r\n\r\n//Mode: Mark\r\nif (GVAR(currentApplicationPage) == APP_MODE_MARK) then {\r\n    (_display displayCtrl IDC_MODEMARK) ctrlShow true;\r\n    //not backed up for displayMode swap, not a big deal\r\n\r\n\r\n    if ((count GVAR(newWaypointPosition)) == 0) then {\r\n        (_display displayCtrl IDC_MODEMARK_HEADER) ctrlSetText (localize LSTRING(wpEnterCords));\r\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText \"\";\r\n    } else {\r\n        (_display displayCtrl IDC_MODEMARK_HEADER) ctrlSetText format [(localize LSTRING(wpEnterName)), mapGridPosition GVAR(newWaypointPosition)];\r\n        (_display displayCtrl IDC_MODEMARK_CORDSEDIT) ctrlSetText format [\"[%1]\", mapGridPosition GVAR(newWaypointPosition)];\r\n    };\r\n    ctrlSetFocus (_display displayCtrl IDC_MODEMARK_CORDSEDIT);\r\n} else {\r\n    (_display displayCtrl IDC_MODEMARK) ctrlShow false;\r\n    GVAR(newWaypointPosition) = [];\r\n};\r\n\r\n//Mode: Waypoints\r\n(_display displayCtrl IDC_MODEWAYPOINTS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_WAYPOINTS);\r\n\r\n//Mode: Setting\r\n(_display displayCtrl IDC_MODESETTINGS) ctrlShow (GVAR(currentApplicationPage) == APP_MODE_SETUP);\r\n\r\n//Buttons pushed:\r\nif (GVAR(currentApplicationPage) == APP_MODE_INFODISPLAY) then {\r\n    (_display displayCtrl IDC_BUTTONBG0) ctrlSetText QPATHTOF(images\\button_pushedDown.paa);\r\n} else {\r\n    (_display displayCtrl IDC_BUTTONBG0) ctrlSetText QPATHTOF(images\\button_pushedUp.paa);\r\n};\r\nif (GVAR(currentApplicationPage) == APP_MODE_COMPASS) then {\r\n    (_display displayCtrl IDC_BUTTONBG1) ctrlSetText QPATHTOF(images\\button_pushedDown.paa);\r\n} else {\r\n    (_display displayCtrl IDC_BUTTONBG1) ctrlSetText QPATHTOF(images\\button_pushedUp.paa);\r\n};\r\nif (GVAR(currentApplicationPage) == APP_MODE_MAP) then {\r\n    (_display displayCtrl IDC_BUTTONBG2) ctrlSetText QPATHTOF(images\\button_pushedDown.paa);\r\n} else {\r\n    (_display displayCtrl IDC_BUTTONBG2) ctrlSetText QPATHTOF(images\\button_pushedUp.paa);\r\n};\r\n\r\n//Update the page now:\r\n[] call FUNC(updateDisplay);\r\n"},{"name":"ace_microdagr_fnc_updateDisplay","file":"microdagr/functions/fnc_updateDisplay.sqf","text":"﻿/*\r\n * Author: PabstMirror\r\n * Updates the display (several times a second) called from the pfeh\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_microdagr_fnc_updateDisplay\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_display\", \"_waypoints\", \"_posString\", \"_eastingText\", \"_northingText\", \"_numASL\", \"_aboveSeaLevelText\", \"_compassAngleText\", \"_targetPos\", \"_targetPosName\", \"_targetPosLocationASL\", \"_bearingText\", \"_rangeText\", \"_targetName\", \"_bearing\", \"_2dDistanceKm\", \"_SpeedText\", \"_wpListBox\", \"_currentIndex\", \"_wpName\", \"_wpPos\", \"_settingListBox\", \"_yearString\", \"_monthSring\", \"_dayString\", \"_daylight\"];\r\n\r\ndisableSerialization;\r\n_display = uiNamespace getVariable [[QGVAR(RscTitleDisplay), QGVAR(DialogDisplay)] select (GVAR(currentShowMode) == DISPLAY_MODE_DIALOG), displayNull];\r\n\r\nif (isNull _display) exitWith {ERROR(\"No Display\");};\r\n\r\n//Fade \"shell\" at night\r\n_daylight = [] call EFUNC(common,ambientBrightness);\r\n(_display displayCtrl IDC_MICRODAGRSHELL) ctrlSetTextColor [_daylight, _daylight, _daylight, 1];\r\n\r\n(_display displayCtrl IDC_CLOCKTEXT) ctrlSetText ([daytime, \"HH:MM\"] call bis_fnc_timeToString);\r\n\r\n_waypoints = [] call FUNC(deviceGetWaypoints);\r\n\r\nswitch (GVAR(currentApplicationPage)) do {\r\ncase (APP_MODE_INFODISPLAY): {\r\n        //Easting/Northing:\r\n        _posString = [getPos ACE_player] call EFUNC(common,getMapGridFromPos);\r\n        _eastingText = (_posString select 0) + \"e\";\r\n        _northingText = (_posString select 1) + \"n\";\r\n        (_display displayCtrl IDC_MODEDISPLAY_EASTING) ctrlSetText _eastingText;\r\n        (_display displayCtrl IDC_MODEDISPLAY_NORTHING) ctrlSetText _northingText;\r\n\r\n        //Elevation:\r\n        _numASL = ((getPosASL ACE_player) select 2) + EGVAR(common,mapAltitude);\r\n        _aboveSeaLevelText = [_numASL, 5, 0] call CBA_fnc_formatNumber;\r\n        _aboveSeaLevelText = if (_numASL > 0) then {\"+\" + _aboveSeaLevelText + \" MSL\"} else {_aboveSeaLevelText + \" MSL\"};\r\n        (_display displayCtrl IDC_MODEDISPLAY_ELEVATIONNUM) ctrlSetText _aboveSeaLevelText;\r\n\r\n        //Heading:\r\n        _compassAngleText = if (GVAR(settingUseMils)) then {\r\n            [(floor ((6400 / 360) * (([ACE_player] call CBA_fnc_headDir) select 0))), 4, 0] call CBA_fnc_formatNumber;\r\n        } else {\r\n            ([(floor (([ACE_player] call CBA_fnc_headDir) select 0)), 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\r\n        };\r\n        (_display displayCtrl IDC_MODEDISPLAY_HEADINGNUM) ctrlSetText _compassAngleText;\r\n\r\n        //Speed:\r\n        (_display displayCtrl IDC_MODEDISPLAY_SPEEDNUM) ctrlSetText format [\"%1kph\", (round (speed (vehicle ACE_player)))];;\r\n\r\n\r\n        if (GVAR(currentWaypoint) == -1) then {\r\n            _yearString = (date select 0);\r\n            _monthSring = localize ([\"error\",\"str_january\",\"str_february\",\"str_march\",\"str_april\",\"str_may\",\"str_june\",\"str_july\",\"str_august\",\"str_september\",\"str_october\",\"str_november\",\"str_december\"] select (date select 1));\r\n            _dayString = if ((date select 2) < 10) then {\"0\" + str (date select 2)} else {str (date select 2)};\r\n\r\n            (_display displayCtrl IDC_MODEDISPLAY_TIMEDISPLAYGREEN1) ctrlSetText format [\"%1-%2-%3\", _yearString, _monthSring, _dayString]; //\"18-Feb-2010\";\r\n            (_display displayCtrl IDC_MODEDISPLAY_TIMEDISPLAYGREEN2) ctrlSetText ([daytime, \"HH:MM:SS\"] call bis_fnc_timeToString);\r\n        } else {\r\n            _targetPosName = \"\";\r\n            _targetPosLocationASL = [];\r\n            _bearingText = \"----\";\r\n            _rangeText = \"----\";\r\n            _aboveSeaLevelText = \"----\";\r\n            _targetName = \"----\";\r\n\r\n            if (GVAR(currentWaypoint) == -2) then {\r\n                if (!(GVAR(rangeFinderPositionASL) isEqualTo [])) then {\r\n                    _targetPos = [GVAR(rangeFinderPositionASL)] call EFUNC(common,getMapGridFromPos);\r\n                    _targetPosName = format [\"[%1 %2 %3]\", EGVAR(common,MGRS_data) select 1, _targetPos select 0, _targetPos select 1];\r\n                    _targetPosLocationASL = GVAR(rangeFinderPositionASL);\r\n                };\r\n            } else {\r\n                if (GVAR(currentWaypoint) > ((count _waypoints) - 1)) exitWith {ERROR(\"bounds\");};\r\n                _targetPosName = (_waypoints select GVAR(currentWaypoint)) select 0;\r\n                _targetPosLocationASL = (_waypoints select GVAR(currentWaypoint)) select 1;\r\n            };\r\n\r\n            if (!(_targetPosLocationASL isEqualTo [])) then {\r\n                _bearing = [(getPosASL ACE_player), _targetPosLocationASL] call BIS_fnc_dirTo;\r\n                _bearingText = if (GVAR(settingUseMils)) then {\r\n                    [(floor ((6400 / 360) * (_bearing))), 4, 0] call CBA_fnc_formatNumber;\r\n                } else {\r\n                    ([(floor (_bearing)), 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\r\n                };\r\n                _2dDistanceKm = ((getPosASL ACE_player) distance2D _targetPosLocationASL) / 1000;\r\n                _rangeText = format [\"%1km\", ([_2dDistanceKm, 1, 1] call CBA_fnc_formatNumber)];\r\n                _numASL = (_targetPosLocationASL select 2) + EGVAR(common,mapAltitude);\r\n                _aboveSeaLevelText = [_numASL, 5, 0] call CBA_fnc_formatNumber;\r\n                _aboveSeaLevelText = if (_numASL > 0) then {\"+\" + _aboveSeaLevelText + \" MSL\"} else {_aboveSeaLevelText + \" MSL\"};\r\n            };\r\n\r\n            (_display displayCtrl IDC_MODEDISPLAY_TRACKNUM) ctrlSetText _bearingText;\r\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETRANGENUM) ctrlSetText _rangeText;\r\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETELEVATIONNUM) ctrlSetText _aboveSeaLevelText;\r\n            (_display displayCtrl IDC_MODEDISPLAY_TARGETNAME) ctrlSetText _targetPosName;\r\n        };\r\n    };\r\ncase (APP_MODE_COMPASS): {\r\n        //Heading:\r\n        _compassAngleText = if (GVAR(settingUseMils)) then {\r\n            [(floor ((6400 / 360) * (([ACE_player] call CBA_fnc_headDir) select 0))), 4, 0] call CBA_fnc_formatNumber;\r\n        } else {\r\n            ([(floor (([ACE_player] call CBA_fnc_headDir) select 0)), 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\r\n        };\r\n        (_display displayCtrl IDC_MODECOMPASS_HEADING) ctrlSetText _compassAngleText;\r\n\r\n        //Speed:\r\n        _SpeedText = format [\"%1kph\", (round (speed (vehicle ACE_player)))];;\r\n        (_display displayCtrl IDC_MODECOMPASS_SPEED) ctrlSetText _SpeedText;\r\n\r\n        if (GVAR(currentWaypoint) == -1) then {\r\n            (_display displayCtrl IDC_MODECOMPASS_BEARING) ctrlSetText \"\";\r\n            (_display displayCtrl IDC_MODECOMPASS_RANGE) ctrlSetText \"\";\r\n            (_display displayCtrl IDC_MODECOMPASS_TARGET) ctrlSetText \"\";\r\n        } else {\r\n            _targetPosName = \"\";\r\n            _targetPosLocationASL = [];\r\n\r\n            if (GVAR(currentWaypoint) == -2) then {\r\n                if (!(GVAR(rangeFinderPositionASL) isEqualTo [])) then {\r\n                    _targetPos = [GVAR(rangeFinderPositionASL)] call EFUNC(common,getMapGridFromPos);\r\n                    _targetPosName = format [\"[%1 %2 %3]\", EGVAR(common,MGRS_data) select 1, _targetPos select 0, _targetPos select 1];\r\n                    _targetPosLocationASL = GVAR(rangeFinderPositionASL);\r\n                };\r\n            } else {\r\n                if (GVAR(currentWaypoint) > ((count _waypoints - 1))) exitWith {ERROR(\"bounds\");};\r\n                _targetPosName = (_waypoints select GVAR(currentWaypoint)) select 0;\r\n                _targetPosLocationASL = (_waypoints select GVAR(currentWaypoint)) select 1;\r\n            };\r\n\r\n            _bearing = \"---\";\r\n            _rangeText = \"---\";\r\n\r\n            if (!(_targetPosLocationASL isEqualTo [])) then {\r\n                _bearing = [(getPosASL ACE_player), _targetPosLocationASL] call BIS_fnc_dirTo;\r\n                _bearingText = if (GVAR(settingUseMils)) then {\r\n                    [(floor ((6400 / 360) * (_bearing))), 4, 0] call CBA_fnc_formatNumber;\r\n                } else {\r\n                    ([(floor (_bearing)), 3, 1] call CBA_fnc_formatNumber) + \"°\" //degree symbol is in UTF-8\r\n                };\r\n                _2dDistanceKm = ((getPosASL ACE_player) distance2D _targetPosLocationASL) / 1000;\r\n                _rangeText = format [\"%1km\", ([_2dDistanceKm, 1, 1] call CBA_fnc_formatNumber)];\r\n            };\r\n\r\n            (_display displayCtrl IDC_MODECOMPASS_BEARING) ctrlSetText _bearingText;\r\n            (_display displayCtrl IDC_MODECOMPASS_RANGE) ctrlSetText _rangeText;\r\n            (_display displayCtrl IDC_MODECOMPASS_TARGET) ctrlSetText _targetPosName;\r\n        };\r\n    };\r\n\r\ncase (APP_MODE_WAYPOINTS): {\r\n        _wpListBox = _display displayCtrl IDC_MODEWAYPOINTS_LISTOFWAYPOINTS;\r\n        _currentIndex = lbCurSel _wpListBox;\r\n\r\n        lbClear _wpListBox;\r\n        {\r\n            _x params [\"_wpName\", \"_wpPos\"];\r\n            _wpListBox lbAdd _wpName;\r\n            _2dDistanceKm = ((getPosASL ACE_player) distance2D _wpPos) / 1000;\r\n            _wpListBox lbSetTextRight [_forEachIndex, (format [\"%1km\", ([_2dDistanceKm, 1, 1] call CBA_fnc_formatNumber)])];\r\n        } forEach _waypoints;\r\n\r\n        _currentIndex = (_currentIndex max 0) min (count _waypoints);\r\n        _wpListBox lbSetCurSel _currentIndex;\r\n\r\n        //Reset focus to a dummy ctrl (top button), otherwise HOME/POS1 key goes to top of listBox and has keybind blocked\r\n        ctrlSetFocus (_display displayCtrl IDC_TOPMENUBUTTON);\r\n    };\r\n\r\ncase (APP_MODE_SETUP): {\r\n        _settingListBox = _display displayCtrl IDC_MODESETTINGS;\r\n        lbClear _settingListBox;\r\n\r\n        _settingListBox lbAdd (localize LSTRING(settingUseMils));\r\n        if (GVAR(settingUseMils)) then {\r\n            _settingListBox lbSetTextRight [0, (localize LSTRING(settingMils))];\r\n        } else {\r\n            _settingListBox lbSetTextRight [0, (localize LSTRING(settingDegrees))];\r\n        };\r\n\r\n        _settingListBox lbAdd (localize LSTRING(settingShowWP));\r\n        if (GVAR(settingShowAllWaypointsOnMap)) then {\r\n            _settingListBox lbSetTextRight [1, (localize LSTRING(settingOn))];\r\n        } else {\r\n            _settingListBox lbSetTextRight [1, (localize LSTRING(settingOff))];\r\n        };\r\n\r\n        //Reset focus to a dummy ctrl (top button), otherwise HOME/POS1 key goes to top of listBox and has keybind blocked\r\n        ctrlSetFocus (_display displayCtrl IDC_TOPMENUBUTTON);\r\n    };\r\n};\r\n"}],"minedetector":[{"name":"ace_minedetector_fnc_activateDetector","file":"minedetector/functions/fnc_activateDetector.sqf","text":"/*\r\n * Author: Glowbal\r\n * Activate the mine detector\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_minedetector_fnc_activateDetector\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif (call FUNC(canActivateDetector)) then {\r\n    [ACE_player, currentWeapon ACE_player] call FUNC(enableDetector);\r\n};\r\n"},{"name":"ace_minedetector_fnc_canActivateDetector","file":"minedetector/functions/fnc_canActivateDetector.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if the mine detector can be activated\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Can be activated <BOOL>\r\n *\r\n * Example:\r\n * [] call ace_minedetector_fnc_canActivateDetector\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n([ACE_player] call FUNC(hasDetector)) && !([ACE_player, currentWeapon ACE_player] call FUNC(isDetectorEnabled));\r\n"},{"name":"ace_minedetector_fnc_canDeactivateDetector","file":"minedetector/functions/fnc_canDeactivateDetector.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if the mine detector can be deactivated\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Can be deactivated <BOOL>\r\n *\r\n * Example:\r\n * [] call ace_minedetector_fnc_canDeactivateDetector\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n([ACE_player] call FUNC(hasDetector)) && {[ACE_player, currentWeapon ACE_player] call FUNC(isDetectorEnabled)};\r\n"},{"name":"ace_minedetector_fnc_deactivateDetector","file":"minedetector/functions/fnc_deactivateDetector.sqf","text":"/*\r\n * Author: Glowbal\r\n * Deactivate the mine detector\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_minedetector_fnc_deactivateDetector\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif (call FUNC(canDeactivateDetector)) then {\r\n    [ACE_player, currentWeapon ACE_player] call FUNC(disableDetector);\r\n};\r\n"},{"name":"ace_minedetector_fnc_detectorLoop","file":"minedetector/functions/fnc_detectorLoop.sqf","text":"/*\r\n * Author: Glowbal\r\n * Handle mine detection in a PFH loop\r\n *\r\n * Arguments:\r\n * 0: args <ARRAY>\r\n * 1: PHD Id <PFH_ID>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_args\", \"_idPFH\"];\r\n_args params [\"_unit\", \"_type\", \"_detectorConfig\", \"_lastPlayed\"];\r\n\r\nif !([_unit, _type] call FUNC(hasDetector)) exitWith {\r\n    // disable detector type\r\n    [_unit, _type] call FUNC(disableDetector);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\nif (!alive _unit) exitWith {\r\n    [_unit, _type] call FUNC(disableDetector);\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\nif !([_unit, _type] call FUNC(isDetectorEnabled)) exitWith {\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\nif (ACE_player == _unit && {currentWeapon _unit == _type}) then {\r\n    private _detected = [_unit, _detectorConfig] call FUNC(getDetectedObject);\r\n    _detected params [\"_hasDetected\", \"_object\", \"_distance\"];\r\n    private _distanceTiming = switch (true) do {\r\n        case (_distance >= 2): {1};\r\n        case (_distance >= 1.25): {0.85};\r\n        case (_distance >= 0.75): {0.7};\r\n        default {0.5};\r\n    };\r\n    if (_hasDetected && {(CBA_missionTime - _lastPlayed > _distanceTiming)}) then {\r\n        _args set [3, CBA_missionTime];\r\n        _detectorConfig params [\"_type\", \"_radius\", \"_detectableTypes\", \"_sounds\"];\r\n        private _sound = switch (true) do {\r\n            case (_distance >= 2): {_sounds select 3};\r\n            case (_distance >= 1.25): {_sounds select 2};\r\n            case (_distance >= 0.5): {_sounds select 1};\r\n            default {_sounds select 0};\r\n        };\r\n        [_unit, _sound, true] call FUNC(playDetectorSound);\r\n    };\r\n};\r\n"},{"name":"ace_minedetector_fnc_disableDetector","file":"minedetector/functions/fnc_disableDetector.sqf","text":"/*\r\n * Author: Glowbal\r\n * Disables the mine detector\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: detecter type <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [UNIT, DETECTOR_CLASS_NAME] call ace_minedetector_fnc_disableDetector\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_detectorType\"];\r\n\r\n_unit setVariable [format[QGVAR(enable_%1), _detectorType], false];\r\n\r\n[QGVAR(detectorDisabled), [_unit, _detectorType]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_minedetector_fnc_enableDetector","file":"minedetector/functions/fnc_enableDetector.sqf","text":"/*\r\n * Author: Glowbal\r\n * Enables the mine detector\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: detecter type <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [UNIT, DETECTOR_CLASS_NAME] call ace_minedetector_fnc_enableDetector\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_detectorType\"];\r\n\r\n_unit setVariable [format[QGVAR(enable_%1), _detectorType], true];\r\n\r\n[QGVAR(detectorEnabled), [_unit, _detectorType]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_minedetector_fnc_getDetectedObject","file":"minedetector/functions/fnc_getDetectedObject.sqf","text":"/*\r\n * Author: Glowbal\r\n * Enables the mine detector\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Configuration <ARRAY>\r\n *\r\n * Return Value:\r\n * [isDetected <BOOL>, mine <OBJECT>, distance <NUMBER>] <ARRAY>\r\n *\r\n * Example:\r\n * [ace_player, DETECTOR_CONFIG] call ace_minedetector_fnc_getDetectedObject\r\n *\r\n * Public: No\r\n */\r\n\r\n#define __DR 1.3\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_detectorConfig\"];\r\n_detectorConfig params [\"_type\", \"_radius\", \"_detectableTypes\", \"_sounds\"];\r\n\r\nprivate _worldPosition = _unit modelToWorld (_unit selectionPosition \"granat\");\r\nprivate _direction = _unit weaponDirection \"Put\";\r\n\r\nprivate _detectorPointAGL = _worldPosition vectorAdd (_direction vectorMultiply __DR);\r\n\r\nprivate _nearestObjects = nearestObjects [_detectorPointAGL, [], _radius];\r\n\r\n#ifdef DEBUG_MODE_FULL\r\nGVAR(debugDetector) = [_detectorPointAGL, _nearestObjects];\r\n#endif\r\n\r\nprivate _isDetectable = false;\r\nprivate _mine = objNull;\r\nprivate _distance = -1;\r\n\r\n{\r\n    private _object = _x;\r\n\r\n    if ({_object isKindOf _x} count _detectableTypes > 0) then {\r\n        //Try all unprepared mines in range and use first detectable one:\r\n        if ((getNumber (configFile >> \"CfgVehicles\" >> (typeOf _x) >> QGVAR(detectable))) == 1) exitWith {\r\n            _isDetectable = true;\r\n            _mine = _x;\r\n            _distance = _detectorPointAGL distance _x;\r\n        };\r\n        //Try all prepared mines in range and use first detectable one:\r\n        if ((getNumber (configFile >> \"CfgAmmo\" >> (typeOf _x) >> QGVAR(detectable))) == 1) exitWith {\r\n            _isDetectable = true;\r\n            _mine = _x;\r\n            _distance = _detectorPointAGL distance _x;\r\n        };\r\n    };\r\n\r\n    if (!isNull _mine) exitWith {};\r\n\r\n} forEach _nearestObjects;\r\n\r\nTRACE_3(\"return\",_isDetectable,_mine,_distance);\r\n\r\n[_isDetectable, _mine, _distance];\r\n"},{"name":"ace_minedetector_fnc_getDetectorConfig","file":"minedetector/functions/fnc_getDetectorConfig.sqf","text":"/*\r\n * Author: Glowbal\r\n * Get the mine detector configuration from the config file\r\n *\r\n * Arguments:\r\n * 0: Detector class name <STRING>\r\n *\r\n * Return Value:\r\n * Detector configuration or empty array if invalid <ARRAY>\r\n *\r\n * Example:\r\n * [\"my_detector\"] call ace_minedetector_fnc_getDetectorConfig\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_detectorType\"];\r\n\r\nprivate _config = (configFile >> \"ACE_detector\" >> \"detectors\" >> _detectorType);\r\nif (isClass _config) then {\r\n    [\r\n        _detectorType,\r\n        getNumber (_config >> \"radius\"),\r\n        GVAR(ALL_DETECTABLE_TYPES), // TODO read from config and use this as a back up value instead\r\n        getArray (_config >> \"sounds\")\r\n    ];\r\n} else {\r\n    [];\r\n};\r\n"},{"name":"ace_minedetector_fnc_hasDetector","file":"minedetector/functions/fnc_hasDetector.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if unit has a mine detector in hands\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Current weapon is a mine detector <BOOLEAN>\r\n *\r\n * Example:\r\n * [ace_player] call ace_minedetector_fnc_hasDetector\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n!(([currentWeapon _unit] call FUNC(getDetectorConfig)) isEqualTo []);\r\n"},{"name":"ace_minedetector_fnc_isDetectorEnabled","file":"minedetector/functions/fnc_isDetectorEnabled.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if the mine detector is enabled\r\n *\r\n * Arguments:\r\n * 0: detecter type <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"example\"] call ace_minedetector_fnc_[functionName]\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_detectorType\"];\r\n\r\nalive _unit && {(_unit getVariable [format[QGVAR(enable_%1), _detectorType], false])};\r\n"},{"name":"ace_minedetector_fnc_playDetectorSound","file":"minedetector/functions/fnc_playDetectorSound.sqf","text":"/*\r\n * Author: Glowbal\r\n * Play the detector sound\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Sound class name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"ace_buzz_1\"] call ace_minedetector_fnc_playDetectorSound\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_detectorSound\"];\r\n\r\nif (isNull _unit) exitWith {\r\n    ACE_LOGERROR_1(\"unit does not exist [%1]\",_unit);\r\n};\r\nif (!alive _unit) exitWith {\r\n    ACE_LOGERROR_1(\"unit is not alive [%1]\",_unit);\r\n};\r\n\r\nprivate _helperObject = _unit getVariable [QGVAR(helperLogic), objNull];\r\nif (!isNull _helperObject) then {\r\n    deleteVehicle _helperObject;\r\n};\r\n_helperObject = \"ACE_LogicDummy\" createVehicleLocal (getPos _unit);\r\n\r\nif !(isNull _helperObject) then {\r\n    _helperObject attachTo [_unit,[0,0,-3],\"\"];\r\n    _unit setVariable [QGVAR(helperLogic), _helperObject];\r\n\r\n    [_helperObject, _unit] say3D _detectorSound;\r\n} else {\r\n    ACE_LOGERROR_1(\"helper does not exist [%1]\",_helperObject);\r\n};\r\n"}],"missileguidance":[{"name":"ace_missileguidance_fnc_attackProfile_AIR","file":"missileguidance/functions/fnc_attackProfile_AIR.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n_this call FUNC(attackProfile_LIN);"},{"name":"ace_missileguidance_fnc_attackProfile_DIR","file":"missileguidance/functions/fnc_attackProfile_DIR.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n_this call FUNC(attackProfile_LIN);"},{"name":"ace_missileguidance_fnc_attackProfile_HI","file":"missileguidance/functions/fnc_attackProfile_HI.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n_this call FUNC(attackProfile_LIN);"},{"name":"ace_missileguidance_fnc_attackProfile_JAV_DIR","file":"missileguidance/functions/fnc_attackProfile_JAV_DIR.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n#define STAGE_LAUNCH 1\r\n#define STAGE_CLIMB 2\r\n#define STAGE_COAST 3\r\n#define STAGE_TERMINAL 4\r\n\r\nEXPLODE_7_PVT(((_this select 1) select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\nprivate[\"_targetPos\", \"_projectilePos\", \"_target\", \"_seekerTargetPos\", \"_launchParams\", \"_targetLaunchParams\"];\r\nprivate[\"_distanceToTarget\", \"_distanceToShooter\", \"_addHeight\", \"_returnTargetPos\", \"_state\"];\r\nprivate[\"_cruisAlt\", \"_distanceShooterToTarget\", \"_shooterPos\"];\r\n_seekerTargetPos = _this select 0;\r\n_launchParams = _this select 1;\r\n\r\n_target = _launchParams select 0;\r\n_targetLaunchParams = _launchParams select 1;\r\n\r\n_state = _this select 2;\r\nif( (count _state) < 1) then {\r\n    _state set[0, STAGE_LAUNCH];\r\n};\r\n\r\n_shooterPos = getPosASL _shooter;\r\n_projectilePos = getPosASL _projectile;\r\n\r\n_distanceToTarget = _projectilePos vectorDistance _seekerTargetPos;    \r\n_distanceToShooter = _projectilePos vectorDistance _shooterPos;\r\n_distanceShooterToTarget = _shooterPos vectorDistance _seekerTargetPos;\r\n\r\nTRACE_2(\"\", _distanceToTarget, _distanceToShooter);\r\n\r\n// Add height depending on distance for compensate\r\n_returnTargetPos = _seekerTargetPos;\r\n\r\nswitch( (_state select 0) ) do {\r\n    case STAGE_LAUNCH: {\r\n        TRACE_1(\"STAGE_LAUNCH\",\"\");\r\n        if(_distanceToShooter < 10) then { \r\n            _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*2];\r\n        } else {\r\n            _state set[0, STAGE_CLIMB];\r\n        };\r\n    };\r\n    case STAGE_CLIMB: {\r\n        TRACE_1(\"STAGE_CLIMB\",\"\");\r\n        _cruisAlt = 60 * (_distanceShooterToTarget/2000);\r\n\r\n        if( ((ASLToATL _projectilePos) select 2) - ((ASLToATL _seekerTargetPos) select 2) >= _cruisAlt) then {\r\n            _state set[0, STAGE_TERMINAL];\r\n        } else {\r\n             _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*1.5];\r\n        };\r\n    };\r\n    case STAGE_TERMINAL: {\r\n        TRACE_1(\"STAGE_TERMINAL\",\"\");\r\n        _returnTargetPos = _seekerTargetPos;\r\n    };\r\n};\r\n\r\n#ifdef DEBUG_MODE_FULL\r\ndrawLine3D [(ASLtoATL _returnTargetPos), (ASLtoATL _seekerTargetPos), [0,1,0,1]];\r\n#endif\r\n\r\nTRACE_1(\"Adjusted target position\", _returnTargetPos);\r\n_returnTargetPos;"},{"name":"ace_missileguidance_fnc_attackProfile_JAV_TOP","file":"missileguidance/functions/fnc_attackProfile_JAV_TOP.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n#define STAGE_LAUNCH 1\r\n#define STAGE_CLIMB 2\r\n#define STAGE_COAST 3\r\n#define STAGE_TERMINAL 4\r\n\r\nEXPLODE_7_PVT(((_this select 1) select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\nprivate[\"_targetPos\", \"_projectilePos\", \"_target\", \"_seekerTargetPos\", \"_launchParams\", \"_targetLaunchParams\"];\r\nprivate[\"_distanceToTarget\", \"_distanceToShooter\", \"_addHeight\", \"_returnTargetPos\", \"_state\"];\r\nprivate[\"_cruisAlt\", \"_distanceShooterToTarget\", \"_shooterPos\"];\r\n\r\n_seekerTargetPos = _this select 0;\r\n_launchParams = _this select 1;\r\n\r\n_target = _launchParams select 0;\r\n_targetLaunchParams = _launchParams select 1;\r\n\r\n_state = _this select 2;\r\nif( (count _state) < 1) then {\r\n    _state set[0, STAGE_LAUNCH];\r\n};\r\n\r\n_shooterPos = getPosASL _shooter;\r\n_projectilePos = getPosASL _projectile;\r\n\r\n_distanceToTarget = _projectilePos vectorDistance _seekerTargetPos;    \r\n_distanceToShooter = _projectilePos vectorDistance _shooterPos;\r\n_distanceShooterToTarget = _shooterPos vectorDistance _seekerTargetPos;\r\n\r\nTRACE_2(\"\", _distanceToTarget, _distanceToShooter);\r\n\r\n// Add height depending on distance for compensate\r\n_returnTargetPos = _seekerTargetPos;\r\n\r\nswitch( (_state select 0) ) do {\r\n    case STAGE_LAUNCH: {\r\n        TRACE_1(\"STAGE_LAUNCH\",\"\");\r\n        if(_distanceToShooter < 10) then { \r\n            _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*2];\r\n        } else {\r\n            _state set[0, STAGE_CLIMB];\r\n        };\r\n    };\r\n    case STAGE_CLIMB: {\r\n        TRACE_1(\"STAGE_CLIMB\",\"\");\r\n        _cruisAlt = 140;\r\n        if(_distanceShooterToTarget < 1250) then {\r\n            _cruisAlt = 140 * (_distanceShooterToTarget/1250);\r\n            TRACE_1(\"_cruisAlt\", _cruisAlt);\r\n        };\r\n        if( ((ASLToATL _projectilePos) select 2) - ((ASLToATL _seekerTargetPos) select 2) >= _cruisAlt) then {\r\n            if(_cruisAlt < 140) then {\r\n                _state set[0, STAGE_TERMINAL];\r\n            } else {\r\n                _state set[0, STAGE_COAST];\r\n            };\r\n        } else {\r\n             _returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget*1.5];\r\n        };\r\n    };\r\n    case STAGE_COAST: {\r\n        TRACE_1(\"STAGE_COAST\",\"\");\r\n        TRACE_1(\"\", ((ASLToATL _projectilePos) select 2) - (( ASLToATL _seekerTargetPos) select 2) );\r\n        if(_distanceToTarget < ( ((ASLToATL _projectilePos) select 2) - (( ASLToATL _seekerTargetPos) select 2) ) * 1.5) then {\r\n            _state set[0, STAGE_TERMINAL];\r\n        } else {\r\n            _returnTargetPos = _seekerTargetPos vectorAdd [0,0,(_projectilePos select 2)];\r\n        };\r\n    };\r\n    case STAGE_TERMINAL: {\r\n        TRACE_1(\"STAGE_TERMINAL\",\"\");\r\n        //_returnTargetPos = _seekerTargetPos vectorAdd [0,0,_distanceToTarget * 0.02];\r\n        _returnTargetPos = _seekerTargetPos;\r\n    };\r\n};\r\n\r\n#ifdef DEBUG_MODE_FULL\r\ndrawLine3D [(ASLtoATL _returnTargetPos), (ASLtoATL _seekerTargetPos), [0,1,0,1]];\r\n#endif\r\n\r\nTRACE_1(\"Adjusted target position\", _returnTargetPos);\r\n_returnTargetPos;"},{"name":"ace_missileguidance_fnc_attackProfile_LIN","file":"missileguidance/functions/fnc_attackProfile_LIN.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nEXPLODE_7_PVT(((_this select 1) select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\nprivate[\"_targetPos\", \"_projectilePos\", \"_target\", \"_seekerTargetPos\", \"_launchParams\", \"_targetLaunchParams\"];\r\nprivate[\"_distanceToTarget\", \"_distanceToShooter\", \"_addHeight\", \"_returnTargetPos\", \"_shooterPos\"];\r\n_seekerTargetPos = _this select 0;\r\n_launchParams = _this select 1;\r\n\r\n_target = _launchParams select 0;\r\n_targetLaunchParams = _launchParams select 1;\r\n\r\n_shooterPos = getPosASL _shooter;\r\n_projectilePos = getPosASL _projectile;\r\n\r\n_distanceToTarget = _projectilePos vectorDistance _seekerTargetPos;    \r\n_distanceToShooter = _projectilePos vectorDistance _shooterPos;\r\n\r\nTRACE_3(\"\", _distanceToTarget, _distanceToShooter, _seekerTargetPos);\r\n\r\n// Add height depending on distance for compensate\r\n_addHeight = [0,0,0];\r\n\r\n// Always climb an arc on initial launch if we are close to the round\r\nif( ((ASLtoATL _projectilePos) select 2) < 5 && _distanceToShooter < 15) then {\r\n        _addHeight = _addHeight vectorAdd [0,0,_distanceToTarget];\r\n} else {\r\n    // If we are below the target, increase the climbing arc\r\n    if((_projectilePos select 2) < (_seekerTargetPos select 2) && _distanceToTarget > 100) then {\r\n        _addHeight = _addHeight vectorAdd [0,0, ((_seekerTargetPos select 2) - (_projectilePos select 2))];\r\n    };\r\n};\r\n\r\n// Handle arcing terminal low for high decent\r\nif( (_projectilePos select 2) > (_seekerTargetPos select 2) && _distanceToTarget < 100) then {\r\n    _addHeight = _addHeight vectorDiff [0,0, ((_projectilePos select 2) - (_seekerTargetPos select 2)) * 0.5];\r\n} else {\r\n    if((_projectilePos select 2) > (_seekerTargetPos select 2) && _distanceToTarget > 100) then {\r\n        _addHeight = _addHeight vectorAdd [0,0, _distanceToTarget*0.02];\r\n    };\r\n};\r\n\r\n_returnTargetPos = _seekerTargetPos vectorAdd _addHeight;\r\n\r\n#ifdef DEBUG_MODE_FULL\r\ndrawLine3D [(ASLtoATL _returnTargetPos) vectorAdd _addHeight, ASLtoATL _returnTargetPos, [0,1,0,1]];\r\n#endif\r\n\r\nTRACE_1(\"Adjusted target position\", _returnTargetPos);\r\n_returnTargetPos;"},{"name":"ace_missileguidance_fnc_attackProfile_MID","file":"missileguidance/functions/fnc_attackProfile_MID.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n_this call FUNC(attackProfile_LIN);"},{"name":"ace_missileguidance_fnc_changeMissileDirection","file":"missileguidance/functions/fnc_changeMissileDirection.sqf","text":"#include \"script_component.hpp\"\r\nprivate [\"_projectile\", \"_v\", \"_l\", \"_r\"];\r\n\r\n_projectile = _this select 0;\r\n_v = _this select 1;\r\n\r\n_l = sqrt ((_v select 0) ^ 2 + (_v select 1) ^ 2);\r\n_r = -(_v select 2) / _l;\r\n\r\n_projectile setVectorDirAndUp [ _v, [(_v select 0) * _r,(_v select 1) * _r, _l] ];\r\n_projectile setVelocity (_v vectorMultiply (vectorMagnitude (velocity _projectile)));"},{"name":"ace_missileguidance_fnc_checkLos","file":"missileguidance/functions/fnc_checkLos.sqf","text":"/*\r\n * Author: jaynus\r\n * Returns whether the seeker object can see the target position with lineIntersect\r\n *\r\n * Arguments:\r\n * 0: Seeker [Object]\r\n * 1: Target [Object]\r\n * \r\n * Return Value:\r\n *    Boolean\r\n */\r\n#include \"script_component.hpp\"\r\nprivate[\"_seeker\", \"_seekerPos\", \"_target\", \"_targetPos\", \"_return\", \"_vectorTo\", \"_searchPos\"];\r\n_seeker = _this select 0;\r\n_target = _this select 1;\r\n\r\nif ((isNil \"_seeker\") || {isNil \"_target\"}) exitWith {false};\r\n\r\n_targetPos = getPosASL _target;\r\n_seekerPos = getPosASL _seeker;\r\n_return = true;\r\n\r\nif(!(terrainIntersectASL [ _seekerPos, _targetPos])) then {\r\n    if(lineIntersects [_seekerPos, _targetPos, _seeker, _target]) then {\r\n        _return = false; \r\n    };\r\n} else {\r\n    _return = false;\r\n};\r\n\r\n_return;"},{"name":"ace_missileguidance_fnc_checkSeekerAngle","file":"missileguidance/functions/fnc_checkSeekerAngle.sqf","text":"/*\r\n * Author: jaynus\r\n * Returns whether the target position is within the maximum angle FOV of the provided seeker \r\n * objects current direction.\r\n *\r\n * Arguments:\r\n * 0: Seeker [Object]\r\n * 1: Target [Position]\r\n * 2: Max Angle [Degrees]\r\n * \r\n * Return Value:\r\n *    Boolean\r\n */\r\n\r\n#include \"script_component.hpp\"\r\nprivate[\"_seeker\", \"_targetPos\", \"_seekerMaxAngle\", \"_sensorPos\", \"_testPointVector\", \"_testDotProduct\"];\r\n\r\n_seeker = _this select 0;\r\n_targetPos = _this select 1;\r\n_seekerMaxAngle = _this select 2;\r\n\r\n_sensorPos = getPosASL _seeker;\r\n\r\n_testPointVector = vectorNormalized (_targetPos vectorDiff _sensorPos);\r\n_testDotProduct = (vectorNormalized (velocity _seeker)) vectorDotProduct _testPointVector;\r\n\r\nif(_testDotProduct < (cos _seekerMaxAngle)) exitWith {\r\n    false \r\n};\r\n\r\ntrue"},{"name":"ace_missileguidance_fnc_doAttackProfile","file":"missileguidance/functions/fnc_doAttackProfile.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nEXPLODE_7_PVT(((_this select 1) select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\nprivate[\"_testName\", \"_attackProfilePos\", \"_attackProfile\", \"_attackProfileName\", \"_attackProfilesCfg\", \"_i\", \"_launchParams\", \"_testame\", \"_testProfile\"];\r\n_launchParams = ((_this select 1) select 1);\r\n_attackProfileName = _launchParams select 3;\r\n\r\nTRACE_1(\"Attacking profile\", _attackProfileName);\r\n\r\n_attackProfilesCfg = ( configFile >> QGVAR(AttackProfiles) );\r\n\r\n_attackProfile = nil;\r\nfor [{_i=0}, {_i< (count _attackProfilesCfg) }, {_i=_i+1}] do {\r\n    _testProfile = _attackProfilesCfg select _i;\r\n    _testName = configName _testProfile;\r\n    TRACE_3(\"\", _testName, _testProfile, _attackProfilesCfg);\r\n\r\n    if( _testName == _attackProfileName) exitWith {\r\n        _attackProfile = _attackProfilesCfg select _i;\r\n    };\r\n};\r\n\r\n_attackProfilePos = [0,0,0];\r\nif(!isNil \"_attackProfile\") then {\r\n    _attackProfilePos = _this call (missionNamespace getVariable (getText (_attackProfile >> \"functionName\")));\r\n};\r\n\r\n_attackProfilePos;\r\n"},{"name":"ace_missileguidance_fnc_doHandoff","file":"missileguidance/functions/fnc_doHandoff.sqf","text":"#include \"script_component.hpp\"\r\nPARAMS_2(_target,_args);\r\n\r\n[QGVAR(handoff), [_target, _args]] call CBA_fnc_globalEvent;"},{"name":"ace_missileguidance_fnc_doSeekerSearch","file":"missileguidance/functions/fnc_doSeekerSearch.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nEXPLODE_7_PVT(((_this select 1) select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\nprivate[\"_seekerProfilePos\", \"_i\", \"_launchParams\", \"_seekerType\", \"_seekerTypeName\", \"_seekerTypesCfg\", \"_testName\", \"_testProfile\"];\r\n\r\n_launchParams = ((_this select 1) select 1);\r\n_seekerTypeName = _launchParams select 2;\r\n\r\nTRACE_1(\"Seeker type\", _seekerTypeName);\r\n\r\n_seekerTypesCfg = ( configFile >> QGVAR(SeekerTypes) );\r\n\r\n_seekerType = nil;\r\nfor [{_i=0}, {_i< (count _seekerTypesCfg) }, {_i=_i+1}] do {\r\n    _testProfile = _seekerTypesCfg select _i;\r\n    _testName = configName _testProfile;\r\n    TRACE_3(\"\", _testName, _testProfile, _seekerTypesCfg);\r\n\r\n    if( _testName == _seekerTypeName) exitWith {\r\n        _seekerType = _seekerTypesCfg select _i;\r\n    };\r\n};\r\n\r\n_seekerProfilePos = [0,0,0];\r\nif(!isNil \"_seekerType\") then {\r\n    _seekerProfilePos = _this call (missionNamespace getVariable (getText (_seekerType >> \"functionName\")));\r\n};\r\n\r\n_seekerProfilePos;\r\n"},{"name":"ace_missileguidance_fnc_guidancePFH","file":"missileguidance/functions/fnc_guidancePFH.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\n#define TIMESTEP_FACTOR 0.01\r\n\r\nprivate[\"_launchParams\", \"_targetLaunchParams\", \"_flightParams\", \"_seekerParams\", \"_stateParams\"];\r\nprivate[\"_lastRunTime\", \"_runtimeDelta\", \"_adjustTime\", \"_args\", \"_seekerTargetPos\", \"_projectilePos\"];\r\nprivate[\"_profileAdjustedTargetPos\", \"_incDeflection\", \"_minDeflection\", \"_maxDeflection\"];\r\nprivate[\"_targetVector\", \"_adjustVector\", \"_finalAdjustVector\", \"_changeVector\", \"_pitch\", \"_yaw\", \"_roll\"];\r\nprivate[\"_PS\", \"_distanceToTarget\", \"_targetRelativeVector\", \"_vectorTo\"];\r\n\r\n_args = _this select 0;\r\nEXPLODE_7_PVT((_args select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\n\r\nif(!alive _projectile || isNull _projectile || isNull _shooter) exitWith {\r\n    [(_this select 1)] call CBA_fnc_removePerFrameHandler;\r\n};\r\n\r\n_launchParams = _args select 1;\r\n_targetLaunchParams = _launchParams select 1;\r\n_flightParams = _args select 2;\r\n_seekerParams = _args select 3;\r\n\r\n_stateParams = _args select 4;\r\n\r\n_lastRunTime = _stateParams select 0;\r\n_runtimeDelta = diag_tickTime - _lastRunTime;\r\n_adjustTime = 1;\r\n\r\nif(accTime > 0) then {\r\n    _adjustTime = 1/accTime;\r\n    _adjustTime = _adjustTime *  (_runtimeDelta / TIMESTEP_FACTOR);\r\n    TRACE_4(\"Adjust timing\", 1/accTime, _adjustTime, _runtimeDelta, (_runtimeDelta / TIMESTEP_FACTOR) );\r\n} else {\r\n    _adjustTime = 0;\r\n};\r\n\r\n_minDeflection = ((_flightParams select 0) - ((_flightParams select 0) * _adjustTime)) max 0;\r\n_maxDeflection = (_flightParams select 1) * _adjustTime;\r\n_incDeflection = _flightParams select 2;\r\n\r\n_projectilePos = getPosASL _projectile;\r\n\r\n// @TODO: placeholder for \"last seek target position\"\r\n// Last target pos should be optional based on the seeker unit\r\n_seekerTargetPos = [ [0,0,0], _args, (_stateParams select 1)] call FUNC(doSeekerSearch);\r\nif(isNil \"_seekerTargetPos\") then {\r\n    _seekerTargetPos = _seekerTargetPos vectorAdd ((velocity _projectile) vectorMultiply 5);\r\n} else {\r\n    if( (vectorMagnitude _seekerTargetPos) == 0) then {\r\n       _seekerTargetPos = _seekerTargetPos vectorAdd ((velocity _projectile) vectorMultiply 5);\r\n    };\r\n};\r\n\r\n_profileAdjustedTargetPos = [_seekerTargetPos,_args, (_stateParams select 2)] call FUNC(doAttackProfile);\r\n_targetVector = _projectilePos vectorFromTo _profileAdjustedTargetPos;\r\n_adjustVector = _targetVector vectorDiff (vectorDir _projectile);\r\n\r\n_yaw = 0;\r\n_pitch = 0;\r\n_roll = 0;    \r\nif((_adjustVector select 0) < 0) then {\r\n    _yaw = - ( (_minDeflection max (abs(_adjustVector select 0) min _maxDeflection) ) );\r\n} else {\r\n    if((_adjustVector select 0) > 0) then {\r\n        _yaw = ( (_minDeflection max ((_adjustVector select 0) min _maxDeflection) ) );\r\n    };\r\n};\r\nif((_adjustVector select 1) < 0) then {\r\n    _roll = - ( (_minDeflection max (abs(_adjustVector select 1) min _maxDeflection) ) );\r\n} else {\r\n    if((_adjustVector select 1) > 0) then {\r\n        _roll = ( (_minDeflection max ((_adjustVector select 1) min _maxDeflection) ) );\r\n    };\r\n};\r\nif((_adjustVector select 2) < 0) then {\r\n    _pitch = - ( (_minDeflection max (abs(_adjustVector select 2) min _maxDeflection) ) );\r\n} else {\r\n    if((_adjustVector select 2) > 0) then {\r\n        _pitch = ( (_minDeflection max ((_adjustVector select 2) min _maxDeflection) ) );\r\n    };\r\n};\r\n_finalAdjustVector = [_yaw, _roll, _pitch];\r\nTRACE_2(\"\", _pitch, _yaw);\r\nTRACE_4(\"\", _targetVector, _targetRelativeVector, _adjustVector, _finalAdjustVector);\r\n\r\nif(accTime > 0) then {\r\n    _changeVector = (vectorDir _projectile) vectorAdd _finalAdjustVector;\r\n    [_projectile, _changeVector] call FUNC(changeMissileDirection);\r\n};\r\n\r\n#ifdef DEBUG_MODE_FULL\r\ndrawIcon3D [\"\\a3\\ui_f\\data\\IGUI\\Cfg\\Cursors\\selectover_ca.paa\", [1,1,1,1], ASLtoATL _projectilePos, 0.75, 0.75, 0, str _vectorTo, 1, 0.025, \"TahomaB\"];\r\ndrawLine3D [ASLtoATL _projectilePos, ASLtoATL _profileAdjustedTargetPos, [1,0,0,1]];\r\n\r\n_ps = \"#particlesource\" createVehicleLocal (ASLtoATL _projectilePos);\r\n_PS setParticleParams [[\"\\A3\\Data_f\\cl_basic\", 8, 3, 1], \"\", \"Billboard\", 1, 3.0141, [0, 0, 2], [0, 0, 0], 1, 1.275, 1, 0, [1, 1], [[1, 0, 0, 1], [1, 0, 0, 1], [1, 0, 0, 1]], [1], 1, 0, \"\", \"\", nil];\r\n_PS setDropInterval 3.0;\r\n\r\nhintSilent format[\"d: %1\", _distanceToTarget];\r\n#endif\r\n\r\n_stateParams set[0, diag_tickTime];\r\n\r\n_args set[4, _stateParams];\r\n_this set[0, _args];"},{"name":"ace_missileguidance_fnc_handleHandoff","file":"missileguidance/functions/fnc_handleHandoff.sqf","text":"#include \"script_component.hpp\"\r\nPARAMS_2(_target,_args);\r\n\r\nif(isNil \"_target\" || {isNull _target} || {!local _target} ) exitWith { false };\r\n\r\n[FUNC(guidancePFH), 0, _args] call CBA_fnc_addPerFrameHandler;"},{"name":"ace_missileguidance_fnc_onFired","file":"missileguidance/functions/fnc_onFired.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_7(_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\n\r\n// Bail if guidance is disabled\r\n// Bail on locality of the projectile, it should be local to us\r\nif(GVAR(enabled) < 1 || {!local _projectile} ) exitWith { false };\r\n\r\n//Bail if shooter isn't player AND system not enabled for AI:\r\nif( !isPlayer _shooter && { GVAR(enabled) < 2 } ) exitWith { false };\r\n\r\n// Bail on not missile\r\nif(! (_ammo isKindOf \"MissileBase\") ) exitWith { false };\r\n\r\nprivate[\"_config\", \"_configs\", \"_enabled\", \"_target\", \"_seekerType\", \"_attackProfile\"];\r\nprivate[\"_args\", \"_canUseLock\", \"_guidingUnit\", \"_launchPos\", \"_lockMode\", \"_targetPos\", \"_vanillaTarget\"];\r\n\r\n//Verify ammo has explicity added guidance config (ignore inheritances)\r\n_configs = configProperties [(configFile >> \"CfgAmmo\" >> _ammo), QUOTE(configName _x == QUOTE(QUOTE(ADDON))), false];\r\nif( (count _configs) < 1) exitWith {};\r\n\r\n_config = (configFile >> \"CfgAmmo\" >> _ammo >> QUOTE(ADDON));\r\n_enabled = getNumber ( _config >> \"enabled\");\r\n\r\n// Bail if guidance is not enabled\r\nif(isNil \"_enabled\" || {_enabled != 1}) exitWith { false };\r\n\r\n_target = (vehicle _shooter) getVariable [QGVAR(target), nil];\r\n_targetPos = (vehicle _shooter) getVariable [QGVAR(targetPosition), nil];\r\n_seekerType = (vehicle _shooter) getVariable [QGVAR(seekerType), nil];\r\n_attackProfile = (vehicle _shooter) getVariable [QGVAR(attackProfile), nil];\r\n_lockMode = (vehicle _shooter) getVariable [QGVAR(lockMode), nil];\r\n\r\n// @TODO: make this vehicle shooter, but we need to differentiate where its set in ace_laser\r\n_laserCode = _shooter getVariable [QEGVAR(laser,code), ACE_DEFAULT_LASER_CODE];\r\n_laserInfo = [_laserCode, ACE_DEFAULT_LASER_WAVELENGTH, ACE_DEFAULT_LASER_WAVELENGTH];\r\n\r\n_launchPos = getPosASL (vehicle _shooter);\r\n\r\nTRACE_3(\"Begin guidance\", _target, _seekerType, _attackProfile);\r\n\r\nif (isNil \"_seekerType\" || {!(_seekerType in (getArray (_config >> \"seekerTypes\")))}) then {\r\n    _seekerType = getText (_config >> \"defaultSeekerType\");\r\n};\r\nif (isNil \"_attackProfile\" || {!(_attackProfile in (getArray (_config >> \"attackProfiles\")))}) then {\r\n    _attackProfile = getText (_config >> \"defaultAttackProfile\");\r\n};\r\nif (isNil \"_lockMode\" || {!(_lockMode in (getArray (_config >> \"seekerLockModes\")))}) then {\r\n    _lockMode = getText (_config >> \"defaultSeekerLockMode\");\r\n};\r\n\r\n// If we didn't get a target, try to fall back on tab locking\r\nif(isNil \"_target\") then {\r\n    if(!isPlayer _shooter) then {\r\n        // This was an AI shot, lets still guide it on the AI target\r\n        _target = _shooter getVariable[QGVAR(vanilla_target), nil];\r\n        TRACE_1(\"Detected AI Shooter!\", _target);\r\n    } else {\r\n        _canUseLock = getNumber (_config >> \"canVanillaLock\");\r\n        // @TODO: Get vanilla target\r\n        if(_canUseLock > 0 || difficulty < 1) then {\r\n            _vanillaTarget = cursorTarget;\r\n\r\n            TRACE_1(\"Using Vanilla Locking\", _vanillaTarget);\r\n            if(!isNil \"_vanillaTarget\") then {\r\n                _target = _vanillaTarget;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\n//ToDo: Add correct configs for new apex titans (in ace_javelin)\r\nif ((isNil \"_target\") && {(_weapon == \"launch_B_Titan_short_tna_F\") || {_weapon == \"launch_O_Titan_short_ghex_F\"}}) then {\r\n    ACE_LOGWARNING_1(\"APEX Launcher [%1] not supported - Wait for ACE 3.6.1\",_weapon);\r\n    if (!isNull cursorObject) then {_target = cursorObject;}; //Attempt to give some kind of target or it will\r\n};\r\n\r\nTRACE_4(\"Beginning ACE guidance system\",_target,_ammo,_seekerType,_attackProfile);\r\n_args = [_this,\r\n            [_shooter,\r\n                [_target, _targetPos, _launchPos],\r\n                _seekerType,\r\n                _attackProfile,\r\n                _lockMode,\r\n                _laserInfo\r\n            ],\r\n            [\r\n                getNumber ( _config >> \"minDeflection\" ),\r\n                getNumber ( _config >> \"maxDeflection\" ),\r\n                getNumber ( _config >> \"incDeflection\" )\r\n            ],\r\n            [\r\n                getNumber ( _config >> \"seekerAngle\" ),\r\n                getNumber ( _config >> \"seekerAccuracy\" ),\r\n                getNumber ( _config >> \"seekerMaxRange\" )\r\n            ],\r\n            [ diag_tickTime, [], [] ]\r\n        ];\r\n\r\n// Hand off to the guiding unit. We just use local player so local PFH fires for now\r\n// Laser code needs to give us a shooter for LOBL, or the seeker unit needs to be able to shift locality\r\n// Based on its homing laser\r\n// Lasers need to be handled in a special LOAL/LOBL case\r\n\r\n//if(isPlayer _shooter) then {\r\n//    _guidingUnit = ACE_player;\r\n//\r\n//    if(local _guidingUnit) then {\r\n//        [FUNC(guidancePFH), 0, _args ] call CBA_fnc_addPerFrameHandler;\r\n//    } else {\r\n//        [QGVAR(handoff), [_guidingUnit, _args] ] call FUNC(doHandoff);\r\n//    };\r\n//} else {\r\n    [FUNC(guidancePFH), 0, _args ] call CBA_fnc_addPerFrameHandler;\r\n//};\r\n\r\n\r\n/* Clears locking settings\r\n(vehicle _shooter) setVariable [QGVAR(target), nil];\r\n(vehicle _shooter) setVariable [QGVAR(seekerType), nil];\r\n(vehicle _shooter) setVariable [QGVAR(attackProfile), nil];\r\n(vehicle _shooter) setVariable [QGVAR(lockMode), nil];\r\n*/\r\n"},{"name":"ace_missileguidance_fnc_onIncomingMissile","file":"missileguidance/functions/fnc_onIncomingMissile.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\nPARAMS_3(_target,_ammo,_shooter);\r\n\r\nif(GVAR(enabled) < 1) exitWith {};    // bail if enabled\r\nif !(local (gunner _shooter) || {local _shooter}) exitWith {}; // bail if not shooter\r\n\r\n_shooter setVariable [QGVAR(vanilla_target),_target, false];"},{"name":"ace_missileguidance_fnc_rotateVectLine","file":"missileguidance/functions/fnc_rotateVectLine.sqf","text":"#include \"script_component.hpp\"\r\nprivate[\"_d\", \"_map\", \"_p\", \"_theta\", \"_u\"];\r\n\r\n_map = _this select 0;\r\n_theta = _this select 1;\r\n\r\n_p = _map select 0;\r\n_p1 = _map select 1;\r\n_p2 = _map select 2;\r\n\r\n_q1 = +(_map select 3);\r\n_q2 = +(_map select 4);\r\n_u = _map select 5;\r\n_d = _map select 6;\r\n\r\n/* Step 4 */\r\n_q2 set[0, (_q1 select 0) * cos(_theta) - (_q1 select 1) * sin(_theta)];\r\n_q2 set[1, (_q1 select 0) * sin(_theta) + (_q1 select 1) * cos(_theta)];\r\n_q2 set[2, (_q1 select 2)];\r\n\r\n/* Inverse of step 3 */\r\n_q1 set[0,   (_q2 select 0) * _d + (_q2 select 2) * (_u select 0)];\r\n_q1 set[1,   (_q2 select 1)];\r\n_q1 set[2, - (_q2 select 0) * (_u select 0) + (_q2 select 2) * _d];\r\n\r\n/* Inverse of step 2 */\r\nif (_d != 0) then {\r\n  _q2 set[0,   (_q1 select 0)];\r\n  _q2 set[1,   (_q1 select 1) * (_u select 2) / _d + (_q1 select 2) * (_u select 1) / _d];\r\n  _q2 set[2, - (_q1 select 1) * (_u select 1) / _d + (_q1 select 2) * (_u select 2) / _d];\r\n} else {\r\n  _q2 = _q1;\r\n};\r\n\r\n/* Inverse of step 1 */\r\n_q1 set[0, (_q2 select 0) + (_p1 select 0)];\r\n_q1 set[1, (_q2 select 1) + (_p1 select 1)];\r\n_q1 set[2, (_q2 select 2) + (_p1 select 2)];\r\n_q1;"},{"name":"ace_missileguidance_fnc_rotateVectLineGetMap","file":"missileguidance/functions/fnc_rotateVectLineGetMap.sqf","text":"#include \"script_component.hpp\"\r\n\r\nprivate [\"_p\", \"_theta\", \"_p1\", \"_p2\", \"_q1\", \"_q2\", \"_u\", \"_d\"];\r\n_p = _this select 0;\r\n_p1 = _this select 1;\r\n_p2 = _this select 2;\r\n\r\n_q1 = [];\r\n_q2 = [];\r\n_u = [];\r\n\r\n/* Step 1 */\r\n_q1 set[0, (_p select 0) - (_p1 select 0)];\r\n_q1 set[1, (_p select 1) - (_p1 select 1)];\r\n_q1 set[2, (_p select 2) - (_p1 select 2)];\r\n\r\n_u set[0, (_p2 select 0) - (_p1 select 0)];\r\n_u set[1, (_p2 select 1) - (_p1 select 1)];\r\n_u set[2, (_p2 select 2) - (_p1 select 2)];\r\n_u = _u call BIS_fnc_unitVector;\r\n_d = sqrt((_u select 1)*(_u select 1) + (_u select 2)*(_u select 2));\r\n\r\n/* Step 2 */\r\nif (_d != 0) then {\r\n  _q2 set[0, (_q1 select 0)];\r\n  _q2 set[1, (_q1 select 1) * (_u select 2) / _d - (_q1 select 2) * (_u select 1) / _d];\r\n  _q2 set[2, (_q1 select 1) * (_u select 1) / _d + (_q1 select 2) * (_u select 2) / _d];\r\n} else {\r\n  _q2 = _q1;\r\n};\r\n\r\n/* Step 3 */\r\n_q1 set[0, (_q2 select 0) * _d - (_q2 select 2) * (_u select 0)];\r\n_q1 set[1, (_q2 select 1)];\r\n_q1 set[2, (_q2 select 0) * (_u select 0) + (_q2 select 2) * _d];\r\n\r\n[_p, _p1, _p2, _q1, _q2, _u, _d]"},{"name":"ace_missileguidance_fnc_seekerType_Optic","file":"missileguidance/functions/fnc_seekerType_Optic.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nEXPLODE_7_PVT(((_this select 1) select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\nprivate[\"_targets\", \"_foundTargetPos\", \"_launchParams\", \"_seekerParams\", \"_targetLaunchParams\"];\r\nprivate[\"_angleFov\", \"_angleOkay\", \"_losOkay\", \"_seekerTargetPos\", \"_sensorPos\", \"_target\"];\r\n\r\n_seekerTargetPos = _this select 0;\r\n\r\n_launchParams = _this select 1;\r\n_target = (((_launchParams select 1) select 1) select 0);\r\n_seekerParams = _launchParams select 3;\r\n\r\nTRACE_1(\"\", _this);\r\nTRACE_1(\"\", _launchParams);\r\n\r\n// TODO:: Make sure the missile maintains LOS\r\n_foundTargetPos = [0,0,0];\r\nif(!isNil \"_target\") then {\r\n    _foundTargetPos = aimPos _target ;\r\n    //_foundTargetPos = (_target modelToWorldVisual (getCenterOfMass _target));\r\n};\r\n\r\n// @TODO: This is seeker LOS and angle checks for LOAL only; LOBL does not need visual\r\n_angleFov = _seekerParams select 0;\r\n_angleOkay = [_projectile, _foundTargetPos, _angleFov] call FUNC(checkSeekerAngle);\r\n\r\n_losOkay = false;\r\nif(_angleOkay) then {\r\n    _losOkay = [_projectile, _target] call FUNC(checkLos);\r\n};\r\nTRACE_2(\"\", _angleOkay, _losOkay);\r\n\r\n// If we got here, it was an invalid target, just return a spot 5m in front of the missile\r\nif(!_angleOkay || !_losOkay) then { \r\n    _foundTargetPos = _sensorPos vectorAdd ((velocity _projectile) vectorMultiply 5);\r\n} else {\r\n    TRACE_2(\"\", _target, _foundTargetPos);\r\n    private[\"_projectileSpeed\", \"_distanceToTarget\", \"_eta\", \"_adjustDistance\"];\r\n    // @TODO: Configurable lead for seekers\r\n    _projectileSpeed = (vectorMagnitude velocity _projectile);\r\n    _distanceToTarget = (getPosASL _projectile) vectorDistance _foundTargetPos; \r\n\r\n    _eta = _distanceToTarget / _projectileSpeed;\r\n\r\n    _adjustDistance = (velocity _target) vectorMultiply _eta;\r\n    TRACE_3(\"leading target\",_distanceToTarget,_eta,_adjustDistance);\r\n    _foundTargetPos = _foundTargetPos vectorAdd _adjustDistance;\r\n};\r\n\r\nTRACE_2(\"return\",_foundTargetPos,(aimPos _target) distance _foundTargetPos);\r\n_foundTargetPos;\r\n"},{"name":"ace_missileguidance_fnc_seekerType_SALH","file":"missileguidance/functions/fnc_seekerType_SALH.sqf","text":"//#define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nEXPLODE_7_PVT(((_this select 1) select 0),_shooter,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\nprivate[\"_angleFov\", \"_canSeeTarget\", \"_foundTargetPos\", \"_laserResult\", \"_launchParams\", \"_seekerParams\", \"_laserCode\", \"_laserParams\", \"_seekerTargetPos\", \"_sensorPos\", \"_target\"];\r\n_seekerTargetPos = _this select 0;\r\n_launchParams = _this select 1;\r\n_seekerParams = _launchParams select 3;\r\n_angleFov = _seekerParams select 0;\r\n\r\n_laserParams = (_launchParams select 1) select 5;\r\nTRACE_2(\"\", _launchParams, _laserParams);\r\nif(!isNil \"_target\") then {\r\n    // Handle AI or moving vanilla lasers\r\n    _foundTargetPos = getPosASL _target;\r\n} else {\r\n    _laserResult = [(getPosASL _projectile), (velocity _projectile), _angleFov, [(_laserParams select 1),(_laserParams select 2)], (_laserParams select 0)] call EFUNC(laser,seekerFindLaserSpot);\r\n    _foundTargetPos = _laserResult select 0;\r\n    TRACE_1(\"Search\", _laserResult);\r\n};\r\n\r\nif(!isNil \"_foundTargetPos\") then {\r\n    //_canSeeTarget = [_projectile, _foundTargetPos, _angleFov] call FUNC(checkSeekerAngle);\r\n\r\n    // If we got here, it was an invalid target, just return a spot 5m in front of the missile\r\n    if(!_canSeeTarget) then { \r\n        _foundTargetPos = _sensorPos vectorAdd ((velocity _projectile) vectorMultiply 5);\r\n    };\r\n\r\n};\r\n\r\n_foundTargetPos;"}],"missionmodules":[{"name":"ace_missionmodules_fnc_moduleAmbianceSound","file":"missionmodules/functions/fnc_moduleAmbianceSound.sqf","text":"/*\r\n * Author: Glowbal\r\n * Plays synchronized ambiance sounds while the module is alive.\r\n *\r\n * Arguments:\r\n * 0: Logic <LOGIC>\r\n * 1: Units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * N/A\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_ambianceSounds\", \"_minimalDistance\",\"_maximalDistance\", \"_minimalDistance\", \"_maxDelayBetweenSounds\", \"_missionRoot\", \"_unparsedSounds\", \"_splittedList\", \"_soundPath\"];\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\n// We only play this on the locality of the logic, since the sounds are broadcasted across the network\r\nif (_activated && local _logic) then {\r\n    _ambianceSounds = [];\r\n    _unparsedSounds = _logic getVariable [\"soundFiles\", \"\"];\r\n    _minimalDistance = (_logic getVariable [\"minimalDistance\", 400]) max 1;\r\n    _maximalDistance = (_logic getVariable [\"maximalDistance\", 10]) max _minimalDistance;\r\n    _minDelayBetweensounds = (_logic getVariable [\"minimalDelay\", 10]) max 1;\r\n    _maxDelayBetweenSounds = (_logic getVariable [\"maximalDelay\", 170]) max _minDelayBetweensounds;\r\n    _volume = (_logic getVariable [\"soundVolume\", 30]) max 1;\r\n    _followPlayers = _logic getVariable [\"followPlayers\", false];\r\n\r\n    _splittedList = _unparsedSounds splitString \",\";\r\n    _missionRoot = str missionConfigFile select [0, count str missionConfigFile - 15];\r\n\r\n    {\r\n        _x = [_x] call EFUNC(common,stringRemoveWhiteSpace);\r\n\r\n        if (isClass (missionConfigFile >> \"CfgSounds\" >> _x)) then {\r\n            // CfgSounds accepts a leading backslash, but a double backslash\r\n            // is not accepted in the path, so we have to filter that.\r\n            _soundPath = getArray (missionConfigFile >> \"CfgSounds\" >> _x >> \"sound\") select 0;\r\n            if (_soundPath select [0,1] == \"\\\") then {\r\n                _ambianceSounds pushBack (_missionRoot + (_soundPath select [1]));\r\n            } else {\r\n                _ambianceSounds pushBack (_missionRoot + _soundPath);\r\n            };\r\n        } else {\r\n            if (isClass (configFile >> \"CfgSounds\" >> _x)) then {\r\n                _ambianceSounds pushBack ((getArray(configFile >> \"CfgSounds\" >> _x >> \"sound\") select 0));\r\n            } else {\r\n                ACE_LOGERROR_1(\"Ambient Sounds: Sound \"\"%1\"\" not found.\",_x);\r\n            };\r\n        };\r\n\r\n        false\r\n    } count _splittedList;\r\n\r\n    if (count _ambianceSounds == 0) exitWith {};\r\n    {\r\n        if ((_x find \".\") == -1) then {\r\n            _ambianceSounds set [_forEachIndex, _x + \".wss\"];\r\n        };\r\n    } forEach _ambianceSounds;\r\n\r\n    [{\r\n        private [\"_newPos\", \"_allUnits\", \"_targetUnit\"];\r\n        params [\"_args\", \"_pfhHandle\"];\r\n        _args params [\"_logic\", \"_ambianceSounds\", \"_minimalDistance\", \"_maximalDistance\", \"_minDelayBetweensounds\", \"_maxDelayBetweenSounds\", \"_volume\", \"_followPlayers\", \"_lastTimePlayed\"];\r\n\r\n        if (!alive _logic) exitWith {\r\n            [_pfhHandle] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n\r\n        if (CBA_missionTime - _lastTimePlayed >= ((_minDelayBetweensounds + random(_maxDelayBetweenSounds)) min _maxDelayBetweenSounds)) then {\r\n\r\n            // Find all players in session.\r\n            _allUnits = if (isMultiplayer) then {playableUnits} else {[ACE_player]};\r\n\r\n            // Check if there are enough players to even start playing this sound.\r\n            if (count _allUnits > 0) then {\r\n\r\n                // Select a target unit at random.\r\n                _targetUnit = _allUnits call BIS_fnc_selectRandom;\r\n\r\n                // find the position from which we are going to play this sound from.\r\n                _newPos = (getPos _targetUnit);\r\n                if (!_followPlayers) then {\r\n                    _newPos = getPos _logic;\r\n                };\r\n\r\n                // Randomize this position.\r\n                if (random(1) >= 0.5) then {\r\n                    if (random(1) >= 0.5) then {\r\n                        _newPos set [0, (_newPos select 0) + (_minimalDistance + random(_maximalDistance))];\r\n                    } else {\r\n                        _newPos set [0, (_newPos select 0) - (_minimalDistance + random(_maximalDistance))];\r\n                    };\r\n                } else {\r\n                    if (random(1) >= 0.5) then {\r\n                        _newPos set [1, (_newPos select 1) + (_minimalDistance + random(_maximalDistance))];\r\n                    } else {\r\n                        _newPos set [1, (_newPos select 1) - (_minimalDistance + random(_maximalDistance))];\r\n                    };\r\n                };\r\n\r\n                // If no unit is to close to this position, we will play the sound.\r\n                if ({(_newPos distance _x < (_minimalDistance / 2))}count _allUnits == 0) then {\r\n                    playSound3D [selectRandom _ambianceSounds, objNull,  false, _newPos, _volume, 1, 1000];\r\n                    _args set [8, CBA_missionTime];\r\n                };\r\n            };\r\n        };\r\n    }, 0.1, [_logic, _ambianceSounds, _minimalDistance, _maximalDistance, _minDelayBetweensounds, _maxDelayBetweenSounds, _volume, _followPlayers, CBA_missionTime] ] call CBA_fnc_addPerFrameHandler;\r\n};\r\n\r\ntrue;\r\n"}],"mk6mortar":[{"name":"ace_mk6mortar_fnc_canLoadMagazine","file":"mk6mortar/functions/fnc_canLoadMagazine.sqf","text":"/*\r\n * Author: Grey\r\n * Checks whether magazine can be loaded into static weapon\r\n *\r\n * Arguments:\r\n * 0: static <OBJECT>\r\n * 1: unit <OBJECT>\r\n * 2: magazine class to check; if not given having any compatible magazine returns true <STRING> (default: \"\")\r\n *\r\n * Return Value:\r\n * canLoadMagazine <BOOL>\r\n *\r\n * Example:\r\n * [_target,_player,\"ACE_1Rnd_82mm_Mo_HE\"] call ace_mk6mortar_fnc_canLoadMagazine\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_static\",\"_unit\",[\"_magazineClassOptional\",\"\",[\"\"]]];\r\nprivate [\"_canLoadMagazine\",\"_currentMagazine\",\"_weapon\",\"_listOfMagNames\",\r\n    \"_hasCompatibleMagazine\",\"_count\"];\r\n\r\nif !(alive _static && GVAR(useAmmoHandling)) exitWith {false};\r\n\r\n_canLoadMagazine = false;\r\n_hasCompatibleMagazine = false;\r\n\r\n_currentMagazine = (magazinesAllTurrets _static) select 1;\r\n_weapon = (_static weaponsTurret [0]) select 0;\r\n\r\n_listOfMagNames = getArray(configFile >> \"cfgWeapons\" >> _weapon >> \"magazines\");\r\n_count = 0;\r\n\r\n//If function is called with an optional string then check if player has that magzine otherwise check all magazines of the player to see if they are compatible with the static weapon\r\nif (_magazineClassOptional != \"\") then {\r\n    if ([_unit,_magazineClassOptional] call EFUNC(common,hasMagazine)) then {\r\n        _hasCompatibleMagazine = true;\r\n    };\r\n } else {\r\n    {\r\n        if ([_unit,_x] call EFUNC(common,hasMagazine)) exitWith {_hasCompatibleMagazine = true};\r\n    } forEach _listOfMagNames;\r\n};\r\n//If static weapon has a magazine then find the ammo count\r\nif (count (_static magazinesTurret [0]) > 0) then {\r\n    _count = _currentMagazine select 2;\r\n};\r\n//If the static weapon doesn't have a magzine or a magazine with no bullets, the player has a compatible magazine and the static weapon has a barrel then you can load a magazine\r\nif ((count (_static magazinesTurret [0]) == 0 || _count == 0 ) && _hasCompatibleMagazine) then {\r\n    _canLoadMagazine = true;\r\n};\r\n_canLoadMagazine\r\n"},{"name":"ace_mk6mortar_fnc_canUnloadMagazine","file":"mk6mortar/functions/fnc_canUnloadMagazine.sqf","text":"/*\r\n * Author: Grey\r\n * Checks whether magazine can be unloaded from static weapon\r\n *\r\n * Arguments:\r\n * 0: static <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * canUnloadMagazine <BOOL>\r\n *\r\n * Example:\r\n * [_target,_player] call ace_mk6mortar_fnc_canUnloadMagazine\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_static\",\"_unit\"];\r\nprivate [\"_canUnloadMagazine\",\"_ammoCount\"];\r\n\r\nif !(alive _static && GVAR(useAmmoHandling) && _static getVariable [QGVAR(initialized),false]) exitWith {false};\r\n_canUnloadMagazine = false;\r\n\r\n_ammoCount = ((magazinesAllTurrets _static) select 1) select 2;\r\nif (_ammoCount > 0) then {\r\n    _canUnloadMagazine = true;\r\n};\r\n_canUnloadMagazine\r\n"},{"name":"ace_mk6mortar_fnc_dev_buildTable","file":"mk6mortar/functions/fnc_dev_buildTable.sqf","text":"/*\r\n * Author: PabstMirror\r\n * DEV function to build mortar tables, very cpu intensive (never used durring normal gameplay)\r\n *\r\n * Arguments:\r\n * 0: Muzzle Velocity <NUMBER>\r\n * 1: Air Friction <NUMBER>\r\n *\r\n * Return Value:\r\n * <Data in clipboard>\r\n *\r\n * Example:\r\n * [100, -0.0001] spawn ace_mk6mortar_fnc_dev_buildTable; //spawn (scheduled) is slower\r\n * [100, -0.0001] call ace_mk6mortar_fnc_dev_buildTable; //faster, but will lock while processing\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n\r\nprivate [\"_muzzleVelocity\", \"_airFriction\", \"_stillInRange\", \"_currentRange\", \"_increasePerRow\", \"_outputArray\", \"_rangeToHit\", \"_lineElevation\", \"_lineHeightElevation\", \"_lineTimeOfFlight\", \"_lineCrosswindDeg\", \"_lineHeadwindMeters\", \"_lineTailWindMeters\", \"_lineTempDec\", \"_lineTempInc\", \"_lineAirDensDec\", \"_lineAirDensInc\", \"_result\", \"_outputString\"];\r\n\r\n_muzzleVelocity = _this select 0;\r\n_airFriction = _this select 1;\r\n_stillInRange = true;\r\n_currentRange = 100;\r\n_increasePerRow = 50;\r\n_outputArray = [];\r\n\r\n\r\n//[_rangeToHit, _lineElevation, _lineHeightElevation, _lineHeightTimeDelta, _lineTimeOfFlight, _lineCrosswindDeg, _lineHeadwindMeters, _lineTailWindMeters, _lineTempDec, _lineTempInc, _lineAirDensDec, _lineAirDensInc]\r\n\r\nwhile {_stillInRange} do {\r\n    _result = [_muzzleVelocity, _currentRange, _airFriction] call FUNC(dev_simulateCalcRangeTableLine);\r\n    if (_result isEqualTo []) then {\r\n        _stillInRange = false;\r\n    } else {\r\n        if (_airFriction == 0) then {\r\n            _result set [5, 0];\r\n            _result set [6, 0];\r\n            _result set [7, 0];\r\n            _result set [8, 0];\r\n            _result set [9, 0];\r\n            _result set [10, 0];\r\n            _result set [11, 0];\r\n        };\r\n        if ((_result select 1) < 88) then {\r\n            _outputArray pushBack [\r\n            ([(_result select 0),  \"meters\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 1),  \"mil\", true] call FUNC(dev_formatNumber)),\r\n            ([(_result select 2),  \"mil\", true] call FUNC(dev_formatNumber)),\r\n            ([(_result select 3),  \"sec\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 4),  \"sec\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 5),  \"milPrecise\", true] call FUNC(dev_formatNumber)),\r\n            ([(_result select 6),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 7),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 8),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 9),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 10),  \"metersprecise\", false] call FUNC(dev_formatNumber)),\r\n            ([(_result select 11), \"metersprecise\", false] call FUNC(dev_formatNumber))\r\n            ];\r\n        };\r\n        _currentRange = _currentRange + _increasePerRow;\r\n    };\r\n    hintSilent str _currentRange;\r\n};\r\n\r\n//handle floating point rounding errors\r\n_outputString = format [\"case ((abs(_muzzleVelocity - %1) < 0.00001) && {(abs(_airFriction - %2) < 0.00001)}): {\r\n[\r\n\", _muzzleVelocity, _airFriction];\r\n\r\n{\r\n    if (_forEachIndex < ((count _outputArray) - 1)) then {\r\n        _outputString = _outputString + format [\"%1,\r\n    \", _x];\r\n    } else {\r\n        _outputString = _outputString + format [\"%1\r\n    ]\r\n    };\", _x];\r\n    };\r\n} forEach _outputArray;\r\n\r\ncopyToClipboard _outputString;\r\nrangeTableOutput = _outputString;\r\n\r\nhint \"done\";"},{"name":"ace_mk6mortar_fnc_dev_formatNumber","file":"mk6mortar/functions/fnc_dev_formatNumber.sqf","text":"/*\r\nAuthor: Pabst Mirror\r\n\r\nDescription:\r\nConverts numbers into nicely formated strings.\r\n\r\nParameters:\r\n0: NUMBER - Input number\r\n1: STRING - Output type (see case statement)\r\n2: BOOL   - If output type is mil, convert input type from deg->mil\r\n\r\nReturns:\r\nSTRING - Formatted number\r\n\r\nExample:\r\n[45, \"mil4\", true] call ace_mk6mortar_fnc_dev_formatNumber = \"0800\"\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_theNumber\", \"_inputType\", \"_convertToMils\", \"_decimalPlaces\", \"_integerPlaces\", \"_prefix\", \"_return\"];\r\n\r\n_theNumber = _this select 0;\r\n_inputType = _this select 1;\r\n_convertToMils = _this select 2;\r\n\r\n_decimalPlaces = -1;\r\n_integerPlaces = -1;\r\n\r\nswitch (toLower _inputType) do {\r\ncase (\"meters\"): {\r\n        _decimalPlaces = 0;\r\n        _integerPlaces = 1;\r\n    };\r\ncase (\"metersprecise\"): {\r\n        _decimalPlaces = 1;\r\n        _integerPlaces = 1;\r\n    };\r\ncase (\"meters4\"): {\r\n        _decimalPlaces = 0;\r\n        _integerPlaces = 4;\r\n    };\r\ncase (\"deg3precise\"): {\r\n        _decimalPlaces = 2;\r\n        _integerPlaces = 3;\r\n    };\r\ncase (\"mil\"): {\r\n        _decimalPlaces = 0;\r\n        _integerPlaces = 1;\r\n        if (_convertToMils) then {\r\n            _theNumber = _theNumber * (6400 / 360);\r\n        };\r\n    };\r\ncase (\"mil4\"): {\r\n        _decimalPlaces = 0;\r\n        _integerPlaces = 4;\r\n        if (_convertToMils) then {\r\n            _theNumber = _theNumber * (6400 / 360);\r\n        };\r\n    };\r\ncase (\"milprecise\"): {\r\n        _decimalPlaces = 1;\r\n        _integerPlaces = 1;\r\n        if (_convertToMils) then {\r\n            _theNumber = _theNumber * (6400 / 360);\r\n        };\r\n    };\r\ncase (\"sec\"): {\r\n        _decimalPlaces = 1;\r\n        _integerPlaces = 1;\r\n    };\r\n    default {systemChat format [\"badtype %1\", _inputType];};\r\n};\r\n\r\n//CBA_fnc_formatNumber is silly:  [-9.58545, 1, 1, false] call CBA_fnc_formatNumber == \"-9.-6\"\r\n\r\n_prefix = if (_theNumber < 0) then {\"-\"} else {\"\"};\r\n\r\n_return = [abs (_theNumber), _integerPlaces, _decimalPlaces, false] call CBA_fnc_formatNumber;\r\n\r\n(_prefix + _return)\r\n"},{"name":"ace_mk6mortar_fnc_dev_simulateCalcRangeTableLine","file":"mk6mortar/functions/fnc_dev_simulateCalcRangeTableLine.sqf","text":"/*\r\nAuthor: Pabst Mirror\r\n\r\nDescription:\r\nBuilds a rangeTable line for a certian range, given muzzle velocity and air friction, returns [] if out of range.\r\n\r\nParameters:\r\n0: NUMBER - Muzzle Velocity\r\n1: NUMBER - Air Friction\r\n2: NUMBER - Range To Hit\r\n\r\nReturns:\r\nARRAY - Range Table Line Data (see return line)\r\n\r\nExample:\r\n[300, -0.0001, 3000] call ace_mk6mortar_fnc_simulateCalcRangeTableLine\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define TIME_STEP (1/50)\r\n\r\nprivate [\"_startTime\", \"_muzzleVelocity\", \"_rangeToHit\", \"_airFriction\", \"_vacElevation\", \"_radicand\", \"_maxElev\", \"_minElev\", \"_error\", \"_solutionElevation\", \"_lastTestResult\", \"_numberOfAttempts\", \"_lineElevation\", \"_lineTimeOfFlight\", \"_lineHeightElevation\", \"_lineHeightTimeDelta\", \"_lineCrosswindDeg\", \"_lineHeadwindMeters\", \"_lineTailWindMeters\", \"_result\"];\r\n\r\n_startTime = diag_tickTime;\r\n\r\n_muzzleVelocity = _this select 0;\r\n_rangeToHit = _this select 1;\r\n_airFriction = _this select 2;\r\n\r\n//Run Binary search for correct elevation\r\n_solution = [_rangeToHit, 0, _muzzleVelocity, _airFriction, TIME_STEP] call FUNC(dev_simulateFindSolution);\r\nif (_solution isEqualTo []) exitWith {[]};\r\n\r\n//Real Elevation\r\n_lineElevation = _solution select 0;\r\n\r\n//Time Of Flight:\r\n_lineTimeOfFlight = _solution select 1;\r\n\r\n//Height Adjustment for -100m (another binary search)\r\n_solution = [_rangeToHit, -100, _muzzleVelocity, _airFriction, TIME_STEP] call FUNC(dev_simulateFindSolution);\r\nif (_solution isEqualTo []) exitWith {[]};//should never be triggered (lower elevation easier to hit)\r\n\r\n_lineHeightElevation = ((_solution select 0) - _lineElevation);\r\n_lineHeightTimeDelta = (_solution select 1) - _lineTimeOfFlight;\r\n\r\n//Compute for 10x and divide to minimize rounding errors\r\n\r\n//Crosswind\r\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1, 0, 10, 0, TIME_STEP] call FUNC(dev_simulateShot);\r\n_lineCrosswindDeg = (_lastTestResult select 2) / 10;\r\n\r\n//Headwind:\r\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1, -10, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\r\n_lineHeadwindMeters = (_rangeToHit - (_lastTestResult select 0)) / 10;\r\n\r\n//TailWind:\r\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1, 10, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\r\n_lineTailWindMeters = (_rangeToHit - (_lastTestResult select 0)) / 10;\r\n\r\n//Air Temp Dec\r\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, (15 - 10), 1, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\r\n_lineTempDec = (_rangeToHit - (_lastTestResult select 0)) / 10;\r\n\r\n//Air Temp Inc\r\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, (15 + 10), 1, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\r\n_lineTempInc = (_rangeToHit - (_lastTestResult select 0)) / 10;\r\n\r\n//Air Density Dec\r\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 0.9, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\r\n_lineAirDensDec = (_rangeToHit - (_lastTestResult select 0)) / 10;\r\n\r\n//Air Density Inc\r\n_lastTestResult = [_lineElevation, _muzzleVelocity, _airFriction, 15, 1.1, 0, 0, 0, TIME_STEP] call FUNC(dev_simulateShot);\r\n_lineAirDensInc = (_rangeToHit - (_lastTestResult select 0)) / 10;\r\n\r\n// systemChat format [\"debug: Range %1 - in %2 sec\", _rangeToHit, (diag_tickTime - _startTime)];\r\n\r\n[_rangeToHit, _lineElevation, _lineHeightElevation, _lineHeightTimeDelta, _lineTimeOfFlight, _lineCrosswindDeg, _lineHeadwindMeters, _lineTailWindMeters, _lineTempDec, _lineTempInc, _lineAirDensDec, _lineAirDensInc]\r\n"},{"name":"ace_mk6mortar_fnc_dev_simulateFindSolution","file":"mk6mortar/functions/fnc_dev_simulateFindSolution.sqf","text":"/*\r\n * Author: PabstMirror\r\n * DEV to find a firing solution for a given range\r\n *\r\n * Arguments:\r\n * 0: Range to Hit (Meters)<NUMBER>\r\n * 1: Height To Hit (Meters)<NUMBER>\r\n * 2: Muzzle Velocity (M/S)<NUMBER>\r\n * 3: Air Friction <NUMBER>\r\n * 4: Time Step (seconds) (eg 1/50 will simulate 50 cycles per second) <NUMBER>\r\n *\r\n * Return Value:\r\n * ARRAY - [NUMBER - Elevation In Degrees, NUMBER - Shot Durration]\r\n *\r\n * Example:\r\n * [_rangeToHit, _heightToHit, _muzzleVelocity, _airFriction, TIME_STEP] call ace_mk6mortar_fnc_dev_simulateFindSolution;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_rangeToHit\", \"_heightToHit\", \"_muzzleVelocity\", \"_airFriction\", \"_maxElev\", \"_minElev\", \"_error\", \"_solutionElevation\", \"_lastTestResult\", \"_numberOfAttempts\"];\r\n\r\n#define MAX_ATTEMPTS 22\r\n\r\n_rangeToHit = _this select 0;\r\n_heightToHit = _this select 1;\r\n_muzzleVelocity = _this select 2;\r\n_airFriction = _this select 3;\r\n_timeStep = _this select 4;\r\n\r\n_maxElev = 90;\r\n_minElev = 45; //todo - Low Angle Howitzers???\r\n\r\n_error = 10000;\r\n_solutionElevation = -1;\r\n_lastTestResult = [];\r\n_numberOfAttempts = 0;\r\n\r\n//(binary search)\r\nwhile {(_numberOfAttempts < MAX_ATTEMPTS) && {(abs _error) > 0.2}} do {\r\n    _numberOfAttempts = _numberOfAttempts + 1;\r\n    _solutionElevation = (_maxElev + _minElev) / 2;\r\n    _lastTestResult = [_solutionElevation, _muzzleVelocity, _airFriction, 15, 1, 0, 0, _heightToHit, _timeStep] call FUNC(dev_simulateShot);\r\n    _error = _rangeToHit - (_lastTestResult select 0);\r\n    if (_error > 0) then {\r\n        _maxElev = _solutionElevation; //test range was short\r\n    } else {\r\n        _minElev = _solutionElevation; //test range was long\r\n    };\r\n};\r\nif (_numberOfAttempts >= MAX_ATTEMPTS) exitWith {[]};\r\n\r\n//return the elevation and time required\r\n[_solutionElevation, (_lastTestResult select 1)]\r\n"},{"name":"ace_mk6mortar_fnc_dev_simulateShot","file":"mk6mortar/functions/fnc_dev_simulateShot.sqf","text":"/*\r\n * Author: PabstMirror\r\n * DEV function to build mortar tables, very cpu intensive (never used durring normal gameplay)\r\n *\r\n * Arguments:\r\n * 0: Shot Angle (degrees) <NUMBER>\r\n * 1: Muzzle Velocity (m/s) <NUMBER>\r\n * 2: Air Friction <NUMBER>\r\n * 3: Tempeture (degres celcius) <NUMBER>\r\n * 4: Relative Air Denisty <NUMBER>\r\n * 5: Tail Wind (m/s) <NUMBER>\r\n * 6: Cross Wind (m/s) <NUMBER>\r\n * 7: Height Of Target (M) <NUMBER>\r\n * 8: Time Step (fraction of a second) <NUMBER>\r\n *\r\n * Return Value:\r\n * <ARRAY> [Distance Traveled<NUMBER>, Shot Time<NUMBER>, Offset (degrees)<NUMBER>]\r\n *\r\n * Example:\r\n * [45, 180, -0.0001, 15, 1, 10, 0, 0, 1/50] call ace_mk6mortar_fnc_dev_simulateShot;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_angleDeg\", \"_muzzleVelocity\", \"_airFriction\", \"_temp\", \"_relDensity\", \"_tailWind\", \"_crosswind\", \"_heightOfTarget\", \"_timeStep\", \"_wind\", \"_gravity\", \"_currentPos\", \"_currentVelocity\", \"_currentTime\", \"_lastPos\", \"_kCoefficent\", \"_aparentWind\", \"_changeInVelocity\", \"_linConversion\", \"_middlePos\", \"_middlePosOld\", \"_middleTotalTravelTime\", \"_offsetDeg\"];\r\n\r\n_angleDeg = _this select 0;\r\n_muzzleVelocity = _this select 1;\r\n_airFriction = _this select 2;\r\n_temp = _this select 3;\r\n_relDensity = _this select 4;\r\n_tailWind = _this select 5;\r\n_crosswind = _this select 6;\r\n_heightOfTarget = _this select 7;\r\n_timeStep = _this select 8;\r\n\r\n_wind = [_crosswind, _tailWind, 0];\r\n_gravity = [0,0,-9.8];\r\n\r\n_currentPos = [0,0,0];\r\n_muzzleVelocity = _muzzleVelocity * (((_temp + 273.13) / 288.13 - 1) / 40 + 1);\r\n_currentVelocity = [0, (_muzzleVelocity * cos _angleDeg), (_muzzleVelocity * sin _angleDeg)];\r\n\r\n_currentTime = 0;\r\n_lastPos = _currentPos;\r\n\r\n_kCoefficent = -1 * _relDensity * _airFriction;  //save time in the loop and compute once\r\n\r\nwhile {((_currentVelocity select 2) > 0) || ((_currentPos select 2) >= _heightOfTarget)} do {\r\n    _lastPos = _currentPos;\r\n\r\n    _aparentWind = _wind vectorDiff _currentVelocity;\r\n    _changeInVelocity = _gravity vectorAdd (_aparentWind vectorMultiply ((vectorMagnitude _aparentWind) * _kCoefficent));\r\n\r\n    _currentVelocity = _currentVelocity vectorAdd (_changeInVelocity vectorMultiply _timeStep);\r\n\r\n    _currentPos = _currentPos vectorAdd (_currentVelocity vectorMultiply _timeStep);\r\n    _currentTime = _currentTime + _timeStep;\r\n};\r\n\r\n//Uses linearConversion to get a weighted average betwen points before and after dropping below target height\r\n_linConversion = linearConversion [(_lastPos select 2), (_currentPos select 2), _heightOfTarget, 0, 1, true];\r\n_middlePos = (_lastPos vectorMultiply (1 - _linConversion)) vectorAdd (_currentPos vectorMultiply (_linConversion));\r\n// _middlePosOld = (_lastPos vectorAdd _currentPos) vectorMultiply 0.5;\r\n\r\n//Same to find travel time\r\n_middleTotalTravelTime = _currentTime - (_timeStep * (1-_linConversion));\r\n\r\n//Find shot offset (from crosswind), in degrees\r\n_offsetDeg = (_middlePos select 0) aTan2 (_middlePos select 1);\r\n\r\n[(_middlePos select 1), _middleTotalTravelTime, _offsetDeg]\r\n"},{"name":"ace_mk6mortar_fnc_handleFired","file":"mk6mortar/functions/fnc_handleFired.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Called when the mortar is fired.\r\n *\r\n * Arguments:\r\n * 0: mortar - Object the event handler is assigned to <OBJECT>\r\n * 1: weapon - Fired weapon <STRING>\r\n * 2: muzzle - Muzzle that was used <STRING>\r\n * 3: mode - Current mode of the fired weapon <STRING>\r\n * 4: ammo - Ammo used <STRING>\r\n * 5: magazine - magazine name which was used <STRING>\r\n * 6: projectile - Object of the projectile that was shot <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [clientFiredBIS-XEH] call ace_mk6mortar_fnc_handleFired\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_7(_vehicle,_weapon,_muzzle,_mode,_ammo,_magazine,_projectile);\r\n\r\nif (GVAR(useAmmoHandling) && {_vehicle getVariable [QGVAR(initialized),false] && !(_vehicle getVariable [QGVAR(exclude),false])}) then {\r\n    // if !(_vehicle getVariable [QGVAR(exclude),false]) then {\r\n        _vehicle removeMagazineGlobal (_vehicle magazinesTurret [0] select 0);\r\n        TRACE_1(\"\",_vehicle magazinesTurret [0]);\r\n    // };\r\n};\r\n\r\nif (!GVAR(airResistanceEnabled)) exitWith {};\r\n\r\nprivate [\"_shooterMan\", \"_temperature\", \"_newMuzzleVelocityCoefficent\", \"_bulletVelocity\", \"_bulletSpeed\"];\r\n\r\n// Large enough distance to not simulate any wind deflection\r\nif (_vehicle distance ACE_player > 8000) exitWith {false};\r\n\r\n//AI will have no clue how to use:\r\n_shooterMan = gunner _vehicle;\r\nif (!([_shooterMan] call EFUNC(common,isPlayer))) exitWith {false};\r\n\r\n//Calculate air density:\r\n_altitude = (getPosASL _vehicle) select 2;\r\n_temperature = _altitude call EFUNC(weather,calculateTemperatureAtHeight);\r\n_pressure = _altitude call EFUNC(weather,calculateBarometricPressure);\r\n_relativeHumidity = EGVAR(weather,currentHumidity);\r\n_airDensity = [_temperature, _pressure, _relativeHumidity] call EFUNC(weather,calculateAirDensity);\r\n_relativeDensity = _airDensity / 1.225;\r\n\r\nTRACE_5(\"FiredWeather\",_temperature,_pressure,_relativeHumidity,_airDensity,_relativeDensity);\r\n\r\n//powder effects:\r\n_newMuzzleVelocityCoefficent = (((_temperature + 273.13) / 288.13 - 1) / 40 + 1);\r\nif (_newMuzzleVelocityCoefficent != 1) then {\r\n    _bulletVelocity = velocity _projectile;\r\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\r\n    _bulletVelocity = (vectorNormalized _bulletVelocity) vectorMultiply (_bulletSpeed * _newMuzzleVelocityCoefficent);\r\n    _projectile setVelocity _bulletVelocity;\r\n};\r\n\r\n\r\n[{\r\n    private [\"_deltaT\", \"_bulletVelocity\", \"_bulletSpeed\", \"_trueVelocity\", \"_trueSpeed\", \"_dragRef\", \"_accelRef\", \"_drag\", \"_accel\"];\r\n    PARAMS_2(_args,_pfID);\r\n    EXPLODE_4_PVT(_args,_shell,_airFriction,_time,_relativeDensity);\r\n\r\n    if (isNull _shell || {!alive _shell}) exitWith {\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    _deltaT = CBA_missionTime - _time;\r\n    _args set[2, CBA_missionTime];\r\n\r\n    _bulletVelocity = velocity _shell;\r\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\r\n\r\n    _trueVelocity = _bulletVelocity vectorDiff ACE_wind;\r\n    _trueSpeed = vectorMagnitude _trueVelocity;\r\n\r\n    _drag = _deltaT * _airFriction * _trueSpeed * _relativeDensity;\r\n    _accel = _trueVelocity vectorMultiply (_drag);\r\n    _bulletVelocity = _bulletVelocity vectorAdd _accel;\r\n\r\n    _shell setVelocity _bulletVelocity;\r\n\r\n}, 0, [_projectile, MK6_82mm_AIR_FRICTION, CBA_missionTime, _relativeDensity]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_mk6mortar_fnc_handlePlayerVehicleChanged","file":"mk6mortar/functions/fnc_handlePlayerVehicleChanged.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles player getting into new vehicle.  Loads PFEG for mortar display if it is a mortar.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: New Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * No\r\n *\r\n * Example:\r\n * [bob, mortar] call ace_mk6mortar_fnc_handlePlayerVehicleChanged;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_newVehicle\"];\r\n\r\nif (isNull _newVehicle) exitWith {};\r\nif (!(_newVehicle isKindOf \"Mortar_01_base_F\")) exitWith {};\r\n\r\n// Run magazine handling initialization if enabled\r\nif (!(_newVehicle getVariable [QGVAR(initialized),false]) && !(_newVehicle getVariable [QGVAR(exclude),false])) then {\r\n    // Make sure that mortar init is executed after settings init\r\n    [{\r\n        params [\"_mortar\"];\r\n        if (GVAR(useAmmoHandling) && {!(_mortar getVariable [QGVAR(initialized),false]) && !(_mortar getVariable [QGVAR(exclude),false])}) then {\r\n            //wait for proper turret locality change\r\n            [{\r\n                [\"ace_initMortar\", [_this], [_this]] call CBA_fnc_globalEvent;\r\n            }, _mortar, 0.05] call CBA_fnc_waitAndExecute;\r\n        };\r\n    }, _newVehicle] call EFUNC(common,runAfterSettingsInit);\r\n};\r\n\r\nprivate _tubeWeaponName = (weapons _newVehicle) select 0;\r\nprivate _fireModes = getArray (configFile >> \"CfgWeapons\" >> _tubeWeaponName >> \"modes\");\r\n\r\n//Restore last firemode:\r\nprivate _lastFireMode = _newVehicle getVariable [QGVAR(lastFireMode), -1];\r\nif (_lastFireMode != -1) then {\r\n    _player action [\"SwitchWeapon\", _newVehicle, _player, _lastFireMode];\r\n};\r\n\r\n[{\r\n    private[\"_chargeText\", \"_currentChargeMode\", \"_currentFireMode\", \"_display\", \"_elevDeg\", \"_elevationDiff\", \"_lookVector\", \"_notGunnerView\", \"_realAzimuth\", \"_realElevation\", \"_upVectorDir\", \"_useMils\", \"_weaponDir\"];\r\n    PARAMS_2(_args,_pfID);\r\n    EXPLODE_2_PVT(_args,_mortarVeh,_fireModes);\r\n\r\n    if ((vehicle ACE_player) != _mortarVeh) then {\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n    } else {\r\n\r\n        _useMils = _mortarVeh getVariable [QGVAR(useMils), true];\r\n\r\n        //Compute: 'charge' from weaponstate\r\n        _currentFireMode = (weaponState [_mortarVeh, [0]]) select 2;\r\n        _currentChargeMode = _fireModes find _currentFireMode;\r\n\r\n        //Save firemode on vehicle:\r\n        _mortarVeh setVariable [QGVAR(lastFireMode), _currentChargeMode];\r\n\r\n        if (shownArtilleryComputer && {!GVAR(allowComputerRangefinder)}) then {\r\n            //Don't like this solution, but it works\r\n            closeDialog 0;\r\n            [parseText \"Computer Disabled\"] call EFUNC(common,displayTextStructured);\r\n        };\r\n\r\n        _display = uiNamespace getVariable [\"ACE_Mk6_RscWeaponRangeArtillery\", displayNull];\r\n        if (isNull _display) exitWith {}; //It may be null for the first frame\r\n\r\n        _chargeText = format [\"<t size='0.8'>%1: %2 <img image='%3'/></t>\", (localize LSTRING(rangetable_charge)), _currentChargeMode, QPATHTOF(UI\\ui_charges.paa)];\r\n\r\n        //Hud should hidden in 3rd person\r\n        _notGunnerView = cameraView != \"GUNNER\";\r\n\r\n        //Calc real azimuth/elevation\r\n        //(looking at the sky VS looking at ground will radicaly change fire direction because BIS)\r\n        _realAzimuth = -1;\r\n        _realElevation = -1;\r\n        if ((ctrlText (_display displayCtrl 173)) == \"--\") then {\r\n            //No range (looking at sky), it will follow weaponDir:\r\n            _weaponDir = _mortarVeh weaponDirection (currentWeapon _mortarVeh);\r\n            _realAzimuth = (_weaponDir select 0) atan2 (_weaponDir select 1);\r\n            _realElevation = asin (_weaponDir select 2);\r\n        } else {\r\n            //Valid range, will fire at camera dir\r\n            _lookVector = ((positionCameraToWorld [0,0,0]) call EFUNC(common,positionToASL)) vectorFromTo ((positionCameraToWorld [0,0,10]) call EFUNC(common,positionToASL));\r\n            _realAzimuth = ((_lookVector select 0) atan2 (_lookVector select 1));\r\n            _upVectorDir = (((vectorUp _mortarVeh) select 0) atan2 ((vectorUp _mortarVeh) select 1));\r\n            _elevationDiff = (cos (_realAzimuth - _upVectorDir)) * acos ((vectorUp _mortarVeh) select 2);\r\n            _realElevation = ((180 / PI) * (_mortarVeh animationPhase \"mainGun\")) + 75 - _elevationDiff;\r\n        };\r\n\r\n        //Update Heading Display:\r\n        if (_notGunnerView || (!GVAR(allowCompass))) then {\r\n            (_display displayCtrl 80156) ctrlSetText \"\";\r\n        } else {\r\n            if (_useMils) then {\r\n                (_display displayCtrl 80156) ctrlSetText str (((round (_realAzimuth * 6400 / 360)) + 6400) % 6400);\r\n            } else {\r\n                (_display displayCtrl 80156) ctrlSetText str ((round (_realAzimuth + 360)) % 360);\r\n            };\r\n        };\r\n\r\n        //Update CurrentElevation Display and \"charge\" text\r\n        if (_notGunnerView) then {\r\n            (_display displayCtrl 80085) ctrlSetStructuredText parseText \"\";\r\n            (_display displayCtrl 80175) ctrlSetText \"\";\r\n        } else {\r\n            (_display displayCtrl 80085) ctrlSetStructuredText parseText _chargeText;\r\n\r\n            if (_useMils) then {\r\n                (_display displayCtrl 80175) ctrlSetText str ((round (_realElevation * 6400 / 360)) % 6400);\r\n            } else {\r\n                (_display displayCtrl 80175) ctrlSetText str (((round (_realElevation * 100)) / 100) % 360);\r\n            };\r\n        };\r\n\r\n        //Update ElevationNeeded Display:\r\n        if (_notGunnerView || (!GVAR(allowComputerRangefinder))) then {\r\n            (_display displayCtrl 80176) ctrlSetText \"\";\r\n        } else {\r\n            _elevDeg = parseNumber ctrlText (_display displayCtrl 176);\r\n            if (_elevDeg <= 0) then { //Bad data means \"----\" out of range\r\n                (_display displayCtrl 80176) ctrlSetText (ctrlText (_display displayCtrl 176));\r\n            } else {\r\n                _elevDeg = _elevDeg + (_realElevation - (parseNumber ctrlText (_display displayCtrl 175)));\r\n                if (_useMils) then {\r\n                    (_display displayCtrl 80176) ctrlSetText str round ((round (_elevDeg * 6400 / 360)) % 6400);\r\n                } else {\r\n                    (_display displayCtrl 80176) ctrlSetText str (((round (_elevDeg * 100)) / 100) % 360);\r\n                };\r\n            };\r\n        };\r\n    };\r\n}, 0, [_newVehicle, _fireModes]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_mk6mortar_fnc_loadMagazine","file":"mk6mortar/functions/fnc_loadMagazine.sqf","text":"/*\r\n * Author: Grey\r\n * Loads Magazine into static weapon\r\n *\r\n * Arguments:\r\n * 0: static <OBJECT>\r\n * 1: unit <OBJECT>\r\n * 2: magazine class to load; if not given the first compatible magazine is loaded <STRING> (default: \"\")\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_target,_player,\"ACE_1Rnd_82mm_Mo_HE\"] call ace_mk6mortar_fnc_loadMagazine\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_static\",\"_unit\",[\"_magazineClassOptional\",\"\",[\"\"]]];\r\nprivate [\"_weapon\",\"_currentMagazine\",\"_count\",\"_magazines\",\"_magazineDetails\",\"_listOfMagNames\",\r\n    \"_magazineClass\",\"_magazineClassDetails\",\"_parsed\",\"_roundsLeft\"];\r\n\r\n//If function has been called with an optional classname hten add that magazine to the static weapon. Otherwise add the compatible magazine\r\nif(_magazineClassOptional != \"\") then {\r\n    _unit removeMagazine _magazineClassOptional;\r\n    [QGVAR(addMagazine), [_static, _magazineClassOptional]] call CBA_fnc_globalEvent;\r\n} else {\r\n    //Get weapon & magazine information of static weapon\r\n    _weapon = (_static weaponsTurret [0]) select 0;\r\n    _currentMagazine = (magazinesAllTurrets _static) select 1;\r\n    _currentMagazineClass = _currentMagazine select 0;\r\n    _count = _currentMagazine select 2;\r\n\r\n    //Check all of the players magazines to see if they are compatible with the static weapon. First magazine that is compatible is chosen\r\n    //VKing: This section ought to be double checked.\r\n    _magazines = magazines _unit;\r\n    _magazineDetails = magazinesDetail _unit;\r\n    _listOfMagNames = getArray(configFile >> \"cfgWeapons\" >> _weapon >> \"magazines\");\r\n    _magazineClass = \"\";\r\n    _magazineClassDetails = \"\";\r\n    _parsed  =\"\";\r\n    _roundsLeft = 0;\r\n    {\r\n        if (_x in _listOfMagNames) exitWith {\r\n            _magazineClass = _x;\r\n            _magazineClassDetails = _magazineDetails select _forEachIndex;\r\n        };\r\n    } forEach _magazines;\r\n    //If the static weapon already has an empty magazine then remove it\r\n    if (_count == 0) then {\r\n        [QGVAR(removeMagazine), [_static, _currentMagazineClass]] call CBA_fnc_globalEvent;\r\n    };\r\n    //Find out the ammo count of the compatible magazine found\r\n    if (_magazineClassDetails != \"\") then{\r\n        _parsed = _magazineClassDetails splitString \"([]/: )\";\r\n        _parsed params [\"_type\", \"\", \"\", \"_roundsLeftText\", \"_maxRoundsText\"];\r\n        _roundsLeft = parseNumber _roundsLeftText;\r\n        _magType = _type;\r\n    };\r\n\r\n    _unit removeMagazine _magazineClass;\r\n    [QGVAR(addMagazine), [_static, _magazineClass]] call CBA_fnc_globalEvent;\r\n    [QGVAR(setAmmo), [_static, _magazineClass,_roundsLeft], _static] call CBA_fnc_targetEvent;\r\n};\r\n"},{"name":"ace_mk6mortar_fnc_loadMagazineTimer","file":"mk6mortar/functions/fnc_loadMagazineTimer.sqf","text":"/*\r\n * Author: Grey\r\n * Loads Magazine into static weapon using a timer\r\n *\r\n * Arguments:\r\n * 0: static <OBJECT>\r\n * 1: unit <OBJECT>\r\n * 2: time to load <NUMBER>\r\n * 3: magazineClassOptional <OPTIONAL><STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_target,_player,\"ACE_1Rnd_82mm_Mo_HE\"] call ace_mk6mortar_fnc_loadMagazineTimer\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_static\",\"_unit\",\"_timeToLoad\",[\"_magazineClassOptional\",\"\",[\"\"]]];\r\n\r\n//Move player into animation if player is standing\r\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\r\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\", 1] call EFUNC(common,doAnimation);\r\n};\r\n\r\n[_timeToLoad, [_static,_unit,_magazineClassOptional], {(_this select 0) call FUNC(loadMagazine)}, {}, localize LSTRING(loadingMortar)] call EFUNC(common,progressBar);\r\n"},{"name":"ace_mk6mortar_fnc_moduleInit","file":"mk6mortar/functions/fnc_moduleInit.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Loads settings from the module.\r\n *\r\n * Arguments:\r\n * 0: The Module Logic Object <OBJECT>\r\n * 1: synced objects <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [fromModule] call ace_mk6mortar_fnc_moduleInit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_3(_logic,_syncedUnits,_activated);\r\n\r\nif (!_activated) exitWith {WARNING(\"Module - placed but not active\");};\r\nif (!isServer) exitWith {};\r\n\r\n[_logic, QGVAR(airResistanceEnabled), \"airResistanceEnabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(allowComputerRangefinder), \"allowComputerRangefinder\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(allowCompass), \"allowCompass\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(useAmmoHandling), \"useAmmoHandling\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_mk6mortar_fnc_mortarInit","file":"mk6mortar/functions/fnc_mortarInit.sqf","text":"/*\r\n * Author: VKing\r\n * Initializes mortar for use with ammunition handling magazines.\r\n *\r\n * Arguments:\r\n * 0: Mortar <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [mortar1] call ace_mk6mortar_fnc_mortarInit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_mortar\"];\r\n\r\nif (_mortar getVariable [QGVAR(initialized),false] || _mortar getVariable [QGVAR(exclude),false]) exitWith {TRACE_1(\"Exit\",_mortar)};\r\nif (!(_mortar turretLocal [0])) exitWith {TRACE_1(\"Exit - turret not local\",_mortar)};\r\n\r\n// Remove all magazines from turret\r\nif (count magazines _mortar > 0) then {\r\n    {\r\n        _mortar removeMagazineTurret [_x,[0]];\r\n    } forEach magazines _mortar;\r\n};\r\n\r\n// Replace current turret weapon with ammo handling weapon\r\nprivate _currentWeapon = _mortar weaponsTurret [0] select 0;\r\nprivate _newWeapon = \"\";\r\n\r\nif (_currentWeapon == \"mortar_82mm\") then {\r\n    _newWeapon = \"ace_mortar_82mm\";\r\n} else {\r\n    _newWeapon = getText (configFile >> \"CfgWeapons\" >> _currentWeapon >> QGVAR(replaceWith));\r\n};\r\n\r\nif (_newWeapon != \"\") then {\r\n    _mortar removeWeaponTurret [_currentWeapon,[0]];\r\n    _mortar addWeaponTurret [_newWeapon,[0]];\r\n};\r\n\r\n_mortar setVariable [QGVAR(initialized),true,true];\r\nTRACE_1(\"Init complete\",_mortar);\r\n"},{"name":"ace_mk6mortar_fnc_rangeTableCanUse","file":"mk6mortar/functions/fnc_rangeTableCanUse.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Can player open 82mm rangetable.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Open <BOOL>\r\n *\r\n * Example:\r\n * [bob, bob] call ace_mk6mortar_fnc_rangeTableCanUse\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_2(_vehicle,_player);\r\n\r\n\"ACE_RangeTable_82mm\" in (items _player);\r\n"},{"name":"ace_mk6mortar_fnc_rangeTableOpen","file":"mk6mortar/functions/fnc_rangeTableOpen.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Opens the rangetable and fills the charge listbox.\r\n *\r\n * Arguments:\r\n * No\r\n *\r\n * Return Value:\r\n * No\r\n *\r\n * Example:\r\n * [] call ace_mk6mortar_fnc_rangeTableOpen\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define LIST_CHARGE ((uiNamespace getVariable \"ACE_82mm_RangeTable_Dialog\") displayCtrl 1501)\r\n\r\nprivate [\"_weaponName\", \"_magazines\", \"_initSpeed\", \"_fireModes\", \"_muzzleVelocities\", \"_showToPlayer\", \"_artilleryCharge\"];\r\n\r\n_weaponName = \"mortar_82mm\"; //todo: work on other weapons\r\n\r\ncreateDialog \"ACE_82mm_RangeTable_Dialog\";\r\nif (isNull (uiNamespace getVariable [\"ACE_82mm_RangeTable_Dialog\", displayNull])) exitWith {ERROR(\"Dialog failed to open\");};\r\n\r\n//Get Magazine Types\r\n_magazines = getArray (configFile >> \"CfgWeapons\" >> _weaponName >> \"magazines\");\r\n\r\n//For now just get settings from first mag, all rounds have same flight characteristics:\r\nif ((count _magazines) < 1) exitWith {ERROR(\"No Magazines for weapon\");};\r\n_initSpeed = getNumber (configFile >> \"CfgMagazines\" >> (_magazines select 0) >> \"initSpeed\");\r\n\r\n//Get Charge Modes\r\n_fireModes = getArray (configFile >> \"CfgWeapons\" >> _weaponName >> \"modes\");\r\n\r\n_muzzleVelocities = [];\r\n{\r\n    _showToPlayer = getNumber (configFile >> \"CfgWeapons\" >> _weaponName >> _x >> \"showToPlayer\");\r\n    if (_showToPlayer == 1) then {\r\n        _artilleryCharge = getNumber (configFile >> \"CfgWeapons\" >> _weaponName >> _x >> \"artilleryCharge\");\r\n        LIST_CHARGE lbAdd format [\"%1: %2\", (localize LSTRING(rangetable_charge)), (count _muzzleVelocities)];\r\n        LIST_CHARGE lbSetData [(count _muzzleVelocities), str (_artilleryCharge * _initSpeed)];\r\n        _muzzleVelocities pushBack _artilleryCharge;\r\n    };\r\n} forEach _fireModes;\r\n\r\nLIST_CHARGE lbSetCurSel 0;\r\n"},{"name":"ace_mk6mortar_fnc_rangeTablePageChange","file":"mk6mortar/functions/fnc_rangeTablePageChange.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Called when listbox selection changes.  Updates the rangetable with new values.\r\n *\r\n * Arguments:\r\n * No\r\n *\r\n * Return Value:\r\n * No\r\n *\r\n * Example:\r\n * [] call ace_mk6mortar_fnc_rangeTablePageChange\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define RANGE_TABLE       ((uiNamespace getVariable \"ACE_82mm_RangeTable_Dialog\") displayCtrl 20001)\r\n#define LIST_CHARGE       ((uiNamespace getVariable \"ACE_82mm_RangeTable_Dialog\") displayCtrl 1501)\r\n\r\nprivate [\"_listBoxData\", \"_muzzleVelocity\", \"_airFriction\", \"_precalcArray\"];\r\n\r\n_listBoxData = LIST_CHARGE lbData (lbCurSel LIST_CHARGE);\r\nif (isNil \"_listBoxData\" || {_listBoxData == \"\"}) exitWith {ERROR(\"lbCurSel out of bounds or no data\");};\r\n_muzzleVelocity = parseNumber _listBoxData;\r\n\r\n_airFriction = if (GVAR(airResistanceEnabled)) then {MK6_82mm_AIR_FRICTION} else {0};\r\n\r\n_precalcArray = [_muzzleVelocity, _airFriction] call FUNC(rangeTablePreCalculatedValues);\r\n\r\nlnbClear RANGE_TABLE;\r\n{\r\n    RANGE_TABLE lnbAddRow _x;\r\n} forEach _precalcArray;\r\n\r\n//put dummy line at end because scrolling is fucked and can't see last line\r\nRANGE_TABLE lnbAddRow [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n"},{"name":"ace_mk6mortar_fnc_rangeTablePreCalculatedValues","file":"mk6mortar/functions/fnc_rangeTablePreCalculatedValues.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Simple Lookup Table for various muzzle velocities and air frictions.\r\n * Use ace_mk6mortar_fnc_dev_buildTable to build\r\n *\r\n * Arguments:\r\n * 0: Muzzle Velocity <NUMBER>\r\n * 1: Air Friction <NUMBER>\r\n *\r\n * Return Value:\r\n * <ARRAY>\r\n *\r\n * Example:\r\n * [200, 0] call ace_mk6mortar_fnc_rangeTablePreCalculatedValues\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_2(_muzzleVelocity,_airFriction);\r\n\r\nswitch (true) do {\r\n\r\ncase ((abs(_muzzleVelocity - 70) < 0.00001) && {(abs(_airFriction - -0.0001) < 0.00001)}): {\r\n        [\r\n        [\"100\",\"1493\",\"9\",\"1.4\",\"14.0\",\"3.7\",\"0.4\",\"-0.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"150\",\"1438\",\"14\",\"1.4\",\"13.9\",\"2.5\",\"0.4\",\"-0.4\",\"0.0\",\"0.0\",\"-0.1\",\"0.0\"],\r\n        [\"200\",\"1381\",\"20\",\"1.4\",\"13.8\",\"1.9\",\"0.5\",\"-0.4\",\"0.0\",\"0.0\",\"-0.1\",\"0.1\"],\r\n        [\"250\",\"1321\",\"27\",\"1.5\",\"13.6\",\"1.5\",\"0.5\",\"-0.4\",\"0.0\",\"0.0\",\"-0.1\",\"0.1\"],\r\n        [\"300\",\"1256\",\"36\",\"1.6\",\"13.3\",\"1.3\",\"0.6\",\"-0.5\",\"0.0\",\"-0.1\",\"-0.1\",\"0.1\"],\r\n        [\"350\",\"1183\",\"49\",\"1.7\",\"12.9\",\"1.1\",\"0.6\",\"-0.5\",\"0.1\",\"-0.1\",\"-0.1\",\"0.1\"],\r\n        [\"400\",\"1097\",\"70\",\"1.9\",\"12.4\",\"0.9\",\"0.6\",\"-0.5\",\"0.1\",\"-0.1\",\"-0.2\",\"0.1\"],\r\n        [\"450\",\"979\",\"113\",\"2.3\",\"11.6\",\"0.8\",\"0.6\",\"-0.5\",\"0.1\",\"-0.1\",\"-0.2\",\"0.2\"]\r\n        ]\r\n    };\r\ncase ((abs(_muzzleVelocity - 140) < 0.00001) && {(abs(_airFriction - -0.0001) < 0.00001)}): {\r\n        [\r\n        [\"150\",\"1556\",\"1\",\"0.8\",\"27.2\",\"16.3\",\"2.5\",\"-2.4\",\"0.0\",\"0.0\",\"-0.2\",\"0.2\"],\r\n        [\"200\",\"1541\",\"1\",\"0.8\",\"27.2\",\"12.3\",\"2.5\",\"-2.4\",\"0.0\",\"0.0\",\"-0.3\",\"0.2\"],\r\n        [\"250\",\"1527\",\"2\",\"0.8\",\"27.2\",\"9.9\",\"2.6\",\"-2.4\",\"0.0\",\"0.0\",\"-0.3\",\"0.3\"],\r\n        [\"300\",\"1512\",\"2\",\"0.8\",\"27.2\",\"8.3\",\"2.7\",\"-2.4\",\"0.1\",\"0.0\",\"-0.4\",\"0.4\"],\r\n        [\"350\",\"1497\",\"3\",\"0.8\",\"27.1\",\"7.1\",\"2.7\",\"-2.5\",\"0.0\",\"-0.1\",\"-0.5\",\"0.4\"],\r\n        [\"400\",\"1482\",\"3\",\"0.8\",\"27.1\",\"6.2\",\"2.7\",\"-2.5\",\"0.1\",\"-0.1\",\"-0.5\",\"0.5\"],\r\n        [\"450\",\"1467\",\"3\",\"0.8\",\"27.0\",\"5.6\",\"2.8\",\"-2.5\",\"0.1\",\"-0.1\",\"-0.6\",\"0.6\"],\r\n        [\"500\",\"1451\",\"4\",\"0.8\",\"27.0\",\"5.0\",\"2.9\",\"-2.6\",\"0.1\",\"-0.1\",\"-0.6\",\"0.6\"],\r\n        [\"550\",\"1436\",\"4\",\"0.8\",\"26.9\",\"4.6\",\"2.9\",\"-2.6\",\"0.1\",\"-0.1\",\"-0.7\",\"0.7\"],\r\n        [\"600\",\"1420\",\"5\",\"0.8\",\"26.8\",\"4.2\",\"3.0\",\"-2.7\",\"0.1\",\"-0.1\",\"-0.8\",\"0.8\"],\r\n        [\"650\",\"1404\",\"5\",\"0.8\",\"26.8\",\"3.9\",\"3.0\",\"-2.7\",\"0.1\",\"-0.1\",\"-0.9\",\"0.8\"],\r\n        [\"700\",\"1388\",\"6\",\"0.8\",\"26.7\",\"3.6\",\"3.1\",\"-2.8\",\"0.1\",\"-0.1\",\"-0.9\",\"0.9\"],\r\n        [\"750\",\"1372\",\"6\",\"0.8\",\"26.6\",\"3.4\",\"3.2\",\"-2.8\",\"0.1\",\"-0.1\",\"-1.0\",\"1.0\"],\r\n        [\"800\",\"1355\",\"7\",\"0.8\",\"26.5\",\"3.2\",\"3.2\",\"-2.9\",\"0.1\",\"-0.1\",\"-1.1\",\"1.1\"],\r\n        [\"850\",\"1338\",\"8\",\"0.8\",\"26.4\",\"3.0\",\"3.3\",\"-2.9\",\"0.1\",\"-0.1\",\"-1.1\",\"1.1\"],\r\n        [\"900\",\"1321\",\"8\",\"0.8\",\"26.2\",\"2.8\",\"3.4\",\"-3.0\",\"0.1\",\"-0.1\",\"-1.2\",\"1.2\"],\r\n        [\"950\",\"1303\",\"9\",\"0.9\",\"26.1\",\"2.7\",\"3.4\",\"-3.1\",\"0.1\",\"-0.2\",\"-1.3\",\"1.2\"],\r\n        [\"1000\",\"1285\",\"10\",\"0.9\",\"26.0\",\"2.6\",\"3.5\",\"-3.1\",\"0.2\",\"-0.1\",\"-1.4\",\"1.3\"],\r\n        [\"1050\",\"1266\",\"11\",\"0.9\",\"25.8\",\"2.4\",\"3.5\",\"-3.2\",\"0.1\",\"-0.2\",\"-1.4\",\"1.4\"],\r\n        [\"1100\",\"1247\",\"12\",\"0.9\",\"25.7\",\"2.3\",\"3.6\",\"-3.3\",\"0.1\",\"-0.2\",\"-1.5\",\"1.4\"],\r\n        [\"1150\",\"1228\",\"13\",\"0.9\",\"25.5\",\"2.2\",\"3.7\",\"-3.3\",\"0.2\",\"-0.2\",\"-1.6\",\"1.5\"],\r\n        [\"1200\",\"1207\",\"14\",\"1.0\",\"25.3\",\"2.1\",\"3.7\",\"-3.4\",\"0.2\",\"-0.2\",\"-1.7\",\"1.6\"],\r\n        [\"1250\",\"1186\",\"15\",\"1.0\",\"25.1\",\"2.0\",\"3.8\",\"-3.4\",\"0.2\",\"-0.2\",\"-1.7\",\"1.7\"],\r\n        [\"1300\",\"1163\",\"17\",\"1.0\",\"24.8\",\"1.9\",\"3.8\",\"-3.5\",\"0.2\",\"-0.2\",\"-1.8\",\"1.7\"],\r\n        [\"1350\",\"1140\",\"19\",\"1.0\",\"24.6\",\"1.9\",\"3.9\",\"-3.5\",\"0.2\",\"-0.2\",\"-1.9\",\"1.8\"],\r\n        [\"1400\",\"1115\",\"21\",\"1.1\",\"24.3\",\"1.8\",\"3.9\",\"-3.6\",\"0.2\",\"-0.2\",\"-1.9\",\"1.9\"],\r\n        [\"1450\",\"1088\",\"24\",\"1.1\",\"23.9\",\"1.7\",\"4.0\",\"-3.6\",\"0.2\",\"-0.2\",\"-2.0\",\"1.9\"],\r\n        [\"1500\",\"1060\",\"27\",\"1.2\",\"23.6\",\"1.6\",\"4.0\",\"-3.7\",\"0.2\",\"-0.2\",\"-2.1\",\"2.0\"],\r\n        [\"1550\",\"1028\",\"32\",\"1.3\",\"23.1\",\"1.5\",\"4.0\",\"-3.7\",\"0.2\",\"-0.2\",\"-2.1\",\"2.1\"],\r\n        [\"1600\",\"991\",\"38\",\"1.4\",\"22.6\",\"1.5\",\"4.0\",\"-3.7\",\"0.2\",\"-0.2\",\"-2.2\",\"2.1\"],\r\n        [\"1650\",\"947\",\"49\",\"1.7\",\"21.9\",\"1.4\",\"4.0\",\"-3.7\",\"0.2\",\"-0.3\",\"-2.3\",\"2.2\"],\r\n        [\"1700\",\"888\",\"71\",\"2.1\",\"21.0\",\"1.3\",\"3.9\",\"-3.6\",\"0.3\",\"-0.3\",\"-2.3\",\"2.2\"]\r\n        ]\r\n    };\r\ncase ((abs(_muzzleVelocity - 200) < 0.00001) && {(abs(_airFriction - -0.0001) < 0.00001)}): {\r\n        [\r\n        [\"250\",\"1559\",\"1\",\"0.6\",\"37.3\",\"23.8\",\"6.1\",\"-5.9\",\"0.0\",\"0.0\",\"-0.6\",\"0.5\"],\r\n        [\"300\",\"1551\",\"1\",\"0.6\",\"37.3\",\"20.0\",\"6.1\",\"-5.9\",\"0.1\",\"0.0\",\"-0.7\",\"0.7\"],\r\n        [\"350\",\"1543\",\"1\",\"0.6\",\"37.3\",\"17.2\",\"6.2\",\"-5.9\",\"0.0\",\"-0.1\",\"-0.8\",\"0.7\"],\r\n        [\"400\",\"1535\",\"1\",\"0.6\",\"37.3\",\"15.1\",\"6.2\",\"-5.9\",\"0.1\",\"0.0\",\"-0.9\",\"0.9\"],\r\n        [\"450\",\"1527\",\"1\",\"0.6\",\"37.3\",\"13.4\",\"6.3\",\"-6.0\",\"0.1\",\"-0.1\",\"-1.0\",\"1.0\"],\r\n        [\"500\",\"1519\",\"1\",\"0.6\",\"37.2\",\"12.1\",\"6.3\",\"-6.0\",\"0.1\",\"-0.1\",\"-1.1\",\"1.1\"],\r\n        [\"550\",\"1510\",\"1\",\"0.6\",\"37.2\",\"11.0\",\"6.4\",\"-6.0\",\"0.1\",\"-0.1\",\"-1.3\",\"1.2\"],\r\n        [\"600\",\"1502\",\"1\",\"0.6\",\"37.2\",\"10.1\",\"6.4\",\"-6.1\",\"0.1\",\"-0.1\",\"-1.4\",\"1.3\"],\r\n        [\"650\",\"1494\",\"1\",\"0.6\",\"37.2\",\"9.4\",\"6.5\",\"-6.1\",\"0.1\",\"-0.1\",\"-1.5\",\"1.4\"],\r\n        [\"700\",\"1485\",\"2\",\"0.6\",\"37.1\",\"8.7\",\"6.5\",\"-6.2\",\"0.1\",\"-0.1\",\"-1.6\",\"1.5\"],\r\n        [\"750\",\"1477\",\"2\",\"0.6\",\"37.1\",\"8.2\",\"6.6\",\"-6.2\",\"0.1\",\"-0.1\",\"-1.7\",\"1.6\"],\r\n        [\"800\",\"1468\",\"2\",\"0.6\",\"37.0\",\"7.7\",\"6.7\",\"-6.3\",\"0.1\",\"-0.1\",\"-1.8\",\"1.8\"],\r\n        [\"850\",\"1460\",\"2\",\"0.6\",\"37.0\",\"7.2\",\"6.7\",\"-6.3\",\"0.1\",\"-0.1\",\"-2.0\",\"1.9\"],\r\n        [\"900\",\"1451\",\"2\",\"0.6\",\"37.0\",\"6.8\",\"6.8\",\"-6.4\",\"0.1\",\"-0.1\",\"-2.1\",\"2.0\"],\r\n        [\"950\",\"1443\",\"2\",\"0.6\",\"36.9\",\"6.5\",\"6.9\",\"-6.4\",\"0.1\",\"-0.1\",\"-2.2\",\"2.1\"],\r\n        [\"1000\",\"1434\",\"2\",\"0.6\",\"36.9\",\"6.2\",\"6.9\",\"-6.5\",\"0.1\",\"-0.1\",\"-2.3\",\"2.2\"],\r\n        [\"1050\",\"1425\",\"2\",\"0.6\",\"36.8\",\"5.9\",\"7.0\",\"-6.6\",\"0.1\",\"-0.2\",\"-2.5\",\"2.3\"],\r\n        [\"1100\",\"1417\",\"3\",\"0.6\",\"36.8\",\"5.6\",\"7.1\",\"-6.6\",\"0.1\",\"-0.2\",\"-2.6\",\"2.4\"],\r\n        [\"1150\",\"1408\",\"3\",\"0.6\",\"36.7\",\"5.4\",\"7.1\",\"-6.7\",\"0.2\",\"-0.2\",\"-2.7\",\"2.5\"],\r\n        [\"1200\",\"1399\",\"3\",\"0.6\",\"36.6\",\"5.2\",\"7.2\",\"-6.7\",\"0.2\",\"-0.2\",\"-2.8\",\"2.7\"],\r\n        [\"1250\",\"1390\",\"3\",\"0.6\",\"36.6\",\"5.0\",\"7.3\",\"-6.8\",\"0.2\",\"-0.2\",\"-2.9\",\"2.8\"],\r\n        [\"1300\",\"1381\",\"3\",\"0.6\",\"36.5\",\"4.8\",\"7.4\",\"-6.9\",\"0.2\",\"-0.2\",\"-3.0\",\"2.9\"],\r\n        [\"1350\",\"1372\",\"3\",\"0.6\",\"36.4\",\"4.6\",\"7.4\",\"-6.9\",\"0.2\",\"-0.2\",\"-3.2\",\"3.0\"],\r\n        [\"1400\",\"1362\",\"4\",\"0.6\",\"36.4\",\"4.4\",\"7.5\",\"-7.0\",\"0.2\",\"-0.2\",\"-3.3\",\"3.1\"],\r\n        [\"1450\",\"1353\",\"4\",\"0.6\",\"36.3\",\"4.3\",\"7.6\",\"-7.1\",\"0.2\",\"-0.2\",\"-3.4\",\"3.2\"],\r\n        [\"1500\",\"1344\",\"4\",\"0.6\",\"36.2\",\"4.2\",\"7.7\",\"-7.1\",\"0.2\",\"-0.2\",\"-3.5\",\"3.4\"],\r\n        [\"1550\",\"1334\",\"4\",\"0.6\",\"36.1\",\"4.0\",\"7.7\",\"-7.2\",\"0.2\",\"-0.2\",\"-3.7\",\"3.5\"],\r\n        [\"1600\",\"1324\",\"4\",\"0.6\",\"36.0\",\"3.9\",\"7.8\",\"-7.3\",\"0.2\",\"-0.2\",\"-3.8\",\"3.6\"],\r\n        [\"1650\",\"1314\",\"4\",\"0.7\",\"35.9\",\"3.8\",\"7.9\",\"-7.3\",\"0.2\",\"-0.2\",\"-3.9\",\"3.7\"],\r\n        [\"1700\",\"1304\",\"5\",\"0.7\",\"35.8\",\"3.7\",\"7.9\",\"-7.4\",\"0.2\",\"-0.2\",\"-4.0\",\"3.8\"],\r\n        [\"1750\",\"1294\",\"5\",\"0.7\",\"35.7\",\"3.6\",\"8.0\",\"-7.5\",\"0.2\",\"-0.2\",\"-4.2\",\"3.9\"],\r\n        [\"1800\",\"1284\",\"5\",\"0.7\",\"35.6\",\"3.5\",\"8.1\",\"-7.6\",\"0.2\",\"-0.3\",\"-4.3\",\"4.0\"],\r\n        [\"1850\",\"1274\",\"5\",\"0.7\",\"35.5\",\"3.4\",\"8.2\",\"-7.6\",\"0.2\",\"-0.3\",\"-4.4\",\"4.2\"],\r\n        [\"1900\",\"1263\",\"6\",\"0.7\",\"35.4\",\"3.3\",\"8.2\",\"-7.7\",\"0.2\",\"-0.3\",\"-4.5\",\"4.3\"],\r\n        [\"1950\",\"1253\",\"6\",\"0.7\",\"35.2\",\"3.2\",\"8.3\",\"-7.8\",\"0.2\",\"-0.3\",\"-4.7\",\"4.4\"],\r\n        [\"2000\",\"1242\",\"6\",\"0.7\",\"35.1\",\"3.1\",\"8.4\",\"-7.8\",\"0.3\",\"-0.3\",\"-4.8\",\"4.5\"],\r\n        [\"2050\",\"1231\",\"7\",\"0.7\",\"35.0\",\"3.0\",\"8.4\",\"-7.9\",\"0.3\",\"-0.3\",\"-4.9\",\"4.7\"],\r\n        [\"2100\",\"1219\",\"7\",\"0.7\",\"34.8\",\"2.9\",\"8.5\",\"-8.0\",\"0.3\",\"-0.3\",\"-5.0\",\"4.8\"],\r\n        [\"2150\",\"1208\",\"7\",\"0.7\",\"34.7\",\"2.9\",\"8.5\",\"-8.0\",\"0.3\",\"-0.3\",\"-5.2\",\"4.9\"],\r\n        [\"2200\",\"1196\",\"8\",\"0.7\",\"34.5\",\"2.8\",\"8.6\",\"-8.1\",\"0.3\",\"-0.3\",\"-5.3\",\"5.0\"],\r\n        [\"2250\",\"1184\",\"8\",\"0.7\",\"34.3\",\"2.7\",\"8.7\",\"-8.2\",\"0.3\",\"-0.3\",\"-5.4\",\"5.1\"],\r\n        [\"2300\",\"1171\",\"9\",\"0.8\",\"34.2\",\"2.7\",\"8.7\",\"-8.2\",\"0.3\",\"-0.3\",\"-5.5\",\"5.2\"],\r\n        [\"2350\",\"1158\",\"9\",\"0.8\",\"34.0\",\"2.6\",\"8.8\",\"-8.3\",\"0.3\",\"-0.3\",\"-5.7\",\"5.4\"],\r\n        [\"2400\",\"1145\",\"10\",\"0.8\",\"33.8\",\"2.5\",\"8.8\",\"-8.3\",\"0.3\",\"-0.3\",\"-5.8\",\"5.5\"],\r\n        [\"2450\",\"1132\",\"10\",\"0.8\",\"33.6\",\"2.5\",\"8.9\",\"-8.4\",\"0.3\",\"-0.3\",\"-5.9\",\"5.6\"],\r\n        [\"2500\",\"1118\",\"11\",\"0.8\",\"33.3\",\"2.4\",\"8.9\",\"-8.4\",\"0.3\",\"-0.3\",\"-6.0\",\"5.7\"],\r\n        [\"2550\",\"1103\",\"12\",\"0.8\",\"33.1\",\"2.4\",\"9.0\",\"-8.5\",\"0.3\",\"-0.3\",\"-6.1\",\"5.8\"],\r\n        [\"2600\",\"1088\",\"13\",\"0.9\",\"32.8\",\"2.3\",\"9.0\",\"-8.5\",\"0.4\",\"-0.3\",\"-6.2\",\"5.9\"],\r\n        [\"2650\",\"1072\",\"14\",\"0.9\",\"32.6\",\"2.2\",\"9.0\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.4\",\"6.0\"],\r\n        [\"2700\",\"1056\",\"15\",\"0.9\",\"32.3\",\"2.2\",\"9.0\",\"-8.6\",\"0.3\",\"-0.4\",\"-6.5\",\"6.1\"],\r\n        [\"2750\",\"1038\",\"16\",\"1.0\",\"31.9\",\"2.1\",\"9.1\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.6\",\"6.3\"],\r\n        [\"2800\",\"1020\",\"18\",\"1.0\",\"31.6\",\"2.1\",\"9.1\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.7\",\"6.4\"],\r\n        [\"2850\",\"1000\",\"20\",\"1.1\",\"31.2\",\"2.0\",\"9.1\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.8\",\"6.5\"],\r\n        [\"2900\",\"978\",\"22\",\"1.1\",\"30.8\",\"1.9\",\"9.0\",\"-8.6\",\"0.4\",\"-0.4\",\"-6.9\",\"6.5\"],\r\n        [\"2950\",\"954\",\"26\",\"1.2\",\"30.3\",\"1.9\",\"9.0\",\"-8.6\",\"0.4\",\"-0.4\",\"-7.0\",\"6.6\"],\r\n        [\"3000\",\"927\",\"31\",\"1.4\",\"29.7\",\"1.8\",\"8.9\",\"-8.5\",\"0.4\",\"-0.4\",\"-7.1\",\"6.7\"],\r\n        [\"3050\",\"894\",\"38\",\"1.6\",\"29.0\",\"1.7\",\"8.8\",\"-8.4\",\"0.4\",\"-0.4\",\"-7.2\",\"6.8\"],\r\n        [\"3100\",\"849\",\"54\",\"2.0\",\"27.9\",\"1.6\",\"8.5\",\"-8.3\",\"0.4\",\"-0.4\",\"-7.2\",\"6.8\"]\r\n        ]\r\n    };\r\ncase ((abs(_muzzleVelocity - 70) < 0.00001) && {(abs(_airFriction - 0) < 0.00001)}): {\r\n        [\r\n        [\"100\",\"1497\",\"9\",\"1.3\",\"14.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"150\",\"1445\",\"14\",\"1.3\",\"14.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"200\",\"1390\",\"19\",\"1.4\",\"14.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"250\",\"1333\",\"26\",\"1.4\",\"13.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"300\",\"1272\",\"34\",\"1.5\",\"13.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"350\",\"1204\",\"45\",\"1.6\",\"13.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"400\",\"1127\",\"61\",\"1.8\",\"12.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"450\",\"1028\",\"91\",\"2.1\",\"12.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"]\r\n        ]\r\n    };\r\ncase ((abs(_muzzleVelocity - 140) < 0.00001) && {(abs(_airFriction - 0) < 0.00001)}): {\r\n        [\r\n        [\"150\",\"1562\",\"1\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"200\",\"1549\",\"1\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"250\",\"1536\",\"2\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"300\",\"1523\",\"2\",\"0.7\",\"28.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"350\",\"1510\",\"2\",\"0.7\",\"28.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"400\",\"1497\",\"3\",\"0.7\",\"28.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"450\",\"1484\",\"3\",\"0.7\",\"28.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"500\",\"1471\",\"3\",\"0.7\",\"28.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"550\",\"1458\",\"4\",\"0.7\",\"28.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"600\",\"1445\",\"4\",\"0.7\",\"28.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"650\",\"1431\",\"4\",\"0.7\",\"28.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"700\",\"1418\",\"5\",\"0.7\",\"28.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"750\",\"1404\",\"5\",\"0.7\",\"28.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"800\",\"1390\",\"6\",\"0.7\",\"27.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"850\",\"1376\",\"6\",\"0.7\",\"27.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"900\",\"1362\",\"6\",\"0.8\",\"27.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"950\",\"1348\",\"7\",\"0.8\",\"27.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1000\",\"1333\",\"7\",\"0.8\",\"27.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1050\",\"1318\",\"8\",\"0.8\",\"27.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1100\",\"1303\",\"9\",\"0.8\",\"27.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1150\",\"1288\",\"9\",\"0.8\",\"27.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1200\",\"1272\",\"10\",\"0.8\",\"27.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1250\",\"1256\",\"11\",\"0.8\",\"26.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1300\",\"1239\",\"12\",\"0.8\",\"26.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1350\",\"1222\",\"13\",\"0.9\",\"26.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1400\",\"1205\",\"13\",\"0.9\",\"26.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1450\",\"1187\",\"15\",\"0.9\",\"26.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1500\",\"1168\",\"16\",\"0.9\",\"26.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1550\",\"1148\",\"18\",\"1.0\",\"25.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1600\",\"1127\",\"19\",\"1.0\",\"25.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1650\",\"1105\",\"21\",\"1.1\",\"25.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1700\",\"1082\",\"24\",\"1.1\",\"24.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1750\",\"1057\",\"27\",\"1.2\",\"24.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1800\",\"1029\",\"31\",\"1.3\",\"24.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1850\",\"997\",\"37\",\"1.4\",\"23.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1900\",\"960\",\"46\",\"1.6\",\"23.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1950\",\"912\",\"63\",\"1.9\",\"22.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"]\r\n        ]\r\n    };\r\ncase ((abs(_muzzleVelocity - 200) < 0.00001) && {(abs(_airFriction - 0) < 0.00001)}): {\r\n        [\r\n        [\"300\",\"1563\",\"0\",\"0.5\",\"40.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"350\",\"1556\",\"1\",\"0.5\",\"40.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"400\",\"1550\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"450\",\"1544\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"500\",\"1537\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"550\",\"1531\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"600\",\"1525\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"650\",\"1519\",\"1\",\"0.5\",\"40.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"700\",\"1512\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"750\",\"1506\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"800\",\"1499\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"850\",\"1493\",\"1\",\"0.5\",\"40.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"900\",\"1487\",\"1\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"950\",\"1480\",\"1\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1000\",\"1474\",\"2\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1050\",\"1467\",\"2\",\"0.5\",\"40.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1100\",\"1461\",\"2\",\"0.5\",\"40.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1150\",\"1454\",\"2\",\"0.5\",\"40.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1200\",\"1448\",\"2\",\"0.5\",\"40.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1250\",\"1441\",\"2\",\"0.5\",\"40.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1300\",\"1435\",\"2\",\"0.5\",\"40.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1350\",\"1428\",\"2\",\"0.5\",\"40.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1400\",\"1422\",\"2\",\"0.5\",\"40.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1450\",\"1415\",\"2\",\"0.5\",\"40.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1500\",\"1408\",\"2\",\"0.5\",\"40.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1550\",\"1402\",\"3\",\"0.5\",\"40.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1600\",\"1395\",\"3\",\"0.5\",\"40.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1650\",\"1388\",\"3\",\"0.5\",\"39.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1700\",\"1381\",\"3\",\"0.5\",\"39.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1750\",\"1374\",\"3\",\"0.5\",\"39.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1800\",\"1367\",\"3\",\"0.5\",\"39.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1850\",\"1360\",\"3\",\"0.5\",\"39.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1900\",\"1353\",\"3\",\"0.5\",\"39.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"1950\",\"1346\",\"4\",\"0.5\",\"39.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2000\",\"1339\",\"4\",\"0.5\",\"39.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2050\",\"1332\",\"4\",\"0.5\",\"39.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2100\",\"1325\",\"4\",\"0.6\",\"39.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2150\",\"1317\",\"4\",\"0.6\",\"39.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2200\",\"1310\",\"4\",\"0.6\",\"39.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2250\",\"1302\",\"4\",\"0.6\",\"39.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2300\",\"1295\",\"5\",\"0.6\",\"39.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2350\",\"1287\",\"5\",\"0.6\",\"38.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2400\",\"1280\",\"5\",\"0.6\",\"38.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2450\",\"1272\",\"5\",\"0.6\",\"38.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2500\",\"1264\",\"5\",\"0.6\",\"38.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2550\",\"1256\",\"5\",\"0.6\",\"38.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2600\",\"1248\",\"6\",\"0.6\",\"38.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2650\",\"1240\",\"6\",\"0.6\",\"38.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2700\",\"1232\",\"6\",\"0.6\",\"38.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2750\",\"1223\",\"6\",\"0.6\",\"38.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2800\",\"1215\",\"7\",\"0.6\",\"37.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2850\",\"1206\",\"7\",\"0.6\",\"37.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2900\",\"1197\",\"7\",\"0.6\",\"37.6\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"2950\",\"1188\",\"7\",\"0.7\",\"37.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3000\",\"1179\",\"8\",\"0.7\",\"37.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3050\",\"1170\",\"8\",\"0.7\",\"37.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3100\",\"1160\",\"8\",\"0.7\",\"37.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3150\",\"1151\",\"9\",\"0.7\",\"36.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3200\",\"1141\",\"9\",\"0.7\",\"36.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3250\",\"1131\",\"10\",\"0.7\",\"36.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3300\",\"1120\",\"10\",\"0.7\",\"36.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3350\",\"1109\",\"11\",\"0.8\",\"36.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3400\",\"1098\",\"11\",\"0.8\",\"35.9\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3450\",\"1087\",\"12\",\"0.8\",\"35.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3500\",\"1075\",\"13\",\"0.8\",\"35.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3550\",\"1062\",\"14\",\"0.8\",\"35.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3600\",\"1049\",\"15\",\"0.9\",\"35.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3650\",\"1036\",\"16\",\"0.9\",\"34.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3700\",\"1021\",\"17\",\"0.9\",\"34.4\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3750\",\"1006\",\"19\",\"1.0\",\"34.1\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3800\",\"990\",\"21\",\"1.1\",\"33.7\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3850\",\"971\",\"24\",\"1.1\",\"33.3\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3900\",\"952\",\"27\",\"1.2\",\"32.8\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"3950\",\"929\",\"32\",\"1.4\",\"32.2\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"4000\",\"900\",\"40\",\"1.6\",\"31.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"],\r\n        [\"4050\",\"861\",\"56\",\"2.1\",\"30.5\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\",\"0.0\"]\r\n        ]\r\n    };\r\n    default {\r\n        ERROR(\"MuzzleVelocity not found in LUT\");\r\n        []\r\n    };\r\n};"},{"name":"ace_mk6mortar_fnc_toggleMils","file":"mk6mortar/functions/fnc_toggleMils.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Toggles the mortart to show mils or degrees\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * No\r\n *\r\n * Example:\r\n * [mortar,bob] call ace_mk6mortar_fnc_toggleMils;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nPARAMS_2(_mortarVeh,_unit);\r\n\r\nprivate \"_currentSetting\";\r\n\r\n_currentSetting = _mortarVeh getVariable [QGVAR(useMils), true];\r\n_mortarVeh setVariable [QGVAR(useMils), (!_currentSetting)];\r\n"},{"name":"ace_mk6mortar_fnc_turretDisplayLoaded","file":"mk6mortar/functions/fnc_turretDisplayLoaded.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Called when the mk6's in game UI is loaded.  Hides rangefinder data if it is disabled.\r\n *\r\n * Arguments:\r\n * 0: Display <DISPLAY>\r\n * 1: Type <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [rsc,\"Mk6Mortar\"] call ace_mk6mortar_fnc_turretDisplayLoaded\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_display\", \"_rscType\"];\r\nTRACE_2(\"params\",_display,_rscType);\r\n\r\nif (_rscType != \"Mk6Mortar\") exitWith {};\r\nif (isNull _display) exitWith {};\r\n\r\nprivate [\"_fnc_hideControl\", \"_xPos\", \"_yPos\", \"_wPos\", \"_hPos\"];\r\n\r\n#define CTRL_CA_OPTICSPITCH (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_OPTICSPITCH\")\r\n#define CTRL_CA_OPTICSZOOM (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_OPTICSZOOM\")\r\n#define CTRL_CA_SOLUTION_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_SOLUTION_TEXT\")\r\n#define CTRL_CA_DISTANCE_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_DISTANCE_TEXT\")\r\n#define CTRL_CA_DISTANCE (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_DISTANCE\")\r\n#define CTRL_CA_TIME_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_TIME_TEXT\")\r\n#define CTRL_CA_TIME (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_TIME\")\r\n#define CTRL_CA_ELEV_NEED_TEXT (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_ELEV_NEED_TEXT\")\r\n#define CTRL_CA_RANGEELEMENTS_GROUP (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_RangeElements_group\")\r\n\r\n#define CTRL_CA_HEADING (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_Heading\")\r\n#define CTRL_CA_ELEV (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_ELEV\")\r\n#define CTRL_CA_ELEV_NEED (configFile >> \"RscInGameUI\" >> \"ACE_Mk6_RscWeaponRangeArtillery\" >> \"CA_IGUI_elements_group\" >> \"controls\" >> \"CA_ELEV_NEED\")\r\n\r\n_fnc_hideControl = {\r\n    private [\"_idc\", \"_pos\"];\r\n    PARAMS_2(_path,_hideCtrl);\r\n    _idc = getNumber (_path >> \"IDC\");\r\n    _pos = [];\r\n    if (_hideCtrl) then {\r\n        _pos = [-9,-9,0,0];\r\n    } else {\r\n        {\r\n            if (isNumber (_path >> _x)) then {\r\n                _pos pushBack (getNumber (_path >> _x));\r\n            } else {\r\n                _pos pushBack (call compile (getText (_path >> _x)));\r\n            };\r\n        } forEach [\"x\", \"y\", \"w\", \"h\"];\r\n    };\r\n    (_display displayCtrl _idc) ctrlSetPosition _pos;\r\n    (_display displayCtrl _idc) ctrlCommit 0;\r\n};\r\n\r\n{\r\n    [_x, (!GVAR(allowComputerRangefinder))] call _fnc_hideControl;\r\n} forEach [CTRL_CA_OPTICSPITCH, CTRL_CA_OPTICSZOOM, CTRL_CA_SOLUTION_TEXT, CTRL_CA_DISTANCE_TEXT, CTRL_CA_DISTANCE, CTRL_CA_TIME_TEXT, CTRL_CA_TIME, CTRL_CA_ELEV_NEED_TEXT, CTRL_CA_RANGEELEMENTS_GROUP];\r\n\r\n//Always hide these, handled by the mil convertions PFEH in handlePlayerVehChanged\r\n[CTRL_CA_HEADING, true] call _fnc_hideControl;\r\n[CTRL_CA_ELEV, true] call _fnc_hideControl;\r\n[CTRL_CA_ELEV_NEED, true] call _fnc_hideControl;\r\n"},{"name":"ace_mk6mortar_fnc_unloadMagazine","file":"mk6mortar/functions/fnc_unloadMagazine.sqf","text":"/*\r\n * Author: Grey\r\n *\r\n * Unload current magazine from static weapon\r\n *\r\n * Arguments:\r\n * 0: static <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_target, _player] call ace_mk6mortar_fnc_unloadMagazine\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_static\",\"_unit\"];\r\nprivate [\"_currentMagazine\",\"_currentMagazineClass\",\"_ammoCount\"];\r\n\r\n//Get weapon & magazine information about static weapon\r\n_currentMagazine = (magazinesAllTurrets _static) select 1;\r\n_currentMagazineClass = _currentMagazine select 0;\r\n_ammoCount = _currentMagazine select 2;\r\n\r\n// Try to add the round to player inventory, otherwise place it on the ground near the player\r\nif (_ammoCount > 0) then {\r\n    if (_unit canAdd _currentMagazineClass) then {\r\n        _unit addMagazineGlobal _currentMagazineClass;\r\n    } else {\r\n        _pos = _unit modelToWorldVisual [0.5,0.5,0]; // Front right of player\r\n        _unit = createVehicle [\"WeaponHolder_Single_F\",_pos,[],0,\"NONE\"];\r\n        _unit addMagazineAmmoCargo [_currentMagazineClass, 1, _ammoCount];\r\n        _unit setPosATL _pos;\r\n    };\r\n    [QGVAR(removeMagazine), [_static, _currentMagazineClass]] call CBA_fnc_globalEvent;\r\n};\r\n"},{"name":"ace_mk6mortar_fnc_unloadMagazineTimer","file":"mk6mortar/functions/fnc_unloadMagazineTimer.sqf","text":"/*\r\n * Author: Grey\r\n *\r\n * Unload current magazine from static weapon using a timer\r\n *\r\n * Arguments:\r\n * 0: static <OBJECT>\r\n * 1: unit <OBJECT>\r\n * 2: time to unload <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_target, _player, 5] call ace_mk6mortar_fnc_unloadMagazineTimer\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_static\",\"_unit\",\"_timeToUnload\"];\r\n\r\n//Move player into animation if player is standing\r\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\r\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\", 1] call EFUNC(common,doAnimation);\r\n};\r\n\r\n[_timeToUnload, [_static,_unit], {(_this select 0) call FUNC(unloadMagazine)}, {}, localize LSTRING(unloadingMortar)] call EFUNC(common,progressBar);\r\n"}],"modules":[{"name":"ace_modules_fnc_moduleInit","file":"modules/functions/fnc_moduleInit.sqf","text":"/*\r\n * Author: Glowbal\r\n * IV Treatment local callback\r\n *\r\n * Arguments:\r\n * 0: The logic object <OBJECT>\r\n *\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif ((_this select 0) isKindOf \"Module_F\") then {\r\n    GVAR(moduleInitCollection) pushBack (_this select 0);\r\n};\r\n"}],"movement":[{"name":"ace_movement_fnc_addLoadToUnitContainer","file":"movement/functions/fnc_addLoadToUnitContainer.sqf","text":"/*\r\n * Author: commy2\r\n * Add (negative numbers to subtract) a virtual mass to a units container.\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: The Container <OBJECT>\r\n * 2: The Virtual Load <NUMBER>\r\n *\r\n * Return Value:\r\n * Success? <BOOLEAN>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_container\", objNull, [objNull]], [\"_virtualLoadToAdd\", 0, [0]]];\r\n\r\nif !(_container in [\r\n    _unit,\r\n    uniformContainer _unit,\r\n    vestContainer _unit,\r\n    backpackContainer _unit\r\n]) exitWith {false};\r\n\r\nprivate _virtualLoad = (_container getVariable [QGVAR(vLoad), 0]) + _virtualLoadToAdd;\r\n_container setVariable [QGVAR(vLoad), _virtualLoad, true];\r\n\r\n// update\r\n_unit call FUNC(handleVirtualMass);\r\n\r\ntrue\r\n"},{"name":"ace_movement_fnc_canClimb","file":"movement/functions/fnc_canClimb.sqf","text":"/*\r\n * Author: commy2\r\n * Tests the the player can climb.\r\n *\r\n * Arguments:\r\n * 0: The Unit (usually the player) <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_movement_fnc_canClimb\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _pos = getPosASL _unit;\r\nprivate _dir = getDir _unit;\r\n\r\n_dir = [sin _dir, cos _dir, 0];\r\n\r\nprivate _checkPos0beg = _pos vectorAdd [0, 0, 0.9];\r\nprivate _checkPos0end = _checkPos0beg vectorAdd (_dir vectorMultiply 1.3);\r\n\r\nprivate _checkPos1beg = _pos vectorAdd [0, 0, 1.75];\r\nprivate _checkPos1end = _checkPos1beg vectorAdd (_dir vectorMultiply 1.3);\r\n\r\nprivate _checkPos2beg = _pos vectorAdd [0.3 * (_dir select 1), 0.3 * -(_dir select 0), 2.0];\r\nprivate _checkPos2end = _checkPos2beg vectorAdd (_dir vectorMultiply 1.3);\r\n\r\nprivate _checkPos3beg = _pos vectorAdd [-0.2 * (_dir select 1), -0.2 * -(_dir select 0), 2.0];\r\nprivate _checkPos3end = _checkPos3beg vectorAdd (_dir vectorMultiply 1.3);\r\n\r\nprivate _checkPos4beg = _pos vectorAdd [0.3 * (_dir select 1), 0.3 * -(_dir select 0), 1.5];\r\nprivate _checkPos4end = _checkPos4beg vectorAdd (_dir vectorMultiply 1.3);\r\n\r\nprivate _checkPos5beg = _pos vectorAdd [-0.2 * (_dir select 1), -0.2 * -(_dir select 0), 1.5];\r\nprivate _checkPos5end = _checkPos5beg vectorAdd (_dir vectorMultiply 1.3);\r\n\r\n#ifdef DEBUG_MODE_FULL\r\n    [{\r\n        params [\"_args\", \"_idPFH\"];\r\n\r\n        if (diag_tickTime > (_args select 0) + 5) exitWith {\r\n            [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n\r\n        drawLine3D [ASLToATL (_args select 1), ASLToATL (_args select 2), [0,1,0,1]];\r\n        drawLine3D [ASLToATL (_args select 3), ASLToATL (_args select 4), [1,0,0,1]];\r\n        drawLine3D [ASLToATL (_args select 5), ASLToATL (_args select 6), [1,0.5,0.5,1]];\r\n        drawLine3D [ASLToATL (_args select 7), ASLToATL (_args select 8), [1,0.5,0.5,1]];\r\n        drawLine3D [ASLToATL (_args select 9), ASLToATL (_args select 10), [1,0.5,0.5,1]];\r\n        drawLine3D [ASLToATL (_args select 11), ASLToATL (_args select 12), [1,0.5,0.5,1]];\r\n    }, 0, [ diag_tickTime,\r\n            _checkPos0beg, _checkPos0end,\r\n            _checkPos1beg, _checkPos1end,\r\n            _checkPos2beg, _checkPos2end,\r\n            _checkPos3beg, _checkPos3end,\r\n            _checkPos4beg, _checkPos4end,\r\n            _checkPos5beg, _checkPos5end\r\n    ]] call CBA_fnc_addPerFrameHandler;\r\n#endif\r\n\r\n      lineIntersects [_checkPos0beg, _checkPos0end]\r\n&& {!(lineIntersects [_checkPos1beg, _checkPos1end])}\r\n&& {!(lineIntersects [_checkPos2beg, _checkPos2end])}\r\n&& {!(lineIntersects [_checkPos3beg, _checkPos3end])}\r\n&& {!(lineIntersects [_checkPos4beg, _checkPos4end])}\r\n&& {!(lineIntersects [_checkPos5beg, _checkPos5end])}\r\n"},{"name":"ace_movement_fnc_climb","file":"movement/functions/fnc_climb.sqf","text":"/*\r\n * Author: commy2\r\n * Make the player climb over short walls.\r\n *\r\n * Arguments:\r\n * 0: The Unit (usually the player) <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player] call ace_movement_fnc_climb\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif !([_unit] call FUNC(canClimb)) exitWith {\r\n    [localize LSTRING(CanNotClimb)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\nif !(_unit getVariable [QGVAR(isClimbInit), false]) then {\r\n    _unit addEventHandler [\"AnimChanged\", {\r\n        if (local (_this select 0) && {_this select 1 == \"ACE_Climb\"}) then {\r\n            // abort climb animation\r\n            if !(_this call FUNC(canClimb)) then {\r\n                [_this select 0, \"AmovPercMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\r\n            };\r\n        };\r\n    }];\r\n\r\n    _unit addEventHandler [\"AnimDone\", {\r\n        if (local (_this select 0) && {_this select 1 == \"ACE_Climb\"}) then {_this call FUNC(handleClimb)};\r\n    }];\r\n\r\n    _unit setVariable [QGVAR(isClimbInit), true];\r\n};\r\n\r\n[_unit] call EFUNC(common,fixLoweredRifleAnimation);\r\n[_unit, \"AmovPercMstpSnonWnonDnon\", 0] call EFUNC(common,doAnimation);\r\n[_unit, \"ACE_Climb\", 0] call EFUNC(common,doAnimation);\r\n"},{"name":"ace_movement_fnc_getWeight","file":"movement/functions/fnc_getWeight.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the weight (from the loadAbs command) in lbs/kg (based on user option)\r\n *\r\n * Arguments:\r\n * 0: The Unit (usually the player) <OBJECT>\r\n *\r\n * Return Value:\r\n * The return value <NUMBER>\r\n *\r\n * Example:\r\n * [player] call ace_movement_fnc_getWeight\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _virtualLoad = 0;\r\n\r\n{\r\n    _virtualLoad = _virtualLoad + (_x getVariable [QGVAR(vLoad), 0]);\r\n} forEach [\r\n    _unit,\r\n    uniformContainer _unit,\r\n    vestContainer _unit,\r\n    backpackContainer _unit\r\n];\r\n\r\nprivate _weight = (loadAbs _unit + _virtualLoad) * 0.1;\r\n\r\nif (GVAR(useImperial)) then {\r\n    _weight = format [\"%1lb\", (round (_weight * 100)) / 100];\r\n} else {\r\n    _weight = format [\"%1kg\", (round (_weight * FACTOR_POUND_TO_KILOGRAMM * 100)) / 100];\r\n};\r\n\r\n_weight\r\n"},{"name":"ace_movement_fnc_handleClimb","file":"movement/functions/fnc_handleClimb.sqf","text":"/*\r\n * Author: commy2\r\n * Handles the climb animation finishing.  Called from \"AnimDone\" event handler.\r\n *\r\n * Arguments:\r\n * 0: The Unit (usually the player) <OBJECT>\r\n * 1: The finisehd animation <STRING>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, \"ACE_climb\"] call ace_movement_fnc_handleClimb\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_anim\"];\r\n\r\nprivate _pos = _unit modelToWorldVisual (_unit selectionPosition \"camera\");\r\n\r\n[_unit, \"AmovPknlMstpSnonWnonDnon\", 2] call EFUNC(common,doAnimation);\r\n\r\n_pos = _pos vectorDiff (_unit selectionPosition \"camera\");\r\n\r\n_unit setPos _pos;\r\n"},{"name":"ace_movement_fnc_handleVirtualMass","file":"movement/functions/fnc_handleVirtualMass.sqf","text":"/*\r\n * Author: commy2\r\n * Recalculate the units loadCoef to emulate a mass added to uniform, vest or backpack.\r\n *\r\n * Arguments:\r\n * 0: The Unit (usually the player) <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (isNull _unit) exitWith {};\r\n\r\n// add sum of virtual loads\r\nprivate _virtualLoad = 0;\r\n\r\n{\r\n    _virtualLoad = _virtualLoad + (_x getVariable [QGVAR(vLoad), 0]);\r\n} forEach [\r\n    _unit,\r\n    uniformContainer _unit,\r\n    vestContainer _unit,\r\n    backpackContainer _unit\r\n];\r\n\r\n// get absolute vanilla load\r\nprivate _absLoad = getNumber (configFile >> \"CfgInventoryGlobalVariable\" >> \"maxSoldierLoad\");\r\n\r\n// try to preserve other changes to the \"LoadCoef\" unitTrait\r\nprivate _loadCoef = _unit getVariable QGVAR(loadCoef);\r\n\r\nif (isNil \"_loadCoef\") then {\r\n    _loadCoef = _unit getUnitTrait \"loadCoef\";\r\n    _unit setVariable [QGVAR(loadCoef), _loadCoef, true];\r\n};\r\n\r\n// calc. new \"virtual\" loadCoef\r\nprivate _virtualLoadCoef = (1 + _virtualLoad / _absLoad) * _loadCoef;\r\n\r\n_unit setUnitTrait [\"loadCoef\", _virtualLoadCoef];\r\n"}],"mx2a":[],"nametags":[{"name":"ace_nametags_fnc_canShow","file":"nametags/functions/fnc_canShow.sqf","text":"/*\r\n * Author: aeroson\r\n * Checks if crew info can be shown.\r\n * Might be called several times a second.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Can show Crew Info <BOOL>\r\n *\r\n * Example:\r\n * call ace_nametags_fnc_canShow\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n((vehicle ACE_player) != ACE_player) &&\r\n{GVAR(ShowCrewInfo)} &&\r\n{!(vehicle ACE_player isKindOf \"ParachuteBase\")};\r\n"},{"name":"ace_nametags_fnc_doShow","file":"nametags/functions/fnc_doShow.sqf","text":"/*\r\n * Author: aeroson\r\n * Shows the actual text and sets text the crew info.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_nametags_fnc_doShow\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n#include \"common.hpp\";\r\n\r\nprivate[\"_roleImages\", \"_player\", \"_vehicle\", \"_type\", \"_config\", \"_text\", \"_data\", \"_isAir\", \"_turretUnits\", \"_turretRoles\", \"_index\", \"_roleType\", \"_unit\", \"_toShow\"];\r\n\r\n_player = ACE_player;\r\n_vehicle = vehicle _player;\r\n_type = typeOf _vehicle;\r\n_config = configFile >> \"CfgVehicles\" >> _type;\r\n_text = format[\"<t size='1.4'><img image='%1'></t> <t size='1.7' shadow='true'>%2</t><br/>\", getText(_config>>\"picture\"), getText (_config >> \"DisplayName\")];\r\n\r\n_data = [_type] call FUNC(getVehicleData);\r\n\r\n_isAir = _data select 0;\r\n_data = _data select 1;\r\n\r\n_turretUnits = _data apply {_vehicle turretUnit (_x select 0)};\r\n_turretRoles = _data apply {_x select 1};\r\n\r\n_roleType = CARGO;\r\n_toShow = [];\r\n{\r\n    switch (_x) do {\r\n        case commander _vehicle: {\r\n            _roleType = COMMANDER;\r\n        };\r\n        case gunner _vehicle: {\r\n            _roleType = GUNNER;\r\n        };\r\n        case driver _vehicle: {\r\n            _roleType = if(_isAir) then { PILOT } else { DRIVER };\r\n        };\r\n        default {\r\n            _index = _turretUnits find _x;\r\n            if(_index !=-1 ) then {\r\n                _roleType = _turretRoles select _index;\r\n            } else {\r\n                _roleType = CARGO;\r\n            };\r\n        };\r\n    };\r\n    _toShow pushBack [_x, _roleType];\r\n} forEach crew _vehicle;\r\n\r\n_toShow = [\r\n    _toShow,\r\n    [],\r\n    {\r\n        _x select 1\r\n    },\r\n    \"ASCEND\",\r\n    {\r\n        _unit = _x select 0;\r\n        alive _unit\r\n    }\r\n] call BIS_fnc_sortBy;\r\n\r\n_roleImages = ROLE_IMAGES;\r\n{\r\n    _unit = _x select 0;\r\n    _roleType = _x select 1;\r\n    _text = _text + format[\"<t size='1.5' shadow='true'>%1</t> <t size='1.3'><img image='%2'></t><br/>\", [_unit] call EFUNC(common,getName), _roleImages select _roleType];\r\n} forEach _toShow;\r\n\r\n(\"ACE_CrewInfo_CrewInfo\" call BIS_fnc_rscLayer) cutRsc [\"ACE_CrewInfo_dialog\", \"PLAIN\", 1, false];\r\n\r\nterminate (missionNamespace getVariable [QGVAR(hideCrewInfoHandle), scriptNull]);\r\nGVAR(hideCrewInfoHandle) = 0 spawn {\r\n    sleep 2;\r\n    (\"ACE_CrewInfo_CrewInfo\" call BIS_fnc_rscLayer) cutFadeOut 2;\r\n};\r\n\r\n[_text] call FUNC(setText);\r\n"},{"name":"ace_nametags_fnc_drawNameTagIcon","file":"nametags/functions/fnc_drawNameTagIcon.sqf","text":"/*\r\n * Author: commy2, esteldunedain\r\n * Draw the nametag and rank icon.\r\n *\r\n * Arguments:\r\n * 0: Unit (Player) <OBJECT>\r\n * 1: Target <OBJECT>\r\n * 2: Alpha <NUMBER>\r\n * 4: Height offset <NUMBER>\r\n * 5: Draw name <BOOL>\r\n * 5: Draw rank <BOOL>\r\n * 6: Draw soundwave <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, bob, 0.5, height, true, true, true] call ace_nametags_fnc_drawNameTagIcon\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nTRACE_1(\"drawName:\", _this);\r\n\r\nparams [\"\", \"_target\", \"\", \"_heightOffset\"];\r\n\r\n_fnc_parameters = {\r\n    params [\"_player\", \"_target\", \"_alpha\", \"_heightOffset\", \"_drawName\", \"_drawRank\", \"_drawSoundwave\"];\r\n\r\n    //Set Icon:\r\n    private _icon = \"\";\r\n    private _size = 0;\r\n    if (_drawSoundwave) then {\r\n        _icon = format [QPATHTOF(UI\\soundwave%1.paa), floor random 10];\r\n        _size = 1;\r\n    } else {\r\n        if (_drawRank && {rank _target != \"\"}) then {\r\n            _icon = GVAR(factionRanks) getVariable (_target getVariable [QGVAR(faction), faction _target]);\r\n            if (!isNil \"_icon\") then {\r\n                _icon = _icon param [ALL_RANKS find rank _target, \"\"];\r\n            } else {\r\n                _icon = format [\"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\%1_gs.paa\", rank _target];\r\n            };\r\n            _size = 1;\r\n        };\r\n    };\r\n\r\n    //Set Text:\r\n    private _name = if (_drawName) then {\r\n        [_target, true, true] call EFUNC(common,getName)\r\n    } else {\r\n        \"\"\r\n    };\r\n\r\n    //Set Color:\r\n    private _color = [1, 1, 1, _alpha];\r\n    if ((group _target) != (group _player)) then {\r\n        _color = +GVAR(defaultNametagColor); //Make a copy, then multiply both alpha values (allows client to decrease alpha in settings)\r\n        _color set [3, (_color select 3) * _alpha];\r\n    } else {\r\n        _color = [[1, 1, 1, _alpha], [1, 0, 0, _alpha], [0, 1, 0, _alpha], [0, 0, 1, _alpha], [1, 1, 0, _alpha]] select (([\"MAIN\", \"RED\", \"GREEN\", \"BLUE\", \"YELLOW\"] find ([assignedTeam _target] param [0, \"MAIN\"])) max 0);\r\n    };\r\n\r\n    private _scale = [0.333, 0.5, 0.666, 0.83333, 1] select GVAR(tagSize);\r\n\r\n    [\r\n        _icon,\r\n        _color,\r\n        [],\r\n        (_size * _scale),\r\n        (_size * _scale),\r\n        0,\r\n        _name,\r\n        2,\r\n        (0.05 * _scale),\r\n        \"RobotoCondensed\"\r\n    ]\r\n};\r\n\r\nprivate _parameters = [_this, _fnc_parameters, _target, QGVAR(drawParameters), 0.1] call EFUNC(common,cachedCall);\r\n_parameters set [2, _target modelToWorldVisual ((_target selectionPosition \"pilot\") vectorAdd [0,0,(_heightOffset + .3)])];\r\n\r\n\r\ndrawIcon3D _parameters;\r\n"},{"name":"ace_nametags_fnc_getVehicleData","file":"nametags/functions/fnc_getVehicleData.sqf","text":"/*\r\n * Author: aeroson\r\n * Gathers and caches data needed by ace_nametags_fnc_doShow.\r\n * What really does make difference for the engine is simulation of CfgAmmo.\r\n * Priority of roles  is: driver/pilot, gunner, copilot, commander, FFV, cargo.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Data <ARRAY>\r\n * 0: Vehicle inherits from Air <BOOL>\r\n * 1: Categorized vehicle's turrets <ARRAY>\r\n *\r\n * Example:\r\n * call ace_nametags_fnc_updateSettings\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n#include \"common.hpp\";\r\n\r\nprivate [\"_type\", \"_varName\", \"_data\", \"_isAir\", \"_config\", \"_fnc_addTurret\", \"_fnc_addTurretUnit\"];\r\n\r\nparams [\"_type\"];\r\n\r\n_varName = format [\"ACE_CrewInfo_Cache_%1\", _type];\r\n_data = + (uiNamespace getVariable _varName);\r\n\r\nif (!isNil \"_data\") exitWith {_data};\r\n\r\n_data = [];\r\n_isAir = _type isKindOf \"Air\";\r\n\r\n_fnc_addTurretUnit = {\r\n    private  [\"_config\", \"_path\", \"_role\", \"_simulationEmpty\", \"_simulationLaserDesignate\", \"_simulationOther\", \"_magazine\", \"_ammo\", \"_simulation\"];\r\n\r\n    _config = _this select 0;\r\n    _path = _this select 1;\r\n    _role = CARGO;\r\n\r\n    _simulationEmpty = 0;\r\n    _simulationLaserDesignate = 0;\r\n    _simulationOther = 0;\r\n    {\r\n        {\r\n            _magazine = configFile >> \"CfgMagazines\" >> _x;\r\n            _ammo = configFile >> \"CfgAmmo\" >> getText (_magazine >> \"ammo\");\r\n            _simulation = getText (_ammo >> \"simulation\");\r\n\r\n            if(_simulation==\"\") then {\r\n                _simulationEmpty = _simulationEmpty + 1;\r\n            } else {\r\n                if(_simulation==\"laserDesignate\") then {\r\n                    _simulationLaserDesignate = _simulationLaserDesignate + 1;\r\n                } else {\r\n                    _simulationOther = _simulationOther + 1;\r\n                };\r\n            };\r\n\r\n        } forEach getArray (configFile >> \"CfgWeapons\" >> _x >> \"magazines\");\r\n    } forEach getArray (_config >> \"weapons\");\r\n\r\n    if(_simulationOther>0) then {\r\n        _role = GUNNER;\r\n    };\r\n    if (_role == CARGO && {getNumber (_config >> \"isCopilot\") == 1}) then {\r\n        _role = COPILOT;\r\n    };\r\n    if (_role == CARGO && {_simulationLaserDesignate>0 || getNumber (_config >> \"primaryObserver\") == 1}) then {\r\n        _role = COMMANDER;\r\n    };\r\n    if (_role == CARGO && {getNumber (_config >> \"isPersonTurret\") == 1}) then {\r\n        _role = FFV;\r\n    };\r\n\r\n    _data pushBack [_path, _role];  \r\n};\r\n\r\n\r\n_fnc_addTurret = {\r\n\r\n    private [\"_config\", \"_path\", \"_count\", \"_offset\", \"_index\", \"_turretPath\", \"_turretConfig\"];\r\n\r\n    _config = _this select 0;\r\n    _path = _this select 1;\r\n\r\n    _config = _config >> \"Turrets\";\r\n    _count = count _config;\r\n\r\n    _offset = 0;    \r\n\r\n    for \"_index\" from 0 to (_count - 1) do {\r\n        _turretPath = _path + [_index - _offset];\r\n        _turretConfig = _config select _index;\r\n        if (isClass _turretConfig) then {           \r\n            [_turretConfig, _turretPath] call _fnc_addTurretUnit;\r\n            [_turretConfig, _turretPath] call _fnc_addTurret;\r\n        } else {\r\n            _offset = _offset + 1;\r\n        };\r\n    };\r\n};\r\n\r\n\r\n_config = configFile >> \"CfgVehicles\" >> _type;\r\n[_config, []] call _fnc_addTurret;\r\n\r\n_data = [_isAir, _data];\r\nuiNamespace setVariable [_varName, _data];\r\n\r\n_data\r\n"},{"name":"ace_nametags_fnc_initIsSpeaking","file":"nametags/functions/fnc_initIsSpeaking.sqf","text":"/*\r\n * Author: Glowbal, PabstMirror\r\n * Starts up a PFEH to monitor the when players are talking.\r\n * Compatiblity with TFR/ACRE and Arma's VON\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_nametags_fnc_initIsSpeaking\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (isServer) then {\r\n    //If someone disconnects while speaking, reset their variable\r\n    addMissionEventHandler [\"HandleDisconnect\", {\r\n        params [\"_disconnectedPlayer\"];\r\n        if (_disconnectedPlayer getVariable [QGVAR(isSpeakingInGame), false]) then {\r\n            _disconnectedPlayer setVariable [QGVAR(isSpeakingInGame), false, true];\r\n        };\r\n    }];\r\n};\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\n[\"unit\", {\r\n    //When player changes, make sure to reset old unit's variable\r\n    params [\"\", \"_oldUnit\"];\r\n    if ((!isNull _oldUnit) && {_oldUnit getVariable [QGVAR(isSpeakingInGame), false]}) then {\r\n        _oldUnit setVariable [QGVAR(isSpeakingInGame), false, true];\r\n    };\r\n}] call CBA_fnc_addPlayerEventHandler;\r\n\r\nif (isClass (configFile >> \"CfgPatches\" >> \"acre_api\")) then {\r\n    ACE_LOGINFO(\"ACRE Detected.\");\r\n    DFUNC(isSpeaking) = {\r\n        params [\"_unit\"];\r\n        ([_unit] call acre_api_fnc_isSpeaking) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\r\n    };\r\n} else {\r\n    if (isClass (configFile >> \"CfgPatches\" >> \"task_force_radio\")) then {\r\n        ACE_LOGINFO(\"TFR Detected.\");\r\n        DFUNC(isSpeaking) =     {\r\n            params [\"_unit\"];\r\n            (_unit getVariable [\"tf_isSpeaking\", false]) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\r\n        };\r\n    } else {\r\n        //No Radio Mod - Start a PFEH to watch the internal VON icon\r\n        //Note: class RscDisplayVoiceChat {idd = 55} - only present when talking\r\n\r\n        [{\r\n            private [\"_oldSetting\", \"_newSetting\"];\r\n            _oldSetting = ACE_player getVariable [QGVAR(isSpeakingInGame), false];\r\n            _newSetting = (!(isNull findDisplay 55));\r\n            if (!(_oldSetting isEqualTo _newSetting)) then {\r\n                ACE_player setVariable [QGVAR(isSpeakingInGame), _newSetting, true];\r\n            };\r\n        } , 0.1, []] call CBA_fnc_addPerFrameHandler;\r\n\r\n        DFUNC(isSpeaking) = {\r\n            params [\"_unit\"];\r\n            (_unit getVariable [QGVAR(isSpeakingInGame), false]) && {!(_unit getVariable [\"ACE_isUnconscious\", false])}\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_nametags_fnc_moduleNameTags","file":"nametags/functions/fnc_moduleNameTags.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Initializes the name tags module.\r\n *\r\n * Arguments:\r\n * Whatever the module provides.\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\nGVAR(Module) = true;\r\n\r\n[_logic, QGVAR(playerNamesViewDistance),  \"playerNamesViewDistance\"     ] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(showCursorTagForVehicles), \"showCursorTagForVehicles\"    ] call EFUNC(common,readSettingFromModule);\r\n\r\n// Do Not Force - read module setting only non-default is set due to using SCALAR\r\nif ((_logic getVariable \"showPlayerNames\") != -1) then {\r\n    [_logic, QGVAR(showPlayerNames),      \"showPlayerNames\"             ] call EFUNC(common,readSettingFromModule);\r\n};\r\nif ((_logic getVariable \"showNamesForAI\") != -1) then {\r\n    [_logic, QGVAR(showNamesForAI),      \"showNamesForAI\"             ] call EFUNC(common,readSettingFromModule);\r\n};\r\nif ((_logic getVariable \"showVehicleCrewInfo\") != -1) then {\r\n    [_logic, QGVAR(showVehicleCrewInfo),  \"showVehicleCrewInfo\"         ] call EFUNC(common,readSettingFromModule);\r\n};\r\n\r\nACE_LOGINFO(\"Nametags Module Initialized.\");\r\n"},{"name":"ace_nametags_fnc_onDraw3d","file":"nametags/functions/fnc_onDraw3d.sqf","text":"/*\r\n * Author: <N/A>\r\n * Draws names and icons.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_nametags_fnc_onDraw3d\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_defaultIcon\", \"_distance\", \"_alpha\", \"_icon\", \"_targets\", \"_relPos\", \"_projDist\", \"_target\"];\r\n\r\nBEGIN_COUNTER(GVAR(onDraw3d));\r\n\r\n// Don't show nametags in spectator or if RscDisplayMPInterrupt is open\r\nif ((isNull ACE_player) || {!alive ACE_player} || {!isNull (findDisplay 49)}) exitWith {};\r\n\r\n// Determine flags from current settings\r\nprivate _drawName = true;\r\nprivate _drawRank = GVAR(showPlayerRanks);\r\nprivate _enabledTagsNearby = false;\r\nprivate _enabledTagsCursor = false;\r\nprivate _onKeyPressAlphaMax = 1;\r\nswitch (GVAR(showPlayerNames)) do {\r\n    case 0: {\r\n        // Player names Disabled\r\n        _drawName = false;\r\n        _enabledTagsNearby = (GVAR(showSoundWaves) == 2);\r\n        _enabledTagsCursor = false;\r\n    };\r\n    case 1: {\r\n        // Player names Enabled\r\n        _enabledTagsNearby = true;\r\n        _enabledTagsCursor = false;\r\n    };\r\n    case 2: {\r\n        // Player names Only cursor\r\n        _enabledTagsNearby = (GVAR(showSoundWaves) == 2);\r\n        _enabledTagsCursor = true;\r\n    };\r\n    case 3: {\r\n        // Player names Only Keypress\r\n        _onKeyPressAlphaMax = 2 + (GVAR(showNamesTime) - CBA_missionTime);\r\n        _enabledTagsNearby = (_onKeyPressAlphaMax) > 0 || (GVAR(showSoundWaves) == 2);\r\n        _enabledTagsCursor = false;\r\n    };\r\n    case 4: {\r\n        // Player names Only Cursor and Keypress\r\n        _onKeyPressAlphaMax = 2 + (GVAR(showNamesTime) - CBA_missionTime);\r\n        _enabledTagsNearby = (GVAR(showSoundWaves) == 2);\r\n        _enabledTagsCursor = _onKeyPressAlphaMax > 0;\r\n    };\r\n};\r\n\r\nprivate _ambientBrightness = ((([] call EFUNC(common,ambientBrightness)) + ([0, 0.4] select ((currentVisionMode ace_player) != 0))) min 1) max 0;\r\nprivate _maxDistance = _ambientBrightness * GVAR(PlayerNamesViewDistance);\r\n\r\nprivate _camPosAGL = positionCameraToWorld [0, 0, 0];\r\nprivate _camPosASL = AGLtoASL _camPosAGL;\r\nprivate _vecy = (AGLtoASL positionCameraToWorld [0, 0, 1]) vectorDiff _camPosASL;\r\n\r\n// Show nametag for the unit behind the cursor or its commander\r\nif (_enabledTagsCursor) then {\r\n    _target = cursorTarget;\r\n    if !(_target isKindOf \"CAManBase\") then {\r\n        // When cursorTarget is on a vehicle show the nametag for the commander.\r\n        if !(_target in allUnitsUAV) then {\r\n            _target = effectiveCommander _target;\r\n        } else {\r\n            _target = objNull;\r\n        };\r\n    };\r\n    if (isNull _target) exitWith {};\r\n\r\n    if (_target != ACE_player &&\r\n        {(side group _target) == (side group ACE_player)} &&\r\n        {GVAR(showNamesForAI) || {[_target] call EFUNC(common,isPlayer)}} &&\r\n        {lineIntersectsSurfaces [_camPosASL, eyePos _target, ACE_player, _target] isEqualTo []} &&\r\n        {!isObjectHidden _target}) then {\r\n\r\n        _distance = ACE_player distance _target;\r\n\r\n        private _drawSoundwave = (GVAR(showSoundWaves) > 0) && {[_target] call FUNC(isSpeaking)};\r\n        // Alpha:\r\n        // - base value determined by GVAR(playerNamesMaxAlpha)\r\n        // - decreases when _distance > _maxDistance\r\n        // - increases when the unit is speaking\r\n        // - it's clamped by the value of _onKeyPressAlphaMax\r\n        private _alpha = (((1 + ([0, 0.2] select _drawSoundwave) - 0.2 * (_distance - _maxDistance)) min 1) * GVAR(playerNamesMaxAlpha)) min _onKeyPressAlphaMax;\r\n\r\n        if (_alpha > 0) then {\r\n            [ACE_player, _target, _alpha, _distance * 0.026, _drawName, _drawRank, _drawSoundwave] call FUNC(drawNameTagIcon);\r\n        };\r\n    };\r\n};\r\n\r\n// Show nametags for nearby units\r\nif (_enabledTagsNearby) then {\r\n    // Find valid targets and cache them\r\n    private _targets = [[], {\r\n        private _nearMen = _camPosAGL nearObjects [\"CAManBase\", _maxDistance + 7];\r\n        _nearMen = _nearMen select {\r\n            _x != ACE_player &&\r\n            {(side group _x) == (side group ACE_player)} &&\r\n            {GVAR(showNamesForAI) || {[_x] call EFUNC(common,isPlayer)}} &&\r\n            {lineIntersectsSurfaces [_camPosASL, eyePos _x, ACE_player, _x] isEqualTo []} &&\r\n            {!isObjectHidden _x}\r\n        };\r\n        private _crewMen = [];\r\n        if (vehicle ACE_player != ACE_player) then {\r\n            _crewMen = (crew vehicle ACE_player) select {\r\n                _x != ACE_player &&\r\n                {(side group _x) == (side group ACE_player)} &&\r\n                {GVAR(showNamesForAI) || {[_x] call EFUNC(common,isPlayer)}} &&\r\n                {lineIntersectsSurfaces [_camPosASL, eyePos _x, ACE_player, _x, true, 1, \"GEOM\", \"NONE\"] isEqualTo []} &&\r\n                {!isObjectHidden _x}\r\n            };\r\n        };\r\n        (_nearMen + _crewMen)\r\n    }, missionNamespace, QGVAR(nearMen), 0.5] call EFUNC(common,cachedCall);\r\n\r\n    {\r\n        private _target = _x;\r\n\r\n        if !(isNull _target) then {\r\n            private _relPos = (visiblePositionASL _target) vectorDiff _camPosASL;\r\n            private _distance = vectorMagnitude _relPos;\r\n            private _projDist = _relPos vectorDistance (_vecy vectorMultiply (_relPos vectorDotProduct _vecy));\r\n\r\n            private _drawSoundwave = (GVAR(showSoundWaves) > 0) && {[_target] call FUNC(isSpeaking)};\r\n            private _alphaMax = _onKeyPressAlphaMax;\r\n            if ((GVAR(showSoundWaves) == 2) && _drawSoundwave) then {\r\n                _drawName = _drawSoundwave;\r\n                _drawRank = false;\r\n                _alphaMax = 1;\r\n            };\r\n            // Alpha:\r\n            // - base value determined by GVAR(playerNamesMaxAlpha)\r\n            // - decreases when _distance > _maxDistance\r\n            // - increases when the unit is speaking\r\n            // - it's clamped by the value of _onKeyPressAlphaMax unless soundwaves are forced on and the unit is talking\r\n            private _alpha = (((1 + ([0, 0.2] select _drawSoundwave) - 0.2 * (_distance - _maxDistance)) min 1) * GVAR(playerNamesMaxAlpha)) min _alphaMax;\r\n\r\n            if (_alpha > 0) then {\r\n                [ACE_player, _target, _alpha, _distance * 0.026, _drawName, _drawRank, _drawSoundwave] call FUNC(drawNameTagIcon);\r\n            };\r\n        };\r\n        nil\r\n    } count _targets;\r\n};\r\n\r\nEND_COUNTER(GVAR(onDraw3d));\r\n"},{"name":"ace_nametags_fnc_setFactionRankIcons","file":"nametags/functions/fnc_setFactionRankIcons.sqf","text":"/*\r\n * Author: commy2\r\n * Sets a custom set of icons for a specified faction.\r\n *\r\n * Arguments:\r\n * 0: Faction <STRING>\r\n * 1: Rank Icons <ARRAY>\r\n *\r\n * Return Value:\r\n * Successful? <BOOLEAN>\r\n *\r\n * Example:\r\n * [\"BLU_F\", [\r\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\private_gs.paa\",\r\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\corporal_gs.paa\",\r\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\sergeant_gs.paa\",\r\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\lieutenant_gs.paa\",\r\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\captain_gs.paa\",\r\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\major_gs.paa\",\r\n *     \"\\A3\\Ui_f\\data\\GUI\\Cfg\\Ranks\\colonel_gs.paa\"\r\n * ]] call ace_nametags_fnc_setFactionRankIcons\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (isNil QGVAR(factionRanks)) then {\r\n    GVAR(factionRanks) = [] call CBA_fnc_createNamespace;\r\n};\r\n\r\nparams [[\"_faction\", \"\", [\"\"]], [\"_icons\", [], [[]], [7]]];\r\n\r\nif !(_faction != \"\" && {_icons isEqualTypeAll \"\"}) exitWith {false};\r\n\r\nGVAR(factionRanks) setVariable [_faction, _icons];\r\n\r\ntrue\r\n"},{"name":"ace_nametags_fnc_setText","file":"nametags/functions/fnc_setText.sqf","text":"/*\r\n * Author: aeroson\r\n * Sets the text on the dialog.\r\n *\r\n * Arguments:\r\n * 0: Text <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_nametags_fnc_setText\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define TextIDC 11123\r\n\r\nparams [\"_text\"];\r\n\r\nprivate[\"_ctrl\"];\r\n\r\ndisableSerialization;\r\n\r\n_ctrl = (uiNamespace getVariable QGVAR(dialog)) displayCtrl TextIDC;\r\n_ctrl ctrlSetStructuredText parseText _text;\r\n_ctrl ctrlCommit 0;\r\n"},{"name":"ace_nametags_fnc_updateSettings","file":"nametags/functions/fnc_updateSettings.sqf","text":"/*\r\n * Author: Jonpas\r\n * Dynamically adds and removes Draw3D based on settings on run-time.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ace_nametags_fnc_updateSettings\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (isNil QGVAR(drawHandler) && {GVAR(showPlayerNames) != 0}) then {\r\n    GVAR(drawHandler) = addMissionEventHandler [\"Draw3D\", {_this call FUNC(onDraw3d);}];\r\n} else {\r\n    if (!isNil QGVAR(drawHandler) && {GVAR(showPlayerNames) == 0}) then {\r\n        removeMissionEventHandler [\"Draw3D\", GVAR(drawHandler)];\r\n        GVAR(drawHandler) = nil;\r\n    };\r\n};\r\n"}],"nightvision":[{"name":"ace_nightvision_fnc_blending","file":"nightvision/functions/fnc_blending.sqf","text":"/*\r\n * Author: commy2\r\n * Change the blending when the player fires??. Called from the unified fired EH only for the local player and his vehicle.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [clientFiredBIS-XEH] call ace_nightvision_fnc_blending\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nprivate _player = ACE_player;\r\n\r\n//If we're not in NVG mode, or it's a grenade, exit\r\nif (currentVisionMode _player != 1 || {toLower _weapon in [\"throw\", \"put\"]}) exitWith {};\r\n\r\nprivate _silencer = _player weaponAccessories _weapon select 0;\r\n\r\nprivate _visibleFireCoef = 1;\r\nprivate _visibleFireTimeCoef = 1;\r\n\r\nif (_silencer != \"\") then {\r\n    _visibleFireCoef = getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"visibleFire\");\r\n    _visibleFireTimeCoef = getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"visibleFireTime\");\r\n};\r\n\r\nprivate _visibleFire = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"visibleFire\");\r\nprivate _visibleFireTime = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"visibleFireTime\");\r\n\r\nprivate _fnc_isTracer = {\r\n    if (getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"nvgOnly\") > 0) exitWith {false};\r\n\r\n    private _indexShot = (_player ammo _weapon) + 1;\r\n\r\n    private _lastRoundsTracer = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"lastRoundsTracer\");\r\n    if (_indexShot <= _lastRoundsTracer) exitWith {true};\r\n\r\n    private _tracersEvery = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"tracersEvery\");\r\n    if (_tracersEvery == 0) exitWith {false};\r\n\r\n    (_indexShot - _lastRoundsTracer) % _tracersEvery == 0\r\n};\r\n\r\nif (call _fnc_isTracer) then {\r\n    _visibleFire = _visibleFire + 2;\r\n    _visibleFireTime = _visibleFireTime + 2;\r\n};\r\n\r\nprivate _darkness = 1 - (call EFUNC(common,ambientBrightness));\r\nprivate _nvgBrightnessCoef = 1 + (_player getVariable [QGVAR(NVGBrightness), 0]) / 4;\r\n\r\n_visibleFire = _darkness * _visibleFireCoef * _visibleFire * _nvgBrightnessCoef / 10 min 1;\r\n_visibleFireTime = _darkness * _visibleFireTimeCoef * _visibleFireTime * _nvgBrightnessCoef / 10 min 0.5;\r\n\r\nTRACE_2(\"Player Shot, Adjusting NVG Effect\", _visibleFire, _visibleFireTime);\r\n\r\nGVAR(ppEffectMuzzleFlash) ppEffectAdjust [1, 1, _visibleFire, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\r\nGVAR(ppEffectMuzzleFlash) ppEffectCommit 0;\r\n\r\nGVAR(ppEffectMuzzleFlash) ppEffectAdjust [1, 1, 0, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\r\nGVAR(ppEffectMuzzleFlash) ppEffectCommit _visibleFireTime;\r\n"},{"name":"ace_nightvision_fnc_changeNVGBrightness","file":"nightvision/functions/fnc_changeNVGBrightness.sqf","text":"/*\r\n * Author: commy2\r\n * Change the brightness of the unit's NVG\r\n *\r\n * Arguments:\r\n * 0: The Unit <OBJECT>\r\n * 1: Change in brightness (1 or -1) <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, 1] call ace_nightvision_fnc_changeNVGBrightness\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_changeInBrightness\"];\r\nTRACE_2(\"params\",_player,_changeInBrightness);\r\n\r\nprivate [\"_brightness\"];\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\n_brightness = _player getVariable [QGVAR(NVGBrightness), 0];\r\n\r\n_brightness = ((round (10 * _brightness + _changeInBrightness) / 10) min 0.5) max -0.5;\r\n\r\n_player setVariable [QGVAR(NVGBrightness), _brightness, false];\r\n\r\nGVAR(ppEffectNVGBrightness) ppEffectAdjust [1, (_brightness + 1), 0, [0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 0, 1]];\r\nGVAR(ppEffectNVGBrightness) ppEffectCommit 0;\r\n\r\n[format [(localize LSTRING(NVGBrightness)), (_brightness * 10)]] call EFUNC(common,displayTextStructured);\r\nplaySound \"ACE_Sound_Click\";\r\n"},{"name":"ace_nightvision_fnc_initModule","file":"nightvision/functions/fnc_initModule.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Initializes the settings for the disable NVGs in sight module.\r\n *\r\n * Arguments:\r\n * 0: Module <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_module] call ace_nightvision_fnc_initModule\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_module\"];\r\n\r\n[_module, QGVAR(disableNVGsWithSights), \"disableNVGsWithSights\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_nightvision_fnc_onCameraViewChanged","file":"nightvision/functions/fnc_onCameraViewChanged.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Disables/re-enables NVGs when the player starts/stops aiming down his sight.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: New camera view <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"GUNNER\"] call ace_nightvision_fnc_onCameraViewChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_cameraView\"];\r\n\r\nif (GVAR(disableNVGsWithSights) && {(hmd _unit) != \"\"}) then {\r\n    if ((vehicle _unit == _unit)\r\n        || {isTurnedOut _unit}\r\n        || {!([_unit] call EFUNC(common,hasHatch))\r\n            && {[_unit] call EFUNC(common,getTurretIndex) in ([vehicle _unit] call EFUNC(common,getTurretsFFV))}\r\n           }) then {\r\n        if ((_cameraView == \"GUNNER\") && {currentVisionMode _unit == 1}) then {\r\n            _unit action [\"NVGogglesOff\", _unit];\r\n            _unit setVariable [QGVAR(reenableNVGs), true];\r\n        } else {\r\n            if (_unit getVariable [QGVAR(reenableNVGs), false] && {_cameraView != \"GUNNER\"}) then {\r\n                _unit action [\"NVGoggles\", _unit];\r\n                _unit setVariable [QGVAR(reenableNVGs), false];\r\n            };\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_nightvision_fnc_onVisionModeChanged","file":"nightvision/functions/fnc_onVisionModeChanged.sqf","text":"/*\r\n * Author: BaerMitUmlaut\r\n * Disables turning on NVGs while the player aims down his sight.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: New vision mode <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, 1] call ace_nightvision_fnc_onVisionModeChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_visionMode\"];\r\n\r\nif (GVAR(disableNVGsWithSights) && {(hmd _unit) != \"\"}) then {\r\n    if ((vehicle _unit == _unit)\r\n        || {isTurnedOut _unit}\r\n        || {!([_unit] call EFUNC(common,hasHatch))\r\n            && {[_unit] call EFUNC(common,getTurretIndex) in ([vehicle _unit] call EFUNC(common,getTurretsFFV))}\r\n           }) then {\r\n        if ((cameraView == \"GUNNER\") && {_visionMode > 0}) then {\r\n            _unit action [\"NVGogglesOff\", _unit];\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_nightvision_fnc_updatePPEffects","file":"nightvision/functions/fnc_updatePPEffects.sqf","text":"/*\r\n * Author: commy2, PabstMirror and esteldunedain\r\n * Update the ppEffects everytime something changes\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [someEvent] call ace_nightvision_fnc_updatePPEffects\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\ndisableSerialization;\r\n\r\nparams [[\"_display\", displayNull]];\r\n\r\nif !(_display isEqualType displayNull) then {\r\n    _display = displayNull;\r\n};\r\n\r\nprivate [\"_currentVehicle\", \"_grainSetting\", \"_blurSetting\", \"_radBlurSetting\", \"_config\", \"_hmd\", \"_cameraView\", \"_turret\"];\r\n\r\n_currentVehicle = vehicle ACE_player;\r\n\r\n// If the Zeus display is on or the player has no nightvision\r\nif (ctrlIDD _display == 312 || currentVisionMode ACE_player != 1) exitWith {\r\n    GVAR(ppEffectFilmGrain) ppEffectEnable false;\r\n    GVAR(ppEffectBlur) ppEffectEnable false;\r\n    GVAR(ppEffectRadialBlur) ppEffectEnable false;\r\n    GVAR(ppEffectNVGBrightness) ppEffectEnable false;\r\n};\r\n\r\n// The unit has nightvision\r\n_config = configFile >> \"CfgVehicles\" >> typeOf _currentVehicle;\r\n_hmd = hmd ACE_player;\r\n_cameraView = cameraView;\r\n_turret = [ACE_player] call EFUNC(common,getTurretIndex);\r\n\r\n\r\n_fnc_isUsingHMD = {\r\n    if (_cameraView != \"GUNNER\") exitWith {true};  // asume hmd usage outside of gunner view\r\n\r\n    if (ACE_player == (driver _currentVehicle)) exitWith {\r\n        !(\"NVG\" in getArray (_config >> \"ViewOptics\" >> \"visionMode\"));\r\n    };\r\n\r\n    private [\"_result\", \"_turretConfig\", \"_turretConfigOpticsIn\", \"_index\"];\r\n    _result = true;\r\n    _turretConfig = [_config, _turret] call EFUNC(common,getTurretConfigPath);\r\n    _turretConfigOpticsIn = _turretConfig >> \"OpticsIn\";\r\n\r\n    if (isClass _turretConfigOpticsIn) then {\r\n        for \"_index\" from 0 to (count _turretConfigOpticsIn - 1) do {\r\n            if (\"NVG\" in getArray (_turretConfigOpticsIn select _index >> \"visionMode\")) exitWith {_result = false};\r\n        };\r\n    } else {\r\n        //No OpticsIn usualy means RCWS, still need to test on more vehicles\r\n        _result = false;\r\n    };\r\n    _result\r\n};\r\n\r\nif ((_currentVehicle == ACE_player) || _fnc_isUsingHMD) then {\r\n    _grainSetting = getNumber (configFile >> \"CfgWeapons\" >> _hmd >> \"ACE_NightVision_grain\");\r\n    _blurSetting = getNumber (configFile >> \"CfgWeapons\" >> _hmd >> \"ACE_NightVision_blur\");\r\n    _radBlurSetting = getNumber (configFile >> \"CfgWeapons\" >> _hmd >> \"ACE_NightVision_radBlur\");\r\n    TRACE_3(\"New NVG Settings From Player NVG\",_grainSetting,_blurSetting,_radBlurSetting)\r\n} else {\r\n    _grainSetting = _currentVehicle getVariable [\"ACE_NightVision_grain\", getNumber (_config >> \"ACE_NightVision_grain\")];\r\n    _blurSetting = _currentVehicle getVariable [\"ACE_NightVision_blur\", getNumber (_config >> \"ACE_NightVision_blur\")];\r\n    _radBlurSetting = _currentVehicle getVariable [\"ACE_NightVision_radBlur\", getNumber (_config >> \"ACE_NightVision_radBlur\")];\r\n    TRACE_3(\"New NVG Settings From Vehicle\",_grainSetting,_blurSetting,_radBlurSetting)\r\n};\r\n\r\n\r\n// Enable the effects\r\nGVAR(ppEffectFilmGrain) ppEffectEnable true;\r\nGVAR(ppEffectBlur) ppEffectEnable true;\r\nGVAR(ppEffectRadialBlur) ppEffectEnable true;\r\nGVAR(ppEffectNVGBrightness) ppEffectEnable true;\r\n\r\n// Configure effects parameters\r\nGVAR(ppEffectFilmGrain) ppEffectAdjust [0.25, 2.5, 2.5, _grainSetting, _grainSetting, false];\r\nGVAR(ppEffectFilmGrain) ppEffectCommit 0;\r\nGVAR(ppEffectBlur) ppEffectAdjust [_blurSetting];\r\nGVAR(ppEffectBlur) ppEffectCommit 0;\r\nGVAR(ppEffectRadialBlur) ppEffectAdjust [_radBlurSetting, _radBlurSetting, 0.2, 0.2];\r\nGVAR(ppEffectRadialBlur) ppEffectCommit 0;\r\n"}],"noidle":[],"noradio":[],"norearm":[],"optics":[{"name":"ace_optics_fnc_handleFired","file":"optics/functions/fnc_handleFired.sqf","text":"/*\r\n * Original Author: Taosenai\r\n * Adapted By: KoffeinFlummi, commy2\r\n *\r\n * Animates the scope when firing. Called from the unified fired EH only for the local player.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\n// check if compatible scope is used\r\nprivate _display = uiNamespace getVariable [QGVAR(RscWeaponInfo2D), displayNull];\r\n\r\nif (isNull _display) exitWith {};\r\n\r\n// Reduce the reticle movement as the player drops into lower, supported stances.\r\nprivate \"_recoilCoef\";\r\n_recoilCoef = switch (true) do {\r\n    case (isWeaponDeployed _unit): {0.1};\r\n    case (isWeaponRested _unit): {0.4};\r\n    default {1};\r\n};\r\n\r\n// Constants which determine how the scope recoils\r\nprivate [\"_recoilScope\", \"_reticleShiftX\", \"_reticleShiftY\", \"_scopeShiftX\", \"_scopeShiftY\"];\r\n\r\n_recoilScope = _recoilCoef * linearConversion [0, 1, random 1, SCOPE_RECOIL_MIN, SCOPE_RECOIL_MAX, false];\r\n\r\n_reticleShiftX = _recoilCoef * linearConversion [0, 1, random 1, RETICLE_SHIFT_X_MIN, RETICLE_SHIFT_X_MAX, false];\r\n_reticleShiftY = _recoilCoef * linearConversion [0, 1, random 1, RETICLE_SHIFT_Y_MIN, RETICLE_SHIFT_Y_MAX, false];\r\n\r\n_scopeShiftX = _recoilCoef * linearConversion [0, 1, random 1, SCOPE_SHIFT_X_MIN, SCOPE_SHIFT_X_MAX, false];\r\n_scopeShiftY = _recoilCoef * linearConversion [0, 1, random 1, SCOPE_SHIFT_Y_MIN, SCOPE_SHIFT_Y_MAX, false];\r\n\r\n// Create and commit recoil effect\r\nprivate [\"_sizeX\", \"_sizeY\"];\r\n\r\n_sizeX = (0.75+_recoilScope)/(getResolution select 5);\r\n_sizeY = _sizeX*(4/3);\r\n\r\nprivate \"_positionReticle\";\r\n_positionReticle = [\r\n    safezoneX+0.5*safezoneW-0.5*(_sizeX+_reticleShiftX),\r\n    safezoneY+0.5*safezoneH-0.5*(_sizeY+_reticleShiftY),\r\n    _sizeX,\r\n    _sizeY\r\n];\r\n\r\n(_display displayCtrl 1713001) ctrlSetPosition _positionReticle;\r\n(_display displayCtrl 1713002) ctrlSetPosition _positionReticle;\r\n\r\nprivate \"_positionBody\";\r\n_positionBody = [\r\n    safezoneX+0.5*safezoneW-0.5*(2*_sizeX+_scopeShiftX),\r\n    safezoneY+0.5*safezoneH-0.5*(2*_sizeY+_scopeShiftY),\r\n    2*_sizeX,\r\n    2*_sizeY\r\n];\r\n\r\n(_display displayCtrl 1713005) ctrlSetPosition _positionBody;\r\n(_display displayCtrl 1713006) ctrlSetPosition _positionBody;\r\n\r\n(_display displayCtrl 1713001) ctrlCommit 0;\r\n(_display displayCtrl 1713002) ctrlCommit 0;\r\n(_display displayCtrl 1713005) ctrlCommit 0;\r\n(_display displayCtrl 1713006) ctrlCommit 0;\r\n\r\n// Bring them all back\r\n_sizeX = 0.75/(getResolution select 5);\r\n_sizeY = _sizeX*(4/3);\r\n\r\n_positionReticle = [\r\n    safezoneX+0.5*safezoneW-0.5*_sizeX,\r\n    safezoneY+0.5*safezoneH-0.5*_sizeY,\r\n    _sizeX,\r\n    _sizeY\r\n];\r\n\r\n(_display displayCtrl 1713001) ctrlSetPosition _positionReticle;\r\n(_display displayCtrl 1713002) ctrlSetPosition _positionReticle;\r\n\r\n_positionBody = [\r\n    safezoneX+0.5*safezoneW-0.5*2*_sizeX,\r\n    safezoneY+0.5*safezoneH-0.5*2*_sizeY,\r\n    2*_sizeX,\r\n    2*_sizeY\r\n];\r\n\r\n(_display displayCtrl 1713005) ctrlSetPosition _positionBody;\r\n(_display displayCtrl 1713006) ctrlSetPosition _positionBody;\r\n\r\n(_display displayCtrl 1713001) ctrlCommit RECENTER_TIME;\r\n(_display displayCtrl 1713002) ctrlCommit RECENTER_TIME;\r\n(_display displayCtrl 1713005) ctrlCommit RECENTER_TIME;\r\n(_display displayCtrl 1713006) ctrlCommit RECENTER_TIME;\r\n"},{"name":"ace_optics_fnc_onDrawScope","file":"optics/functions/fnc_onDrawScope.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nprivate [\"_display\", \"_control\"];\r\n\r\n_display = _this select 0;\r\n\r\n_control = _display displayCtrl 1713154;\r\n\r\nif (!ctrlShown (_display displayCtrl 154)) exitWith {\r\n    _control ctrlShow false;\r\n};\r\n\r\nprivate [\"_sizeX\", \"_sizeY\"];\r\n\r\n_sizeX = (call EFUNC(common,getZoom))/4;\r\n_sizeY = _sizeX*safezoneW/safezoneH;\r\n\r\n_control ctrlSetPosition [\r\n    safezoneX+0.5*safezoneW-0.5*_sizeX,\r\n    safezoneY+0.5*safezoneH-0.5*_sizeY,\r\n    _sizeX,\r\n    _sizeY\r\n];\r\n\r\n_control ctrlCommit 0;\r\n_control ctrlShow true;\r\n"},{"name":"ace_optics_fnc_onDrawScope2D","file":"optics/functions/fnc_onDrawScope2D.sqf","text":"/*\r\n * Author: commy2\r\n * Helper function for updating the 2d and 3d scope controls\r\n * Called from a dummy map controls onDraw.\r\n *\r\n * Arguments:\r\n * 0: Display (RscInGameUI for a weapon) <DISPLAY>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [ACE_RscWeapon_Arco's Display] call ace_optics_fnc_onDrawScope2D\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nprivate _display = _this select 0;\r\n\r\n// @todo, all weapon types\r\nprivate _optic = (primaryWeaponItems ACE_player) select 2;\r\nprivate _isPIP = (getText (configFile >> \"CfgWeapons\" >> _optic >> \"ItemInfo\" >> \"modelOptics\")) == QPATHTOF(models\\ace_optics_pip.p3d);\r\n\r\nif (_isPIP) then {\r\n    GVAR(pipLastFrame) = diag_frameno;\r\n    if (isNull GVAR(camera)) then {\r\n        if ((({_x != GVAR(camera)} count allMissionObjects \"camera\") > 0) || {!isNull curatorCamera}) exitWith {\r\n            TRACE_1(\"waiting for feature camera to end\",GVAR(camera));\r\n        };\r\n\r\n        // PiP technique by BadBenson\r\n        GVAR(camera) = \"camera\" camCreate positionCameraToWorld [0,0,0];\r\n        GVAR(camera) camSetFov 0.7;\r\n        GVAR(camera) camSetTarget ACE_player;\r\n        GVAR(camera) camCommit 1;\r\n\r\n        \"ace_optics_rendertarget0\" setPiPEffect [0];\r\n        GVAR(camera) cameraEffect [\"INTERNAL\", \"BACK\", \"ace_optics_rendertarget0\"];\r\n\r\n        TRACE_2(\"created new pip camera\",GVAR(camera),isNull GVAR(camera));\r\n\r\n        //Start a waitUntil to handle destruction after GVAR(pipLastFrame) is no longer updated\r\n        [{\r\n            (abs (diag_frameno - GVAR(pipLastFrame))) > 1\r\n        }, {\r\n            GVAR(camera) cameraEffect [\"TERMINATE\", \"BACK\"];\r\n            camDestroy GVAR(camera);\r\n            TRACE_2(\"destroyed pip camera\",GVAR(camera),isNull GVAR(camera));\r\n        }, []] call CBA_fnc_waitUntilAndExecute;\r\n    };\r\n};\r\n\r\n//If we are not zoomed into the actual scope (not collimator)\r\nif (!ctrlShown (_display displayCtrl 154)) exitWith {\r\n    (_display displayCtrl 1713001) ctrlShow false;\r\n    (_display displayCtrl 1713002) ctrlShow false;\r\n    (_display displayCtrl 1713005) ctrlShow false;\r\n    (_display displayCtrl 1713006) ctrlShow false;\r\n    (_display displayCtrl 1713010) ctrlShow false;\r\n    (_display displayCtrl 1713011) ctrlShow false;\r\n};\r\n\r\nif (_isPIP) then {\r\n    GVAR(camera) setPosATL positionCameraToWorld [0,0,0.4];\r\n    GVAR(camera) camPrepareTarget positionCameraToWorld [0,0,50];\r\n    GVAR(camera) camCommitPrepared 0;\r\n\r\n    // @todo, check if that needs to be done at all\r\n    if (cameraView == \"GUNNER\") then {\r\n        GVAR(camera) camsetFOV 0.7;\r\n        GVAR(camera) camcommit 0;\r\n    } else {\r\n        GVAR(camera) camsetFOV 0.01;\r\n        GVAR(camera) camcommit 0;\r\n    };\r\n};\r\n\r\n// calculate lighting\r\nprivate _dayOpacity = call EFUNC(common,ambientBrightness);\r\nprivate _nightOpacity = [1,0] select (_dayOpacity == 1);\r\n\r\n// Apply lighting and make layers visible\r\n(_display displayCtrl 1713001) ctrlSetTextColor [1,1,1,1];\r\n(_display displayCtrl 1713002) ctrlSetTextColor [1,1,1,[0,1] select (_dayOpacity < 0.5)];\r\n(_display displayCtrl 1713005) ctrlSetTextColor [1,1,1,_dayOpacity];\r\n(_display displayCtrl 1713006) ctrlSetTextColor [1,1,1,_nightOpacity];\r\n\r\n/*\r\n(_display displayCtrl 1713001) ctrlCommit 0;\r\n(_display displayCtrl 1713002) ctrlCommit 0;\r\n(_display displayCtrl 1713005) ctrlCommit 0;\r\n(_display displayCtrl 1713006) ctrlCommit 0;\r\n */\r\n\r\n(_display displayCtrl 1713001) ctrlShow true;\r\n(_display displayCtrl 1713002) ctrlShow true;\r\n(_display displayCtrl 1713005) ctrlShow true;\r\n(_display displayCtrl 1713006) ctrlShow true;\r\n(_display displayCtrl 1713010) ctrlShow _isPIP;\r\n(_display displayCtrl 1713011) ctrlShow _isPIP;\r\n"}],"optionsmenu":[{"name":"ace_optionsmenu_fnc_debugDumpToClipboard","file":"optionsmenu/functions/fnc_debugDumpToClipboard.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Dumps debug info to clipboard.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_debugDumpToClipboard\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_var\", \"_unit\", \"_outputText\", \"_text\"];\r\n\r\n#define MIN_ARRAY_SIZE 50\r\n\r\n_outputText = {\r\n    diag_log text (_this select 0);\r\n    \"ace_clipboard\" callExtension ((_this select 0) + \"\r\n\");\r\n};\r\n\r\n_text = format [\"~~~~~~~~~ACE Debug~~~~~~~~~\r\ntime = %1\r\n\r\n------Performance------\r\ndiag_fps = %2\r\ncount cba_common_waitAndExecArray = %3\r\ncount cba_common_waitUntilAndExecArray = %4\r\ncount cba_common_perFrameHandlerArray = %5 (max %6)\r\ncount diag_activeSQFScripts = %7\r\ncount diag_activeSQSScripts = %8\r\ncount diag_activeMissionFSMs = %9\",\r\ntime,\r\ndiag_fps,\r\ncount cba_common_waitAndExecArray,\r\ncount cba_common_waitUntilAndExecArray,\r\n{!isNil \"_x\"} count cba_common_perFrameHandlerArray, count cba_common_perFrameHandlerArray,\r\ncount diag_activeSQFScripts,\r\ncount diag_activeSQSScripts,\r\ncount diag_activeMissionFSMs];\r\n[_text] call _outputText;\r\n\r\n\r\n_text = format [\"\r\n------Player------\r\ntypeOf = %1\r\nanimationState = %2\",\r\nif (isNull ace_player) then {\"null\"} else {typeOf ace_player},\r\nif (isNull ace_player) then {\"null\"} else {animationState ace_player}];\r\n[_text] call _outputText;\r\n\r\n\r\n_text = format [\"\r\n------ACE Settings------\"];\r\n[_text] call _outputText;\r\n\r\n\r\n{\r\n    _var = missionNamespace getVariable [(_x select 0), \"ERROR: Not Defined\"];\r\n    _text = format [\"%1 - %2\", (_x select 0), _var];\r\n    [_text] call _outputText;\r\n} forEach EGVAR(common,settings);\r\n\r\n\r\n_text = format [\"\r\n------Array Info (count >= %1)------\", MIN_ARRAY_SIZE];\r\n[_text] call _outputText;\r\n\r\n\r\n{\r\n    _var = missionNamespace getVariable [_x, nil];\r\n    if(!isnil \"_var\" && {_var isEqualType []} && {(count _var) > MIN_ARRAY_SIZE}) then {\r\n        _text = format [\"%1 - ARRAY SIZE: %2\", _x, (count _var)];\r\n        [_text] call _outputText;\r\n    };\r\n} forEach (allVariables missionNamespace);\r\n\r\n{\r\n    _unit = _x;\r\n    {\r\n        _var = _unit getVariable [_x, nil];\r\n        if(!isnil \"_var\" && {_var isEqualType []} && {(count _var) > MIN_ARRAY_SIZE}) then {\r\n            _text = format [\"%1 on [%2] - ARRAY SIZE: %3\", _x, _unit, (count _var)];\r\n            [_text] call _outputText;\r\n        };\r\n    } forEach (allVariables _unit);\r\n} forEach allUnits;\r\n\r\n\"ace_clipboard\" callExtension \"--COMPLETE--\";\r\n"},{"name":"ace_optionsmenu_fnc_exportSettings","file":"optionsmenu/functions/fnc_exportSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Export all config settings with their current values.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_exportSettings\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_compiledConfig\", \"_name\", \"_typeName\", \"_isClientSetable\", \"_localizedName\", \"_localizedDescription\", \"_possibleValues\", \"_defaultValue\", \"_value\", \"_compiledConfigEntry\", \"_formatedValue\"];\r\n\r\n{\r\n     /*_settingData = [\r\n        _name,\r\n        _typeName,\r\n        _isClientSetable,\r\n        _localizedName,\r\n        _localizedDescription,\r\n        _possibleValues,\r\n        _isForced,\r\n        _defaultValue\r\n    ];*/\r\n\r\n    _name = _x select 0;\r\n    _typeName = _x select 1;\r\n    _isClientSetable = _x select 2;\r\n    _localizedName = _x select 3;\r\n    _localizedDescription = _x select 4;\r\n    _possibleValues = _x select 5;\r\n    _defaultValue = _x select 6;\r\n\r\n    if (GVAR(ClientSettingsExportIncluded) || !_isClientSetable) then {\r\n        _value = missionNamespace getVariable [_name, _defaultValue];\r\n        _formatedValue = switch (toLower _typeName) do {\r\n            case (\"scalar\"): {\r\n                format['value = %1;', _value];\r\n            };\r\n            case (\"string\"): {\r\n                format['value = \"%1\";', _value];\r\n            };\r\n            case (\"bool\"): {\r\n                if (!(_value isEqualType false)) then {ERROR(\"weird bool typename??\");};\r\n                _value = if ((_value isEqualType false) && {_value}) then {1} else {0};\r\n                format ['value = %1;', _value];\r\n            };\r\n            case (\"color\"): {\r\n                _value params [[\"_r\",1], [\"_b\",0], [\"_g\",1], [\"_a\",1]];\r\n                format [\"value[] = {%1, %2, %3, %4};\", _r, _b, _g, _a];\r\n            };\r\n            default {\r\n                ERROR(\"unknown typeName\");\r\n                \"\"\r\n            };\r\n\r\n        };\r\n        _compiledConfigEntry = format [\"\r\nclass %1 {\r\n    %2\r\n    typeName = %3;\r\n    force = 1;\r\n};\", _name, _formatedValue, format['\"%1\"', _typeName]];\r\n\r\n        \"ace_clipboard\" callExtension _compiledConfigEntry;\r\n    };\r\n} forEach EGVAR(common,settings);\r\n\r\n\"ace_clipboard\" callExtension \"--COMPLETE--\";\r\n\r\n[LSTRING(settingsExported)] call EFUNC(common,displayTextStructured);\r\n"},{"name":"ace_optionsmenu_fnc_moduleAllowConfigExport","file":"optionsmenu/functions/fnc_moduleAllowConfigExport.sqf","text":"/*\r\n * Author: Glowbal\r\n *\r\n *\r\n * Arguments:\r\n * none\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_logic\"];\r\n_logic = _this select 0;\r\n\r\nif (isMultiplayer) exitWith {};\r\n\r\nif (_logic getVariable [\"allowconfigurationExport\", false]) then {\r\n    GVAR(serverConfigGeneration) = 1;\r\n} else {\r\n    GVAR(serverConfigGeneration) = 0;\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_onCategorySelectChanged","file":"optionsmenu/functions/fnc_onCategorySelectChanged.sqf","text":"/*\r\n * Author: Glowbal\r\n * Changes which category is selected\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_onCategorySelectChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingsMenu\", \"_ctrlComboBox\"];\r\n\r\ndisableSerialization;\r\n_settingsMenu = uiNamespace getVariable 'ACE_settingsMenu';\r\n\r\n_ctrlComboBox = (_settingsMenu displayCtrl 14);\r\nGVAR(currentCategorySelection) = _ctrlComboBox lbValue (lbCurSel _ctrlComboBox);\r\n\r\n[true] call FUNC(settingsMenuUpdateList);\r\n"},{"name":"ace_optionsmenu_fnc_onListBoxSettingsChanged","file":"optionsmenu/functions/fnc_onListBoxSettingsChanged.sqf","text":"/*\r\n * Author: Glowbal\r\n * Called when the listbox selection is changed for an options (eg: chaning a setting from false to true)\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_onListBoxSettingsChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingIndex\", \"_rightDropDownIndex\"];\r\n\r\n_rightDropDownIndex = lbCurSel 400;  //Index of right drop down\r\nif (_rightDropDownIndex < 0) then {_rightDropDownIndex = 0;};\r\n\r\n_settingIndex = -1;\r\nif (((lnbCurSelRow 200) >= 0) && {(lnbCurSelRow 200) < ((lnbSize 200) select 0)}) then {\r\n    _settingIndex =  lnbValue [200, [(lnbCurSelRow 200), 0]];\r\n};\r\nif (_settingIndex == -1) exitWith {};\r\n\r\nswitch (GVAR(optionMenu_openTab)) do {\r\n    case (MENU_TAB_OPTIONS): {\r\n        if ((_settingIndex >= 0) && (_settingIndex < (count GVAR(clientSideOptions)))) then {\r\n            _settingIndex = (GVAR(clientSideOptions) select _settingIndex) select 0;\r\n            [MENU_TAB_OPTIONS, _settingIndex, _rightDropDownIndex] call FUNC(updateSetting);\r\n        };\r\n        [false] call FUNC(settingsMenuUpdateList);\r\n    };\r\n    case (MENU_TAB_SERVER_OPTIONS): {\r\n        if ((_settingIndex >= 0) && (_settingIndex < (count GVAR(serverSideOptions)))) then {\r\n            _settingIndex = (GVAR(serverSideOptions) select _settingIndex) select 0;\r\n            [MENU_TAB_SERVER_OPTIONS, _settingIndex, _rightDropDownIndex] call FUNC(updateSetting);\r\n        };\r\n        [false] call FUNC(serverSettingsMenuUpdateList);\r\n    };\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_onListBoxShowSelectionChanged","file":"optionsmenu/functions/fnc_onListBoxShowSelectionChanged.sqf","text":"/*\r\n * Author: Glowbal\r\n * Changes which tab is open (options or colors)\r\n *\r\n * Arguments:\r\n * The tab to open (defined in script_component) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [MENU_TAB_COLORS] call ACE_optionsmenu_fnc_onListBoxShowSelectionChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingsMenu\", \"_localizedHeader\"];\r\n\r\nPARAMS_1(_openTab);\r\nGVAR(optionMenu_openTab) = _openTab;\r\n\r\ndisableSerialization;\r\n_settingsMenu = uiNamespace getVariable 'ACE_settingsMenu';\r\n\r\nswitch (GVAR(optionMenu_openTab)) do {\r\ncase (MENU_TAB_OPTIONS): {\r\n    _localizedHeader = format [\"%1: %2\", (localize LSTRING(OpenConfigMenu)), (localize LSTRING(TabOptions))];\r\n    ctrlSetText [13, _localizedHeader];\r\n    lbClear 400;\r\n\r\n    (_settingsMenu displayCtrl 301) ctrlShow true;\r\n\r\n    (_settingsMenu displayCtrl 400) ctrlShow true;\r\n    (_settingsMenu displayCtrl 410) ctrlShow false;\r\n    (_settingsMenu displayCtrl 411) ctrlShow false;\r\n    (_settingsMenu displayCtrl 412) ctrlShow false;\r\n    (_settingsMenu displayCtrl 413) ctrlShow false;\r\n  };\r\ncase (MENU_TAB_COLORS): {\r\n    _localizedHeader = format [\"%1: %2\", (localize LSTRING(OpenConfigMenu)), (localize LSTRING(TabColors))];\r\n    ctrlSetText [13, _localizedHeader];\r\n\r\n    lbClear 400;\r\n\r\n    (_settingsMenu displayCtrl 301) ctrlShow false;\r\n\r\n    (_settingsMenu displayCtrl 400) ctrlShow false;\r\n    (_settingsMenu displayCtrl 410) ctrlShow true;\r\n    (_settingsMenu displayCtrl 411) ctrlShow true;\r\n    (_settingsMenu displayCtrl 412) ctrlShow true;\r\n    (_settingsMenu displayCtrl 413) ctrlShow true;\r\n\r\n    (_settingsMenu displayCtrl 410) sliderSetRange [0, 255];\r\n    (_settingsMenu displayCtrl 411) sliderSetRange [0, 255];\r\n    (_settingsMenu displayCtrl 412) sliderSetRange [0, 255];\r\n    (_settingsMenu displayCtrl 413) sliderSetRange [0, 255];\r\n  };\r\n};\r\n\r\n[true] call FUNC(settingsMenuUpdateList);\r\n"},{"name":"ace_optionsmenu_fnc_onServerCategorySelectChanged","file":"optionsmenu/functions/fnc_onServerCategorySelectChanged.sqf","text":"/*\r\n * Author: Glowbal\r\n * Changes which category is selected\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_onCategorySelectChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingsMenu\", \"_ctrlComboBox\"];\r\ndisableSerialization;\r\n_settingsMenu = uiNamespace getVariable 'ACE_serverSettingsMenu';\r\n\r\n_ctrlComboBox = (_settingsMenu displayCtrl 14);\r\nGVAR(currentCategorySelection) = lbCurSel _ctrlComboBox;\r\n\r\n[true] call FUNC(serverSettingsMenuUpdateList);\r\n"},{"name":"ace_optionsmenu_fnc_onServerListBoxShowSelectionChanged","file":"optionsmenu/functions/fnc_onServerListBoxShowSelectionChanged.sqf","text":"/*\r\n * Author: Glowbal\r\n * Changes which tab is open (options or colors)\r\n *\r\n * Arguments:\r\n * The tab to open (defined in script_component) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [MENU_TAB_COLORS] call ACE_optionsmenu_fnc_onListBoxShowSelectionChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingsMenu\", \"_localizedHeader\"];\r\n\r\nPARAMS_1(_openTab);\r\nGVAR(optionMenu_openTab) = _openTab;\r\n\r\ndisableSerialization;\r\n_settingsMenu = uiNamespace getVariable 'ACE_serverSettingsMenu';\r\n\r\nswitch (GVAR(optionMenu_openTab)) do {\r\ncase (MENU_TAB_SERVER_OPTIONS): {\r\n    _localizedHeader = format [\"%1: %2\", (localize LSTRING(OpenConfigMenu)), (localize LSTRING(TabOptions))];\r\n    ctrlSetText [13, _localizedHeader];\r\n    lbClear 400;\r\n\r\n    (_settingsMenu displayCtrl 301) ctrlShow true;\r\n\r\n    (_settingsMenu displayCtrl 400) ctrlShow true;\r\n    (_settingsMenu displayCtrl 410) ctrlShow false;\r\n    (_settingsMenu displayCtrl 411) ctrlShow false;\r\n    (_settingsMenu displayCtrl 412) ctrlShow false;\r\n    (_settingsMenu displayCtrl 413) ctrlShow false;\r\n    (_settingsMenu displayCtrl 414) ctrlShow false;\r\n    (_settingsMenu displayCtrl 415) ctrlShow false;\r\n    (_settingsMenu displayCtrl 416) ctrlShow false;\r\n    (_settingsMenu displayCtrl 416) ctrlEnable false;\r\n  };\r\ncase (MENU_TAB_SERVER_COLORS): {\r\n    _localizedHeader = format [\"%1: %2\", (localize LSTRING(OpenConfigMenu)), (localize LSTRING(TabColors))];\r\n    ctrlSetText [13, _localizedHeader];\r\n\r\n    lbClear 400;\r\n\r\n    (_settingsMenu displayCtrl 301) ctrlShow false;\r\n\r\n    (_settingsMenu displayCtrl 400) ctrlShow false;\r\n    (_settingsMenu displayCtrl 410) ctrlShow true;\r\n    (_settingsMenu displayCtrl 411) ctrlShow true;\r\n    (_settingsMenu displayCtrl 412) ctrlShow true;\r\n    (_settingsMenu displayCtrl 413) ctrlShow true;\r\n\r\n    (_settingsMenu displayCtrl 410) sliderSetRange [0, 255];\r\n    (_settingsMenu displayCtrl 411) sliderSetRange [0, 255];\r\n    (_settingsMenu displayCtrl 412) sliderSetRange [0, 255];\r\n    (_settingsMenu displayCtrl 413) sliderSetRange [0, 255];\r\n\r\n    (_settingsMenu displayCtrl 414) ctrlShow false;\r\n    (_settingsMenu displayCtrl 415) ctrlShow false;\r\n    (_settingsMenu displayCtrl 416) ctrlShow false;\r\n    (_settingsMenu displayCtrl 416) ctrlEnable false;\r\n  };\r\ncase (MENU_TAB_SERVER_VALUES): {\r\n    _localizedHeader = format [\"%1: %2\", (localize LSTRING(OpenConfigMenu)), (localize LSTRING(TabValues))];\r\n    ctrlSetText [13, _localizedHeader];\r\n\r\n    lbClear 400;\r\n    (_settingsMenu displayCtrl 301) ctrlShow false;\r\n    (_settingsMenu displayCtrl 400) ctrlShow false;\r\n    (_settingsMenu displayCtrl 410) ctrlShow false;\r\n    (_settingsMenu displayCtrl 411) ctrlShow false;\r\n    (_settingsMenu displayCtrl 412) ctrlShow false;\r\n    (_settingsMenu displayCtrl 413) ctrlShow false;\r\n\r\n    (_settingsMenu displayCtrl 414) ctrlShow true;\r\n    (_settingsMenu displayCtrl 415) ctrlShow true;\r\n    (_settingsMenu displayCtrl 416) ctrlShow true;\r\n    (_settingsMenu displayCtrl 416) ctrlEnable true;\r\n  };\r\n};\r\n\r\n[true] call FUNC(serverSettingsMenuUpdateList);\r\n"},{"name":"ace_optionsmenu_fnc_onServerSaveInputField","file":"optionsmenu/functions/fnc_onServerSaveInputField.sqf","text":"/*\r\n * Author: Glowbal\r\n * Called when the listbox selection is changed for an options (eg: chaning a setting from false to true)\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_onListBoxSettingsChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingIndex\", \"_inputText\", \"_setting\", \"_settingName\", \"_convertedValue\"];\r\n\r\n_inputText = ctrlText 414;  //Index of right drop down\r\n\r\n_settingIndex = -1;\r\nif (((lnbCurSelRow 200) >= 0) && {(lnbCurSelRow 200) < ((lnbSize 200) select 0)}) then {\r\n    _settingIndex =  lnbValue [200, [(lnbCurSelRow 200), 0]];\r\n};\r\n\r\nswitch (GVAR(optionMenu_openTab)) do {\r\n    case (MENU_TAB_SERVER_VALUES): {\r\n        if ((_settingIndex >= 0) && (_settingIndex < (count GVAR(serverSideValues)))) then {\r\n            try {\r\n                _setting = (GVAR(serverSideValues) select _settingIndex);\r\n                _settingName = _setting select 0;\r\n\r\n                _convertedValue = switch (toUpper (_setting select 1)) do {\r\n                case \"STRING\": {\r\n                    ctrlSetText [414, _inputText call FUNC(stringEscape)];\r\n                    format ['%1', _inputText call FUNC(stringEscape)];\r\n                };\r\n                case \"ARRAY\": {format [call compile \"[%1]\", _inputText]};\r\n                case \"SCALAR\": {parseNumber _inputText;};\r\n                    default {throw \"Error\"};\r\n                };\r\n                [MENU_TAB_SERVER_VALUES, _settingName, _convertedValue] call FUNC(updateSetting);\r\n            } catch {\r\n            };\r\n        };\r\n        [false] call FUNC(serverSettingsMenuUpdateList);\r\n    };\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_onServerSettingsMenuOpen","file":"optionsmenu/functions/fnc_onServerSettingsMenuOpen.sqf","text":"/*\r\n * Author: Glowbal\r\n * Called from the onLoad of ACE_settingsMenu dialog.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [onLoadEvent] call ACE_optionsmenu_fnc_onSettingsMenuOpen\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_name\", \"_typeName\", \"_isClientSetable\", \"_localizedName\", \"_localizedDescription\", \"_possibleValues\", \"_defaultValue\", \"_setting\", \"_menu\", \"_settingsMenu\"];\r\n\r\nif (GVAR(serverConfigGeneration) == 0 || isMultiplayer) exitWith {closeDialog 145246;};\r\n\r\n// Filter only user setable setting\r\nGVAR(serverSideOptions) = [];\r\nGVAR(serverSideColors) = [];\r\nGVAR(serverSideValues) = [];\r\n{\r\n    _name = _x select 0;\r\n    _typeName = _x select 1;\r\n    _isClientSetable = _x select 2;\r\n    _localizedName = _x select 3;\r\n    _localizedDescription = _x select 4;\r\n    _possibleValues = _x select 5;\r\n    _defaultValue = _x select 6;\r\n\r\n    // Exclude client side options if they are not included for the export\r\n    if (!(_isClientSetable) || GVAR(ClientSettingsExportIncluded)) then {\r\n        // Append the current value to the setting metadata\r\n        _setting = + _x;\r\n        _setting pushBack (missionNamespace getVariable (_x select 0));\r\n\r\n        // Categorize the setting according to types\r\n        // @todo: allow the user to modify other types of parameters?\r\n        if ((_typeName == \"SCALAR\" && count _possibleValues > 0) || (_x select 1) == \"BOOL\") then {\r\n            GVAR(serverSideOptions) pushBack _setting;\r\n        };\r\n        if (_typeName == \"COLOR\") then {\r\n            GVAR(serverSideColors) pushBack _setting;\r\n        };\r\n        if ((_typeName == \"SCALAR\" && count _possibleValues == 0) || _typeName == \"ARRAY\" || _typeName == \"STRING\") then {\r\n            GVAR(serverSideValues) pushBack _setting;\r\n        };\r\n    };\r\n} forEach EGVAR(common,settings);\r\n\r\n//Delay a frame\r\n[{ [MENU_TAB_SERVER_OPTIONS] call FUNC(onServerListBoxShowSelectionChanged) }, []] call CBA_fnc_execNextFrame;\r\n\r\ndisableSerialization;\r\n_menu = uiNamespace getVariable \"ACE_serverSettingsMenu\";\r\n(_menu displayCtrl 1003) ctrlEnable false;\r\n\r\nif (GVAR(ClientSettingsExportIncluded)) then {\r\n    (_settingsMenu displayCtrl 1102) ctrlSetText localize (LSTRING(exClientSettings));\r\n} else {\r\n    (_settingsMenu displayCtrl 1102) ctrlSetText localize (LSTRING(inClientSettings));\r\n};\r\n\r\n\r\nlbClear (_menu displayCtrl 14);\r\n{\r\n    if (_x == \"\") then {\r\n        _x = localize (LSTRING(category_all));\r\n    };\r\n    (_menu displayCtrl 14) lbAdd _x;\r\n} forEach GVAR(categories);\r\n\r\n(_menu displayCtrl 14) lbSetCurSel GVAR(currentCategorySelection); //All Catagoies\r\n"},{"name":"ace_optionsmenu_fnc_onSettingsMenuOpen","file":"optionsmenu/functions/fnc_onSettingsMenuOpen.sqf","text":"/*\r\n * Author: Glowbal\r\n * Called from the onLoad of ACE_settingsMenu dialog.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [onLoadEvent] call ACE_optionsmenu_fnc_onSettingsMenuOpen\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_setting\", \"_menu\"];\r\n\r\n// Filter only user setable setting\r\nGVAR(clientSideOptions) = [];\r\nGVAR(clientSideColors) = [];\r\nprivate _clientSettableCategories = [\"\"];\r\n\r\n{\r\n    // If the setting is user setable and not forced\r\n    if ((_x select 2) && !(_x select 6)) then {\r\n        // Append the current value to the setting metadata\r\n        _setting = + _x;\r\n        _setting pushBack (missionNamespace getVariable (_x select 0));\r\n\r\n        // Categorize the setting according to types\r\n        // @todo: allow the user to modify other types of parameters?\r\n        if ((_x select 1) == \"SCALAR\" || (_x select 1) == \"BOOL\") then {\r\n            GVAR(clientSideOptions) pushBack _setting;\r\n        };\r\n        if ((_x select 1) == \"COLOR\") then {\r\n            GVAR(clientSideColors) pushBack _setting;\r\n        };\r\n        _clientSettableCategories pushBackUnique (_x select 8); //Add to list of user-settable categories\r\n    };\r\n} forEach EGVAR(common,settings);\r\n\r\n//Delay a frame\r\n[{ [MENU_TAB_OPTIONS] call FUNC(onListBoxShowSelectionChanged) }, []] call CBA_fnc_execNextFrame;\r\n\r\ndisableSerialization;\r\n_menu = uiNamespace getVariable \"ACE_settingsMenu\";\r\n(_menu displayCtrl 1002) ctrlEnable false;\r\n(_menu displayCtrl 1003) ctrlEnable false;\r\n\r\nif (GVAR(serverConfigGeneration) == 0) then {\r\n    (_menu displayCtrl 1102) ctrlEnable false;\r\n    (_menu displayCtrl 1102) ctrlShow false;\r\n};\r\n\r\nlbClear (_menu displayCtrl 14);\r\n{\r\n    if (_x in _clientSettableCategories) then { //only show category if it has user-settable options\r\n        if (_x == \"\") then {\r\n            _x = localize LSTRING(category_all);\r\n        };\r\n        private _Index = (_menu displayCtrl 14) lbAdd _x;\r\n        (_menu displayCtrl 14) lbSetValue [_Index, _forEachIndex];\r\n    };\r\n} forEach GVAR(categories);\r\n\r\n(_menu displayCtrl 14) lbSetCurSel GVAR(currentCategorySelection); //All Catagoies\r\n\r\n\r\n"},{"name":"ace_optionsmenu_fnc_onSliderPosChanged","file":"optionsmenu/functions/fnc_onSliderPosChanged.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Called when one of the color sliders is moved.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_onSliderPosChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_newColor\", \"_settingIndex\"];\r\n\r\n_settingIndex = -1;\r\nif (((lnbCurSelRow 200) >= 0) && {(lnbCurSelRow 200) < ((lnbSize 200) select 0)}) then {\r\n    _settingIndex =  lnbValue [200, [(lnbCurSelRow 200), 0]];\r\n};\r\nif (_settingIndex == -1) exitWith {};\r\n\r\nswitch (GVAR(optionMenu_openTab)) do {\r\n    case (MENU_TAB_COLORS): {\r\n\r\n        _newColor = [];\r\n        {\r\n            _newColor pushBack ((sliderPosition _x) / 255);\r\n        } forEach [410, 411, 412, 413];\r\n\r\n        if ((_settingIndex >= 0) && (_settingIndex < (count GVAR(clientSideColors)))) then {\r\n            _settingIndex = (GVAR(clientSideColors) select _settingIndex) select 0;\r\n            [MENU_TAB_COLORS, _settingIndex, _newColor] call FUNC(updateSetting);\r\n        };\r\n        [false] call FUNC(settingsMenuUpdateList);\r\n    };\r\n    case (MENU_TAB_SERVER_COLORS): {\r\n\r\n        _newColor = [];\r\n        {\r\n            _newColor pushBack ((sliderPosition _x) / 255);\r\n        } forEach [410, 411, 412, 413];\r\n\r\n        if ((_settingIndex >= 0) && (_settingIndex < (count GVAR(clientSideColors)))) then {\r\n            _settingIndex = (GVAR(clientSideColors) select _settingIndex) select 0;\r\n            [MENU_TAB_SERVER_COLORS, _settingIndex, _newColor] call FUNC(updateSetting);\r\n        };\r\n        [false] call FUNC(serverSettingsMenuUpdateList);\r\n    };\r\n    default {};\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_resetSettings","file":"optionsmenu/functions/fnc_resetSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Resets all settings to default.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_onListBoxSettingsChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_name\", \"_default\", \"_lastSelected\"];\r\n\r\n{\r\n    _name = _x select 0;\r\n    _default = _x select 7;\r\n    [MENU_TAB_OPTIONS, _name, _default] call FUNC(updateSetting);\r\n} forEach GVAR(clientSideOptions);\r\n\r\n{\r\n    _name = _x select 0;\r\n    _default = _x select 7;\r\n    [MENU_TAB_COLORS, _name, _default] call FUNC(updateSetting);\r\n} forEach GVAR(clientSideColors);\r\n\r\n_lastSelected = lnbCurSelRow 200;\r\n[GVAR(optionMenu_openTab)] call FUNC(onListBoxShowSelectionChanged);\r\nif (_lastSelected != -1) then {\r\n    lnbSetCurSelRow [200, _lastSelected];\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_serverResetSettings","file":"optionsmenu/functions/fnc_serverResetSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n * Resets all server settings to default.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_onListBoxSettingsChanged\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_name\", \"_default\", \"_lastSelected\"];\r\n\r\n{\r\n    _name = _x select 0;\r\n    _default = _x select 7;\r\n    [MENU_TAB_SERVER_OPTIONS, _name, _default] call FUNC(updateSetting);\r\n} forEach GVAR(serverSideOptions);\r\n\r\n{\r\n    _name = _x select 0;\r\n    _default = _x select 7;\r\n    [MENU_TAB_SERVER_COLORS, _name, _default] call FUNC(updateSetting);\r\n} forEach GVAR(serverSideColors);\r\n\r\n{\r\n    _name = _x select 0;\r\n    _default = _x select 7;\r\n    [MENU_TAB_SERVER_VALUES, _name, _default] call FUNC(updateSetting);\r\n} forEach GVAR(serverSideVakyes);\r\n\r\n_lastSelected = lnbCurSelRow 200;\r\n[GVAR(optionMenu_openTab)] call FUNC(onserverListBoxShowSelectionChanged);\r\nif (_lastSelected != -1) then {\r\n    lbSetCurSel [200, _lastSelected];\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_serverSettingsMenuUpdateKeyView","file":"optionsmenu/functions/fnc_serverSettingsMenuUpdateKeyView.sqf","text":"/*\r\n * Author: Glowbal\r\n * Updates the right half of the option menu for the currently selected option.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_settingsMenuUpdateKeyView\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingsMenu\", \"_collection\", \"_settingIndex\", \"_setting\", \"_entryName\", \"_localizedName\", \"_localizedDescription\", \"_possibleValues\", \"_settingsValue\", \"_currentColor\", \"_expectedType\"];\r\ndisableSerialization;\r\n\r\n_settingsMenu = uiNamespace getVariable 'ACE_serverSettingsMenu';\r\n\r\n_collection = switch (GVAR(optionMenu_openTab)) do {\r\n    case MENU_TAB_SERVER_OPTIONS: {GVAR(serverSideOptions)};\r\n    case MENU_TAB_SERVER_COLORS: {GVAR(serverSideColors)};\r\n    case MENU_TAB_SERVER_VALUES: {GVAR(serverSideValues)};\r\n    default {[]};\r\n};\r\n\r\n_settingIndex = -1;\r\nif (((lnbCurSelRow 200) >= 0) && {(lnbCurSelRow 200) < ((lnbSize 200) select 0)}) then {\r\n    _settingIndex =  lnbValue [200, [(lnbCurSelRow 200), 0]];\r\n};\r\n\r\nif ((_settingIndex >= 0) && {_settingIndex <= (count _collection)}) then {\r\n    _setting = _collection select _settingIndex;\r\n\r\n    _entryName = _setting select 0;\r\n    _localizedName = _setting select 3;\r\n    _localizedDescription = _setting select 4;\r\n\r\n    if (_localizedName == \"\") then {_localizedName = _entryName;};\r\n    (_settingsMenu displayCtrl 250) ctrlSetText _localizedName;\r\n    (_settingsMenu displayCtrl 251) ctrlSetText _localizedDescription;\r\n    (_settingsMenu displayCtrl 300) ctrlSetText _entryName;\r\n\r\n    switch (GVAR(optionMenu_openTab)) do {\r\n        case (MENU_TAB_SERVER_OPTIONS): {\r\n            _possibleValues = _setting select 5;\r\n            _settingsValue = _setting select 9;\r\n            // Created disable/enable options for bools\r\n            if ((_setting select 1) == \"BOOL\") then {\r\n                lbClear 400;\r\n                lbAdd [400, (localize ELSTRING(common,No))];\r\n                lbAdd [400, (localize ELSTRING(common,Yes))];\r\n                _settingsValue = [0, 1] select _settingsValue;\r\n            } else {\r\n                lbClear 400;\r\n                { lbAdd [400, _x]; } forEach _possibleValues;\r\n            };\r\n            (_settingsMenu displayCtrl 400) lbSetCurSel _settingsValue;\r\n        };\r\n        case (MENU_TAB_SERVER_COLORS): {\r\n            _currentColor = _setting select 9;\r\n            {\r\n                sliderSetPosition [_x, (255 * (_currentColor select _forEachIndex))];\r\n            } forEach [410, 411, 412, 413];\r\n        };\r\n        case (MENU_TAB_SERVER_VALUES): {\r\n            // TODO implement\r\n            _settingsValue = _setting select 9;\r\n\r\n            // Created disable/enable options for bools\r\n            _expectedType = switch (_setting select 1) do {\r\n                case \"STRING\": {LSTRING(stringType)};\r\n                case \"ARRAY\": {LSTRING(arrayType)};\r\n                case \"SCALAR\": {LSTRING(scalarType)};\r\n                default {LSTRING(unknownType)};\r\n            };\r\n            (_settingsMenu displayCtrl 414) ctrlSetText format[\"%1\", _settingsValue];\r\n            (_settingsMenu displayCtrl 415) ctrlSetText format[localize _expectedType];\r\n        };\r\n    };\r\n} else {  //no settings in list:\r\n    lbClear 400;\r\n    (_settingsMenu displayCtrl 250) ctrlSetText \"No settings available\";\r\n    (_settingsMenu displayCtrl 251) ctrlSetText \"No settings available\";\r\n    (_settingsMenu displayCtrl 300) ctrlSetText \"No settings available\";\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_serverSettingsMenuUpdateList","file":"optionsmenu/functions/fnc_serverSettingsMenuUpdateList.sqf","text":"/*\r\n * Author: Glowbal\r\n * Updates the setting when the client has selected a new value.  Saves to profilenamespace.\r\n *\r\n * Arguments:\r\n * 0: Update the keylist as well <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [false] call ACE_optionsmenu_fnc_settingsMenuUpdateList\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingName\", \"_added\", \"_settingsMenu\", \"_ctrlList\", \"_settingsText\", \"_color\", \"_settingsColor\", \"_updateKeyView\", \"_settingsValue\", \"_selectedCategory\"];\r\nDEFAULT_PARAM(0,_updateKeyView,true);\r\n\r\ndisableSerialization;\r\n_settingsMenu = uiNamespace getVariable 'ACE_serverSettingsMenu';\r\n_ctrlList = _settingsMenu displayCtrl 200;\r\n\r\nlnbClear _ctrlList;\r\n\r\n_selectedCategory = GVAR(categories) select GVAR(currentCategorySelection);\r\n\r\n_added = 0;\r\nswitch (GVAR(optionMenu_openTab)) do {\r\n    case (MENU_TAB_SERVER_OPTIONS): {\r\n        {\r\n            if (_selectedCategory == \"\" || {_selectedCategory == (_x select 8)}) then {\r\n                _settingName = if ((_x select 3) != \"\") then {\r\n                    (_x select 3);\r\n                } else {\r\n                    (_x select 0);\r\n                };\r\n\r\n                _settingsValue = _x select 9;\r\n\r\n                // Created disable/enable options for bools\r\n                _settingsText = if ((_x select 1) == \"BOOL\") then {\r\n                    [(localize ELSTRING(common,No)), (localize ELSTRING(common,Yes))] select _settingsValue;\r\n                } else {\r\n                    (_x select 5) select _settingsValue;\r\n                };\r\n\r\n                _added = _ctrlList lnbAddRow [_settingName, _settingsText];\r\n                _ctrlList lnbSetValue [[_added, 0], _forEachIndex];\r\n            };\r\n        }forEach GVAR(serverSideOptions);\r\n    };\r\n    case (MENU_TAB_SERVER_COLORS): {\r\n        {\r\n            if (_selectedCategory == \"\" || {_selectedCategory == (_x select 8)}) then {\r\n                _color = +(_x select 9);\r\n                {\r\n                    _color set [_forEachIndex, ((round (_x * 100))/100)];\r\n                } forEach _color;\r\n                _settingsColor = str _color;\r\n                _settingName = if ((_x select 3) != \"\") then {\r\n                    (_x select 3);\r\n                } else {\r\n                    (_x select 0);\r\n                };\r\n\r\n                _added = _ctrlList lnbAddRow [_settingName, _settingsColor];\r\n                _ctrlList lnbSetColor [[_added, 1], (_x select 9)];\r\n                _ctrlList lnbSetValue [[_added, 0], _forEachIndex];\r\n            };\r\n        }forEach GVAR(serverSideColors);\r\n    };\r\n    case (MENU_TAB_SERVER_VALUES): {\r\n        {\r\n            if (_selectedCategory == \"\" || {_selectedCategory == (_x select 8)}) then {\r\n                _settingName = if ((_x select 3) != \"\") then {\r\n                    (_x select 3);\r\n                } else {\r\n                    (_x select 0);\r\n                };\r\n                _settingsValue = _x select 9;\r\n                if (!(_settingsValue isEqualType \"\")) then {\r\n                    _settingsValue = format[\"%1\", _settingsValue];\r\n                };\r\n                _added = _ctrlList lnbAddRow [_settingName, _settingsValue];\r\n                _ctrlList lnbSetValue [[_added, 0], _forEachIndex];\r\n            };\r\n        }forEach GVAR(serverSideValues);\r\n    };\r\n};\r\nif (_updateKeyView) then {\r\n    [] call FUNC(serverSettingsMenuUpdateKeyView);\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_settingsMenuUpdateKeyView","file":"optionsmenu/functions/fnc_settingsMenuUpdateKeyView.sqf","text":"/*\r\n * Author: Glowbal\r\n * Updates the right half of the option menu for the currently selected option.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_settingsMenuUpdateKeyView\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingsMenu\", \"_ctrlList\", \"_collection\", \"_settingIndex\", \"_setting\", \"_entryName\", \"_localizedName\", \"_localizedDescription\", \"_possibleValues\", \"_settingsValue\", \"_currentColor\"];\r\ndisableSerialization;\r\n\r\n_settingsMenu = uiNamespace getVariable 'ACE_settingsMenu';\r\n_ctrlList = _settingsMenu displayCtrl 200;\r\n\r\n_collection = switch (GVAR(optionMenu_openTab)) do {\r\n    case MENU_TAB_OPTIONS: {GVAR(clientSideOptions)};\r\n    case MENU_TAB_COLORS: {GVAR(clientSideColors)};\r\n    default {[]};\r\n};\r\n\r\n_settingIndex = -1;\r\nif (((lnbCurSelRow 200) >= 0) && {(lnbCurSelRow 200) < ((lnbSize 200) select 0)}) then {\r\n    _settingIndex =  lnbValue [200, [(lnbCurSelRow 200), 0]];\r\n};\r\n\r\nif ((_settingIndex >= 0) && {_settingIndex <= (count _collection)}) then {\r\n    _setting = _collection select _settingIndex;\r\n\r\n    _entryName = _setting select 0;\r\n    _localizedName = _setting select 3;\r\n    _localizedDescription = _setting select 4;\r\n\r\n    if (_localizedName == \"\") then {_localizedName = _entryName;};\r\n    (_settingsMenu displayCtrl 250) ctrlSetText _localizedName;\r\n    (_settingsMenu displayCtrl 251) ctrlSetText _localizedDescription;\r\n    (_settingsMenu displayCtrl 300) ctrlSetText _entryName;\r\n\r\n    switch (GVAR(optionMenu_openTab)) do {\r\n        case (MENU_TAB_OPTIONS): {\r\n            _possibleValues = _setting select 5;\r\n            _settingsValue = _setting select 9;\r\n\r\n            // Created disable/enable options for bools\r\n            if ((_setting select 1) == \"BOOL\") then {\r\n                lbClear 400;\r\n                lbAdd [400, (localize ELSTRING(common,No))];\r\n                lbAdd [400, (localize ELSTRING(common,Yes))];\r\n                _settingsValue = [0, 1] select _settingsValue;\r\n            } else {\r\n                lbClear 400;\r\n                { lbAdd [400, _x]; } forEach _possibleValues;\r\n            };\r\n            (_settingsMenu displayCtrl 400) lbSetCurSel _settingsValue;\r\n        };\r\n        case (MENU_TAB_COLORS): {\r\n            _currentColor = _setting select 9;\r\n            {\r\n                sliderSetPosition [_x, (255 * (_currentColor select _forEachIndex))];\r\n            } forEach [410, 411, 412, 413];\r\n        };\r\n    };\r\n} else {  //no settings in list:\r\n    lbClear 400;\r\n    (_settingsMenu displayCtrl 250) ctrlSetText \"No settings available\";\r\n    (_settingsMenu displayCtrl 251) ctrlSetText \"No settings available\";\r\n    (_settingsMenu displayCtrl 300) ctrlSetText \"No settings available\";\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_settingsMenuUpdateList","file":"optionsmenu/functions/fnc_settingsMenuUpdateList.sqf","text":"/*\r\n * Author: Glowbal\r\n * Updates the setting when the client has selected a new value.  Saves to profilenamespace.\r\n *\r\n * Arguments:\r\n * 0: Update the keylist as well <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [false] call ACE_optionsmenu_fnc_settingsMenuUpdateList\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_settingName\", \"_added\", \"_settingsMenu\", \"_ctrlList\", \"_settingsText\", \"_color\", \"_settingsColor\", \"_updateKeyView\", \"_settingsValue\", \"_selectedCategory\"];\r\nDEFAULT_PARAM(0,_updateKeyView,true);\r\n\r\ndisableSerialization;\r\n_settingsMenu = uiNamespace getVariable 'ACE_settingsMenu';\r\n_ctrlList = _settingsMenu displayCtrl 200;\r\n\r\nlnbClear _ctrlList;\r\n\r\n_selectedCategory = GVAR(categories) select GVAR(currentCategorySelection);\r\n\r\nswitch (GVAR(optionMenu_openTab)) do {\r\n    case (MENU_TAB_OPTIONS): {\r\n        {\r\n            if (_selectedCategory == \"\" || {_selectedCategory == (_x select 8)}) then {\r\n                _settingName = (_x select 3);\r\n                _settingsValue = _x select 9;\r\n\r\n                // Created disable/enable options for bools\r\n                _settingsText = if ((_x select 1) == \"BOOL\") then {\r\n                    [(localize  ELSTRING(common,No)), (localize ELSTRING(common,Yes))] select _settingsValue;\r\n                } else {\r\n                    private _values = _x select 5;\r\n                    if !((!isNil \"_values\") && {_values isEqualType []} && {_settingsValue >= 0} && {_settingsValue < (count _values)}) exitWith {\r\n                        ACE_LOGERROR_3(\"Setting (%1) has bad values (%2) for index (%3)\", _settingName, _values, _settingsValue);\r\n                        \"ERROR\"\r\n                    };\r\n                    _values select _settingsValue;\r\n                };\r\n                _added = _ctrlList lnbAddRow [_settingName, _settingsText];\r\n                _ctrlList lnbSetValue [[_added, 0], _forEachIndex];\r\n            };\r\n        } forEach GVAR(clientSideOptions);\r\n    };\r\n    case (MENU_TAB_COLORS): {\r\n        {\r\n            if (_selectedCategory == \"\" || {_selectedCategory == (_x select 8)}) then {\r\n                _color = +(_x select 9);\r\n                {\r\n                    _color set [_forEachIndex, ((round (_x * 100))/100)];\r\n                } forEach _color;\r\n                _settingsColor = str _color;\r\n                _settingName = (_x select 3);\r\n\r\n                _added = _ctrlList lnbAddRow [_settingName, _settingsColor];\r\n                _ctrlList lnbSetColor [[_added, 1], (_x select 9)];\r\n                _ctrlList lnbSetValue [[_added, 0], _forEachIndex];\r\n            };\r\n        }forEach GVAR(clientSideColors);\r\n    };\r\n};\r\nif (_updateKeyView) then {\r\n    [] call FUNC(settingsMenuUpdateKeyView);\r\n};\r\n"},{"name":"ace_optionsmenu_fnc_stringEscape","file":"optionsmenu/functions/fnc_stringEscape.sqf","text":"/*\r\n * Author: Glowbal\r\n * Parse the string for quotation marks, so it can be used for config export.\r\n *\r\n * Arguments:\r\n * 0: string <STRING>\r\n *\r\n * Return Value:\r\n * parsed string <STRING>\r\n *\r\n * Example:\r\n * [] call ACE_optionsmenu_fnc_stringEscape\r\n *\r\n * Public: No\r\n */\r\n\r\nprivate [\"_str\", \"_array\", \"_maxIndex\", \"_isEven\"];\r\n_str = _this;\r\n\r\n_isEven = {\r\n    params [\"_array\", \"_index\"];\r\n    private [ \"_count\"];\r\n    _count = 0;\r\n    {\r\n        if (_forEachIndex <= _index && {_x == 39}) then {\r\n            _count = _count + 1;\r\n        };\r\n    }forEach _array;\r\n\r\n    _count %2 == 0;\r\n};\r\n\r\n// reg: 34\r\n// single: 39\r\n_array = toArray _str;\r\n{\r\n    if (_x == 34) then {\r\n        _array set [_forEachIndex, 39];\r\n    };\r\n}forEach _array;\r\n\r\n_maxIndex = count _array;\r\nfor \"_i\" from 0 to _maxIndex /* step +1 */ do {\r\n    if (((_i + 1) < _maxIndex - 1) && {_array select _i == 39 && (_array select (_i + 1)) == 39}) then {\r\n        if ([_array, _i] call _isEven) then {\r\n            _array deleteAt _i;\r\n            _i = _i - 1;\r\n            _maxIndex = _maxIndex - 1;\r\n        };\r\n    };\r\n};\r\n\r\n{\r\n    if (_x == 34) then {\r\n        _array set [_forEachIndex, 39];\r\n    };\r\n}forEach _array;\r\n\r\ntoString _array;\r\n"},{"name":"ace_optionsmenu_fnc_toggleIncludeClientSettings","file":"optionsmenu/functions/fnc_toggleIncludeClientSettings.sqf","text":"/*\r\n * Author: Glowbal\r\n *\r\n *\r\n * Arguments:\r\n * none\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(ClientSettingsExportIncluded) = !(GVAR(ClientSettingsExportIncluded));\r\n\r\n[] call FUNC(onServerSettingsMenuOpen);\r\n"},{"name":"ace_optionsmenu_fnc_updateSetting","file":"optionsmenu/functions/fnc_updateSetting.sqf","text":"/*\r\n * Author: Glowbal\r\n * Updates the setting when the client has selected a new value.  Saves to profilenamespace and calls setSetting.\r\n *\r\n * Arguments:\r\n * 0: The Tab Open <NUMBER>\r\n * 1: The setting's name <STRING>\r\n * 2: The new value either an index or a color <NUMBER>OR<ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [MENU_TAB_COLORS, \"ace_fireTruckColor\", [1,0,0,1]] call ACE_optionsmenu_fnc_updateSetting\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_changed\"];\r\nPARAMS_3(_type,_name,_newValue);\r\n\r\n_changed = false;\r\n\r\nswitch (_type) do {\r\n  case (MENU_TAB_OPTIONS): {\r\n      {\r\n        if ((_x select 0) == _name) then {\r\n\r\n          if ((_x select 1) == \"BOOL\") then {\r\n            _newValue = [false, true] select _newValue;\r\n          };\r\n\r\n          if !((_x select 9) isEqualTo _newValue) then {\r\n            _changed = true;\r\n            _x set [9, _newValue];\r\n          } ;\r\n\r\n        };\r\n      } forEach GVAR(clientSideOptions);\r\n  };\r\n  case (MENU_TAB_COLORS): {\r\n      {\r\n        if (((_x select 0) == _name) && {!((_x select 9) isEqualTo _newValue)}) then {\r\n          _changed = true;\r\n          _x set [9, _newValue];\r\n        };\r\n      } forEach GVAR(clientSideColors);\r\n  };\r\n  case (MENU_TAB_SERVER_OPTIONS): {\r\n      {\r\n        if ((_x select 0) == _name) then {\r\n\r\n          if ((_x select 1) == \"BOOL\") then {\r\n            _newValue = [false, true] select _newValue;\r\n          };\r\n\r\n          if !((_x select 9) isEqualTo _newValue) then {\r\n            _changed = true;\r\n            _x set [9, _newValue];\r\n          } ;\r\n\r\n        };\r\n      } forEach GVAR(serverSideOptions);\r\n  };\r\n  case (MENU_TAB_SERVER_COLORS): {\r\n      {\r\n        if (((_x select 0) == _name) && {!((_x select 9) isEqualTo _newValue)}) then {\r\n          _changed = true;\r\n          _x set [9, _newValue];\r\n        };\r\n      } forEach GVAR(serverSideColors);\r\n  };\r\n  case (MENU_TAB_SERVER_VALUES): {\r\n      {\r\n        if (((_x select 0) == _name) && {!((_x select 9) isEqualTo _newValue)}) then {\r\n          _changed = true;\r\n          _x set [9, _newValue];\r\n        };\r\n      } forEach GVAR(serverSideValues);\r\n  };\r\n};\r\n\r\nif (_changed) then {\r\n  if (GVAR(serverConfigGeneration) > 0) then {\r\n    if !(isMultiplayer) then {\r\n      missionNamespace setVariable [_name, _newValue];\r\n    };\r\n  } else {\r\n    profileNamespace setVariable [_name, _newValue];\r\n    [_name, _newValue] call EFUNC(common,setSetting);\r\n  };\r\n};\r\n"}],"overheating":[{"name":"ace_overheating_fnc_calculateCooling","file":"overheating/functions/fnc_calculateCooling.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Calculate the cooling down of a weapon over a time interval.\r\n *\r\n * Arguments:\r\n * 0: Initial temperature <NUMBER>\r\n * 1: Barrel mass <NUMBER>\r\n * 2: Time interval  <NUMBER>\r\n *\r\n * Return Value:\r\n * Final temperature <NUMBER>\r\n *\r\n * Example:\r\n * [_temperature, _barrelMass, _totalTime] call ace_overheating_fnc_calculateCooling\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_temperature\", \"_barrelMass\", \"_totalTime\"];\r\n\r\n// If a long time passed since the last shot, there's no need to calculate anything; the weapon should be cool\r\nif (_totalTime > 1800) exitWith {0};\r\n\r\n//AR-15 (0.00570m bullet diameter) (barrel diameter usually 0.75\" or 0.008255m radius)\r\n//Steel Denisty = 7850 m^3 / kg\r\n//Area of a cylinder (2/r)*(Pi * r^3 + V) - for a 0.008255m radius barrel -> Area = 210(1/meters) * Volume\r\n//Adjusted volume for being hollowed out is ~1.1x\r\n//So Area = 210 * 1.1 * (mass / 7850) = mass * 0.029427 (for steel near that diameter)\r\n\r\nprivate _barrelSurface = _barrelMass * 0.029427;\r\n\r\nTRACE_4(\"cooling\",_temperature,_totalTime,_barrelMass,_barrelSurface);\r\n\r\nprivate _time = 0;\r\nwhile {true} do {\r\n    private _deltaTime = (_totalTime - _time) min 20;\r\n\r\n    _temperature = _temperature - (\r\n    // Convective cooling\r\n    25 * _barrelSurface * _temperature\r\n    // Radiative cooling\r\n    + 0.4 * 5.67e-8 * _barrelSurface *\r\n    ( (_temperature + 273.15)*(_temperature + 273.15)\r\n    * (_temperature + 273.15)*(_temperature + 273.15)\r\n    - 273.15 * 273.15 * 273.15 *273.15 )\r\n    ) * _deltaTime / (_barrelMass * 466);\r\n\r\n    if (_temperature < 1) exitWith {0};\r\n\r\n    if (isNil \"_temperature\") exitWith {\r\n        diag_log text format [\"[ACE] ERROR: _totalTime = %1; _time = %2; _deltaTime = %3;\", _totalTime, _time, _deltaTime];\r\n        0\r\n    };\r\n\r\n    _time = _time + _deltaTime;\r\n    if (_time >= _totalTime) exitWith { _temperature max 0 };\r\n};\r\n"},{"name":"ace_overheating_fnc_canUnjam","file":"overheating/functions/fnc_canUnjam.sqf","text":"/*\r\n * Author: Commy2 and esteldunedain\r\n * Return true if the unit can unjam it's current weapon\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * Bool\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"_unit\",_unit);\r\n\r\nprivate _jammedWeapons = _unit getVariable [QGVAR(jammedWeapons), []];\r\nif !(currentWeapon _unit in _jammedWeapons) exitWith {\r\n    false\r\n};\r\nif !([_unit] call CBA_fnc_canUseWeapon) exitWith {\r\n    false\r\n};\r\ntrue\r\n"},{"name":"ace_overheating_fnc_checkSpareBarrelsTemperatures","file":"overheating/functions/fnc_checkSpareBarrelsTemperatures.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Make the player check the temperature of his spare barrels\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\"];\r\n\r\n// Check canInteractWith:\r\nif (!([_player, objNull, [\"isNotInside\", \"isNotSitting\"]] call EFUNC(common,canInteractWith))) exitWith {};\r\n\r\n// Make the unit go kneeling\r\n[_player] call EFUNC(common,goKneeling);\r\n\r\n// Spawn a progress bar\r\n[\r\n    5.0,\r\n    [_player],\r\n    {\r\n        params [\"_args\", \"_elapsedTime\", \"_totalTime\", \"_errorCode\"];\r\n        _args params [\"_player\"];\r\n        // Time has enlapsed, ask the server to send the hint\r\n        [QGVAR(sendSpareBarrelTemperatureHint), [_player, _player]] call CBA_fnc_serverEvent;\r\n    },\r\n    {},\r\n    (localize LSTRING(CheckingSpareBarrelsTemperatures)),\r\n    {true},\r\n    [\"isNotInside\", \"isNotSitting\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_overheating_fnc_checkTemperature","file":"overheating/functions/fnc_checkTemperature.sqf","text":"/*\r\n * Author: Commy2 and esteldunedain\r\n * Make the player check the temperature of his weapon\r\n *\r\n * Arguments:\r\n * 0: Unit checking <OBJECT>\r\n * 1: Unit that has the weapon <OBJECT>\r\n * 2: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player] call ace_overheating_fnc_checkTemperature\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\r\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\r\n\r\n// Play animation and report temperature\r\nprivate _action = \"PutDown\";\r\nif (_assistant isEqualTo _gunner) then {\r\n    _action = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"ACE_checkTemperatureAction\");\r\n    if (_action == \"\") then {\r\n        _action = \"Gear\";\r\n    };\r\n};\r\n_assistant playActionNow _action;\r\n\r\n// Waits a sec before displaying the temperature\r\n[FUNC(displayTemperature), [_gunner, _weapon], 1.0] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_overheating_fnc_clearJam","file":"overheating/functions/fnc_clearJam.sqf","text":"/*\r\n * Author: Commy2\r\n * Make the unit clear the jam from a weapon\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Weapon <STRING>\r\n * 2: Skip anim? <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player, false] call ace_overheating_fnc_clearJam\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\", [\"_skipAnim\", false]];\r\nTRACE_3(\"params\",_unit,_weapon,_skipAnim);\r\n\r\nprivate _jammedWeapons = _unit getVariable [QGVAR(jammedWeapons), []];\r\n\r\nif (_weapon in _jammedWeapons) then {\r\n    private _delay = 0;\r\n    if !(_skipAnim) then {\r\n        _delay = 2.5;\r\n        private _clearJamAction = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"ACE_clearJamAction\");\r\n\r\n        if (_clearJamAction == \"\") then {\r\n            _clearJamAction = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"reloadAction\");\r\n        };\r\n\r\n        _unit playActionNow _clearJamAction;\r\n        if (_weapon == primaryWeapon _unit) then {\r\n            playSound QGVAR(fixing_rifle);\r\n        } else {\r\n            if (_weapon == secondaryWeapon _unit) then {\r\n                playSound QGVAR(fixing_pistol);\r\n            };\r\n        };\r\n    };\r\n\r\n    // Check if the jam will be successfull\r\n    if (random 1 > GVAR(unJamFailChance)) then {\r\n        // Success\r\n        _jammedWeapons = _jammedWeapons - [_weapon];\r\n        _unit setVariable [QGVAR(jammedWeapons), _jammedWeapons];\r\n        if (_jammedWeapons isEqualTo []) then {\r\n            private _id = _unit getVariable [QGVAR(JammingActionID), -1];\r\n            [_unit, \"DefaultAction\", _id] call EFUNC(common,removeActionEventHandler);\r\n            _unit setVariable [QGVAR(JammingActionID), -1];\r\n        };\r\n        if (GVAR(DisplayTextOnJam)) then {\r\n            [{\r\n                [localize LSTRING(WeaponUnjammed)] call EFUNC(common,displayTextStructured);\r\n            }, [], _delay] call CBA_fnc_waitAndExecute;\r\n        };\r\n    } else {\r\n        // Failure\r\n        if (GVAR(DisplayTextOnJam)) then {\r\n            [{\r\n                [localize LSTRING(WeaponUnjamFailed)] call EFUNC(common,displayTextStructured);\r\n            }, [], _delay] call CBA_fnc_waitAndExecute;\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_overheating_fnc_displayTemperature","file":"overheating/functions/fnc_displayTemperature.sqf","text":"/*\r\n * Author: Commy2 and esteldunedain\r\n * Displays the weapon temperature\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Values:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player] call ace_overheating_fnc_displayTemperature\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_weapon\"];\r\nTRACE_2(\"params\",_player,_weapon);\r\n\r\n// Calculate cool down of weapon since last shot\r\nprivate _temperature = [_player, _weapon, 0] call FUNC(updateTemperature);\r\nprivate _scaledTemperature = (_temperature / 1000) min 1;\r\n\r\nprivate _color = [\r\n    2 * (_scaledTemperature * 2 min 1) min 1,\r\n    2 * (1 - (_scaledTemperature * 2 min 1)) min 1,\r\n    00\r\n];\r\n\r\nprivate _count = round (12 * _scaledTemperature);\r\nprivate _string = \"\";\r\nfor \"_a\" from 1 to _count do {\r\n    _string = _string + \"|\";\r\n};\r\nprivate _text = [_string, _color] call EFUNC(common,stringToColoredText);\r\n\r\n_string = \"\";\r\nfor \"_a\" from (_count + 1) to 12 do {\r\n    _string = _string + \"|\";\r\n};\r\n\r\n_text = composeText [_text, [_string, [0.5, 0.5, 0.5]] call EFUNC(common,stringToColoredText)];\r\n\r\nprivate _picture = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\");\r\n\r\n[_text, _picture] call EFUNC(common,displayTextPicture);\r\n"},{"name":"ace_overheating_fnc_firedEH","file":"overheating/functions/fnc_firedEH.sqf","text":"/*\r\n * Author: Commy2 and esteldunedain\r\n * Handle weapon fire. Called from the unified fired EH 1- always for the local player 2- and for non local players if dispersion is simulated.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nBEGIN_COUNTER(firedEH);\r\n\r\nif ((_unit distance ACE_player) > 3000 //Ignore far away shots\r\n    || {(_muzzle != (primaryWeapon _unit)) && {_muzzle != (handgunWeapon _unit)}}) exitWith { // Only rifle or pistol muzzles (ignore grenades / GLs)\r\n    END_COUNTER(firedEH);\r\n};\r\n\r\n// Compute new temperature if the unit is the local player\r\nif (_unit == ACE_player) then {\r\n    _this call FUNC(overheat);\r\n};\r\n\r\n// Get current temperature from the unit variable\r\nprivate _temperature = _unit getVariable [format [QGVAR(%1_temp), _weapon], 0];\r\nprivate _scaledTemperature = linearConversion [0, 1000, _temperature, 0, 1, true];\r\n\r\nTRACE_2(\"Unit fired with temp:\",_unit,_temperature);\r\n\r\n//Get weapon data from cache:\r\n([_weapon] call FUNC(getWeaponData)) params [\"_dispersion\", \"_slowdownFactor\", \"_jamChance\"];\r\nTRACE_4(\"weapon data from cache\",_weapon,_dispersion,_slowdownFactor,_jamChance);\r\n\r\n// Dispersion and bullet slow down\r\nif (GVAR(overheatingDispersion)) then {\r\n    // Exit if GVAR(pseudoRandomList) isn't synced yet\r\n    if (isNil QGVAR(pseudoRandomList)) exitWith {ACE_LOGERROR(\"No pseudoRandomList sync\");};\r\n\r\n    //Dispersion: 0 mils @ 0°C, 0.5 mils @ 333°C, 2.2 mils @ 666°C, 5 mils at 1000°C\r\n    _dispersion = _dispersion * 0.28125 * (_scaledTemperature^2);\r\n\r\n    _slowdownFactor = _slowdownFactor * linearConversion [0.666, 1, _scaledTemperature, 0, -0.1, true];\r\n\r\n    // Get the pseudo random values for dispersion from the remaining ammo count\r\n    (GVAR(pseudoRandomList) select ((_unit ammo _weapon) mod (count GVAR(pseudoRandomList)))) params [\"_dispersionX\", \"_dispersionY\"];\r\n\r\n    TRACE_4(\"change\",_dispersion,_slowdownFactor,_dispersionX,_dispersionY);\r\n\r\n    TRACE_PROJECTILE_INFO(_projectile);\r\n    [_projectile, _dispersionX * _dispersion, _dispersionY * _dispersion, _slowdownFactor * vectorMagnitude (velocity _projectile)] call EFUNC(common,changeProjectileDirection);\r\n    TRACE_PROJECTILE_INFO(_projectile);\r\n};\r\n\r\n\r\n// ------  LOCAL AND NEARBY PLAYERS DEPENDING ON SETTINGS ------------\r\n// Particle effects only apply to the local player and, depending on settings, to other nearby players\r\nif (_unit != ACE_player && (!GVAR(showParticleEffectsForEveryone) || {_unit distance ACE_player > 20})) exitWith {\r\n    END_COUNTER(firedEH);\r\n};\r\n\r\n//Particle Effects:\r\nif (GVAR(showParticleEffects) && {(CBA_missionTime > ((_unit getVariable [QGVAR(lastDrop), -1000]) + 0.40)) && {_scaledTemperature > 0.1}}) then {\r\n    _unit setVariable [QGVAR(lastDrop), CBA_missionTime];\r\n\r\n    private _direction = (_unit weaponDirection _weapon) vectorMultiply 0.25;\r\n    private _position = (position _projectile) vectorAdd (_direction vectorMultiply (4*(random 0.30)));\r\n\r\n    // Refract SFX, beginning at temp 100°C and maxs out at 500°C\r\n    private _intensity = linearConversion [0.1, 0.5, _scaledTemperature, 0, 1, true];\r\n    TRACE_3(\"refract\",_direction,_position,_intensity);\r\n    if (_intensity > 0) then {\r\n        drop [\r\n        \"\\A3\\data_f\\ParticleEffects\\Universal\\Refract\", \"\", \"Billboard\", 10, 2, _position, _direction, 0, 1.2, 1.0,\r\n        0.1, [0.10,0.25], [[0.6,0.6,0.6,0.3*_intensity],[0.2,0.2,0.2,0.05*_intensity]], [0,1], 0.1, 0.05, \"\", \"\", \"\"];\r\n    };\r\n    // Smoke SFX, beginning at temp 150°C\r\n    private _intensity = linearConversion [0.15, 1, _scaledTemperature, 0, 1, true];\r\n    TRACE_3(\"smoke\",_direction,_position,_intensity);\r\n    if (_intensity > 0) then {\r\n        drop [\r\n        [\"\\A3\\data_f\\ParticleEffects\\Universal\\Universal\", 16, 12, 1, 16], \"\", \"Billboard\", 10, 1.2, _position,\r\n        [0,0,0.15], 100 + random 80, 1.275, 1, 0.025, [0.15,0.43], [[0.6,0.6,0.6,0.5*_intensity],[0.2,0.2,0.2,0.15*_intensity]],\r\n        [0,1], 1, 0.04, \"\", \"\", \"\"];\r\n    };\r\n};\r\n\r\n// ------  LOCAL PLAYER ONLY ------------\r\n// Only compute jamming for the local player\r\nif (_unit != ACE_player) exitWith {END_COUNTER(firedEH);};\r\n\r\n_jamChance = _jamChance * ([[0.5, 1.5, 15, 150], 3 * _scaledTemperature] call EFUNC(common,interpolateFromArray));\r\n\r\n// increase jam chance on dusty grounds if prone (and at ground level)\r\nif ((stance _unit == \"PRONE\") && {((getPosATL _unit) select 2) < 1}) then {\r\n    private _surface = configFile >> \"CfgSurfaces\" >> ((surfaceType getPosASL _unit) select [1]);\r\n    if (isClass _surface) then {\r\n        TRACE_1(\"dust\",getNumber (_surface >> \"dust\"));\r\n        _jamChance = _jamChance + (getNumber (_surface >> \"dust\")) * _jamChance;\r\n    };\r\n};\r\n\r\nTRACE_3(\"check for random jam\",_unit,_weapon,_jamChance);\r\nif ((random 1) < _jamChance) then {\r\n    [_unit, _weapon] call FUNC(jamWeapon);\r\n};\r\n\r\nEND_COUNTER(firedEH);\r\n"},{"name":"ace_overheating_fnc_getWeaponData","file":"overheating/functions/fnc_getWeaponData.sqf","text":"/*\r\n * Author: PabstMirror and esteldunedain\r\n * Get weapon data with caching\r\n *\r\n * Arguments:\r\n * 0: weapon type <STRING>\r\n *\r\n * Return Value:\r\n * 0: dispresion <NUMBER>\r\n * 1: slowdownFactor <NUMBER>\r\n * 2: jamChance <NUMBER>\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Look in the cache first\r\nprivate _weaponData = GVAR(cacheWeaponData) getVariable _weapon;\r\nif (!isNil \"_weaponData\") exitWith {_weaponData};\r\n\r\n// Search the config\r\n// The old and new properties have the same name for dispersion, so read whichever is closer to the children\r\nprivate _property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(dispersion);\r\nprivate _dispersion = if (isNumber _property) then {\r\n    getNumber _property;\r\n} else {\r\n    if (isArray _property) then {\r\n        // Map old array property to new number property\r\n        ((getArray _property) select 3) / 0.004;\r\n    } else {\r\n        1;\r\n    };\r\n};\r\n\r\n// The old and new properties have the same name for slowdownFactor, so read whichever is closer to the children\r\n_property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(slowdownFactor);\r\nprivate _slowdownFactor = if (isNumber _property) then {\r\n    getNumber _property;\r\n} else {\r\n    if (isArray _property) then {\r\n        // Map old array property to new number property\r\n        ((getArray _property) select 3) / 0.9;\r\n    } else {\r\n        1;\r\n    };\r\n};\r\n\r\n// For jam chance, try reading the legacy property first (ace_overheating_jamChance).\r\nprivate _jamChance = 1 / 3000;\r\n_property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(JamChance);\r\n// If it exists read it, as the weapon is probably third party and not updated to the new properties\r\nif (isArray _property) then {\r\n    // Map old array property to new number property\r\n    _jamChance = (getArray _property) select 1;\r\n} else {\r\n    // No legacy property was found, look for the new one\r\n    _property = configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(mrbs);\r\n    if (isNumber _property) then {\r\n        _jamChance = 1 / getNumber _property;\r\n    };\r\n};\r\n\r\n// Cache the values\r\n_weaponData = [_dispersion, _slowdownFactor, _jamChance];\r\nTRACE_2(\"building cache\",_weapon,_weaponData);\r\nGVAR(cacheWeaponData) setVariable [_weapon, _weaponData];\r\n\r\n_weaponData\r\n"},{"name":"ace_overheating_fnc_handleTakeEH","file":"overheating/functions/fnc_handleTakeEH.sqf","text":"/*\r\n * Author: Commy2\r\n * Handle \"take\" event\r\n * I think it fixs jams when manually dragging a new magazine in from player's inventory\r\n *\r\n * Arguments:\r\n * 0: unit - Object the event handler is assigned to <OBJECT>\r\n * 1: container <OBJECT>\r\n * 2: item <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(GVAR(unJamOnreload)) exitWith {};\r\n\r\nparams [\"_unit\", \"_container\", \"_item\"];\r\nTRACE_3(\"params\",_unit,_container,_item);\r\n\r\nif ((_unit == ACE_player)\r\n        && {_container in [uniformContainer _unit, vestContainer _unit, backpackContainer _unit]}\r\n        && {_item == currentMagazine _unit}) then { //Todo: should this be any valid magazine for any jammed gun?\r\n\r\n    TRACE_1(\"clearing jam\",currentWeapon _unit);\r\n    [_unit, currentWeapon _unit, true] call FUNC(clearJam)\r\n\r\n};\r\n"},{"name":"ace_overheating_fnc_jamWeapon","file":"overheating/functions/fnc_jamWeapon.sqf","text":"/*\r\n * Author: Commy2, based on KK_fnc_playerWeaponMulfunction from KillzoneKid\r\n * Jam the weapon\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player] call ace_overheating_fnc_jamWeapon\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\nTRACE_2(\"params\",_unit,_weapon);\r\n\r\n// don't jam a weapon with no rounds left\r\nprivate _ammo = _unit ammo _weapon;\r\nif (_ammo == 0) exitWith {};\r\n\r\nprivate _jammedWeapons = _unit getVariable [QGVAR(jammedWeapons), []];\r\n_jammedWeapons pushBack _weapon;\r\n\r\n_unit setVariable [QGVAR(jammedWeapons), _jammedWeapons];\r\n\r\n\r\n\r\n// Stop current burst\r\nif (_ammo > 0) then {\r\n    _unit setAmmo [_weapon, 0];\r\n    // this is to re-activate the 'DefaultAction', so you can jam a weapon while full auto shootin\r\n    [{\r\n        params [\"_unit\", \"_weapon\", \"_ammo\"];\r\n        _unit setAmmo [_weapon, _ammo];\r\n    }, [_unit, _weapon, _ammo]] call CBA_fnc_execNextFrame;\r\n};\r\n\r\n// only display the hint once, after you try to shoot an already jammed weapon\r\nGVAR(knowAboutJam) = false;\r\n\r\n[\"ace_weaponJammed\", [_unit,_weapon]] call CBA_fnc_localEvent;\r\n\r\n\r\nif (_unit getVariable [QGVAR(JammingActionID), -1] == -1) then {\r\n\r\n    private _condition = {\r\n        [_this select 1] call CBA_fnc_canUseWeapon\r\n        && {currentMuzzle (_this select 1) in ((_this select 1) getVariable [QGVAR(jammedWeapons), []])}\r\n        && {!(currentMuzzle (_this select 1) in ((_this select 1) getVariable [QEGVAR(safemode,safedWeapons), []]))}\r\n    };\r\n\r\n    private _statement = {\r\n        playSound3D [\"a3\\sounds_f\\weapons\\Other\\dry9.wss\", _this select 0];\r\n\r\n        if (!(missionNamespace getVariable [QGVAR(knowAboutJam), false]) && {(_this select 1) ammo currentWeapon (_this select 1) > 0} && {GVAR(DisplayTextOnJam)}) then {\r\n            [localize LSTRING(WeaponJammed)] call EFUNC(common,displayTextStructured);\r\n            GVAR(knowAboutJam) = true;\r\n        };\r\n    };\r\n\r\n    private _id = [_unit, \"DefaultAction\", _condition, _statement] call EFUNC(common,addActionEventHandler);\r\n\r\n    _unit setVariable [QGVAR(JammingActionID), _id];\r\n};\r\n"},{"name":"ace_overheating_fnc_loadCoolestSpareBarrel","file":"overheating/functions/fnc_loadCoolestSpareBarrel.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Collect the temperature of all the spare barrels a unit has and load the\r\n * coolest on the unit weapon. Runs on the server.\r\n *\r\n * Arguments:\r\n * 0: Unit that has the spare barrels <OBJECT>\r\n * 1: Unit that has the weapon <OBJECT>\r\n * 2: Weapon <STRING>\r\n * 3: Weapon temp before switching <NUMBER>\r\n * 4: Mass of the removed barrel <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_assistant\", \"_gunner\", \"_weapon\", \"_weaponTemp\", \"_barrelMass\"];\r\nTRACE_5(\"loadCoolestSpareBarrel1\",_assistant,_gunner,_weapon,_weaponTemp,_barrelMass);\r\n\r\n// Find all spare barrel the player has\r\nprivate _allBarrels = [_assistant, \"ACE_SpareBarrel\"] call CBA_fnc_getMagazineIndex;\r\nTRACE_1(\"_allBarrels\",_allBarrels);\r\nif ((count _allBarrels) < 1) exitWith {};\r\n\r\n// Determine which on is coolest\r\nprivate _coolestTemp = 10000;\r\nprivate _coolestMag = _allBarrels select 0;\r\n{\r\n    private _temp = 0;\r\n    if ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashHasKey) then {\r\n        _temp = ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashGet) select 0;\r\n    };\r\n    TRACE_2(\"loadCoolestSpareBarrel4\",_x,_temp);\r\n    if (_temp < _coolestTemp) then {\r\n        _coolestTemp = _temp;\r\n        _coolestMag = _x;\r\n    };\r\n} forEach _allBarrels;\r\nTRACE_3(\"loadCoolestSpareBarrel5\",_coolestTemp,_coolestMag,_weaponTemp);\r\n\r\n// The new weapon temperature is similar to the coolest barrel\r\n// Publish the new temperature value\r\n_gunner setVariable [format [QGVAR(%1_temp), _weapon], _coolestTemp, true];\r\n\r\n// Heat up the coolest barrel to the former weapon temperature\r\n[GVAR(storedSpareBarrels), _coolestMag, [_weaponTemp, CBA_missionTime, _barrelMass]] call CBA_fnc_hashSet;\r\n\r\n// Send an event so the machines of the assistant and gunner can show the hint\r\n[QGVAR(showWeaponTemperature), _gunner], [_gunner, _weapon], [_assistant] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_overheating_fnc_overheat","file":"overheating/functions/fnc_overheat.sqf","text":"/*\r\n * Author: Commy2 and esteldunedain\r\n * Handle weapon fire, heat up the weapon\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n * 3: Muzzle <STRING>\r\n * 4: Ammo <STRING>\r\n * 5: Magazine <STRING>\r\n * 6: Projectile <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\", \"\", \"\", \"_ammo\", \"\", \"_projectile\"];\r\nTRACE_4(\"params\",_unit,_weapon,_ammo,_projectile);\r\n\r\n// Only do heat calculations every 3 bullets\r\nif (((_unit ammo _weapon) % 3) != 0) exitWith {};\r\n\r\nBEGIN_COUNTER(overheat);\r\n\r\n// Get bullet parameters\r\nprivate _bulletMass = GVAR(cacheAmmoData) getVariable _ammo;\r\nif (isNil \"_bulletMass\") then {\r\n    _bulletMass = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ACE_BulletMass\");\r\n    if (_bulletMass == 0) then {\r\n        // If the bullet mass is not configured, estimate it\r\n        _bulletMass = 3.4334 + 0.5171 * (getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"hit\") + getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"caliber\"));\r\n    };\r\n    GVAR(cacheAmmoData) setVariable [_ammo, _bulletMass];\r\n};\r\n\r\n// Projectile motion is roughly equal to Barrel heat\r\n// Ref: https://en.wikipedia.org/wiki/Physics_of_firearms\r\n// Muzzle Engergy = 1/2 * m * v^2 = (1/2 * 0.001 g/kg * bulletMass (grams) * v^2)\r\n// Multiple by 3 becase we only calc every 3rd bullet: (3 * 1/2 * 0.001) = 0.0015\r\nprivate _energyIncrement = 0.0015 * _bulletMass * (vectorMagnitudeSqr velocity _projectile);\r\n\r\n// Increase overheating depending on how obstrusive is the current supressor,\r\n// if any. Typical arma supressors have visibleFire=0.5 and audibleFire=0.3,\r\n// so they produce x2.1 overheating\r\nprivate _silencer = switch (_weapon) do {\r\n    case (primaryWeapon _unit) : {(primaryWeaponItems _unit) select 0};\r\n    case (handgunWeapon _unit) : {(handgunItems _unit) select 0};\r\n    default {\"\"};\r\n};\r\nif (_silencer != \"\") then {\r\n    private _silencerCoef = GVAR(cacheSilencerData) getVariable _silencer;\r\n    if (isNil \"_silencerCoef\") then {\r\n        _silencerCoef = 1 +\r\n                        (1 - getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"audibleFire\")) +\r\n                        (1 - getNumber (configFile >> \"CfgWeapons\" >> _silencer >> \"ItemInfo\" >> \"AmmoCoef\" >> \"visibleFire\"));\r\n        GVAR(cacheSilencerData) setVariable [_silencer, _silencerCoef];\r\n    };\r\n    _energyIncrement = _energyIncrement * _silencerCoef;\r\n};\r\n\r\nTRACE_2(\"heat\",_bulletMass,_energyIncrement);\r\n\r\n[_unit, _weapon, _energyIncrement] call FUNC(updateTemperature);\r\n\r\nEND_COUNTER(overheat);\r\n"},{"name":"ace_overheating_fnc_sendSpareBarrelsTemperaturesHint","file":"overheating/functions/fnc_sendSpareBarrelsTemperaturesHint.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Collect the temperature of all the spare barrels a unit has and send a hint\r\n * to a client. Runs on the server.\r\n *\r\n * Arguments:\r\n * 0: Target unit of the hint <OBJECT>\r\n * 1: Unit that has the spare barrels <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\",\"_unit\"];\r\n\r\n// Find all spare barrel the player has\r\nTRACE_2(\"sendSpareBarrelsTemperatureHunt\",_player,_unit);\r\nprivate _allBarrels = [_unit, \"ACE_SpareBarrel\"] call CBA_fnc_getMagazineIndex;\r\nTRACE_1(\"_allBarrels\",_allBarrels);\r\nif ((count _allBarrels) < 1) exitWith {};\r\n\r\n// Determine the temp of each barrel\r\nprivate _temps = [];\r\n{\r\n    private _temp = 0;\r\n    if ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashHasKey) then {\r\n        _temp = ([GVAR(storedSpareBarrels), _x] call CBA_fnc_hashGet) select 0;\r\n    };\r\n    _temps pushBack _temp;\r\n} forEach _allBarrels;\r\nTRACE_1(\"_temps\",_temps);\r\n\r\n// Count cool\r\nprivate _countCool = {_x < 20} count _temps;\r\nprivate _countWarm = {(_x >= 20) && (_x < 100)} count _temps;\r\nprivate _countHot = {(_x >= 100) && (_x < 200)} count _temps;\r\nprivate _countVeryHot = {(_x >= 200) && (_x < 600)} count _temps;\r\nprivate _countExtremelyHot = {_x >= 600} count _temps;\r\nprivate _output = [\"%1 %2%3%4 %5%6%7 %8%9%10 %11%12%13 %14\"];\r\nprivate _size = 1.0;\r\nif (_countCool > 0) then {\r\n    _output pushBack _countCool;\r\n    _output pushBack LSTRING(BarrelCool);\r\n    _output pushBack \"<br/>\";\r\n    _size = _size + 0.5;\r\n};\r\nif (_countWarm > 0) then {\r\n    _output pushBack _countWarm;\r\n    _output pushBack LSTRING(BarrelWarm);\r\n    _output pushBack \"<br/>\";\r\n    _size = _size + 0.5;\r\n};\r\nif (_countHot > 0) then {\r\n    _output pushBack _countHot;\r\n    _output pushBack LSTRING(BarrelHot);\r\n    _output pushBack \"<br/>\";\r\n    _size = _size + 0.5;\r\n};\r\nif (_countVeryHot > 0) then {\r\n    _output pushBack _countVeryHot;\r\n    _output pushBack LSTRING(BarrelVeryHot);\r\n    _output pushBack \"<br/>\";\r\n    _size = _size + 0.5;\r\n};\r\nif (_countExtremelyHot > 0) then {\r\n    _output pushBack _countExtremelyHot;\r\n    _output pushBack LSTRING(BarrelExtremelyHot);\r\n    _size = _size + 0.5;\r\n};\r\n\r\nTRACE_1(\"_output\",_output);\r\n[QEGVAR(common,displayTextStructured), [_output, _size, _player], [_player]] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_overheating_fnc_swapBarrel","file":"overheating/functions/fnc_swapBarrel.sqf","text":"/*\r\n * Author: Commy2\r\n * Make a unit start swapping it's barrel\r\n *\r\n * Arguments:\r\n * 0: Unit initiating the action <OBJECT>\r\n * 1: Unit that has the weapon <OBJECT>\r\n * 2: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [cursorTarget, player, currentWeapon player] call ace_overheating_fnc_swapBarrel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\r\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\r\n\r\n// Make the standing player kneel down\r\nif (stance _gunner != \"PRONE\") then {\r\n    [_gunner, \"amovpknlmstpsraswrfldnon\", 1] call EFUNC(common,doAnimation);\r\n};\r\n\r\n// Barrel dismount gesture\r\n_gunner playActionNow QGVAR(GestureDismountMuzzle);\r\nplaySound \"ACE_BarrelSwap\";\r\n\r\nprivate _duration = 3.0;\r\nif (_assistant isEqualTo _gunner) then {\r\n    _duration = 5.0;\r\n};\r\n\r\n[_duration, [_assistant,_gunner,_weapon], {(_this select 0) call FUNC(swapBarrelCallback)}, {}, (localize LSTRING(SwappingBarrel))] call EFUNC(common,progressBar);\r\n"},{"name":"ace_overheating_fnc_swapBarrelAssistant","file":"overheating/functions/fnc_swapBarrelAssistant.sqf","text":"/*\r\n * Author: esteldunedain, Commy2\r\n * Make a unit start swapping the barrel of another unit\r\n *\r\n * Arguments:\r\n * 0: Unit initiating the action <OBJECT>\r\n * 1: Unit that has the weapon <OBJECT>\r\n * 2: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, cursorTarget, currentWeapon cursorTarget] call ace_overheating_fnc_swapBarrelAssistant\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\r\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\r\n\r\n// Make the standing player kneel down\r\nif (stance _assistant != \"PRONE\") then {\r\n    [_assistant, \"amovpknlmstpsraswrfldnon\", 1] call EFUNC(common,doAnimation);\r\n};\r\n\r\n// Barrel dismount gesture\r\nplaySound \"ACE_BarrelSwap\";\r\n\r\n[3, [_assistant, _gunner, _weapon], {}, {}, (localize LSTRING(SwappingBarrel))] call EFUNC(common,progressBar);\r\n\r\n[QGVAR(initiateSwapBarrelAssisted), [_assistant, _gunner, _weapon], _gunner] call CBA_fnc_targetEvent;\r\n"},{"name":"ace_overheating_fnc_swapBarrelCallback","file":"overheating/functions/fnc_swapBarrelCallback.sqf","text":"/*\r\n * Author: Commy2, esteldunedain\r\n * Swap barrel callback\r\n *\r\n * Arguments:\r\n * 0: Unit initiating the action <OBJECT>\r\n * 1: Unit that has the weapon <OBJECT>\r\n * 2: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player] call ace_overheating_fnc_swapBarrelCallback\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_assistant\", \"_gunner\", \"_weapon\"];\r\nTRACE_3(\"params\",_assistant,_gunner,_weapon);\r\n\r\nif (_assistant isEqualTo _gunner) then {\r\n    // Barrel mount gesture\r\n    _gunner playAction QGVAR(GestureMountMuzzle);\r\n    playSound \"ACE_BarrelSwap\";\r\n};\r\n\r\n// don't consume the barrel, but rotate through them.\r\n[localize LSTRING(SwappedBarrel), QPATHTOF(UI\\spare_barrel_ca.paa)] call EFUNC(common,displayTextPicture);\r\n\r\nprivate _temp = _gunner getVariable [format [QGVAR(%1_temp), _weapon], 0];\r\nprivate _barrelMass = 0.50 * (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"WeaponSlotsInfo\" >> \"mass\") / 22.0) max 1.0;\r\n\r\n// Instruct the server to load the coolest spare barrel into the weapon and\r\n// store the removed barrel with the former weapon temperature. The server\r\n// also updates the current weapon temperature to match that of the new\r\n// loaded barrel.\r\n[QGVAR(loadCoolestSpareBarrel), [_assistant, _gunner, _weapon, _temp, _barrelMass]] call CBA_fnc_serverEvent;\r\n\r\n// Store the update time\r\n_gunner setVariable [format [QGVAR(%1_time), _weapon], CBA_missionTime];\r\n"},{"name":"ace_overheating_fnc_updateSpareBarrelsTemperaturesThread","file":"overheating/functions/fnc_updateSpareBarrelsTemperaturesThread.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Calculate cooldown of all the stored spare barrels.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_overheating_fnc_updateSpareBarrelsTemperaturesThread\r\n *\r\n * Public: No\r\n */\r\n// #define DEBUG_MODE_FULL\r\n#include \"script_component.hpp\"\r\n\r\nprivate _pairs = [];\r\nTRACE_1(\"updateSpareBarrelsTemperaturesThread1\",GVAR(storedSpareBarrels));\r\n[GVAR(storedSpareBarrels), {_pairs pushBack [_key, _value];}] call CBA_fnc_hashEachPair;\r\nTRACE_1(\"updateSpareBarrelsTemperaturesThread2\",_pairs);\r\n{\r\n    _x params [\"_barrelMagazineID\",\"_value\"];\r\n    _value params [\"_initialTemp\",\"_initialTime\", \"_barrelMass\"];\r\n\r\n    // Calculate cooling\r\n    private _finalTemp = [_initialTemp, _barrelMass, CBA_missionTime - _initialTime] call FUNC(calculateCooling);\r\n    TRACE_4(\"updateSpareBarrelsTemperaturesThread3\",_barrelMagazineID,_initialTemp,_finalTemp,_barrelMass);\r\n    if (_finalTemp < 5) then {\r\n        // The barrel is cool enough to keep calculating. Remove it from the hash\r\n        [GVAR(storedSpareBarrels), _barrelMagazineID] call CBA_fnc_hashRem;\r\n    } else {\r\n        // Store the new temp\r\n        [GVAR(storedSpareBarrels), _barrelMagazineID, [_finalTemp, CBA_missionTime, _barrelMass]] call CBA_fnc_hashSet;\r\n    };\r\n} forEach _pairs;\r\n\r\n// Schedule for execution again after 10 seconds\r\n[DFUNC(updateSpareBarrelsTemperaturesThread), [], 10] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_overheating_fnc_updateTemperature","file":"overheating/functions/fnc_updateTemperature.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Update temperature of a weapon.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n * 2: Heat increment (J) <NUMBER>\r\n *\r\n * Return Value:\r\n * Current temperature <NUMBER>\r\n *\r\n * Example:\r\n * [player, currentWeapon player, 2000] call ace_overheating_fnc_updateTemperature\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\", \"_heatIncrement\"];\r\nTRACE_3(\"params\",_unit,_weapon,_heatIncrement);\r\n\r\n// get old values\r\n// each weapon has it's own variable. Can't store the temperature in the weapon since they are not objects unfortunately.\r\nprivate _tempVarName = format [QGVAR(%1_temp), _weapon];\r\nprivate _timeVarName = format [QGVAR(%1_time), _weapon];\r\nprivate _temperature = _unit getVariable [_tempVarName, 0];\r\nprivate _lastTime = _unit getVariable [_timeVarName, 0];\r\n\r\nprivate _barrelMass = 0.50 * (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> \"WeaponSlotsInfo\" >> \"mass\") / 22.0) max 1.0;\r\n\r\n// Calculate cooling\r\n_temperature = [_temperature, _barrelMass, CBA_missionTime - _lastTime] call FUNC(calculateCooling);\r\n\r\nTRACE_1(\"cooledTo\",_temperature);\r\n// Calculate heating\r\n// Steel Heat Capacity = 466 J/(Kg.K)\r\n_temperature = _temperature + _heatIncrement / (_barrelMass * 466);\r\n\r\n// Publish the temperature variable\r\n[_unit, _tempVarName, _temperature, TEMP_TOLERANCE] call EFUNC(common,setApproximateVariablePublic);\r\n// Store the update time locally\r\n_unit setVariable [_timeVarName, CBA_missionTime];\r\n\r\n_temperature\r\n"},{"name":"ace_overheating_fnc_updateTemperatureThread","file":"overheating/functions/fnc_updateTemperatureThread.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Update cooldown calculation of all player weapons at regular intervals.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_overheating_fnc_updateTemperatureThread\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate _currentWeapon = currentWeapon ACE_player;\r\nif ((_currentWeapon != \"\") && {_currentWeapon == primaryWeapon ACE_player || {_currentWeapon == handgunWeapon ACE_player}}) then {\r\n    [ACE_player, _currentWeapon, 0] call FUNC(updateTemperature);\r\n};\r\n\r\n// Schedule for execution again after 5 seconds\r\n[DFUNC(updateTemperatureThread), [], 5] call CBA_fnc_waitAndExecute;\r\n"}],"overpressure":[{"name":"ace_overpressure_fnc_cacheOverPressureValues","file":"overpressure/functions/fnc_cacheOverPressureValues.sqf","text":"/*\r\n * Author: joko // Jonas\r\n * Cache the shot data for a given weapon/mag/ammo combination.\r\n * Will use the config that has the highest priority.\r\n *\r\n * Arguments:\r\n * 0: Weapon <STRING>\r\n * 1: Magazine <STRING>\r\n * 2: Ammo <STRING>\r\n *\r\n * Return Value:\r\n * Shot Config <ARRAY>:\r\n *  0: Angle <Number>\r\n *  1: Range <Number>\r\n *  2: Damage <Number>\r\n *\r\n * Example: \r\n * [\"cannon_125mm\",\"Sh_125mm_APFSDS_T_Green\",\"24Rnd_125mm_APFSDS_T_Green\"] call ace_overpressure_fnc_cacheOverPressureValues\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_weapon\", \"_ammo\", \"_magazine\"];\r\nTRACE_3(\"Parameter\",_weapon,_magazine,_ammo);\r\n\r\n// get Priority Array from Config\r\nprivate _array = [\r\n    getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(priority)),\r\n    getNumber (configFile >> \"CfgMagazines\" >> _magazine >> QGVAR(priority)),\r\n    getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(priority))\r\n];\r\n\r\n(_array call CBA_fnc_findMax) params [\"\", [\"_indexOfMaxPriority\", 0, [0]]];\r\n\r\nTRACE_2(\"Priority Array\",_array,_indexOfMaxPriority);\r\n\r\n// create the Config entry Point\r\nprivate _config = [\r\n    (configFile >> \"CfgWeapons\" >> _weapon),\r\n    (configFile >> \"CfgMagazines\" >> _magazine),\r\n    (configFile >> \"CfgAmmo\" >> _ammo)\r\n] select _indexOfMaxPriority;\r\nTRACE_1(\"ConfigPath\",_config);\r\n\r\n// get the Variables out of the Configes and create a array with then\r\nprivate _return = [\r\n    (getNumber (_config >> QGVAR(angle))),\r\n    (getNumber (_config >> QGVAR(range))),\r\n    (getNumber (_config >> QGVAR(damage)))\r\n];\r\n\r\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\r\nmissionNameSpace setVariable [_varName, _return];\r\nTRACE_2(\"Return\",_varName,_return);\r\n\r\n_return\r\n"},{"name":"ace_overpressure_fnc_firedEHBB","file":"overpressure/functions/fnc_firedEHBB.sqf","text":"/*\r\n * Author: joko // Jonas\r\n * Handle fire of local launchers. Called from the unified fired EH only for the local player.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"launch_RPG32_F\", \"launch_RPG32_F\", \"Single\", \"R_PG32V_F\", \"RPG32_F\", projectile] call ace_overpressure_fnc_firedEHBB;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\n// Bake variable name and check if the variable exists, call the caching function otherwise\r\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\r\nprivate _var = if (isNil _varName) then {\r\n    [_weapon, _ammo, _magazine] call FUNC(cacheOverPressureValues);\r\n} else {\r\n    missionNameSpace getVariable _varName;\r\n};\r\n_var params[\"_backblastAngle\",\"_backblastRange\",\"_backblastDamage\"];\r\nTRACE_3(\"cache\",_backblastAngle,_backblastRange,_backblastDamage);\r\n\r\nif (_backblastDamage <= 0) exitWith {};\r\n\r\nprivate _position = getPosASL _projectile;\r\nprivate _direction = [0, 0, 0] vectorDiff (vectorDir _projectile);\r\n\r\n// Damage to others\r\nprivate _affected = (ASLtoAGL _position) nearEntities [\"CAManBase\", _backblastRange];\r\n\r\n// Let each client handle their own affected units\r\n[\"ace_overpressure\", [_unit, _position, _direction, _weapon, _magazine, _ammo], _affected] call CBA_fnc_targetEvent;\r\n\r\n// Damage to the firer\r\nprivate _distance = 2 * ([_position, _direction, _backblastRange, _unit] call FUNC(getDistance));\r\n\r\nTRACE_1(\"Distance\",_distance);\r\n\r\nif (_distance < _backblastRange) then {\r\n    private _alpha = sqrt (1 - _distance / _backblastRange);\r\n    private _beta = sqrt 0.5;\r\n\r\n    private _damage = _alpha * _beta * _backblastDamage;\r\n    [_damage * 100] call BIS_fnc_bloodEffect;\r\n\r\n    if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") && {([_unit] call EFUNC(medical,hasMedicalEnabled))}) then {\r\n        [_unit, _damage, \"body\", \"backblast\"] call EFUNC(medical,addDamageToUnit);\r\n    } else {\r\n        _unit setDamage (damage _unit + _damage);\r\n    };\r\n};\r\n\r\n// Draw debug lines\r\n#ifdef DEBUG_MODE_FULL\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _backblastRange),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n\r\n    private _ref = _direction call EFUNC(common,createOrthonormalReference);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorAdd ((_ref select 1) vectorMultiply _backblastRange * tan _backblastAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorDiff ((_ref select 1) vectorMultiply _backblastRange * tan _backblastAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorAdd ((_ref select 2) vectorMultiply _backblastRange * tan _backblastAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _backblastRange) vectorDiff ((_ref select 2) vectorMultiply _backblastRange * tan _backblastAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply ((_distance/2) min _backblastRange)),\r\n        [1,0,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n#endif\r\n"},{"name":"ace_overpressure_fnc_firedEHOP","file":"overpressure/functions/fnc_firedEHOP.sqf","text":"/*\r\n * Author: joko // Jonas\r\n * Handle fire of Vehicle Weapons. Called from the unified fired EH only for the local player vehicle.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [tank, \"cannon_125mm\", \"cannon_125mm\", \"player\", \"Sh_125mm_APFSDS_T_Green\", \"24Rnd_125mm_APFSDS_T_Green\", projectile] call ace_overpressure_fnc_firedEHOP\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\n// Bake variable name and check if the variable exists, call the caching function otherwise\r\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\r\nprivate _var = if (isNil _varName) then {\r\n    [_weapon, _ammo, _magazine] call FUNC(cacheOverPressureValues);\r\n} else {\r\n    missionNameSpace getVariable _varName;\r\n};\r\n_var params[\"_dangerZoneAngle\",\"_dangerZoneRange\",\"_dangerZoneDamage\"];\r\nTRACE_3(\"cache\",_dangerZoneAngle,_dangerZoneRange,_dangerZoneDamage);\r\n\r\nif (_dangerZoneDamage <= 0) exitWith {};\r\n\r\n\r\n\r\n// The weapon produces overpressure, calculate\r\nprivate _position = getPosASL _projectile;\r\nprivate _direction = vectorDir _projectile;\r\n\r\n// Damage to others\r\nprivate _affected = (ASLtoAGL _position) nearEntities [\"CAManBase\", _dangerZoneRange];\r\n\r\n// Let each client handle their own affected units\r\n[\"ace_overpressure\", [_unit, _position, _direction, _weapon, _magazine, _ammo], _affected] call CBA_fnc_targetEvent;\r\n\r\n// Draw debug lines\r\n#ifdef DEBUG_MODE_FULL\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange),\r\n        [1,0,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n\r\n    private _ref = _direction call EFUNC(common,createOrthonormalReference);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorAdd ((_ref select 1) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorDiff ((_ref select 1) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorAdd ((_ref select 2) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n    [   _position,\r\n        _position vectorAdd (_direction vectorMultiply _dangerZoneRange) vectorDiff ((_ref select 2) vectorMultiply _dangerZoneRange * tan _dangerZoneAngle),\r\n        [1,1,0,1]\r\n    ] call EFUNC(common,addLineToDebugDraw);\r\n\r\n#endif\r\n"},{"name":"ace_overpressure_fnc_getDistance","file":"overpressure/functions/fnc_getDistance.sqf","text":"/*\r\n * Author: commy2 and esteldunedain\r\n * Calculate the distance to the first intersection of a line\r\n *\r\n * Arguments:\r\n * 0: Pos ASL of origin (ARRAY>\r\n * 1: Direction <ARRAY>\r\n * 2: Max distance to search <Number>\r\n * 3: Shooter <OBJECT>\r\n *\r\n * Return Value:\r\n * Distance to intersection (999 if distance is greater than max) <NUMBER>\r\n *\r\n * Example:\r\n * [[1823.41,5729.05,6.66627], [-0.953255,0.109689,-0.281554], 15, ace_player] call ace_overpressure_fnc_getDistance\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_posASL\", \"_direction\", \"_maxDistance\", \"_shooter\"];\r\nTRACE_4(\"params\",_posASL,_direction,_maxDistance, _shooter);\r\n\r\nprivate _intersections = lineIntersectsSurfaces [_posASL, _posASL vectorAdd (_direction vectorMultiply _maxDistance), _shooter, objNull, true, 99];\r\n\r\nTRACE_1(\"lineIntersectsSurfaces\",_intersections);\r\n\r\nprivate _distance = 999;\r\n\r\n{\r\n    _x params [\"_intersectPosASL\", \"_surfaceNormal\", \"_intersectObject\"];\r\n    TRACE_3(\"Intersect\",_intersectPosASL,_surfaceNormal,_intersectObject);\r\n\r\n    //Hit something solid that can reflect - (Static covers Building)  [Need to manually filter out _shoot for FFV shots]\r\n    if ((isNull _intersectObject) || {(_intersectObject != _shooter) && {(_intersectObject isKindOf \"Static\") || {_intersectObject isKindOf \"AllVehicles\"}}}) exitWith {\r\n        _distance = _posASL vectorDistance _intersectPosASL;\r\n        TRACE_3(\"hit solid object\",_distance,_intersectObject,typeOf _intersectObject);\r\n\r\n        if (isNull _intersectObject) then {  //Terrain:\r\n            // Calculate the angle between the terrain and the back blast direction\r\n            _angle = 90 - acos (- (_surfaceNormal vectorDotProduct _direction));\r\n            TRACE_3(\"Terrain Intersect\",_surfaceNormal,_direction,_angle);\r\n            // Angles is below 25deg, no backblast at all\r\n            if (_angle < 25) exitWith {_distance = 999};\r\n            // Angles is below 45deg the distance is increased according to the difference\r\n            if (_angle < 45) exitWith {_distance = _distance * (5 - 4 * sqrt ((_angle - 25)/20))};\r\n            // Angles above 45degcreate full backblast\r\n        };\r\n    };\r\n} forEach _intersections;\r\n\r\n_distance\r\n"},{"name":"ace_overpressure_fnc_overpressureDamage","file":"overpressure/functions/fnc_overpressureDamage.sqf","text":"/*\r\n * Author: commy2 and esteldunedain\r\n * Calculate and apply backblast damage to potentially affected local units\r\n * Handles the \"overpressure\" event.\r\n *\r\n * Arguments:\r\n * 0: Unit that fired <OBJECT>\r\n * 1: Pos ASL of the projectile <ARRAY>\r\n * 2: Direction of the projectile (reversed for launcher backblast) <ARRAY>\r\n * 3: Weapon fired <STRING>\r\n * 4: Magazine <STRING>\r\n * 5: Ammo <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [tank, [1727.57,5786.15,7.24899], [-0.982474,-0.185998,-0.0122501], \"cannon_125mm\", \"24Rnd_125mm_APFSDS_T_Green\", \"Sh_125mm_APFSDS_T_Green\"] call ace_overpressure_fnc_overpressureDamage\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_firer\", \"_posASL\", \"_direction\", \"_weapon\", \"_magazine\", \"_ammo\"];\r\n\r\n// Bake variable name and check if the variable exists, call the caching function otherwise\r\nprivate _varName = format [QGVAR(values%1%2%3), _weapon, _ammo, _magazine];\r\nprivate _var = if (isNil _varName) then {\r\n    [_weapon, _ammo, _magazine] call FUNC(cacheOverPressureValues);\r\n} else {\r\n    missionNameSpace getVariable _varName;\r\n};\r\n_var params[\"_overpressureAngle\",\"_overpressureRange\",\"_overpressureDamage\"];\r\nTRACE_3(\"cache\",_overpressureAngle,_overpressureRange,_overpressureDamage);\r\n\r\n{\r\n    if (local _x && {_x != _firer} && {vehicle _x == _x}) then {\r\n        private _targetPositionASL = eyePos _x;\r\n        private _relativePosition = _targetPositionASL vectorDiff _posASL;\r\n        private _axisDistance = _relativePosition vectorDotProduct _direction;\r\n        private _distance = vectorMagnitude _relativePosition;\r\n        private _angle = acos (_axisDistance / _distance);\r\n\r\n        private _line = [_posASL, _targetPositionASL, _firer, _x];\r\n        private _line2 = [_posASL, _targetPositionASL];\r\n        TRACE_4(\"Affected:\",_x,_axisDistance,_distance,_angle);\r\n\r\n        if (_angle < _overpressureAngle && {_distance < _overpressureRange} && {!lineIntersects _line} && {!terrainIntersectASL _line2}) then {\r\n\r\n            private _alpha = sqrt (1 - _distance / _overpressureRange);\r\n            private _beta = sqrt (1 - _angle / _overpressureAngle);\r\n\r\n            private _damage = _alpha * _beta * _overpressureDamage;\r\n\r\n            // If the target is the ACE_player\r\n            if (_x == ACE_player) then {[_damage * 100] call BIS_fnc_bloodEffect};\r\n\r\n            if (isClass (configFile >> \"CfgPatches\" >> \"ACE_Medical\") && {([_x] call EFUNC(medical,hasMedicalEnabled))}) then {\r\n                [_x, _damage, \"body\", \"backblast\"] call EFUNC(medical,addDamageToUnit);\r\n            } else {\r\n                _x setDamage (damage _x + _damage);\r\n            };\r\n\r\n            #ifdef DEBUG_MODE_FULL\r\n            //Shows damage lines in green\r\n            [   _posASL,\r\n            _targetPositionASL,\r\n            [0,1,0,1]\r\n            ] call EFUNC(common,addLineToDebugDraw);\r\n            #endif\r\n        };\r\n    };\r\n} forEach ((ASLtoAGL _posASL) nearEntities [\"CAManBase\", _overpressureRange]);\r\n"}],"parachute":[{"name":"ace_parachute_fnc_checkCutParachute","file":"parachute/functions/fnc_checkCutParachute.sqf","text":"/*\r\n * Author: joko // Jonas\r\n * Reset the parachute system.\r\n *\r\n * Arguments:\r\n * 0: Object\r\n *\r\n * Return Value:\r\n * Boolean\r\n *\r\n * Example:\r\n * [player] call FUNC(checkCutParachute);\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate[\"_unit\"];\r\n_unit = _this select 0;\r\n(vehicle _unit isKindOf 'ParachuteBase' && !(_unit getVariable [QGVAR(chuteIsCut),false]) && (_unit getVariable [QGVAR(hasReserve),false]))"},{"name":"ace_parachute_fnc_cutParachute","file":"parachute/functions/fnc_cutParachute.sqf","text":"/*\r\n * Author: joko // Jonas\r\n * Cut Parachute and delete Old\r\n *\r\n * Arguments:\r\n * 0: Object\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player] call FUNC(cutParachute);\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate[\"_unit\",\"_vehicle\"];\r\n_unit = _this select 0;\r\n_vehicle = vehicle _unit;\r\n_unit action [\"GetOut\", _vehicle];\r\ndeleteVehicle _vehicle;\r\n_unit setVariable [QGVAR(chuteIsCut), true, true];\r\n"},{"name":"ace_parachute_fnc_doLanding","file":"parachute/functions/fnc_doLanding.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Performs the landing animation fix\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ACE_Parachute_fnc_doLanding;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate[\"_unit\"];\r\n_unit = _this select 0;\r\nGVAR(PFH) = false;\r\n[_unit, \"AmovPercMevaSrasWrflDf_AmovPknlMstpSrasWrflDnon\", 2] call EFUNC(common,doAnimation);\r\n_unit setVariable [QGVAR(chuteIsCut), false, true];\r\n[{\r\n    if (CBA_missionTime >= ((_this select 0) select 0) + 1) then {\r\n        ((_this select 0) select 1) playActionNow \"Crouch\";\r\n        [(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);\r\n    };\r\n}, 1, [CBA_missionTime,_unit]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\r\n"},{"name":"ace_parachute_fnc_handleInfoDisplayChanged","file":"parachute/functions/fnc_handleInfoDisplayChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Hides the height and velocity display while freefalling or parachuting on higher difficulties.\r\n *\r\n * Arguments:\r\n * Stuff from infoDisplayChanged eventhandler.\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_dialog\", \"_type\"];\r\n\r\n_dialog = _this select 0;\r\n_type = _this select 1;\r\n\r\n// don't do anything in noob mode\r\nif (cadetMode) exitWith {};\r\n\r\nswitch (_type) do {\r\n    case (\"Parachute\"): {\r\n        {\r\n            (_dialog displayCtrl _x) ctrlShow false;\r\n        } forEach [121, 122, 1004, 1005, 1006, 1014];\r\n    };\r\n\r\n    case (\"Soldier\"): {\r\n        {\r\n            private \"_control\";\r\n            _control = (_dialog displayCtrl _x);\r\n\r\n            // these reset ctrlShow every frame by the engine. Set height/width to 0 as work around.\r\n            _control ctrlSetPosition [0,0,0,0];\r\n            _control ctrlCommit 0;\r\n        } forEach [380, 382];\r\n    };\r\n};\r\nnil // switch might return true if no case was found. Just to make sure the return value matches\r\n"},{"name":"ace_parachute_fnc_hideAltimeter","file":"parachute/functions/fnc_hideAltimeter.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Removes the altimeter from the screen.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ACE_Parachute_fnc_hideAltimeter\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nGVAR(AltimeterActive) = false;\r\n([\"ACE_Altimeter\"] call BIS_fnc_rscLayer) cutText [\"\",\"PLAIN\",0,true];\r\n"},{"name":"ace_parachute_fnc_onEachFrame","file":"parachute/functions/fnc_onEachFrame.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Checks whether the unit should preform landing.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * call ACE_Parachute_fnc_onEachFrame;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate \"_player\";\r\n_player = ACE_player;\r\nif (!GVAR(PFH)) exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);};\r\nif (isNull _player) exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);GVAR(PFH) = false;};\r\nif !((vehicle _player) isKindOf \"ParachuteBase\") exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);GVAR(PFH) = false;};\r\nif (isTouchingGround _player) exitWith {[(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);GVAR(PFH) = false;};\r\n\r\nprivate [\"_pos\"];\r\n_pos = getPosASL (vehicle _player);\r\n\r\nif ((lineIntersects [_pos, _pos vectorAdd [0,0,-0.5], vehicle _player, _player]) || {((ASLtoATL _pos) select 2) < 0.75}) then {\r\n    [(_this select 1)] call CALLSTACK(CBA_fnc_removePerFrameHandler);\r\n    GVAR(PFH) = false;\r\n// I believe this will not work for Zeus units.\r\n    deleteVehicle (vehicle _player);\r\n    [_player] call FUNC(doLanding);\r\n};\r\n"},{"name":"ace_parachute_fnc_showAltimeter","file":"parachute/functions/fnc_showAltimeter.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet\r\n * Displays the altimeter on screen.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ACE_Parachute_fnc_showAltimeter\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n([\"ACE_Altimeter\"] call BIS_fnc_rscLayer) cutRsc [\"ACE_Altimeter\", \"PLAIN\", 0, true];\r\nif (isNull (uiNamespace getVariable [\"ACE_Altimeter\", displayNull])) exitWith {};\r\n\r\nGVAR(AltimeterActive) = true;\r\n\r\n[{\r\n    if (!GVAR(AltimeterActive)) exitWith {[_this select 1] call CALLSTACK(CBA_fnc_removePerFrameEventHandler)};\r\n    disableSerialization;\r\n    (_this select 0) params [\"_display\", \"_unit\", \"_oldHeight\", \"_prevTime\"];\r\n    if !(\"ACE_Altimeter\" in assignedItems _unit) exitWith {[_this select 1] call CALLSTACK(CBA_fnc_removePerFrameEventHandler); call FUNC(hideAltimeter)};\r\n\r\n    private [\"_height\", \"_hour\", \"_minute\", \"_descentRate\",\"_HeightText\", \"_DecendRate\", \"_TimeText\", \"_curTime\", \"_timeDiff\"];\r\n\r\n    _HeightText = _display displayCtrl 1100;\r\n    _DecendRate = _display displayCtrl 1000;\r\n    _TimeText = _display displayCtrl 1001;\r\n    _hour = floor daytime;\r\n    _minute = floor ((daytime - _hour) * 60);\r\n\r\n    _height = ((getPosASL _unit) select 2) + EGVAR(common,mapAltitude);\r\n    _curTime = CBA_missionTime;\r\n    _timeDiff = _curTime - _prevTime;\r\n    _descentRate = if(_timeDiff > 0) then {floor((_oldHeight - _height) / _timeDiff)} else {0};\r\n\r\n    _TimeText ctrlSetText (format [\"%1:%2\",[_hour, 2] call EFUNC(common,numberToDigitsString),[_minute, 2] call EFUNC(common,numberToDigitsString)]);\r\n    _HeightText ctrlSetText (format [\"%1\", floor(_height)]);\r\n    _DecendRate ctrlSetText (format [\"%1\", _descentRate max 0]);\r\n\r\n    (_this select 0) set [2, _height];\r\n    (_this select 0) set [3, _curTime];\r\n}, 0.2, [uiNamespace getVariable [\"ACE_Altimeter\", displayNull], _unit,floor ((getPosASL _unit) select 2), CBA_missionTime]] call CALLSTACK(CBA_fnc_addPerFrameHandler);\r\n"},{"name":"ace_parachute_fnc_storeParachute","file":"parachute/functions/fnc_storeParachute.sqf","text":"/*\r\n   * Author: joko // Jonas\r\n   * Add the Reserve Parachute to Units or Save Backpack if is a Parachute in Unit\r\n   *\r\n   * Arguments:\r\n   * None\r\n   *\r\n   * Return Value:\r\n   * 0: Unit\r\n   *\r\n   * Example:\r\n   * None\r\n   *\r\n   * Public: No\r\n   */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nprivate _backpack = backpack _unit;\r\n\r\nif ((vehicle _unit) isKindOf \"ParachuteBase\" && {backpack _unit == \"\"} && {!(_unit getVariable [QGVAR(chuteIsCut),false])} && {_unit getVariable [QGVAR(hasReserve),false]}) then {\r\n    _unit addBackpackGlobal (_unit getVariable[QGVAR(backpackClass),\"ACE_NonSteerableParachute\"]);\r\n} else {\r\n    if ((getNumber(configFile >> \"CfgVehicles\" >> _backpack >> \"ace_hasReserveParachute\")) == 1) then {\r\n        _unit setVariable[QGVAR(backpackClass),getText(configFile >> \"CfgVehicles\" >> _backpack >> \"ace_reserveParachute\"),true];\r\n    };\r\n    if (!(_unit getVariable [QGVAR(chuteIsCut),false]) && {!(animationState _unit == 'para_pilot')}) then {\r\n        _unit setVariable [QGVAR(hasReserve),[false,true] select (getNumber(configFile >> \"CfgVehicles\" >> _backpack >> \"ace_hasReserveParachute\")),true];\r\n    };\r\n};\r\n"}],"rangecard":[{"name":"ace_rangecard_fnc_calculateSolution","file":"rangecard/functions/fnc_calculateSolution.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the range card data\r\n *\r\n * Arguments:\r\n * 0: Scope base angle <NUMBER>\r\n * 1: Bullet mass <NUMBER>\r\n * 2: Bore height <NUMBER>\r\n * 3: air friction <NUMBER>\r\n * 4: muzzle velocity <NUMBER>\r\n * 5: temperature <NUMBER>\r\n * 6: barometric pressure <NUMBER>\r\n * 7: relative humidity <NUMBER>\r\n * 8: simulation steps <NUMBER>\r\n * 9: wind speed <ARRAY>\r\n * 10: wind direction <NUMBER>\r\n * 11: inclination angle <NUMBER>\r\n * 12: target speed <NUMBER>\r\n * 13: target range <NUMBER>\r\n * 14: ballistic coefficient <NUMBER>\r\n * 15: drag model <NUMBER>\r\n * 16: atmosphere model <STRING>\r\n * 17: Store range card data? <BOOL>\r\n * 18: Stability factor <NUMBER>\r\n * 19: Twist Direction <NUMBER>\r\n * 20: Latitude <NUMBER>\r\n * 21: Direction of Fire <NUMBER>\r\n * 22: Range Card Slot <NUMBER>\r\n * 23: Use advanced ballistics config? <BOOL>\r\n *\r\n * Return Value:\r\n * 0: Elevation (MOA) <NUMBER>\r\n * 1: Windage (MOA) <ARRAY>\r\n * 2: Lead (MOA) <NUMBER>\r\n * 3: Time of fligth (SECONDS) <NUMBER>\r\n * 4: Remaining velocity (m/s) <NUMBER>\r\n * 5: Remaining kinetic energy (ft·lb) <NUMBER>\r\n * 6: Vertical coriolis drift (MOA) <NUMBER>\r\n * 7: Horizontal coriolis drift (MOA) <NUMBER>\r\n * 8: Spin drift (MOA) <NUMBER>\r\n *\r\n * Example:\r\n * call ace_rangecard_calculate_range_card_data\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [\r\n    \"_scopeBaseAngle\", \"_bulletMass\", \"_boreHeight\", \"_airFriction\", \"_muzzleVelocity\",\r\n    \"_temperature\", \"_barometricPressure\", \"_relativeHumidity\", \"_simSteps\", \"_windSpeed\",\r\n    \"_windDirection\", \"_inclinationAngle\", \"_targetSpeed\", \"_targetRange\", \"_bc\", \"_dragModel\",\r\n    \"_atmosphereModel\", \"_storeRangeCardData\", \"_stabilityFactor\", \"_twistDirection\", \"_latitude\",\r\n    \"_directionOfFire\", \"_rangeCardSlot\", \"_useABConfig\"\r\n];\r\n_windSpeed params [\"_windSpeed1\", \"_windSpeed2\"];\r\n\r\nif (_storeRangeCardData) then {\r\n    GVAR(rangeCardDataMVs) set [_rangeCardSlot, format[\" %1\", round(_muzzleVelocity)]];\r\n};\r\n\r\nprivate [\"_bulletPos\", \"_bulletVelocity\", \"_bulletAccel\", \"_bulletSpeed\", \"_gravity\", \"_deltaT\", \"_speedOfSound\"];\r\n_bulletPos = [0, 0, 0];\r\n_bulletVelocity = [0, 0, 0];\r\n_bulletAccel = [0, 0, 0];\r\n_bulletSpeed = 0;\r\n_gravity = [0, sin(_scopeBaseAngle + _inclinationAngle) * -9.80665, cos(_scopeBaseAngle + _inclinationAngle) * -9.80665];\r\n_deltaT = 1 / _simSteps;\r\n_speedOfSound = 0;\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    _speedOfSound = _temperature call EFUNC(weather,calculateSpeedOfSound);\r\n};\r\n\r\nprivate [\"_elevation\", \"_windage1\", \"_windage2\", \"_lead\", \"_TOF\", \"_trueVelocity\", \"_trueSpeed\", \"_kineticEnergy\", \"_verticalCoriolis\", \"_verticalDeflection\", \"_horizontalCoriolis\", \"_horizontalDeflection\", \"_spinDrift\", \"_spinDeflection\"];\r\n_elevation = 0;\r\n_windage1 = 0;\r\n_windage2 = 0;\r\n_lead = 0;\r\n_TOF = 0;\r\n_trueVelocity = [0, 0, 0];\r\n_trueSpeed = 0;\r\n_verticalCoriolis = 0;\r\n_verticalDeflection = 0;\r\n_horizontalCoriolis = 0;\r\n_horizontalDeflection = 0;\r\n_spinDrift = 0;\r\n_spinDeflection = 0;\r\n\r\nprivate [\"_n\", \"_range\"];\r\n_n = 0;\r\n_range = 0;\r\n\r\nprivate [\"_wind1\", \"_wind2\", \"_windDrift\"];\r\n_wind1 = [cos(270 - _windDirection * 30) * _windSpeed1, sin(270 - _windDirection * 30) * _windSpeed1, 0];\r\n_wind2 = [cos(270 - _windDirection * 30) * _windSpeed2, sin(270 - _windDirection * 30) * _windSpeed2, 0];\r\n_windDrift = 0;\r\nif (_useABConfig) then {\r\n    _bc = [_bc, _temperature, _barometricPressure, _relativeHumidity, _atmosphereModel] call EFUNC(advanced_ballistics,calculateAtmosphericCorrection);\r\n};\r\n\r\nprivate [\"_airFrictionCoef\", \"_airDensity\"];\r\n_airFrictionCoef = 1;\r\nif (!_useABConfig && (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) then {\r\n    _airDensity = [_temperature, _barometricPressure, _relativeHumidity] call EFUNC(weather,calculateAirDensity);\r\n    _airFrictionCoef = _airDensity / 1.22498;\r\n};\r\n\r\nprivate [\"_speedTotal\", \"_stepsTotal\", \"_speedAverage\"];\r\n_speedTotal = 0;\r\n_stepsTotal = 0;\r\n_speedAverage = 0;\r\n\r\n_bulletPos set [0, 0];\r\n_bulletPos set [1, 0];\r\n_bulletPos set [2, -(_boreHeight / 100)];\r\n\r\n_bulletVelocity set [0, 0];\r\n_bulletVelocity set [1, Cos(_scopeBaseAngle) * _muzzleVelocity];\r\n_bulletVelocity set [2, Sin(_scopeBaseAngle) * _muzzleVelocity];\r\n\r\nwhile {_TOF < 6 && (_bulletPos select 1) < _targetRange} do {\r\n    _bulletSpeed = vectorMagnitude _bulletVelocity;\r\n\r\n    _speedTotal = _speedTotal + _bulletSpeed;\r\n    _stepsTotal = _stepsTotal + 1;\r\n    _speedAverage = (_speedTotal / _stepsTotal);\r\n\r\n    if (_speedAverage > 450 && _bulletSpeed < _speedOfSound) exitWith {};\r\n    if (atan((_bulletPos select 2) / (abs(_bulletPos select 1) + 1)) < -2.254) exitWith {};\r\n\r\n    _trueVelocity = _bulletVelocity vectorDiff _wind1;\r\n    _trueSpeed = vectorMagnitude _trueVelocity;\r\n\r\n    if (_useABConfig) then {\r\n        private _drag = if (missionNamespace getVariable [QEGVAR(advanced_ballistics,extensionAvailable), false]) then {\r\n            parseNumber((\"ace_advanced_ballistics\" callExtension format[\"retard:%1:%2:%3\", _dragModel, _bc, _trueSpeed]))\r\n        } else {\r\n            ([_dragModel, _bc, _trueSpeed] call EFUNC(advanced_ballistics,calculateRetardation))\r\n        };\r\n        _bulletAccel = (vectorNormalized _trueVelocity) vectorMultiply (-1 * _drag);\r\n    } else {\r\n        _bulletAccel = _trueVelocity vectorMultiply (_trueSpeed * _airFriction * _airFrictionCoef);\r\n    };\r\n\r\n    _bulletAccel = _bulletAccel vectorAdd _gravity;\r\n\r\n    _bulletVelocity = _bulletVelocity vectorAdd (_bulletAccel vectorMultiply _deltaT);\r\n    _bulletPos = _bulletPos vectorAdd (_bulletVelocity vectorMultiply _deltaT);\r\n\r\n    _TOF = _TOF + _deltaT;\r\n\r\n    if (_storeRangeCardData) then {\r\n        _range = GVAR(rangeCardStartRange) + _n * GVAR(rangeCardIncrement);\r\n        if ((_bulletPos select 1) >= _range && _range <= GVAR(rangeCardEndRange)) then {\r\n            if ((_bulletPos select 1) > 0) then {\r\n                _elevation = - atan((_bulletPos select 2) / (_bulletPos select 1));\r\n                _windage1 = - atan((_bulletPos select 0) / (_bulletPos select 1));\r\n            };\r\n            if (_range != 0) then {\r\n                _lead = (_targetSpeed * _TOF) / (Tan(3.38 / 60) * _range);\r\n            };\r\n            private [\"_elevationString\", \"_windageString\", \"_leadString\"];\r\n            _elevationString = Str(round(-_elevation * 60 / 3.38 * 10) / 10);\r\n            if (_elevationString == \"0\") then {\r\n                _elevationString = \"-0.0\";\r\n            };\r\n            if (_elevationString find \".\" == -1) then {\r\n                _elevationString = _elevationString + \".0\";\r\n            };\r\n            _windageString = Str(round(_windage1 * 60 / 3.38 * 10) / 10);\r\n            if (_windageString find \".\" == -1) then {\r\n                _windageString = _windageString + \".0\";\r\n            };\r\n            _leadString = Str(round(_lead * 10) / 10);\r\n            if (_leadString find \".\" == -1) then {\r\n                _leadString = _leadString + \".0\";\r\n            };\r\n            (GVAR(rangeCardDataElevation) select _rangeCardSlot) set [_n, _elevationString];\r\n            (GVAR(rangeCardDataWindage) select _rangeCardSlot) set [_n, _windageString];\r\n            (GVAR(rangeCardDataLead) select _rangeCardSlot) set [_n, _leadString];\r\n            _n = _n + 1;\r\n        };\r\n    };\r\n};\r\n\r\nif ((_bulletPos select 1) > 0) then {\r\n    _elevation = - atan((_bulletPos select 2) / (_bulletPos select 1));\r\n    _windage1 = - atan((_bulletPos select 0) / (_bulletPos select 1));\r\n    _windDrift = (_wind2 select 0) * (_TOF - _targetRange / _muzzleVelocity);\r\n    _windage2 = - atan(_windDrift / (_bulletPos select 1));\r\n};\r\n\r\nif (_targetRange != 0) then {\r\n    _lead = (_targetSpeed * _TOF) / (Tan(3.38 / 60) * _targetRange);\r\n};\r\n\r\n_kineticEnergy = 0.5 * (_bulletMass / 1000 * (_bulletSpeed ^ 2));\r\n_kineticEnergy = _kineticEnergy * 0.737562149;\r\n\r\n[_elevation * 60, [_windage1 * 60, _windage2 * 60], _lead, _TOF, _bulletSpeed, _kineticEnergy, _verticalCoriolis * 60, _horizontalCoriolis * 60, _spinDrift * 60]\r\n"},{"name":"ace_rangecard_fnc_canCopy","file":"rangecard/functions/fnc_canCopy.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Checks if the target has a copyable range card\r\n *\r\n * Arguments:\r\n * unit <OBJECT>\r\n *\r\n * Return Value:\r\n * canShow (bool)\r\n *\r\n * Example:\r\n * [] call ace_rangecard_fnc_canCopy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n((primaryWeapon _this) != \"\" && [_this] call EFUNC(common,isPlayer) && [_this, \"ACE_RangeCard\"] call EFUNC(common,hasItem))\r\n"},{"name":"ace_rangecard_fnc_canShow","file":"rangecard/functions/fnc_canShow.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Tests if the Range Card can be shown\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * canShow (bool)\r\n *\r\n * Example:\r\n * [] call ace_rangecard_fnc_canShow\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(GVAR(ammoClass) != \"\" && GVAR(magazineClass) != \"\" && GVAR(weaponClass) != \"\" && !GVAR(RangeCardOpened) && (\"ACE_RangeCard\" in (uniformItems ACE_player)) || (\"ACE_RangeCard\" in (vestItems ACE_player)))\r\n"},{"name":"ace_rangecard_fnc_canShowCopy","file":"rangecard/functions/fnc_canShowCopy.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Tests if the Range Card copy can be shown\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * canShow (bool)\r\n *\r\n * Example:\r\n * [] call ace_rangecard_fnc_canShowCopy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(GVAR(ammoClassCopy) != \"\" && GVAR(magazineClassCopy) != \"\" && GVAR(weaponClassCopy) != \"\" && !GVAR(RangeCardOpened) && (\"ACE_RangeCard\" in (uniformItems ACE_player)) || (\"ACE_RangeCard\" in (vestItems ACE_player)))\r\n"},{"name":"ace_rangecard_fnc_onCloseDialog","file":"rangecard/functions/fnc_onCloseDialog.sqf","text":"#include \"script_component.hpp\"\r\n\r\nuiNamespace setVariable ['RangleCard_Display', nil];\r\nGVAR(RangeCardOpened) = false;\r\n"},{"name":"ace_rangecard_fnc_openRangeCard","file":"rangecard/functions/fnc_openRangeCard.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Opens the range card dialog\r\n *\r\n * Arguments:\r\n * Open copy? <BOOLEAN>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * call ace_rangecard_fnc_openRangeCard\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(RangeCardOpened)) exitWith {};\r\n\r\nif (_this) then {\r\n    if (GVAR(ammoClassCopy) != \"\" && GVAR(magazineClassCopy) != \"\" && GVAR(weaponClassCopy) != \"\") then {\r\n        GVAR(RangeCardOpened) = true;\r\n\r\n        createDialog \"ACE_RangeCard_Dialog\";\r\n\r\n        [GVAR(ammoClassCopy), GVAR(magazineClassCopy), GVAR(weaponClassCopy)] call FUNC(updateRangeCard);\r\n    };\r\n} else {\r\n    if (ACE_player call FUNC(updateClassNames)) then {\r\n        GVAR(RangeCardOpened) = true;\r\n\r\n        createDialog \"ACE_RangeCard_Dialog\";\r\n\r\n        [GVAR(ammoClass), GVAR(magazineClass), GVAR(weaponClass)] call FUNC(updateRangeCard);\r\n    };\r\n};\r\n"},{"name":"ace_rangecard_fnc_updateClassNames","file":"rangecard/functions/fnc_updateClassNames.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Updates the ammo and weapon class names\r\n *\r\n * Arguments:\r\n * unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Update successful? <BOOLEAN>\r\n *\r\n * Example:\r\n * unit call ace_rangecard_fnc_updateClassNames\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_unit\", \"_ammoClass\", \"_magazineClass\", \"_weaponClass\", \"_ammo\", \"_ammoConfig\", \"_parentClasses\"];\r\n_unit = _this;\r\n\r\n_ammoClass = \"\";\r\n_magazineClass = \"\";\r\n_weaponClass = primaryWeapon _unit;\r\n\r\nif (_weaponClass == \"\") exitWith { (GVAR(ammoClass) != \"\" && GVAR(magazineClass) != \"\" && GVAR(weaponClass) != \"\") }; \r\n\r\n{\r\n    _ammo = getText (configFile >> \"CfgMagazines\" >> _x >> \"ammo\");\r\n    _ammoConfig = (configFile >> \"CfgAmmo\" >> _ammo);\r\n    _parentClasses = [_ammoConfig, true] call BIS_fnc_returnParents;\r\n    if (\"BulletBase\" in _parentClasses) exitWith {\r\n        _ammoClass = _ammo;\r\n        _magazineClass = _x;\r\n    };\r\n} forEach (primaryWeaponMagazine _unit);\r\n\r\nif (_ammoClass == \"\") exitWith { (GVAR(ammoClass) != \"\" && GVAR(magazineClass) != \"\" && GVAR(weaponClass) != \"\") };\r\n\r\nif (_unit == ACE_player) then {\r\n    GVAR(ammoClass)     = _ammoClass;\r\n    GVAR(magazineClass) = _magazineClass;\r\n    GVAR(weaponClass)   = _weaponClass;\r\n} else {\r\n    GVAR(ammoClassCopy)     = _ammoClass;\r\n    GVAR(magazineClassCopy) = _magazineClass;\r\n    GVAR(weaponClassCopy)   = _weaponClass;\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_rangecard_fnc_updateRangeCard","file":"rangecard/functions/fnc_updateRangeCard.sqf","text":"/*\r\n * Authors: Ruthberg\r\n * Updates the range card data\r\n *\r\n * Arguments:\r\n * 0: ammo class <STRING>\r\n * 1: magazine class <STRING>\r\n * 2: weapon class <STRING>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [mode] call ace_rangecard_fnc_openRangeCard\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n#define __dsp (uiNamespace getVariable \"RangleCard_Display\")\r\n\r\nprivate [\"_airFriction\", \"_ammoConfig\", \"_atmosphereModel\", \"_barometricPressure\", \"_barrelLength\", \"_barrelTwist\", \"_bc\", \"_bulletMass\", \"_boreHeight\", \"_cacheEntry\", \"_column\", \"_control\", \"_dragModel\", \"_i\", \"_muzzleVelocity\", \"_mv\", \"_mvShift\", \"_offset\", \"_relativeHumidity\", \"_result\", \"_row\", \"_scopeBaseAngle\", \"_weaponConfig\", \"_zeroRange\", \"_initSpeed\", \"_initSpeedCoef\", \"_useABConfig\"];\r\n_useABConfig = (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]);\r\n\r\nPARAMS_3(_ammoClass,_magazineClass,_weaponClass);\r\n\r\nif (_ammoClass == \"\" || _magazineClass == \"\" || _weaponClass == \"\") exitWith {};\r\n\r\n{\r\n    ctrlDelete _x;\r\n} forEach GVAR(controls);\r\nGVAR(controls) = [];\r\n\r\nfor \"_row\" from 0 to 49 do {\r\n    _offset = if (_row < 5) then {0} else {0.003};\r\n    _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 790000 + _row]);\r\n    _control ctrlSetPosition [safeZoneX + 0.183, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.062, 0.025];\r\n    if (_row in [0, 8, 18, 28, 38, 48]) then {\r\n        _control ctrlSetTextColor [1, 1, 1, 1];\r\n    } else {\r\n        _control ctrlSetTextColor [0, 0, 0, 1];\r\n    };\r\n    _control ctrlCommit 0;\r\n    _control ctrlSetText Str(100 + _row * 50);\r\n    GVAR(controls) pushBack _control;\r\n};\r\nfor \"_column\" from 0 to 8 do {\r\n    for \"_row\" from 0 to 49 do {\r\n        _offset = if (_row < 5) then {0} else {0.003};\r\n        _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 90000 + _column * 100 + _row]);\r\n        _control ctrlSetPosition [safeZoneX + 0.249 + _column * 0.055, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.052, 0.025];\r\n        _control ctrlCommit 0;\r\n        _control ctrlSetText \"-0.0\";\r\n        GVAR(controls) pushBack _control;\r\n    };\r\n};\r\nfor \"_column\" from 0 to 2 do {\r\n    for \"_row\" from 0 to 49 do {\r\n        _offset = if (_row < 5) then {0} else {0.003};\r\n        _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 90000 + (9 +_column) * 100 + _row]);\r\n        _control ctrlSetPosition [safeZoneX + 0.743 + _column * 0.049, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.047, 0.025];\r\n        _control ctrlCommit 0;\r\n        _control ctrlSetText \"-0.0\";\r\n        GVAR(controls) pushBack _control;\r\n    };\r\n};\r\nfor \"_column\" from 0 to 2 do {\r\n    for \"_row\" from 0 to 49 do {\r\n        _offset = if (_row < 5) then {0} else {0.003};\r\n        _control = (__dsp ctrlCreate [\"RangeCard_RscText\", 90000 + (12 +_column) * 100 + _row]);\r\n        _control ctrlSetPosition [safeZoneX + 0.892 + _column * 0.049, safeZoneY + 0.374 + 0.027 * _row + _offset, 0.047, 0.025];\r\n        _control ctrlCommit 0;\r\n        _control ctrlSetText \"-0.0\";\r\n        GVAR(controls) pushBack _control;\r\n    };\r\n};\r\n\r\nlnbClear 770100;\r\nlnbClear 770200;\r\nlnbClear 770300;\r\nlnbClear 770400;\r\n\r\nGVAR(rangeCardDataElevation) = [[], [], [], [], [], [], [], [], []];\r\nGVAR(rangeCardDataWindage) = [[], [], [], [], [], [], [], [], []];\r\nGVAR(rangeCardDataLead) = [[], [], [], [], [], [], [], [], []];\r\nGVAR(rangeCardDataMVs) = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\nGVAR(lastValidRow) = [];\r\n\r\nGVAR(currentUnit) = 2;\r\nGVAR(rangeCardStartRange) = 100;\r\nGVAR(rangeCardIncrement) = 50;\r\nGVAR(rangeCardEndRange) = GVAR(rangeCardStartRange) + 49 * GVAR(rangeCardIncrement);\r\n\r\n_ammoConfig = _ammoClass call EFUNC(advanced_ballistics,readAmmoDataFromConfig);\r\n_weaponConfig = _weaponClass call EFUNC(advanced_ballistics,readWeaponDataFromConfig);\r\n_airFriction = _ammoConfig select 0;\r\n_barrelTwist = _weaponConfig select 0;\r\n_barrelLength = _weaponConfig select 2;\r\n_muzzleVelocity = 0;\r\n\r\n_bc = 0;\r\nif (count (_ammoConfig select 6) > 0) then {\r\n    _bc = (_ammoConfig select 6) select 0;\r\n};\r\n_dragModel = _ammoConfig select 5;\r\n_atmosphereModel = _ammoConfig select 8;\r\n_bulletMass = 5;\r\n_boreHeight = 3.81;\r\n_zeroRange = 100;\r\n\r\nif (_bc == 0) then {\r\n    _useABConfig = false;\r\n};\r\n\r\nif (_barrelLength > 0 && _useABConfig) then {\r\n    _muzzleVelocity = [_barrelLength, _ammoConfig select 10, _ammoConfig select 11, 0] call EFUNC(advanced_ballistics,calculateBarrelLengthVelocityShift);\r\n} else {\r\n    _initSpeed     = getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"initSpeed\");\r\n    _initSpeedCoef = getNumber (configFile >> \"CfgWeapons\" >> _weaponClass >> \"initSpeed\");\r\n    if (_initSpeedCoef < 0) then {\r\n        _initSpeed = _initSpeed * -_initSpeedCoef;\r\n    };\r\n    if (_initSpeedCoef > 0) then {\r\n        _initSpeed = _initSpeedCoef;\r\n    };\r\n    _muzzleVelocity = _initSpeed;\r\n};\r\n\r\nif (_useABConfig) then {\r\n    ctrlSetText [770000, format[\"%1'' - %2 gr (%3)\", round((_ammoConfig select 1) * 39.3700787) / 1000, round((_ammoConfig select 3) * 15.4323584), _ammoClass]];\r\n    if (_barrelLength > 0 && _barrelTwist > 0) then {\r\n        ctrlSetText [770002, format[\"Barrel: %1'' 1:%2'' twist\", round(2 * _barrelLength * 0.0393700787) / 2, round(_barrelTwist * 0.0393700787)]];\r\n    } else {\r\n        ctrlSetText [770002, \"\"];\r\n    };\r\n} else {\r\n    ctrlSetText [770000, getText (configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayNameShort\")];\r\n    ctrlSetText [770002, getText (configFile >> \"CfgWeapons\" >> _weaponClass >> \"displayName\")];\r\n};\r\n\r\nlnbAddRow [770100, [\"4mps Wind(MRADs)\", \"1mps LEAD(MRADs)\"]];\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    lnbAddRow [770100, [\"Air/Ammo Temp\", \"Air/Ammo Temp\"]];\r\n\r\n    lnbAddRow [770200, [\"-15°C\", \" -5°C\", \"  5°C\", \" 10°C\", \" 15°C\", \" 20°C\", \" 25°C\", \" 30°C\", \" 35°C\"]];\r\n    lnbAddRow [770300, [\"-15°C\", \" 10°C\", \" 35°C\", \"-15°C\", \" 10°C\", \" 35°C\"]];\r\n};\r\n\r\n_barometricPressure = 1013.25;\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    _barometricPressure = 1013.25 * (1 - (0.0065 * EGVAR(common,mapAltitude)) / 288.15) ^ 5.255754495;\r\n};\r\n_relativeHumidity = 0.5;\r\n\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n    ctrlSetText [770001, format[\"Drop Tables for B.P.: %1mb; Corrected for MVV at Air/Ammo Temperatures -15-35 °C\", round(_barometricPressure * 100) / 100]];\r\n    ctrlSetText [77004 , format[\"B.P.: %1mb\", round(_barometricPressure * 100) / 100]];\r\n} else {\r\n    ctrlSetText [770001, \"\"];\r\n    ctrlSetText [77004 , \"\"];\r\n};\r\n\r\n_cacheEntry = missionNamespace getVariable format[QGVAR(%1_%2_%3), _ammoClass, _weaponClass, missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]];\r\nif (isNil {_cacheEntry}) then {\r\n    _result = [0, 0, _boreHeight, _airFriction, _muzzleVelocity, 15, 1013.25, 0.5, 1000, [0, 0], 0, 0, 0, _zeroRange, _bc, _dragModel, _atmosphereModel, false, 1.5, 0, 0, 0, 0, _useABConfig] call FUNC(calculateSolution);\r\n    _scopeBaseAngle = (_result select 0) / 60;\r\n    if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n        {\r\n            _mvShift = [_ammoConfig select 9, _x] call EFUNC(advanced_ballistics,calculateAmmoTemperatureVelocityShift);\r\n            _mv = _muzzleVelocity + _mvShift;\r\n\r\n            [_scopeBaseAngle,_bulletMass,_boreHeight,_airFriction,_mv,_x,_barometricPressure,_relativeHumidity,1000,[4,0],3,0,1,GVAR(rangeCardEndRange),_bc,_dragModel,_atmosphereModel,true,1.5,1,46,23,_forEachIndex,_useABConfig] call FUNC(calculateSolution);\r\n        } forEach [-15, -5, 5, 10, 15, 20, 25, 30, 35];\r\n    } else {\r\n        [_scopeBaseAngle,_bulletMass,_boreHeight,_airFriction,_muzzleVelocity,15,_barometricPressure,_relativeHumidity,1000,[4,0],3,0,1,GVAR(rangeCardEndRange),_bc,_dragModel,_atmosphereModel,true,1.5,1,46,23,3,_useABConfig] call FUNC(calculateSolution);\r\n    };\r\n\r\n    for \"_i\" from 0 to 9 do {\r\n        GVAR(lastValidRow) pushBack count (GVAR(rangeCardDataElevation) select _i);\r\n        while {count (GVAR(rangeCardDataElevation) select _i) < 50} do {\r\n            if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n                (GVAR(rangeCardDataElevation) select _i) pushBack \"###\";\r\n                (GVAR(rangeCardDataWindage) select _i) pushBack \"##\";\r\n                (GVAR(rangeCardDataLead) select _i) pushBack \"##\";\r\n            } else {\r\n                (GVAR(rangeCardDataElevation) select _i) pushBack \"\";\r\n                (GVAR(rangeCardDataWindage) select _i) pushBack \"\";\r\n                (GVAR(rangeCardDataLead) select _i) pushBack \"\";\r\n            };\r\n        };\r\n    };\r\n\r\n    missionNamespace setVariable [format[QGVAR(%1_%2_%3), _ammoClass, _weaponClass, missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]], [GVAR(rangeCardDataElevation), GVAR(rangeCardDataWindage), GVAR(rangeCardDataLead), GVAR(rangeCardDataMVs), GVAR(lastValidRow)]];\r\n} else {\r\n    GVAR(rangeCardDataElevation) = _cacheEntry select 0;\r\n    GVAR(rangeCardDataWindage)   = _cacheEntry select 1;\r\n    GVAR(rangeCardDataLead)      = _cacheEntry select 2;\r\n    GVAR(rangeCardDataMVs)       = _cacheEntry select 3;\r\n    GVAR(lastValidRow)           = _cacheEntry select 4;\r\n};\r\n\r\nlnbAddRow [770200, GVAR(rangeCardDataMVs)];\r\n\r\nfor \"_column\" from 0 to 8 do {\r\n    for \"_row\" from 0 to 49 do {\r\n        _control = (__dsp displayCtrl (90000 + _column * 100 + _row));\r\n        _control ctrlSetText ((GVAR(rangeCardDataElevation) select _column) select _row);\r\n        if (_row >= (GVAR(lastValidRow) select _column)) then {\r\n            _control ctrlSetTextColor [0, 0, 0, 0.6];\r\n        } else {\r\n            _control ctrlSetTextColor [0, 0, 0, 1.0];\r\n        };\r\n        _control ctrlCommit 0;\r\n    };\r\n};\r\n{\r\n    for \"_row\" from 0 to 49 do {\r\n        _control = (__dsp displayCtrl (90000 + (9 + _forEachIndex) * 100 + _row));\r\n        _control ctrlSetText ((GVAR(rangeCardDataWindage) select _x) select _row);\r\n        if (_row >= (GVAR(lastValidRow) select _x)) then {\r\n            _control ctrlSetTextColor [0, 0, 0, 0.6];\r\n        } else {\r\n            _control ctrlSetTextColor [0, 0, 0, 1.0];\r\n        };\r\n        _control ctrlCommit 0;\r\n    };\r\n} forEach [0, 3, 8];\r\n\r\n{\r\n    for \"_row\" from 0 to 49 do {\r\n        _control = (__dsp displayCtrl (90000 + (12 + _forEachIndex) * 100 + _row));\r\n        _control ctrlSetText ((GVAR(rangeCardDataLead) select _x) select _row);\r\n        if (_row >= (GVAR(lastValidRow) select _x)) then {\r\n            _control ctrlSetTextColor [0, 0, 0, 0.6];\r\n        } else {\r\n            _control ctrlSetTextColor [0, 0, 0, 1.0];\r\n        };\r\n        _control ctrlCommit 0;\r\n    };\r\n} forEach [0, 3, 8];\r\n\r\nif (_useABConfig) then {\r\n    ctrlSetText [770020, \"For best results keep ammunition at ambient air temperature. Tables calculated for the above listed barrel\"];\r\n    ctrlSetText [770021, \"and load with optic mounted 1.5'' above line of bore.\"];\r\n} else {\r\n    ctrlSetText [770020, \"\"];\r\n    ctrlSetText [770021, \"\"];\r\n};\r\n"}],"realisticnames":[],"rearm":[{"name":"ace_rearm_fnc_addRearmActions","file":"rearm/functions/fnc_addRearmActions.sqf","text":"/*\r\n * Author: GitHawk\r\n * Show the resupplyable ammunition of all surrounding vehicles.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * ChildActions <ARRAY>\r\n *\r\n * Example:\r\n * [tank] call ace_rearm_fnc_addRearmActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_vehicleActions\", \"_actions\", \"_action\", \"_vehicles\", \"_vehicle\", \"_needToAdd\", \"_magazineHelper\", \"_turretPath\", \"_magazines\", \"_magazine\", \"_icon\", \"_cnt\"];\r\nparams [[\"_target\", objNull, [objNull]]];\r\n\r\n_vehicles = nearestObjects [_target, [\"AllVehicles\"], 20];\r\nif (count _vehicles < 2) exitWith {false}; // Rearming needs at least 2 vehicles\r\n\r\n_vehicleActions = [];\r\n{\r\n    _actions = [];\r\n    _vehicle = _x;\r\n    _needToAdd = false;\r\n    _action = [];\r\n    if !((_vehicle == _target) || (_vehicle isKindOf \"CAManBase\")) then {\r\n        _magazineHelper = [];\r\n        {\r\n            _turretPath = _x;\r\n            _magazines = [_vehicle, _turretPath] call FUNC(getConfigMagazines);\r\n            {\r\n                _magazine = _x;\r\n                _currentMagazines = { _x == _magazine } count (_vehicle magazinesTurret _turretPath);\r\n                if ((_currentMagazines < ([_vehicle, _turretPath, _magazine] call FUNC(getMaxMagazines))) && !(_magazine in _magazineHelper)) then {\r\n                    _action = [_magazine,\r\n                        getText(configFile >> \"CfgMagazines\" >> _magazine >> \"displayName\"),\r\n                        getText(configFile >> \"CfgMagazines\" >> _magazine >> \"picture\"),\r\n                        {_this call FUNC(takeAmmo)},\r\n                        {true},\r\n                        {},\r\n                        [_magazine, _vehicle]] call EFUNC(interact_menu,createAction);\r\n                    _actions pushBack [_action, [], _target];\r\n                    _magazineHelper pushBack _magazine;\r\n                    _needToAdd = true;\r\n                } else {\r\n                    if (((_vehicle magazineTurretAmmo [_magazine, _turretPath]) < getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"count\")) && !(_magazine in _magazineHelper)) then {\r\n                        _action = [_magazine,\r\n                            getText(configFile >> \"CfgMagazines\" >> _magazine >> \"displayName\"),\r\n                            getText(configFile >> \"CfgMagazines\" >> _magazine >> \"picture\"),\r\n                            {_this call FUNC(takeAmmo)},\r\n                            {true},\r\n                            {},\r\n                            [_magazine, _vehicle]] call EFUNC(interact_menu,createAction);\r\n                        _actions pushBack [_action, [], _target];\r\n                        _magazineHelper pushBack _magazine;\r\n                        _needToAdd = true;\r\n                    };\r\n                };\r\n            } forEach _magazines;\r\n        } forEach REARM_TURRET_PATHS;\r\n    };\r\n    if (_needToAdd && !(_vehicle getVariable [QGVAR(disabled), false])) then {\r\n        _icon = getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"Icon\");\r\n        if !((_icon select [0, 1]) == \"\\\") then {\r\n            _icon = \"\";\r\n        };\r\n        if (GVAR(level) == 0) then {\r\n            _action = [_vehicle,\r\n                getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\"),\r\n                _icon,\r\n                {_this call FUNC(rearmEntireVehicle)},\r\n                {true},\r\n                {},\r\n                _vehicle] call EFUNC(interact_menu,createAction);\r\n            _vehicleActions pushBack [_action, [], _target];\r\n        } else {\r\n            _action = [_vehicle,\r\n                getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\"),\r\n                _icon,\r\n                {},\r\n                {true},\r\n                {},\r\n                []] call EFUNC(interact_menu,createAction);\r\n            _vehicleActions pushBack [_action, _actions, _target];\r\n        };\r\n    };\r\n} forEach _vehicles;\r\n\r\n_vehicleActions\r\n"},{"name":"ace_rearm_fnc_canRearm","file":"rearm/functions/fnc_canRearm.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Check if a unit can rearm.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Rearm <BOOL>\r\n *\r\n * Example:\r\n * [player, tank] call ace_rearm_fnc_canRearm\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_dummy\",\"_magazineClass\"];\r\nparams [[\"_target\", objNull, [objNull]], [\"_unit\", objNull, [objNull]]];\r\n\r\nif (GVAR(level) == 0 || {isNull _unit} || {!(_unit isKindOf \"CAManBase\")} || {!local _unit} || {_target distance _unit > REARM_ACTION_DISTANCE} || {_target getVariable [QGVAR(disabled), false]}) exitWith {false};\r\n\r\n_dummy = _unit getVariable [QGVAR(dummy), objNull];\r\nif (isNull _dummy) exitwith {false};\r\n_magazineClass = _dummy getVariable QGVAR(magazineClass);\r\nif (isNil \"_magazineClass\") exitWith {false};\r\n\r\n([_target, _magazineClass] call FUNC(getNeedRearmMagazines)) select 0\r\n"},{"name":"ace_rearm_fnc_canStoreAmmo","file":"rearm/functions/fnc_canStoreAmmo.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can store ammo in an ammo truck.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Store Ammo <BOOL>\r\n *\r\n * Example:\r\n * [player, tank] call ace_rearm_fnc_canStoreAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]], [\"_unit\", objNull, [objNull]]];\r\n\r\n!(isNull _unit ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit} ||\r\n    {(_target distance _unit) > REARM_ACTION_DISTANCE} ||\r\n    {isNull (_unit getVariable [QGVAR(dummy), objNull])})\r\n"},{"name":"ace_rearm_fnc_canTakeAmmo","file":"rearm/functions/fnc_canTakeAmmo.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can pick up ammo.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Pick Up Ammo <BOOL>\r\n *\r\n * Example:\r\n * [player, tank] call ace_rearm_fnc_canTakeAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]], [\"_unit\", objNull, [objNull]]];\r\n\r\n!(isNull _unit ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit} ||\r\n    {(_target distance _unit) > REARM_ACTION_DISTANCE} ||\r\n    {!isNull (_unit getVariable [QGVAR(dummy), objNull])})\r\n"},{"name":"ace_rearm_fnc_createDummy","file":"rearm/functions/fnc_createDummy.sqf","text":"/*\r\n * Author: GitHawk\r\n * Creates a carryable ammunition dummy object.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Magazine Classname <STRING>\r\n *\r\n * Return Value:\r\n * Created Dummy <OBJECT>\r\n *\r\n * Example:\r\n * [\"500Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_createDummy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_ammo\", \"_dummyName\", \"_dummy\"];\r\nparams [[\"_unit\", objNull, [objNull]], [\"_magazineClass\", \"\", [\"\"]]];\r\n\r\n_ammo = getText (configFile >> \"CfgMagazines\" >> _magazineClass >> \"ammo\");\r\n_dummyName = getText (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(dummy));\r\n_dummy = objNull;\r\nif !(_dummyName == \"\") then {\r\n    _dummy = _dummyName createVehicle (position _unit);\r\n} else {\r\n    _dummy = QGVAR(defaultCarriedObject) createVehicle (position _unit);\r\n};\r\n_dummy allowDamage false;\r\n_dummy setVariable [QGVAR(magazineClass), _magazineClass, true];\r\n\r\n_dummy\r\n"},{"name":"ace_rearm_fnc_disable","file":"rearm/functions/fnc_disable.sqf","text":"/*\r\n * Author: GitHawk\r\n * Disables rearm for a vehicle.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Disable <BOOL><OPTIONAL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [tank] call ace_rearm_fnc_disable\r\n * [tank, false] call ace_rearm_fnc_disable\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]], [\"_disable\", true, [true]]];\r\n_target setVariable [QGVAR(disabled), _disable, true];\r\n"},{"name":"ace_rearm_fnc_dropAmmo","file":"rearm/functions/fnc_dropAmmo.sqf","text":"/*\r\n * Author: GitHawk\r\n * Drops a magazine, optionally deletes it and optionally unholsters the wepaon.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Delete dummy object <BOOL> (optional)\r\n * 2: Unholster Weapon <BOOL> (optional)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, true, true] call ace_rearm_fnc_dropAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_dummy\", \"_actionID\"];\r\nparams [[\"_unit\", objNull, [objNull]], [\"_delete\", false, [false]], [\"_unholster\", true, [true]]];\r\n\r\nif (isNull _unit) exitWith {};\r\n\r\n_dummy = _unit getVariable [QGVAR(dummy), objNull];\r\nif !(isNull _dummy) then {\r\n    detach _dummy;\r\n    if (_delete) then {\r\n        deleteVehicle _dummy;\r\n    } else {\r\n        _dummy setVelocity [0,0,-0.1];\r\n    };\r\n    _unit setVariable [QGVAR(dummy), objNull];\r\n    //_unit setVariable [QEGVAR(dragging,isCarrying), false, true]; // breaks things, since it hides interact menu on _target\r\n};\r\n_actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\r\nif (_actionID != -1) then {\r\n    _unit removeAction _actionID;\r\n    _unit setVariable [QGVAR(ReleaseActionID), nil];\r\n};\r\n[_unit, \"forceWalk\", QGVAR(vehRearm), false] call EFUNC(common,statusEffect_set);\r\n\r\nif (_unholster) then {\r\n    REARM_UNHOLSTER_WEAPON\r\n};\r\n"},{"name":"ace_rearm_fnc_getConfigMagazines","file":"rearm/functions/fnc_getConfigMagazines.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Returns all magazines a turret can hold according to config.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Turret Path <ARRAY>\r\n *\r\n * Return Value:\r\n * Magazine classes in TurretPath <ARRAY>\r\n *\r\n * Example:\r\n * [vehicle, [0]] call ace_rearm_fnc_getConfigMagazines\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]], [\"_turretPath\", [], [[]]]];\r\n\r\nif (isNull _target) exitWith {[]};\r\n\r\n_cfg = configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"Turrets\";\r\n\r\nif (count _turretPath == 1) then {\r\n    _turretPath params [\"_subPath\"];\r\n\r\n    if (_subPath == -1) exitWith {\r\n        _cfg = configFile >> \"CfgVehicles\" >> (typeOf _target);\r\n    };\r\n\r\n    if (count _cfg > _subPath) then {\r\n        _cfg = _cfg select _subPath;\r\n    } else {\r\n        _cfg = nil;\r\n    };\r\n} else {\r\n    _turretPath params [\"\", \"_subPath\"];\r\n    if (count _cfg > 0) then {\r\n        _cfg = (_cfg select 0) >> \"Turrets\";\r\n        if (count _cfg > _subPath) then {\r\n            _cfg = _cfg select _subPath;\r\n        } else {\r\n            _cfg = nil;\r\n        };\r\n    } else {\r\n        _cfg = nil;\r\n    };\r\n};\r\n\r\nif !(isClass _cfg) exitWith {[]};\r\n\r\ngetArray (_cfg  >> \"magazines\")\r\n"},{"name":"ace_rearm_fnc_getMaxMagazines","file":"rearm/functions/fnc_getMaxMagazines.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Calculates the maximum number of magazines a turret can hold according to config.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Turret Path <ARRAY>\r\n * 2: Magazine Classname <STRING>\r\n *\r\n * Return Value:\r\n * Number of magazines on the turret path <NUMBER>\r\n *\r\n * Example:\r\n * [vehicle, [0], \"500Rnd_127x99_mag_Tracer_Red\"] call ace_rearm_fnc_getMaxMagazines\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_count\", \"_cfg\"];\r\nparams [[\"_target\", objNull, [objNull]], [\"_turretPath\", [], [[]]], [\"_magazineClass\", \"\", [\"\"]]];\r\n\r\nif (isNull _target) exitWith {0};\r\n\r\n_count = {_x == _magazineClass} count ([_target, _turretPath] call FUNC(getConfigMagazines));\r\n_count\r\n"},{"name":"ace_rearm_fnc_getNeedRearmMagazines","file":"rearm/functions/fnc_getNeedRearmMagazines.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Get rearm return value.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Magazine Classname <STRING>\r\n *\r\n * Return Value:\r\n * Return Value <ARRAY>\r\n * 0: Can Rearm <BOOL>\r\n * 1: TurretPath <ARRAY>\r\n * 2: Number of current magazines in turret path <NUMBER>\r\n *\r\n * Example:\r\n * [tank, \"mag\"] call ace_rearm_fnc_getNeedRearmMagazines\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_return\", \"_magazines\", \"_currentMagazines\"];\r\nparams [\"_target\", \"_magazineClass\"];\r\n\r\n_return = [false, [], 0];\r\n{\r\n    _magazines = [_target, _x] call FUNC(getConfigMagazines);\r\n\r\n    if (_magazineClass in _magazines) then {\r\n        _currentMagazines = {_x == _magazineClass} count (_target magazinesTurret _x);\r\n\r\n        if ((_target magazineTurretAmmo [_magazineClass, _x]) < getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\")) exitWith {\r\n            _return = [true, _x, _currentMagazines];\r\n        };\r\n\r\n        if (_currentMagazines < ([_target, _x, _magazineClass] call FUNC(getMaxMagazines))) exitWith {\r\n            _return = [true, _x, _currentMagazines];\r\n        };\r\n    };\r\n\r\n    if (_return select 0) exitWith {};\r\n} forEach REARM_TURRET_PATHS;\r\n\r\n_return\r\n"},{"name":"ace_rearm_fnc_grabAmmo","file":"rearm/functions/fnc_grabAmmo.sqf","text":"/*\r\n * Author: GitHawk\r\n * Grabs an dummy ammo.\r\n *\r\n * Arguments:\r\n * 0: Ammo Dummy <OBJECT>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [dummy, player] call ace_rearm_fnc_grabAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_dummy\", objNull, [objNull]], [\"_unit\", objNull, [objNull]]];\r\n\r\nREARM_HOLSTER_WEAPON\r\n[_unit, \"forceWalk\", QGVAR(vehRearm), true] call EFUNC(common,statusEffect_set);\r\n\r\n[\r\n    5,\r\n    [_dummy, _unit],\r\n    {\r\n        private [\"_actionID\"];\r\n        params [\"_args\"];\r\n        _args params [\"_dummy\", \"_unit\"];\r\n        [_dummy, _unit] call FUNC(pickUpAmmo);\r\n\r\n        _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\r\n        if (_actionID != -1) then {\r\n            _unit removeAction _actionID;\r\n        };\r\n        _actionID = _unit addAction [\r\n            format [\"<t color='#FF0000'>%1</t>\", localize ELSTRING(dragging,Drop)],\r\n            '(_this select 0) call FUNC(dropAmmo)',\r\n            nil,\r\n            20,\r\n            false,\r\n            true,\r\n            \"\",\r\n            '!isNull (_target getVariable [QGVAR(dummy), objNull])'\r\n        ];\r\n        _unit setVariable [QGVAR(ReleaseActionID), _actionID];\r\n    },\r\n    \"\",\r\n    localize LSTRING(GrabAction),\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_rearm_fnc_handleKilled","file":"rearm/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Handles medical on set dead event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit] call ace_rearm_fnc_handleKilled\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nif (!local _unit) exitWith {};\r\n\r\n_unit setVariable [QGVAR(selectedWeaponOnRearm), nil];\r\n[_unit, false, false] call FUNC(dropAmmo);\r\n"},{"name":"ace_rearm_fnc_handleUnconscious","file":"rearm/functions/fnc_handleUnconscious.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Handles medical on unconscious event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Is Unconscious <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit] call ace_rearm_fnc_handleUnconscious\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_isUnconscious\", false, [false]]];\r\n\r\nif (!local _unit || {!_isUnconscious}) exitWith {};\r\n\r\n[_unit, false, false] call FUNC(dropAmmo);\r\n"},{"name":"ace_rearm_fnc_makeDummy","file":"rearm/functions/fnc_makeDummy.sqf","text":"/*\r\n * Author: GitHawk\r\n * Make a dummy object by disabling collision and turning it.\r\n *\r\n * Arguments:\r\n * 0: Object <OBJECT>\r\n * 1: Vector dirAndUp <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [dummy, [[1,0,0],[0,0,1]]] call ace_rearm_fnc_makeDummy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_obj\", objNull, [objNull]], [\"_dirAndUp\", [[1,0,0],[0,0,1]], [[]]]];\r\n\r\n_obj setVectorDirAndUp _dirAndUp;\r\n_obj allowDamage false;\r\nACE_player disableCollisionWith _obj;\r\n"},{"name":"ace_rearm_fnc_moduleRearmSettings","file":"rearm/functions/fnc_moduleRearmSettings.sqf","text":"/*\r\n * Author: GitHawk\r\n * Module for adjusting the refuel settings.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example;\r\n * function = \"ace_rearm_fnc_moduleRearmSettings\"\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"\", [\"_activated\", false, [false]]];\r\n\r\nif (!_activated) exitWith {};\r\n\r\n[_logic, QGVAR(level), \"level\"] call EFUNC(common,readSettingFromModule);\r\n\r\ndiag_log text format [\"[ACE]: Rearm Module Initialized on level: %1\", GVAR(level)];\r\n"},{"name":"ace_rearm_fnc_pickUpAmmo","file":"rearm/functions/fnc_pickUpAmmo.sqf","text":"/*\r\n * Author: GitHawk\r\n * Starts progress bar for picking up a specific kind of magazine from the ground.\r\n *\r\n * Arguments:\r\n * 0: Ammo Dummy <OBJECT>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [target, player] call ace_rearm_fnc_pickUpAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_magazineClass\"];\r\nparams [[\"_target\", objNull, [objNull]], [\"_unit\", objNull, [objNull]]];\r\n\r\n_dummy = _unit getVariable [QGVAR(dummy), objNull];\r\nif !(isNull _dummy) exitWith {};\r\n\r\n//_target attachTo [_unit, [0,0.7,0], \"pelvis\"];\r\n_target attachTo [_unit, [0,1,0], \"pelvis\"];\r\n{\r\n    [QGVAR(makeDummyEH), [_dummy, [[-1,0,0],[0,0,1]]], _x] call CBA_fnc_targetEvent;\r\n} count (position _unit nearObjects [\"CAManBase\", 100]);\r\n_unit setVariable [QGVAR(dummy), _target];\r\n//_unit setVariable [QEGVAR(dragging,isCarrying), true, true];  // breaks things, since it hides interact menu on _target\r\n"},{"name":"ace_rearm_fnc_rearm","file":"rearm/functions/fnc_rearm.sqf","text":"/*\r\n * Author: GitHawk\r\n * Starts progress bar for rearming a vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_rearm_fnc_rearm\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_magazineClass\", \"_ammo\", \"_tmpCal\", \"_cal\", \"_idx\", \"_needRearmMags\", \"_magazineDisplayName\"];\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\n_dummy = _unit getVariable [QGVAR(dummy), objNull];\r\nif (isNull _dummy) exitwith {false};\r\n_magazineClass = _dummy getVariable QGVAR(magazineClass);\r\nif (isNil \"_magazineClass\") exitWith {false};\r\n\r\n_ammo = getText (configFile >> \"CfgMagazines\" >> _magazineClass >> \"ammo\");\r\n_tmpCal = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ace_caliber\");\r\n_cal = 8;\r\nif (_tmpCal > 0) then {\r\n    _cal = _tmpCal;\r\n} else {\r\n    _tmpCal = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(caliber));\r\n    if (_tmpCal > 0) then {\r\n        _cal = _tmpCal;\r\n    } else {\r\n        diag_log format [\"[ACE] ERROR: Undefined Ammo [%1 : %2]\", _ammo, inheritsFrom (configFile >> \"CfgAmmo\" >> _ammo)];\r\n        if (_ammo isKindOf \"BulletBase\") then {\r\n            _cal = 8;\r\n        } else {\r\n            _cal = 100;\r\n        };\r\n    };\r\n};\r\n_cal = round _cal;\r\n_idx = REARM_CALIBERS find _cal;\r\nif (_idx == -1) then {\r\n    _idx = 2;\r\n};\r\n\r\n// Get magazines that can be rearmed\r\n_needRearmMags = [_target, _magazineClass] call FUNC(getNeedRearmMagazines);\r\n_needRearmMags params [\"_needRearm\", \"_turretPath\", \"_cnt\"];\r\n\r\n// Exit if no magazines need rearming\r\nif (!_needRearm) exitWith {\r\n    diag_log format [\"[ACE] ERROR: Could not find turret for %1 in %2\", _magazineClass, typeOf _target];\r\n};\r\n\r\n//hint format [\"Magazine: %1\\nAmmo: %2\\nCaliber: %3\\nIndex: %4\\nTurretPath: %5\\nREARM_DURATION_REARM: %6\\nCount: %7\", _magazine, _ammo, _cal, _idx, _turretPath, (REARM_DURATION_REARM select _idx), (REARM_COUNT select _idx)];\r\n\r\n_magazineDisplayName =  getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\");\r\nif (_magazineDisplayName == \"\") then {\r\n    _magazineDisplayName = _magazineClass;\r\n    diag_log format [\"[ACE] ERROR: Magazine is missing display name [%1]\", _magazineClass];\r\n};\r\n\r\n[\r\n    (REARM_DURATION_REARM select _idx),\r\n    [_target, _unit, _turretPath, _cnt, _magazineClass, (REARM_COUNT select _idx)],\r\n    FUNC(rearmSuccess),\r\n    \"\",\r\n    format [localize LSTRING(RearmAction), getText(configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"displayName\"), _magazineDisplayName],\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_rearm_fnc_rearmEntireVehicle","file":"rearm/functions/fnc_rearmEntireVehicle.sqf","text":"/*\r\n * Author: GitHawk\r\n * Starts progress bar for rearming an entire vehicle.\r\n *\r\n * Arguments:\r\n * 0: Ammo Truck <OBJECT>\r\n * 1: Unit <OBJECT>\r\n * 2: Vehicle to be armed <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ammo_truck, player, tank] call ace_rearm_fnc_rearmEntireVehicle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nparams [[\"_target\", objNull, [objNull]], [\"_unit\", objNull, [objNull]], [\"_vehicle\", objNull, [objNull]]]; // _target is for future possible finite ammo, _unit placeholder\r\n\r\n[\r\n    10,\r\n    _vehicle,\r\n    FUNC(rearmEntireVehicleSuccess),\r\n    \"\",\r\n    format [localize LSTRING(BasicRearmAction), getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")],\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_rearm_fnc_rearmEntireVehicleSuccess","file":"rearm/functions/fnc_rearmEntireVehicleSuccess.sqf","text":"/*\r\n * Author: GitHawk\r\n * Rearm an entire vehicle.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [tank] call ace_rearm_fnc_rearmEntireVehicleSuccess\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_turretPath\", \"_magazines\", \"_magazine\", \"_currentMagazines\", \"_maxMagazines\", \"_maxRounds\", \"_currentRounds\"];\r\nparams [[\"_vehicle\", objNull, [objNull]]];\r\nTRACE_1(\"params\",_vehicle);\r\n\r\n\r\n//ToDo: Cleanup with CBA_fnc_ownerEvent in CBA 2.4.2\r\n{\r\n    [QGVAR(rearmEntireVehicleSuccessLocalEH), [_vehicle, _x]] call CBA_fnc_globalEvent;\r\n} forEach REARM_TURRET_PATHS;\r\n\r\n\r\n/* \r\nif (isServer) then {\r\n    {\r\n        _turretOwnerID = _vehicle turretOwner _x;\r\n        if (_turretOwnerID == 0) then {\r\n            //wtf is _truck from???\r\n            [QGVAR(rearmEntireVehicleSuccessLocalEH), [_truck, _vehicle, _x], _truck] call CBA_fnc_targetEvent;\r\n        } else {\r\n            [QGVAR(rearmEntireVehicleSuccessLocalEH), [_truck, _vehicle, _x], _turretOwnerID] call CBA_fnc_targetEvent;\r\n        };\r\n    } count REARM_TURRET_PATHS;\r\n} else {\r\n    [QGVAR(rearmEntireVehicleSuccessLocalEH), _this] call CBA_fnc_serverEvent;\r\n};\r\n*/\r\n"},{"name":"ace_rearm_fnc_rearmEntireVehicleSuccessLocal","file":"rearm/functions/fnc_rearmEntireVehicleSuccessLocal.sqf","text":"/*\r\n * Author: GitHawk\r\n * Rearm an entire turret locally.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: TurretPath <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [tank, [0]] call ace_rearm_fnc_rearmEntireVehicleSuccessLocal\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_magazines\", \"_magazine\", \"_currentMagazines\", \"_maxMagazines\", \"_maxRounds\", \"_currentRounds\"];\r\nparams [[\"_vehicle\", objNull, [objNull]], [\"_turretPath\", [], [[]]]];\r\nTRACE_2(\"params\",_vehicle,_turretPath);\r\n\r\n//ToDo: Cleanup with CBA_fnc_ownerEvent in CBA 2.4.2\r\nif (!(_vehicle turretLocal _turretPath)) exitWith {TRACE_1(\"not local turret\",_turretPath);};\r\n\r\n_magazines = [_vehicle, _turretPath] call FUNC(getConfigMagazines);\r\n{\r\n    _magazine = _x;\r\n    _currentMagazines = { _x == _magazine } count (_vehicle magazinesTurret _turretPath);\r\n    _maxMagazines = [_vehicle, _turretPath, _magazine] call FUNC(getMaxMagazines);\r\n    _maxRounds = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"count\");\r\n    _currentRounds = _vehicle magazineTurretAmmo [_magazine, _turretPath];\r\n\r\n    TRACE_7(\"Rearmed Turret\",_vehicle,_turretPath,_currentMagazines,_maxMagazines,_currentRounds,_maxRounds,_magazine);\r\n\r\n    if (_turretPath isEqualTo [-1] && _currentMagazines == 0) then {\r\n        // On driver, the empty magazine is still there, but is not returned by magazinesTurret\r\n        _currentMagazines =  _currentMagazines + 1;\r\n    };\r\n    if (_currentMagazines < _maxMagazines) then {\r\n        _vehicle setMagazineTurretAmmo [_magazine, _maxRounds, _turretPath];\r\n        for \"_idx\" from 1 to (_maxMagazines - _currentMagazines) do {\r\n            _vehicle addMagazineTurret [_magazine, _turretPath];\r\n        };\r\n    } else {\r\n        _vehicle setMagazineTurretAmmo [_magazine, _maxRounds, _turretPath];\r\n    };\r\n} foreach _magazines;\r\n"},{"name":"ace_rearm_fnc_rearmSuccess","file":"rearm/functions/fnc_rearmSuccess.sqf","text":"/*\r\n * Author: GitHawk\r\n * Rearms a vehicle.\r\n *\r\n * Arguments:\r\n * 0: Params <ARRAY>\r\n *   0: Target <OBJECT>\r\n *   1: Unit <OBJECT>\r\n *   2: Turret Path <ARRAY>\r\n *   3: Number of magazines <NUMBER>\r\n *   4: Magazine Classname <STRING>\r\n *   5: Number of rounds <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[vehicle, player, [-1], 2, \"5000Rnd_762x51_Belt\", 500]] call ace_rearm_fnc_rearmSuccess\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_dummy\", \"_weaponSelect\", \"_turretOwnerID\"];\r\nparams [[\"_args\", [objNull, objNull, [], 0, \"\", 0], [[]], [6]]];\r\n_args params [\"_target\", \"_unit\", \"_turretPath\", \"_numMagazines\", \"_magazineClass\", \"_numRounds\"];\r\nTRACE_6(\"params\",_target,_unit,_turretPath,_numMagazines,_magazineClass,_numRounds);\r\n\r\n//hint format [\"Target: %1\\nTurretPath: %2\\nNumMagazines: %3\\nMagazine: %4\\nNumRounds: %5\", _target, _turretPath, _numMagazines, _magazineClass, _numRounds];\r\n\r\nif (local _unit) then {\r\n    [_unit, true, true] call FUNC(dropAmmo);\r\n};\r\n\r\n//ToDo: Cleanup with CBA_fnc_ownerEvent in CBA 2.4.2\r\n[QGVAR(rearmSuccessLocalEH), _this] call CBA_fnc_globalEvent;\r\n\r\n/* \r\nif (isServer) then {\r\n    _turretOwnerID = _target turretOwner _turretPath;\r\n    if (_turretOwnerID == 0) then {\r\n        [QGVAR(rearmSuccessLocalEH), _this, _vehicle] call CBA_fnc_targetEvent;\r\n    } else {\r\n        [QGVAR(rearmSuccessLocalEH), _this, _turretOwnerID] call CBA_fnc_targetEvent;\r\n    };\r\n} else {\r\n    [QGVAR(rearmSuccessLocalEH), _this] call CBA_fnc_serverEvent;\r\n};\r\n */"},{"name":"ace_rearm_fnc_rearmSuccessLocal","file":"rearm/functions/fnc_rearmSuccessLocal.sqf","text":"/*\r\n * Author: GitHawk\r\n * Rearms a vehicle on the turret owner.\r\n *\r\n * Arguments:\r\n * 0: Params <ARRAY>\r\n *   0: Target <OBJECT>\r\n *   1: Unit <OBJECT>\r\n *   2: Turret Path <ARRAY>\r\n *   3: Number of magazines <NUMBER>\r\n *   4: Magazine Classname <STRING>\r\n *   5: Number of rounds <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[vehicle, player, [-1], 2, \"5000Rnd_762x51_Belt\", 500]] call ace_rearm_fnc_rearmSuccess\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_rounds\", \"_currentRounds\", \"_maxMagazines\", \"_currentMagazines\", \"_dummy\", \"_weaponSelect\"];\r\nparams [[\"_args\", [objNull, objNull, [], 0, \"\", 0], [[]], [6]]];\r\n_args params [\"_target\", \"_unit\", \"_turretPath\", \"_numMagazines\", \"_magazineClass\", \"_numRounds\"];\r\nTRACE_6(\"params\",_target,_unit,_turretPath,_numMagazines,_magazineClass,_numRounds);\r\n\r\n//ToDo: Cleanup with CBA_fnc_ownerEvent in CBA 2.4.2\r\nif (!(_target turretLocal _turretPath)) exitWith {TRACE_1(\"not local turret\",_turretPath);};\r\n\r\n//hint format [\"Target: %1\\nTurretPath: %2\\nNumMagazines: %3\\nMagazine: %4\\nNumRounds: %5\\nUnit: %6\", _target, _turretPath, _numMagazines, _magazineClass, _numRounds, _unit];\r\n\r\n_rounds = getNumber (configFile >> \"CfgMagazines\" >> _magazineClass >> \"count\");\r\n_currentRounds = 0;\r\n\r\n_maxMagazines = [_target, _turretPath, _magazineClass] call FUNC(getMaxMagazines);\r\nif (_maxMagazines == 1) then {\r\n    _currentMagazines = { _x == _magazineClass } count (_target magazinesTurret _turretPath);\r\n    if (_currentMagazines == 0 && {!(_turretPath isEqualTo [-1])}) then {\r\n        // Driver gun will always retain it's magazines\r\n        _target addMagazineTurret [_magazineClass, _turretPath];\r\n    };\r\n    if (GVAR(level) == 1) then {\r\n        // Fill magazine completely\r\n        _target setMagazineTurretAmmo [_magazineClass, _rounds, _turretPath];\r\n        [QEGVAR(common,displayTextStructured),\r\n        [\r\n            [LSTRING(Hint_RearmedTriple), _rounds,\r\n            getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\r\n            getText(configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"displayName\")], 3, _unit\r\n        ],\r\n        [_unit]] call CBA_fnc_targetEvent;\r\n    } else {\r\n        // Fill only at most _numRounds\r\n        _target setMagazineTurretAmmo [_magazineClass, ((_target magazineTurretAmmo [_magazineClass, _turretPath]) + _numRounds) min _rounds, _turretPath];\r\n        [QEGVAR(common,displayTextStructured),\r\n        [\r\n            [LSTRING(Hint_RearmedTriple), _numRounds,\r\n            getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\r\n            getText(configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"displayName\")], 3, _unit\r\n        ],\r\n        [_unit]] call CBA_fnc_targetEvent;\r\n    };\r\n} else {\r\n    for \"_idx\" from 1 to (_maxMagazines+1) do {\r\n        _currentRounds = _target magazineTurretAmmo [_magazineClass, _turretPath];\r\n        if (_currentRounds > 0 || {_idx == (_maxMagazines+1)}) exitWith {\r\n            if (_idx == (_maxMagazines+1) && {!(_turretPath isEqualTo [-1])}) then {\r\n                _target addMagazineTurret [_magazineClass, _turretPath];\r\n            };\r\n            if (GVAR(level) == 2) then {\r\n                //hint format [\"Target: %1\\nTurretPath: %2\\nNumMagazines: %3\\nMaxMagazines %4\\nMagazine: %5\\nNumRounds: %6\\nMagazine: %7\", _target, _turretPath, _numMagazines, _maxMagazines, _currentRounds, _numRounds, _magazineClass];\r\n                // Fill only at most _numRounds\r\n                if ((_currentRounds + _numRounds) > _rounds) then {\r\n                    _target setMagazineTurretAmmo [_magazineClass, _rounds, _turretPath];\r\n                    if (_numMagazines  < _maxMagazines) then {\r\n                        _target addMagazineTurret [_magazineClass, _turretPath];\r\n                        _target setMagazineTurretAmmo [_magazineClass, _currentRounds + _numRounds - _rounds, _turretPath];\r\n                    };\r\n                } else {\r\n                    _target setMagazineTurretAmmo [_magazineClass, _currentRounds + _numRounds, _turretPath];\r\n                };\r\n                [QEGVAR(common,displayTextStructured),\r\n                [\r\n                    [LSTRING(Hint_RearmedTriple), _numRounds,\r\n                    getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\r\n                    getText(configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"displayName\")], 3, _unit\r\n                ],\r\n                [_unit]] call CBA_fnc_targetEvent;\r\n            } else {\r\n                // Fill current magazine completely and fill next magazine partially\r\n                _target setMagazineTurretAmmo [_magazineClass, _rounds, _turretPath];\r\n                if (_numMagazines  < _maxMagazines) then {\r\n                    _target addMagazineTurret [_magazineClass, _turretPath];\r\n                    _target setMagazineTurretAmmo [_magazineClass, _currentRounds, _turretPath];\r\n                };\r\n                [QEGVAR(common,displayTextStructured),\r\n                [\r\n                    [LSTRING(Hint_RearmedTriple), _rounds,\r\n                    getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"),\r\n                    getText(configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"displayName\")], 3, _unit\r\n                ],\r\n                [_unit]] call CBA_fnc_targetEvent;\r\n            };\r\n        };\r\n        _target removeMagazineTurret [_magazineClass, _turretPath];\r\n        _numMagazines = _numMagazines - 1;\r\n    };\r\n};\r\n"},{"name":"ace_rearm_fnc_storeAmmo","file":"rearm/functions/fnc_storeAmmo.sqf","text":"/*\r\n * Author: GitHawk\r\n * Stores ammo in an ammo truck.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, dummy] call ace_rearm_fnc_storeAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dummy\";\r\nparams [[\"_target\", objNull, [objNull]], [\"_unit\", objNull, [objNull]]];\r\n\r\n_dummy = _unit getVariable [QGVAR(dummy), objNull];\r\nif (isNull _dummy) exitwith {};\r\n\r\n[\r\n    5,\r\n    _unit,\r\n    {params [\"_unit\"]; [_unit, true, true] call FUNC(dropAmmo)},\r\n    \"\",\r\n    format [localize LSTRING(StoreAmmoAction), getText(configFile >> \"CfgMagazines\" >> (_dummy getVariable QGVAR(magazineClass)) >> \"displayName\"), getText(configFile >> \"CfgVehicles\" >> (typeOf _target) >> \"displayName\")],\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_rearm_fnc_takeAmmo","file":"rearm/functions/fnc_takeAmmo.sqf","text":"/*\r\n * Author: GitHawk\r\n * Starts progress bar for picking up a specific kind of magazine from an ammo truck.\r\n *\r\n * Arguments:\r\n * 0: Ammo Truck <OBJECT>\r\n * 1: Unit <OBJECT>\r\n * 2: Params <ARRAY>\r\n *   0: Magazine Classname <STRING>\r\n *   1: Vehicle to be armed <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ammo_truck, player, [\"500Rnd_127x99_mag_Tracer_Red\", tank]] call ace_rearm_fnc_takeAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_ammo\", \"_tmpCal\", \"_cal\", \"_idx\"];\r\n\r\nparams [[\"_target\", objNull, [objNull]], [\"_unit\", objNull, [objNull]], [\"_args\", [\"\", objNull], [[]]]];\r\n_args params [\"_magazineClass\", \"_vehicle\"];\r\n\r\n_ammo = getText (configFile >> \"CfgMagazines\" >> _magazineClass >> \"ammo\");\r\n_tmpCal = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> \"ace_caliber\");\r\n_cal = 8;\r\nif (_tmpCal > 0) then {\r\n    _cal = _tmpCal;\r\n} else {\r\n    _tmpCal = getNumber (configFile >> \"CfgAmmo\" >> _ammo >> QGVAR(caliber));\r\n    if (_tmpCal > 0) then {\r\n        _cal = _tmpCal;\r\n    } else {\r\n        diag_log format [\"[ACE] ERROR: Undefined Ammo [%1 : %2]\", _ammo, inheritsFrom (configFile >> \"CfgAmmo\" >> _ammo)];\r\n        if (_ammo isKindOf \"BulletBase\") then {\r\n            _cal = 8;\r\n        } else {\r\n            _cal = 100;\r\n        };\r\n    };\r\n};\r\n_cal = round _cal;\r\n_idx = REARM_CALIBERS find _cal;\r\nif (_idx == -1 ) then {\r\n    _idx = 2;\r\n};\r\n\r\nREARM_HOLSTER_WEAPON\r\n\r\n[\r\n    (REARM_DURATION_TAKE select _idx),\r\n    [_unit, _magazineClass, _target],\r\n    FUNC(takeSuccess),\r\n    \"\",\r\n    format [localize LSTRING(TakeAction), getText(configFile >> \"CfgMagazines\" >> _magazineClass >> \"displayName\"), getText(configFile >> \"CfgVehicles\" >> (typeOf _vehicle) >> \"displayName\")],\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_rearm_fnc_takeSuccess","file":"rearm/functions/fnc_takeSuccess.sqf","text":"/*\r\n * Author: GitHawk\r\n * Takes a magazine from an ammo truck.\r\n *\r\n * Arguments:\r\n * 0: Params <ARRAY>\r\n *   0: Unit <OBJECT>\r\n *   1: Magazine Classname <STRING>\r\n *   2: Ammo Truck <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[player, \"500Rnd_127x99_mag_Tracer_Red\"]] call ace_rearm_fnc_takeSuccess\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_ammo\", \"_dummyName\", \"_dummy\", \"_actionID\"];\r\nparams [[\"_args\", [objNull, \"\", objNull], [[]]]];\r\n_args params [\"_unit\", \"_magazineClass\", \"_target\"]; // _target is for future possible finite ammo\r\n\r\n[_unit, \"forceWalk\", QGVAR(vehRearm), true] call EFUNC(common,statusEffect_set);\r\n_dummy = [_unit, _magazineClass] call FUNC(createDummy);\r\n[_dummy, _unit] call FUNC(pickUpAmmo);\r\n\r\n_actionID = _unit addAction [\r\n    format [\"<t color='#FF0000'>%1</t>\", localize ELSTRING(dragging,Drop)],\r\n    '(_this select 0) call FUNC(dropAmmo)',\r\n    nil,\r\n    20,\r\n    false,\r\n    true,\r\n    \"\",\r\n    '!isNull (_target getVariable [QGVAR(dummy), objNull])'\r\n];\r\n_unit setVariable [QGVAR(ReleaseActionID), _actionID];\r\n"}],"recoil":[{"name":"ace_recoil_fnc_camshake","file":"recoil/functions/fnc_camshake.sqf","text":"/*\r\n * Author: Orginal by Ryan Schultz, edited by KoffeinFlummi, commy2\r\n * Adds camera shake when firing. Called from the unified fired EH only for the local player.\r\n * From TMR: Small Arms\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [player, (currentWeapon player), (currentMuzzle player)] call ace_recoil_fnc_camShake;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\n#define BASE_POWER 0.40\r\n#define BASE_TIME 0.19\r\n#define BASE_FREQ 13\r\n#define RECOIL_COEF 40\r\n\r\nif (toLower _weapon in [\"throw\", \"put\"]) exitWith {};\r\n\r\nprivate _powerMod = ([0, -0.1, -0.1, 0, -0.2] select ([\"STAND\", \"CROUCH\", \"PRONE\", \"UNDEFINED\", \"\"] find stance _unit)) + ([0, -1, 0, -1] select ([\"INTERNAL\", \"EXTERNAL\", \"GUNNER\", \"GROUP\"] find cameraView));\r\n\r\n// to get camshake read kickback\r\nprivate _recoil = missionNamespace getVariable format [QGVAR(%1-%2), _weapon, _muzzle];\r\n\r\nif (isNil \"_recoil\") then {\r\n    private _config = configFile >> \"CfgWeapons\" >> _weapon;\r\n\r\n    if (_muzzle == _weapon) then {\r\n        _recoil = getText (_config >> \"recoil\")\r\n    } else {\r\n        _recoil = getText (_config >> _muzzle >> \"recoil\")\r\n    };\r\n\r\n    if (isClass (configFile >> \"CfgRecoils\" >> _recoil)) then {\r\n        _recoil = getArray (configFile >> \"CfgRecoils\" >> _recoil >> \"kickBack\");\r\n        if (count _recoil < 2) then {\r\n            _recoil = [0, 0];\r\n        };\r\n    } else {\r\n        _recoil = [0, 0];\r\n    };\r\n\r\n    TRACE_3(\"Caching Recoil config\",_weapon,_muzzle,_recoil);\r\n\r\n    // parse numbers\r\n    _recoil set [0, call compile format [\"%1\", _recoil select 0]];\r\n    _recoil set [1, call compile format [\"%1\", _recoil select 1]];\r\n\r\n    missionNamespace setVariable [format [QGVAR(%1-%2), _weapon, _muzzle], _recoil];\r\n};\r\n\r\nprivate _powerCoef = RECOIL_COEF * linearConversion [0, 1, random 1, _recoil select 0, _recoil select 1, false];\r\n\r\nif (isWeaponRested _unit) then {_powerMod = _powerMod - 0.07};\r\nif (isWeaponDeployed _unit) then {_powerMod = _powerMod - 0.11};\r\n\r\nprivate _camshake = [\r\n    _powerCoef * (BASE_POWER + _powerMod) max 0,\r\n    BASE_TIME,\r\n    BASE_FREQ\r\n];\r\n\r\nTRACE_4(\"addCamShake\",_recoil,_powerCoef,_powerMod,_camshake);\\\r\n\r\naddCamShake _camshake;\r\n"}],"refuel":[{"name":"ace_refuel_fnc_canCheckFuel","file":"refuel/functions/fnc_canCheckFuel.sqf","text":"/*\r\n * Author: Jonpas, GitHawk\r\n * Checks if unit can check fuel.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fuel Truck/Station <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Check Fuel <BOOL>\r\n *\r\n * Example:\r\n * [player, truck] call ace_refuel_fnc_canCheckFuel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\n!(isNull _unit ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit} ||\r\n    {!alive _target} ||\r\n    {(_target distance _unit) > REFUEL_ACTION_DISTANCE} ||\r\n    {(_target call FUNC(getFuel) == REFUEL_INFINITE_FUEL)})\r\n"},{"name":"ace_refuel_fnc_canConnectNozzle","file":"refuel/functions/fnc_canConnectNozzle.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can connect a fuel nozzle\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Connect Nozzle <BOOL>\r\n *\r\n * Example:\r\n * [player, tank] call ace_refuel_fnc_canConnectNozzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\r\nprivate _engine = false;\r\n\r\nif (_target isKindOf \"AllVehicles\") then {\r\n    _engine = isEngineOn _target;\r\n};\r\n\r\n!(isNull _nozzle ||\r\n    {_engine} ||\r\n    {(_target distance _unit) > REFUEL_ACTION_DISTANCE} ||\r\n    {!isNull (_target getVariable [QGVAR(nozzle), objNull])}) // TODO verify cant connect multiple fuel lines\r\n"},{"name":"ace_refuel_fnc_canDisconnect","file":"refuel/functions/fnc_canDisconnect.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can disconnect a fuel nozzle\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * Can disconnect <BOOL>\r\n *\r\n * Example:\r\n * [player, nozzle] call ace_refuel_fnc_canDisconnect\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n\r\nif (isNull _unit ||\r\n    {isNull _nozzle} ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit} ||\r\n    {(_nozzle distance _unit) > REFUEL_ACTION_DISTANCE}) exitWith {false};\r\n\r\nprivate _sink = _nozzle getVariable [QGVAR(sink), objNull];\r\n!((isNull _sink) || {_nozzle getVariable [QGVAR(isRefueling), false]})\r\n"},{"name":"ace_refuel_fnc_canReturnNozzle","file":"refuel/functions/fnc_canReturnNozzle.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can return a fuel nozzle\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fuel truck <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Return Nozzle <BOOL>\r\n *\r\n * Example:\r\n * [player, fuelTruck] call ace_refuel_fnc_canReturnNozzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\nprivate _nozzle = _unit getVariable QGVAR(nozzle);\r\n\r\n(_this call FUNC(canConnectNozzle)) && {_target == (_nozzle getVariable [QGVAR(source), objNull])}\r\n"},{"name":"ace_refuel_fnc_canTakeNozzle","file":"refuel/functions/fnc_canTakeNozzle.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can take a fuel nozzle\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fuel Station or Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * Can connect <BOOL>\r\n *\r\n * Example:\r\n * [player, nozzle] call ace_refuel_fnc_canTakeNozzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\nif (isNull _unit ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit} ||\r\n    {!alive _target} ||\r\n    {(_target distance _unit) > REFUEL_ACTION_DISTANCE}) exitWith {false};\r\n\r\n!(_target getVariable [QGVAR(isConnected), false]) && {!(_unit getVariable [QGVAR(isRefueling), false])}\r\n"},{"name":"ace_refuel_fnc_canTurnOff","file":"refuel/functions/fnc_canTurnOff.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can turn off a fuel nozzle\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * Can turn off <BOOL>\r\n *\r\n * Example:\r\n * [player, nozzle] call ace_refuel_fnc_canTurnOff\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n\r\nif (isNull _unit  ||\r\n    {isNull _nozzle} ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit} ||\r\n    {(_nozzle distance _unit) > REFUEL_ACTION_DISTANCE}) exitWith {false};\r\n\r\n(_nozzle getVariable [QGVAR(isRefueling), false])\r\n"},{"name":"ace_refuel_fnc_canTurnOn","file":"refuel/functions/fnc_canTurnOn.sqf","text":"/*\r\n * Author: GitHawk\r\n * Check if a unit can turn on a fuel nozzle\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * Can turn on <BOOL>\r\n *\r\n * Example:\r\n * [player, nozzle] call ace_refuel_fnc_canTurnOn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n\r\nif (isNull _unit  ||\r\n    {isNull _nozzle} ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit} ||\r\n    {(_nozzle distance _unit) > REFUEL_ACTION_DISTANCE}) exitWith {false};\r\n\r\n!(_nozzle getVariable [QGVAR(isRefueling), false]) &&\r\n    {[_nozzle getVariable QGVAR(source)] call FUNC(getFuel) != 0} &&\r\n    {!isNull (_nozzle getVariable [QGVAR(sink), objNull])} &&\r\n    {(fuel (_nozzle getVariable QGVAR(sink))) < 1} &&\r\n    {!(isEngineOn (_nozzle getVariable QGVAR(sink)))}\r\n"},{"name":"ace_refuel_fnc_checkFuel","file":"refuel/functions/fnc_checkFuel.sqf","text":"/*\r\n * Author: GitHawk\r\n * Get the remaining fuel amount\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fuel Truck <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, fuelTruck] call ace_refuel_fnc_checkFuel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\nprivate _fuel = [_target] call FUNC(getFuel);\r\n\r\n[\r\n    5,\r\n    [_unit, _target, _fuel],\r\n    {\r\n        params [\"_args\"];\r\n        _args params [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]], [\"_fuel\", 0, [0]]];\r\n        if (_fuel > 0 ) then {\r\n            [QEGVAR(common,displayTextStructured), [[LSTRING(Hint_RemainingFuel), _fuel], 2, _unit], _unit] call CBA_fnc_targetEvent;\r\n        } else {\r\n            [QEGVAR(common,displayTextStructured), [LSTRING(Hint_Empty), 2, _unit], _unit] call CBA_fnc_targetEvent;\r\n        };\r\n        true\r\n    },\r\n    {true},\r\n    localize LSTRING(CheckFuelAction),\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_refuel_fnc_connectNozzle","file":"refuel/functions/fnc_connectNozzle.sqf","text":"/*\r\n * Author: GitHawk et.al.\r\n * Connect a fuel nozzle.\r\n * With code from ace_attach\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, tank] call ace_refuel_fnc_connectNozzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define PLACE_WAITING -1\r\n#define PLACE_CANCEL 0\r\n#define PLACE_APPROVE 1\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\r\nif (isNull _nozzle) exitWith {};\r\n\r\nGVAR(placeAction) = PLACE_WAITING;\r\n\r\n[{[localize LSTRING(Connect_Action), \"\"] call EFUNC(interaction,showMouseHint)}, []] call CBA_fnc_execNextFrame;\r\n_unit setVariable [QGVAR(placeActionEH), [_unit, \"DefaultAction\", {true}, {GVAR(placeAction) = PLACE_APPROVE;}] call EFUNC(common,AddActionEventHandler)];\r\n\r\nprivate _actionID = _unit addAction [format [\"<t color='#FF0000'>%1</t>\", localize LSTRING(Cancel)], {GVAR(placeAction) = PLACE_CANCEL;}];\r\n\r\n[{\r\n    params [\"_args\",\"_pfID\"];\r\n    _args params [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_actionID\", -1, [0]]];\r\n\r\n    private _virtualPosASL = (eyePos _unit) vectorAdd (positionCameraToWorld [0,0,0.6]) vectorDiff (positionCameraToWorld [0,0,0]);\r\n    if (cameraView == \"EXTERNAL\") then {\r\n        _virtualPosASL = _virtualPosASL vectorAdd ((positionCameraToWorld [0.3,0,0]) vectorDiff (positionCameraToWorld [0,0,0]));\r\n    };\r\n    private _virtualPos = _virtualPosASL call EFUNC(common,ASLToPosition);\r\n    private _lineInterection = lineIntersects [eyePos ace_player, _virtualPosASL, ace_player];\r\n\r\n    //Don't allow placing in a bad position:\r\n    if (_lineInterection && {GVAR(placeAction) == PLACE_APPROVE}) then {GVAR(placeAction) = PLACE_WAITING;};\r\n\r\n    if ((GVAR(placeAction) != PLACE_WAITING) ||\r\n            {_unit != ace_player} ||\r\n            {!([_unit, _target, []] call EFUNC(common,canInteractWith))}) then {\r\n\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n        [] call EFUNC(interaction,hideMouseHint);\r\n        [_unit, \"DefaultAction\", (_unit getVariable [QGVAR(placeActionEH), -1])] call EFUNC(common,removeActionEventHandler);\r\n        _unit removeAction _actionID;\r\n\r\n        if (GVAR(placeAction) == PLACE_APPROVE) then {\r\n            [_unit, _target, _virtualPos, _nozzle] call FUNC(ConnectNozzleAction);\r\n        };\r\n    }; // TODO add model like in attach/functions/fnc_attach\r\n}, 0, [_unit, _target, _nozzle, _actionID] ] call cba_fnc_addPerFrameHandler;\r\n"},{"name":"ace_refuel_fnc_connectNozzleAction","file":"refuel/functions/fnc_connectNozzleAction.sqf","text":"/*\r\n * Author: GitHawk et.al.\r\n * Calculates a connection for refueling.\r\n * With code from ace_attach\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n * 2: Visual Position <ARRAY>\r\n * 3: Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, tank, [0,0,0], nozzle] call ace_refuel_fnc_connectNozzleAction\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\nprivate [\"_closeInDistance\", \"_endPosTestOffset\"];\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]], [\"_startingPosition\", [0,0,0], [[]], 3], [\"_nozzle\", objNull, [objNull]]];\r\nprivate _startingOffset = _target worldToModel _startingPosition;\r\n\r\nprivate _startDistanceFromCenter = vectorMagnitude _startingOffset;\r\nprivate _closeInUnitVector = vectorNormalized (_startingOffset vectorFromTo [0,0,0]);\r\n\r\nprivate _closeInMax = _startDistanceFromCenter;\r\nprivate _closeInMin = 0;\r\n\r\nwhile {(_closeInMax - _closeInMin) > 0.01} do {\r\n    _closeInDistance = (_closeInMax + _closeInMin) / 2;\r\n    _endPosTestOffset = _startingOffset vectorAdd (_closeInUnitVector vectorMultiply _closeInDistance);\r\n    _endPosTestOffset set [2, (_startingOffset select 2)];\r\n    private _endPosTest = _target modelToWorldVisual _endPosTestOffset;\r\n\r\n    private _doesIntersect = false;\r\n    {\r\n        if (_doesIntersect) exitWith {};\r\n        private _startingPosShifted = _startingPosition vectorAdd _x;\r\n        _startASL = if (surfaceIsWater _startingPosShifted) then {_startingPosShifted} else {ATLtoASL _startingPosShifted};\r\n        {\r\n            _endPosShifted = _endPosTest vectorAdd _x;\r\n            private _endASL = if (surfaceIsWater _startingPosShifted) then {_endPosShifted} else {ATLtoASL _endPosShifted};\r\n\r\n            //Uncomment to see the lazor show, and see how the scanning works:\r\n            // drawLine3D [_startingPosShifted, _endPosShifted, [1,0,0,1]];\r\n            if (_target in lineIntersectsWith [_startASL, _endASL, _unit]) exitWith {_doesIntersect = true};\r\n        } forEach [[0,0,0.045], [0,0,-0.045], [0,0.045,0], [0,-0.045,0], [0.045,0,0], [-0.045,0,0]];\r\n    } forEach [[0,0,0], [0,0,0.05], [0,0,-0.05]];\r\n\r\n    if (_doesIntersect) then {\r\n        _closeInMax = _closeInDistance;\r\n    } else {\r\n        _closeInMin = _closeInDistance;\r\n    };\r\n};\r\n\r\n_closeInDistance = (_closeInMax + _closeInMin) / 2;\r\n\r\n//Checks (too close to center or can't attach)\r\nif ((_startDistanceFromCenter - _closeInDistance) < 0.1) exitWith {\r\n    TRACE_2(\"no valid spot found\",_closeInDistance,_startDistanceFromCenter);\r\n    [localize LSTRING(Failed)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n//Move it out slightly, for visibility sake (better to look a little funny than be embedded//sunk in the hull and be useless)\r\n_closeInDistance = (_closeInDistance - 0.05);\r\n\r\n_endPosTestOffset = _startingOffset vectorAdd (_closeInUnitVector vectorMultiply _closeInDistance);\r\n_endPosTestOffset set [2, (_startingOffset select 2)];\r\n\r\n[\r\n    2,\r\n    [_unit, _nozzle, _target, _endPosTestOffset],\r\n    {\r\n        params [\"_args\"];\r\n        _args params [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_target\", objNull, [objNull]], [\"_endPosTestOffset\", [0,0,0], [[]], 3]];\r\n        _unit setVariable [QGVAR(nozzle), nil, true];\r\n        _unit setVariable [QGVAR(isRefueling), false];\r\n        [_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set);\r\n        REFUEL_UNHOLSTER_WEAPON\r\n        private _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\r\n        if (_actionID != -1) then {\r\n            _unit removeAction _actionID;\r\n            _unit setVariable [QGVAR(ReleaseActionID), nil];\r\n        };\r\n\r\n        detach _nozzle;\r\n        _nozzle attachTo [_target, _endPosTestOffset];\r\n        _endPosTestOffset params [\"_x\", \"_y\"];\r\n        private _bb = boundingBoxReal _target;\r\n        _bb params [\"_ll\", \"_rr\"];\r\n        _ll set [2, 0];\r\n        _rr set [2, 0];\r\n        _ll params [\"_x1\", \"_y1\"];\r\n        _rr params [\"_x2\", \"_y2\"];\r\n        private _c1 = _ll vectorCos _endPosTestOffset;\r\n        private _c2 = _ll vectorCos [_x1, _y2, 0];\r\n        private _cn = (_ll vectorCrossProduct [0, 0, 1]) vectorCos _endPosTestOffset;\r\n        private _dirAndUp = [[1, 0, 0],[0, 0, 1]];\r\n        if (_c1 > _c2 && (_cn > 0)) then {\r\n            _dirAndUp = [[1, 0, 0.8],[0, 0, 1]];\r\n        } else {\r\n            _c1 = [_x1, _y2, 0] vectorCos _endPosTestOffset;\r\n            _c2 = [_x1, _y2, 0] vectorCos _rr;\r\n            _cn = ([_x1, _y2, 0] vectorCrossProduct [0, 0, 1]) vectorCos _endPosTestOffset;\r\n            if (_c1 > _c2 && (_cn > 0)) then {\r\n                _dirAndUp = [[0, -1, 0.8],[0, 0, 1]];\r\n            } else {\r\n                _c1 = _rr vectorCos _endPosTestOffset;\r\n                _c2 = _rr vectorCos [_x2, _y1, 0];\r\n                _cn = (_rr vectorCrossProduct [0, 0, 1]) vectorCos _endPosTestOffset;\r\n                if (_c1 > _c2 && (_cn > 0)) then {\r\n                    _dirAndUp = [[-1, 0, 0.8],[0, 0, 1]];\r\n                } else {\r\n                    _dirAndUp = [[0, 1, 0.8],[0, 0, 1]];\r\n                };\r\n            };\r\n        };\r\n        [QEGVAR(common,setVectorDirAndUp), [_nozzle, _dirAndUp], _nozzle] call CBA_fnc_targetEvent;\r\n        _nozzle setVariable [QGVAR(sink), _target, true];\r\n        _nozzle setVariable [QGVAR(isConnected), true, true];\r\n        _target setVariable [QGVAR(nozzle), _nozzle, true];\r\n\r\n        _source = _nozzle getVariable QGVAR(source);\r\n        private _fuel = [_source] call FUNC(getFuel);\r\n        if (_fuel == REFUEL_INFINITE_FUEL) then {\r\n            _source setVariable [QGVAR(fuelCounter), 0, true];\r\n        } else {\r\n            _source setVariable [QGVAR(fuelCounter), _fuel, true];\r\n        };\r\n\r\n        [_unit, _target, _nozzle, _endPosTestOffset] call FUNC(refuel);\r\n    },\r\n    \"\",\r\n    localize LSTRING(ConnectAction),\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_refuel_fnc_disconnect","file":"refuel/functions/fnc_disconnect.sqf","text":"/*\r\n * Author: GitHawk\r\n * Disconnect a fuel nozzle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, nozzle] call ace_refuel_fnc_disconnect\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n\r\nprivate _sink = _nozzle getVariable [QGVAR(sink), objNull];\r\nif (isNull _sink) exitWith {};\r\n\r\n_sink setVariable [QGVAR(nozzle), objNull, true];\r\n_nozzle setVariable [QGVAR(sink), objNull, true];\r\n_nozzle setVariable [QGVAR(isConnected), false, true];\r\n[objNull, _nozzle, true] call FUNC(dropNozzle);\r\n\r\n[_unit, objNull, _nozzle] call FUNC(takeNozzle);\r\n"},{"name":"ace_refuel_fnc_dropNozzle","file":"refuel/functions/fnc_dropNozzle.sqf","text":"/*\r\n * Author: GitHawk\r\n * Detaches the fuel nozzle, drops it and removes player variables.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT> (optional)\r\n * 1: Nozzle <OBJECT>\r\n * 2: Disconnect Only <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player,  nozzle, false] call ace_refuel_fnc_dropNozzle\r\n * [objNull, nozzle, false] call ace_refuel_fnc_dropNozzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_disconnectOnly\", false, [false]]];\r\n\r\ndetach _nozzle;\r\n_nozzle setVariable [QGVAR(isRefueling), false, true];\r\n\r\nif (_disconnectOnly) exitWith {};\r\n_nozzle setVelocity [0, 0, 0];\r\n_nozzle setPosATL [(getPosATL _nozzle) select 0, (getPosATL _nozzle) select 1, 0.05];\r\n\r\nif (isNull _unit) exitWith {};\r\n_unit setVariable [QGVAR(isRefueling), false, true];\r\n_unit setVariable [QGVAR(nozzle), objNull, true];\r\n"},{"name":"ace_refuel_fnc_getFuel","file":"refuel/functions/fnc_getFuel.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Get the remaining fuel amount.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Fuel left (in liters) <NUMBER>\r\n *\r\n * Example:\r\n * [fuelTruck] call ace_refuel_fnc_getFuel\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]]];\r\n\r\nif (isNull _target) exitWith {0};\r\n\r\nprivate _fuel = _target getVariable QGVAR(currentFuelCargo);\r\n\r\nif (isNil \"_fuel\") then {\r\n    _fuel = getNumber (configFile >> \"CfgVehicles\" >> typeOf _target >> QGVAR(fuelCargo));\r\n    _target setVariable [QGVAR(currentFuelCargo), _fuel, true];\r\n};\r\n\r\n_fuel\r\n"},{"name":"ace_refuel_fnc_handleDisconnect","file":"refuel/functions/fnc_handleDisconnect.sqf","text":"/*\r\n * Author: GitHawk\r\n * Cleans up refuel\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_refuel_fnc_handleDisconnect\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_disconnectedPlayer\", objNull, [objNull]]];\r\n\r\nif (isNull _disconnectedPlayer) exitWith {};\r\n\r\nprivate _nozzle = _disconnectedPlayer getVariable [QGVAR(nozzle), objNull];\r\n\r\nif (isNull _nozzle) exitWith {};\r\n\r\n[_disconnectedPlayer, _nozzle] call FUNC(dropNozzle);\r\n"},{"name":"ace_refuel_fnc_handleKilled","file":"refuel/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Handles medical on set dead event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_refuel_fnc_handleKilled\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]]];\r\n\r\nif (!local _unit) exitWith {};\r\n\r\n_unit setVariable [QGVAR(selectedWeaponOnRefuel), nil];\r\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\r\nif !(isNull _nozzle) then {\r\n    [_unit, _nozzle] call FUNC(dropNozzle);\r\n};\r\n"},{"name":"ace_refuel_fnc_handleUnconscious","file":"refuel/functions/fnc_handleUnconscious.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Handles medical on unconscious event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Is Unconscious <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, true] call ace_refuel_fnc_handleUnconscious\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_isUnconscious\", false, [false]]];\r\n\r\nif (!local _unit || {!_isUnconscious}) exitWith {};\r\n\r\n[_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set);\r\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\r\nif !(isNull _nozzle) then {\r\n    [_unit, _nozzle] call FUNC(dropNozzle);\r\n};\r\n"},{"name":"ace_refuel_fnc_makeJerryCan","file":"refuel/functions/fnc_makeJerryCan.sqf","text":"/*\r\n * Author: GitHawk\r\n * Makes an object into a jerry can.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n * 1: Fuel amount (in liters) <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [can] call ace_refuel_fnc_makeJerryCan\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]], [\"_fuelAmount\", 20, [0]]];\r\n\r\nif (isNull _target ||\r\n    {_target isKindOf \"AllVehicles\"} ||\r\n    {_target getVariable [QGVAR(jerryCan), false]}) exitWith {};\r\n\r\n[_target, _fuelAmount] call FUNC(setFuel);\r\n_target setVariable [QGVAR(jerryCan), true, true];\r\n_target setVariable [QGVAR(source), _target, true];\r\n\r\n// Main Action\r\nprivate _action = [QGVAR(Refuel),\r\n    localize LSTRING(Refuel),\r\n    QPATHTOF(ui\\icon_refuel_interact.paa),\r\n    {},\r\n    {true},\r\n    {},\r\n    [],\r\n    [0, 0, 0],\r\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\r\n[_target, 0, [], _action] call EFUNC(interact_menu,addActionToObject);\r\n\r\n// Add pickup\r\n_action = [QGVAR(PickUpNozzle),\r\n    localize LSTRING(TakeNozzle),\r\n    QPATHTOF(ui\\icon_refuel_interact.paa),\r\n    {[_player, objNull, _target] call FUNC(TakeNozzle)},\r\n    {[_player, _target] call FUNC(canTakeNozzle)},\r\n    {},\r\n    [],\r\n    [0, 0, 0],\r\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\r\n[_target, 0, [QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\r\n\r\n// Add turnOn\r\n_action = [QGVAR(TurnOn),\r\n    localize LSTRING(TurnOn),\r\n    QPATHTOF(ui\\icon_refuel_interact.paa),\r\n    {[_player, _target] call FUNC(turnOn)},\r\n    {[_player, _target] call FUNC(canTurnOn)},\r\n    {},\r\n    [],\r\n    [0, 0, 0],\r\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\r\n[_target, 0, [QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\r\n\r\n// Add turnOff\r\n_action = [QGVAR(TurnOff),\r\n    localize LSTRING(TurnOff),\r\n    QPATHTOF(ui\\icon_refuel_interact.paa),\r\n    {[_player, _target] call FUNC(turnOff)},\r\n    {[_player, _target] call FUNC(canTurnOff)},\r\n    {},\r\n    [],\r\n    [0, 0, 0],\r\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\r\n[_target, 0, [QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\r\n\r\n// Add disconnect\r\n_action = [QGVAR(Disconnect),\r\n    localize LSTRING(Disconnect),\r\n    QPATHTOF(ui\\icon_refuel_interact.paa),\r\n    {[_player, _target] call FUNC(disconnect)},\r\n    {[_player, _target] call FUNC(canDisconnect)},\r\n    {},\r\n    [],\r\n    [0, 0, 0],\r\n    REFUEL_ACTION_DISTANCE] call EFUNC(interact_menu,createAction);\r\n[_target, 0, [QGVAR(Refuel)], _action] call EFUNC(interact_menu,addActionToObject);\r\n"},{"name":"ace_refuel_fnc_moduleRefuelSettings","file":"refuel/functions/fnc_moduleRefuelSettings.sqf","text":"/*\r\n * Author: GitHawk\r\n * Module for adjusting the refuel settings.\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"\", [\"_activated\", false, [false]]];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(rate), \"rate\"] call EFUNC(common,readSettingFromModule);\r\n\r\ndiag_log text format [\"[ACE]: Refuel Module Initialized with flow rate: %1\", GVAR(rate)];\r\n"},{"name":"ace_refuel_fnc_readFuelCounter","file":"refuel/functions/fnc_readFuelCounter.sqf","text":"/*\r\n * Author: GitHawk\r\n * Reads the fuel counter.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fuel Truck <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, fuelTruck] call ace_refuel_fnc_readFuelCounter\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\n[\r\n    2,\r\n    [_unit, _target],\r\n    {\r\n        params [\"_args\"];\r\n        _args params [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\n        private _currentFuel = [_target] call FUNC(getFuel);\r\n        if (_currentFuel == REFUEL_INFINITE_FUEL) then {\r\n            private _fuelCounter = 0.01 * round (100 * (_target getVariable [QGVAR(fuelCounter), 0]));\r\n            [[LSTRING(Hint_FuelCounter), _fuelCounter], 1.5, _unit] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            private _fuelCounter = 0.01 * round (100 * ((_target getVariable [QGVAR(fuelCounter), _currentFuel]) - _currentFuel));\r\n            [[LSTRING(Hint_FuelCounter), _fuelCounter], 1.5, _unit] call EFUNC(common,displayTextStructured);\r\n        };\r\n    },\r\n    \"\",\r\n    localize LSTRING(CheckFuelCounterAction),\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_refuel_fnc_refuel","file":"refuel/functions/fnc_refuel.sqf","text":"/*\r\n * Author: GitHawk\r\n * Refuels the vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n * 2: Nozzle <OBJECT>\r\n * 3: Connection Point <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n#define PFH_STEPSIZE 1\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_connectToPoint\", [0,0,0], [[]], 3]];\r\n\r\nprivate _rate =  getNumber (configFile >> \"CfgVehicles\" >> (typeOf _target) >> QGVAR(flowRate)) * GVAR(rate) * PFH_STEPSIZE;\r\nprivate _maxFuel = getNumber (configFile >> \"CfgVehicles\" >> (typeOf _target) >> QGVAR(fuelCapacity));\r\n\r\n[{\r\n    params [\"_args\", \"_pfID\"];\r\n    _args params [[\"_source\", objNull, [objNull]], [\"_sink\", objNull, [objNull]], [\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_rate\", 1, [0]], [\"_startFuel\", 0, [0]], [\"_maxFuel\", 0, [0]], [\"_connectFromPoint\", [0,0,0], [[]], 3], [\"_connectToPoint\", [0,0,0], [[]], 3]];\r\n\r\n    if !(_nozzle getVariable [QGVAR(isConnected), false]) exitWith {\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    if (!alive _source || {!alive _sink}) exitWith {\r\n        [objNull, _nozzle] call FUNC(dropNozzle);\r\n        _nozzle setVariable [QGVAR(isConnected), false, true];\r\n        _nozzle setVariable [QGVAR(sink), objNull, true];\r\n        _sink setVariable [QGVAR(nozzle), objNull, true];\r\n        [_pfID] call cba_fnc_removePerFrameHandler;\r\n    };\r\n    private _tooFar = ((_sink modelToWorld _connectToPoint) distance (_source modelToWorld _connectFromPoint)) > (REFUEL_HOSE_LENGTH - 2);\r\n    if (_tooFar && {!(_nozzle getVariable [QGVAR(jerryCan), false])}) exitWith {\r\n        [LSTRING(Hint_TooFar), 2, _unit] call EFUNC(common,displayTextStructured);\r\n\r\n        [objNull, _nozzle] call FUNC(dropNozzle);\r\n        _nozzle setVariable [QGVAR(isConnected), false, true];\r\n        _nozzle setVariable [QGVAR(sink), objNull, true];\r\n        _sink setVariable [QGVAR(nozzle), objNull, true];\r\n        [_pfID] call cba_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    private _finished = false;\r\n    private _fueling = _nozzle getVariable [QGVAR(isRefueling), false];\r\n    if (_fueling) then {\r\n        if (isEngineOn _sink) exitWith {\r\n            _nozzle setVariable [QGVAR(isRefueling), false, true];\r\n        };\r\n        private _fuelInSource = [_source] call FUNC(getFuel);\r\n        if (_fuelInSource == 0) exitWith {\r\n            [LSTRING(Hint_SourceEmpty), 2, _unit] call EFUNC(common,displayTextStructured);\r\n            _nozzle setVariable [QGVAR(isRefueling), false, true];\r\n        };\r\n        if !(_fuelInSource == REFUEL_INFINITE_FUEL) then {\r\n            _fuelInSource = _fuelInSource - _rate;\r\n        } else {\r\n            _source setVariable [QGVAR(fuelCounter), (_source getVariable [QGVAR(fuelCounter), 0]) + _rate, true];\r\n        };\r\n        if (_fuelInSource < 0 && {_fuelInSource > REFUEL_INFINITE_FUEL}) then {\r\n            _fuelInSource = 0;\r\n            _finished = true;\r\n            [LSTRING(Hint_SourceEmpty), 2, _unit] call EFUNC(common,displayTextStructured);\r\n        };\r\n\r\n        private _fuelInSink = (_unit getVariable [QGVAR(tempFuel), _startFuel])  + ( _rate / _maxFuel);\r\n        if (_fuelInSink > 1) then {\r\n            _fuelInSink = 1;\r\n            _finished = true;\r\n            [LSTRING(Hint_Completed), 2, _unit] call EFUNC(common,displayTextStructured);\r\n        };\r\n        _unit setVariable [QGVAR(tempFuel), _fuelInSink];\r\n\r\n        [QEGVAR(common,setFuel), [_sink, _fuelInSink], _sink] call CBA_fnc_targetEvent;\r\n        [_source, _fuelInSource] call FUNC(setFuel);\r\n    } else {\r\n        _unit setVariable [QGVAR(tempFuel), fuel _sink];\r\n    };\r\n\r\n    if (_finished) exitWith {\r\n        _nozzle setVariable [QGVAR(isRefueling), false, true];\r\n    };\r\n},\r\nPFH_STEPSIZE,\r\n[_nozzle getVariable QGVAR(source),\r\n    _target,\r\n    _unit,\r\n    _nozzle,\r\n    _rate,\r\n    fuel _target,\r\n    _maxFuel,\r\n    _nozzle getVariable [QGVAR(attachPos), [0,0,0]],\r\n    _connectToPoint]\r\n] call cba_fnc_addPerFrameHandler;\r\n"},{"name":"ace_refuel_fnc_reset","file":"refuel/functions/fnc_reset.sqf","text":"/*\r\n * Author: GitHawk\r\n * Resets a fuel vehicle in case is got bugged\r\n *\r\n * Arguments:\r\n * 0: Fuel truck <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [truck] call ace_refuel_fnc_reset\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]]];\r\n\r\n[_target, \"blockEngine\", \"ACE_Refuel\", false] call EFUNC(common,statusEffect_set);\r\n_target setVariable [QGVAR(isConnected), false, true];\r\n\r\nprivate _nozzle = _target getVariable [QGVAR(ownedNozzle), nil];\r\nif !(isNil \"_nozzle\") then {\r\n    private _nozzleTarget = _nozzle getVariable [QGVAR(sink), nil];\r\n    if !(isNil \"_nozzleTarget\") then {\r\n        _nozzleTarget setVariable [QGVAR(nozzle), nil, true];\r\n    };\r\n\r\n    private _rope = _nozzle getVariable [QGVAR(rope), objNull];\r\n    if !(isNull _rope) then {\r\n        ropeDestroy _rope;\r\n    };\r\n\r\n    {\r\n        [QGVAR(resetLocal), [_x, _nozzle], _x] call CBA_fnc_targetEvent;\r\n    } count allPlayers;\r\n    deleteVehicle _nozzle;\r\n};\r\n_target setVariable [QGVAR(ownedNozzle), nil, true];\r\n"},{"name":"ace_refuel_fnc_resetLocal","file":"refuel/functions/fnc_resetLocal.sqf","text":"/*\r\n * Author: GitHawk\r\n * Resets a player\r\n *\r\n * Arguments:\r\n * 0: Fuel nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [nozzle] call ace_refuel_fnc_resetLocal\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n\r\nif (isNull _unit  ||\r\n    {isNull _nozzle} ||\r\n    {!(_unit isKindOf \"CAManBase\")} ||\r\n    {!local _unit}) exitWith {};\r\n\r\nprivate _attachedNozzle = _unit getVariable [QGVAR(nozzle), nil];\r\nif (isNil \"_attachedNozzle\") exitWith {};\r\n\r\nif (_nozzle != _attachedNozzle) exitWith {};\r\n\r\nprivate _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\r\nif (_actionID != -1) then {\r\n    _unit removeAction _actionID;\r\n    _unit setVariable [QGVAR(isRefueling), false, true];\r\n    _unit setVariable [QGVAR(ReleaseActionID), nil];\r\n    _unit setVariable [QGVAR(nozzle), nil, true];\r\n};\r\n"},{"name":"ace_refuel_fnc_returnNozzle","file":"refuel/functions/fnc_returnNozzle.sqf","text":"/*\r\n * Author: GitHawk, Jonpas\r\n * Returns the nozzle back to source vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fuel Truck <OBJECT>\r\n *\r\n * Return Value:\r\n * Returned Nozzle <BOOL>\r\n *\r\n * Example:\r\n * [player, fuelTruck] call ace_refuel_fnc_returnNozzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n\r\nprivate _nozzle = _unit getVariable [QGVAR(nozzle), objNull];\r\nprivate _source = _nozzle getVariable QGVAR(source);\r\n\r\nif (isNull _nozzle || {_source != _target}) exitWith {false};\r\n\r\n[\r\n    2,\r\n    [_unit, _nozzle, _target],\r\n    {\r\n        params [\"_args\"];\r\n        _args params [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]], [\"_target\", objNull, [objNull]]];\r\n        _unit setVariable [QGVAR(nozzle), nil, true];\r\n        detach _nozzle;\r\n        [_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set);\r\n        REFUEL_UNHOLSTER_WEAPON\r\n        _unit setVariable [QGVAR(isRefueling), false];\r\n        private _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\r\n        if (_actionID != -1) then {\r\n            _unit removeAction _actionID;\r\n            _unit setVariable [QGVAR(ReleaseActionID), nil];\r\n        };\r\n\r\n        _target setVariable [QGVAR(isConnected), false, true];\r\n        _target setVariable [QGVAR(ownedNozzle), nil, true];\r\n        private _rope = _nozzle getVariable [QGVAR(rope), objNull];\r\n        if !(isNull _rope) then {\r\n            ropeDestroy _rope;\r\n        };\r\n        deleteVehicle _nozzle;\r\n\r\n        [_target, \"blockEngine\", \"ACE_Refuel\", false] call EFUNC(common,statusEffect_set);\r\n    },\r\n    \"\",\r\n    localize LSTRING(ReturnAction),\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n\r\ntrue\r\n"},{"name":"ace_refuel_fnc_setFuel","file":"refuel/functions/fnc_setFuel.sqf","text":"/*\r\n * Author: GitHawk\r\n * Set the remaining fuel amount.\r\n *\r\n * Arguments:\r\n * 0: Fuel Truck <OBJECT>\r\n * 1: Amount (in liters)<NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [fuelTruck, 42] call ace_refuel_fnc_setFuel\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_target\", objNull, [objNull]], [\"_fuel\", nil, [0]]];\r\n\r\nif (isNull _target ||\r\n    {isNil \"_fuel\"}) exitWith {};\r\n\r\n_target setVariable [QGVAR(currentFuelCargo), _fuel, true];\r\n"},{"name":"ace_refuel_fnc_takeNozzle","file":"refuel/functions/fnc_takeNozzle.sqf","text":"/*\r\n * Author: GitHawk\r\n * Take a fuel nozzle either from a fuel truck/station or from the ground.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Fuel Truck <OBJECT>\r\n * 2: Nozzle <OBJECT> (optional)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, fuelTruck] call ace_refuel_fnc_takeNozzle\r\n * [player, objNull, nozzle] call ace_refuel_fnc_takeNozzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\r\n    [\"_unit\", objNull, [objNull]],\r\n    [\"_target\", objNull, [objNull]],\r\n    [\"_nozzle\", objNull, [objNull]]\r\n];\r\n\r\nREFUEL_HOLSTER_WEAPON\r\n\r\nprivate _endPosOffset = [0, 0, 0];\r\nif (isNull _nozzle) then { // func is called on fuel truck\r\n    _endPosOffset = getArray (configFile >> \"CfgVehicles\" >> typeOf _target >> QGVAR(hooks));\r\n    if (count _endPosOffset == 2) then {\r\n        if (_unit distance (_target modelToWorld (_endPosOffset select 0)) <  _unit distance (_target modelToWorld (_endPosOffset select 1))) then {\r\n            _endPosOffset = _endPosOffset select 0;\r\n        } else {\r\n            _endPosOffset = _endPosOffset select 1;\r\n        };\r\n    } else {\r\n        _endPosOffset = _endPosOffset select 0;\r\n    };\r\n    [\r\n        2,\r\n        [_unit, _target, _endPosOffset],\r\n        {\r\n            params [\"_args\"];\r\n            _args params [\r\n                [\"_unit\", objNull, [objNull]],\r\n                [\"_target\", objNull, [objNull]],\r\n                [\"_endPosOffset\", [0, 0, 0], [[]], 3]\r\n            ];\r\n\r\n            private _newNozzle = \"ACE_refuel_fuelNozzle\" createVehicle position _unit;\r\n            _newNozzle attachTo [_unit, [-0.02,0.05,-0.12], \"righthandmiddle1\"];\r\n            _unit setVariable [QGVAR(nozzle), _newNozzle, true];\r\n\r\n            if (_target isKindOf \"AllVehicles\") then {\r\n                // Currently ropeCreate requires its first parameter to be a real vehicle\r\n                private _rope = ropeCreate [_target, _endPosOffset, _newNozzle, [0, -0.20, 0.12], REFUEL_HOSE_LENGTH];\r\n                _newNozzle setVariable [QGVAR(rope), _rope, true];\r\n            };\r\n            _newNozzle setVariable [QGVAR(attachPos), _endPosOffset, true];\r\n            _newNozzle setVariable [QGVAR(source), _target, true];\r\n\r\n            [_target, \"blockEngine\", \"ACE_Refuel\", true] call EFUNC(common,statusEffect_set);\r\n            _target setVariable [QGVAR(isConnected), true, true];\r\n            _target setVariable [QGVAR(ownedNozzle), _newNozzle, true];\r\n\r\n            [_unit, \"forceWalk\", \"ACE_refuel\", true] call EFUNC(common,statusEffect_set);\r\n            _unit setVariable [QGVAR(isRefueling), true];\r\n            private _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\r\n            if (_actionID != -1) then {\r\n                _unit removeAction _actionID;\r\n            };\r\n            _actionID = _unit addAction [\r\n                format [\"<t color='#FF0000'>%1</t>\", localize ELSTRING(dragging,Drop)],\r\n                '_unit = _this select 0; _nozzle = _unit getVariable QGVAR(nozzle); [_unit, _nozzle] call FUNC(dropNozzle); [_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set); REFUEL_UNHOLSTER_WEAPON',\r\n                nil,\r\n                20,\r\n                false,\r\n                true,\r\n                \"\",\r\n                '!isNull (_target getVariable [QGVAR(nozzle), objNull])'\r\n            ];\r\n            _unit setVariable [QGVAR(ReleaseActionID), _actionID];\r\n        },\r\n        \"\",\r\n        localize LSTRING(TakeNozzleAction),\r\n        {true},\r\n        [\"isnotinside\"]\r\n    ] call EFUNC(common,progressBar);\r\n} else { // func is called on muzzle either connected or on ground\r\n    [\r\n        2,\r\n        [_unit, _nozzle],\r\n        {\r\n            params [\"_args\"];\r\n            _args params [\r\n                [\"_unit\", objNull, [objNull]],\r\n                [\"_nozzle\", objNull, [objNull]]\r\n            ];\r\n\r\n            if (_nozzle getVariable [QGVAR(jerryCan), false]) then {\r\n                _nozzle attachTo [_unit, [0,1,0], \"pelvis\"];\r\n            } else {\r\n                _nozzle attachTo [_unit, [-0.02,0.05,-0.12], \"righthandmiddle1\"];\r\n            };\r\n            _unit setVariable [QGVAR(nozzle), _nozzle, true];\r\n\r\n            [_unit, \"forceWalk\", \"ACE_refuel\", true] call EFUNC(common,statusEffect_set);\r\n            _unit setVariable [QGVAR(isRefueling), true];\r\n            private _actionID = _unit getVariable [QGVAR(ReleaseActionID), -1];\r\n            if (_actionID != -1) then {\r\n                _unit removeAction _actionID;\r\n            };\r\n            _actionID = _unit addAction [\r\n                format [\"<t color='#FF0000'>%1</t>\", localize ELSTRING(dragging,Drop)],\r\n                '_unit = _this select 0; _nozzle = _unit getVariable QGVAR(nozzle); [_unit, _nozzle] call FUNC(dropNozzle); [_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set); REFUEL_UNHOLSTER_WEAPON',\r\n                nil,\r\n                20,\r\n                false,\r\n                true,\r\n                \"\",\r\n                '!isNull (_target getVariable [QGVAR(nozzle), objNull])'\r\n            ];\r\n            _unit setVariable [QGVAR(ReleaseActionID), _actionID];\r\n        },\r\n        \"\",\r\n        localize LSTRING(TakeNozzleAction),\r\n        {true},\r\n        [\"isnotinside\"]\r\n    ] call EFUNC(common,progressBar);\r\n\r\n    _target = _nozzle getVariable QGVAR(source);\r\n    _endPosOffset = _nozzle getVariable QGVAR(attachPos);\r\n};\r\nif !(_nozzle getVariable [QGVAR(jerryCan), false]) then {\r\n    [{\r\n        params [\"_args\", \"_pfID\"];\r\n        _args params [\r\n            [\"_unit\", player, [objNull]],\r\n            [\"_source\", objNull, [objNull]],\r\n            [\"_endPosOffset\", [0, 0, 0], [[]], 3],\r\n            [\"_nozzle\", _unit getVariable [QGVAR(nozzle), objNull], [objNull]]\r\n        ];\r\n\r\n        if (isNull _source || {_unit distance (_source modelToWorld _endPosOffset) > (REFUEL_HOSE_LENGTH - 2)} || {!alive _source}) exitWith {\r\n            if !(isNull _nozzle) then {\r\n                [_unit, _nozzle] call FUNC(dropNozzle);\r\n                REFUEL_UNHOLSTER_WEAPON\r\n\r\n                [_unit, \"forceWalk\", \"ACE_refuel\", false] call EFUNC(common,statusEffect_set);\r\n                if (isNull _source || {!alive _source}) then {\r\n                    private _rope = _nozzle getVariable [QGVAR(rope), objNull];\r\n                    if !(isNull _rope) then {\r\n                        ropeDestroy _rope;\r\n                    };\r\n                    deleteVehicle _nozzle;\r\n                } else {\r\n                    [LSTRING(Hint_TooFar), 2, _unit] call EFUNC(common,displayTextStructured);\r\n                };\r\n            };\r\n            [_pfID] call cba_fnc_removePerFrameHandler;\r\n        };\r\n    }, 0, [_unit, _target, _endPosOffset]] call cba_fnc_addPerFrameHandler;\r\n};\r\n"},{"name":"ace_refuel_fnc_turnOff","file":"refuel/functions/fnc_turnOff.sqf","text":"/*\r\n * Author: GitHawk\r\n * Turn off a fuel nozzle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [nozzle] call ace_refuel_fnc_turnOff\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n\r\n[\r\n    2,\r\n    [_unit, _nozzle],\r\n    {\r\n        params [\"_args\"];\r\n        _args params [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n        _nozzle setVariable [QGVAR(isRefueling), false, true];\r\n        [LSTRING(Hint_Stopped), 1.5, _unit] call EFUNC(common,displayTextStructured);\r\n    },\r\n    \"\",\r\n    localize LSTRING(TurnOffAction),\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"},{"name":"ace_refuel_fnc_turnOn","file":"refuel/functions/fnc_turnOn.sqf","text":"/*\r\n * Author: GitHawk\r\n * Turn on a fuel nozzle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Nozzle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, nozzle] call ace_refuel_fnc_turnOn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n\r\n[\r\n    2,\r\n    [_unit, _nozzle],\r\n    {\r\n        params [\"_args\"];\r\n        _args params [[\"_unit\", objNull, [objNull]], [\"_nozzle\", objNull, [objNull]]];\r\n        _nozzle setVariable [QGVAR(isRefueling), true, true];\r\n        [LSTRING(Hint_Started), 1.5, _unit] call EFUNC(common,displayTextStructured);\r\n    },\r\n    \"\",\r\n    localize LSTRING(TurnOnAction),\r\n    {true},\r\n    [\"isnotinside\"]\r\n] call EFUNC(common,progressBar);\r\n"}],"reload":[{"name":"ace_reload_fnc_canCheckAmmo","file":"reload/functions/fnc_canCheckAmmo.sqf","text":"/*\r\n * Author: CAA-Picard\r\n * Check if the player can check the ammo of the target.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Can link belt<BOOL> \r\n *\r\n * Example:\r\n * [player, bob] call ace_reload_fnc_canCheckAmmo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"_target\"];\r\n\r\n// Return true for static weapons if they have been fired once, @todo 1.40 this work-around doesn't work anymore\r\nif (_target isKindOf \"StaticWeapon\") exitWith {\r\n    if (currentMagazine _target != \"\") exitWith {true};\r\n\r\n    // no check ammo action on destroyed static weapons\r\n    if (!alive _target) exitWith {false};\r\n\r\n    private _found = false;\r\n\r\n    {\r\n        if (_x select 2) exitWith {\r\n            _found = true;\r\n        };\r\n        false\r\n    } count magazinesAmmoFull _target;\r\n\r\n    _found\r\n};\r\n\r\n// Return false for all other vehicles\r\nif !(_target isKindOf \"CAManBase\") exitWith {false};\r\n\r\n// For men\r\nif (currentWeapon _target == \"\") exitWith {false};\r\n\r\n// Check if their current magazine is a belt\r\nif (getNumber (configFile >> \"CfgMagazines\" >> currentMagazine _target >> \"ACE_isBelt\") == 1) exitWith {true};\r\n\r\n// Check for rocket launchers\r\nif (currentWeapon _target == secondaryWeapon _target) exitWith {true};\r\n\r\nfalse\r\n"},{"name":"ace_reload_fnc_canLinkBelt","file":"reload/functions/fnc_canLinkBelt.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Check if the target has an MG equiped with belt system that the player can link\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Can link belt<BOOL>\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\"];\r\n\r\nif (vehicle _target != _target) exitWith {false};\r\n\r\nprivate _magazineType = currentMagazine _target;\r\nprivate _magazineCfg = configFile >> \"CfgMagazines\" >> _magazineType;\r\n\r\nif (getNumber (_magazineCfg >> \"ACE_isBelt\") == 0) exitWith {false};\r\n\r\n// Check if the ammo is not empty or full\r\nprivate _ammoCount = _target ammo currentWeapon _target;\r\n\r\n// Exit if the belt is full or empty\r\nif (_ammoCount == 0 || getNumber (_magazineCfg >> \"count\") - _ammoCount == 0) exitWith {false};\r\n\r\n// Check if the player has any of the same magazines\r\n// Calculate max ammo\r\nprivate _maxAmmo = 0;\r\n\r\n{\r\n    _maxAmmo = _maxAmmo max (_x select 1);\r\n} forEach (magazinesAmmo _player select {_x select 0 == _magazineType});\r\n\r\n_maxAmmo > 0\r\n"},{"name":"ace_reload_fnc_checkAmmo","file":"reload/functions/fnc_checkAmmo.sqf","text":"/*\r\n * Author: commy2 and esteldunedain\r\n * Count the ammo of the currently loaded magazine or count rifle grenades. Play animation and display message.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target. Optional, if not suplied the player counts his personal or static weapon ammo <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define COUNT_BARS 12\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate _target = vehicle _unit;\r\n\r\nif (count _this > 1) then {\r\n    _target = _this select 1;\r\n} else {\r\n\r\n    // If the unit is on foot, count it's own ammo\r\n    if (_unit == _target) exitWith {};\r\n\r\n    // If it's mounted on a movile weapon, count it's own ammo\r\n    if !(_target isKindOf \"StaticWeapon\") then {\r\n        _target = _unit;\r\n    };\r\n};\r\n\r\nif (_unit == _target) then {\r\n    _unit playActionNow \"Gear\";\r\n};\r\n\r\n[FUNC(displayAmmo), [_target], 1, 0.1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_reload_fnc_displayAmmo","file":"reload/functions/fnc_displayAmmo.sqf","text":"/*\r\n * Author: commy2 and esteldunedain\r\n * Display the ammo of the currently loaded magazine of the target or count rifle grenades.\r\n *\r\n * Arguments:\r\n * 0: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * Nothing\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define COUNT_BARS 12\r\n\r\nparams [\"_target\"];\r\n\r\nprivate _weapon = currentWeapon _target;\r\nprivate _muzzle = currentMuzzle _target;\r\nprivate _magazine = currentMagazine _target;\r\n\r\n// currentWeapon returns \"\" for static weapons before they are shot once\r\nif (_target isKindOf \"StaticWeapon\") then {\r\n    if (_weapon == \"\") then {\r\n        if (count (weapons _target) == 1) then {\r\n            _weapon = (weapons _target) select 0;\r\n            _muzzle = _weapon;\r\n        };\r\n    };\r\n\r\n    if (_magazine == \"\") then {\r\n        // Try to get magazine using magazinesAmmoFull\r\n        private _magazines = magazinesAmmoFull _target;\r\n\r\n        {\r\n            if (_x select 2) exitWith {\r\n                _magazine = _x select 0;\r\n            };\r\n        } forEach _magazines;\r\n    };\r\n};\r\n\r\nif (_magazine == \"\") exitWith {};\r\nif (_weapon == \"\") exitWith {};\r\nif (!( _muzzle isEqualType \"\")) then {_muzzle = _weapon};\r\n\r\nprivate _showNumber = false;\r\nprivate _ammo = 0;\r\nprivate _maxRounds = 1;\r\nprivate _count = 0;\r\n\r\n// not grenade launcher\r\nif (_muzzle == _weapon) then {\r\n    _maxRounds = getNumber (configFile >> \"CfgMagazines\" >> _magazine >> \"count\") max 1;\r\n\r\n    _ammo = _target ammo _weapon;\r\n    if (_maxRounds >= COUNT_BARS) then {\r\n        _count = round (COUNT_BARS * _ammo / _maxRounds);\r\n\r\n        if (_ammo > 0) then {_count = _count max 1};\r\n        if (_ammo < _maxRounds) then {_count = _count min (COUNT_BARS - 1)};\r\n    } else {\r\n        _count = _ammo;\r\n    };\r\n\r\n    // grenade launcher\r\n} else {\r\n    _showNumber = true;\r\n\r\n    _count = if (_magazine != \"\") then {\r\n        {_x == _magazine} count (magazines _target + [_magazine])\r\n    } else {\r\n        {_x in getArray (configFile >> \"CfgWeapons\" >> _weapon >> _muzzle >> \"Magazines\")} count magazines _target\r\n    };\r\n};\r\n\r\nprivate _ammoBarsStructuredText = if (_showNumber) then {\r\n    parseText format [\"<t align='center' >%1x</t>\", _count]\r\n} else {\r\n    private _color = [((2 * (1 - _ammo / _maxRounds)) min 1), ((2 * _ammo / _maxRounds) min 1), 0];\r\n\r\n    private _string = \"\";\r\n    for \"_a\" from 1 to _count do {\r\n        _string = _string + \"|\";\r\n    };\r\n    private _text = [_string, _color] call EFUNC(common,stringToColoredText);\r\n\r\n    _string = \"\";\r\n    for \"_a\" from (_count + 1) to (_maxRounds min COUNT_BARS) do {\r\n        _string = _string + \"|\";\r\n    };\r\n\r\n    composeText [_text, [_string, [0.5, 0.5, 0.5]] call EFUNC(common,stringToColoredText)];\r\n};\r\n\r\n\r\nif (_target isKindOf \"StaticWeapon\") then {\r\n    //Vehicle mags (usualy) don't have pictures, so just show the text above ammo count\r\n    private _loadedName = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"displaynameshort\");\r\n    _loadedName = parseText format [\"<t align='center' >%1</t>\", _loadedName];\r\n    private _text = composeText [_loadedName, linebreak, _ammoBarsStructuredText];\r\n    [_text] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    private _picture = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"picture\");\r\n    [_ammoBarsStructuredText, _picture] call EFUNC(common,displayTextPicture);\r\n};\r\n"},{"name":"ace_reload_fnc_startLinkingBelt","file":"reload/functions/fnc_startLinkingBelt.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Start linking the belt\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n * 1: Target <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\", \"_target\"];\r\n\r\nif (vehicle _target != _target) exitWith {false};\r\n\r\nprivate _magazineType = currentMagazine _target;\r\nprivate _magazineCfg = configFile >> \"CfgMagazines\" >> _magazineType;\r\n\r\nif (getNumber (_magazineCfg >> \"ACE_isBelt\") == 0) exitWith {false};\r\n\r\n// Check if the ammo is not empty or full\r\nprivate _ammoCount = _target ammo currentWeapon _target;\r\n\r\n// Exit if the belt is full or empty\r\nif ((_ammoCount == 0)  || (getNumber (_magazineCfg >> \"count\") - _ammoCount) == 0) exitWith {false};\r\n\r\n// Check if the player has any of the same same magazines\r\n// Calculate max ammo it can link\r\nprivate _maxAmmo = 0;\r\n\r\n{\r\n    _maxAmmo = _maxAmmo max (_x select 1);\r\n} forEach (magazinesAmmo _player select {_x select 0 == _magazineType});\r\n\r\nif (_maxAmmo == 0) exitWith {};\r\n\r\n// Condition to call each frame\r\nprivate _condition = {\r\n    (_this select 0) params [\"_player\", \"_target\"];\r\n    ([_player, _target, []] call EFUNC(common,canInteractWith)) && ((_player distance _target) < 3) && ((speed _target) < 1)\r\n};\r\n\r\nprivate _onFinish = {\r\n    (_this select 0) params [\"_player\", \"_target\", \"_magazine\"];\r\n\r\n    // Raise event on remote unit\r\n    [QGVAR(ammoLinked), [_target, _player, _magazine], [_target]] call CBA_fnc_targetEvent;\r\n};\r\n\r\nprivate _onFailure = {\r\n    EXPLODE_3_PVT((_this select 0),_player,_target,_magazine);\r\n    [_player, \"AmovPknlMstpSrasWrflDnon\", 1] call EFUNC(common,doAnimation);\r\n\r\n    // Add back the magazine with the former ammo count\r\n    _player addMagazine _magazine;\r\n};\r\n\r\n_player playActionNow \"PutDown\";\r\n\r\n// Remove the magazine with maximum remaining ammo\r\n[_player, _magazineType, _maxAmmo] call EFUNC(common,removeSpecificMagazine);\r\n\r\n// Call progress bar\r\n[4, [_player, _target, [_magazineType, _maxAmmo]], _onFinish, _onFailure, (localize LSTRING(LinkingBelt)), _condition] call EFUNC(common,progressBar);\r\n"}],"reloadlaunchers":[{"name":"ace_reloadlaunchers_fnc_addMissileReloadActions","file":"reloadlaunchers/functions/fnc_addMissileReloadActions.sqf","text":"/*\r\n * Author: commy2\r\n * Create one action per reloadable missile\r\n *\r\n * Arguments:\r\n * 1: Target (Object)\r\n * 0: Player (Object)\r\n *\r\n * Return Value:\r\n * Children actions (Array)\r\n *\r\n * Public: No\r\n *\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_target\", \"_unit\"];\r\nTRACE_2(\"params\",_target,_unit);\r\n\r\n//Fast exit for common case:\r\nprivate _weapon = secondaryWeapon _target;\r\nif ((_weapon == \"\") || {(getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(enabled))) == 0}) exitWith {\r\n    TRACE_1(\"weapon not supported\",_weapon);\r\n    []\r\n};\r\n\r\nprivate _actions = [];\r\n\r\nprivate _loadableMissiles = [_unit, _weapon] call FUNC(getLoadableMissiles);\r\nTRACE_2(\"\",_weapon,_loadableMissiles);\r\n\r\n{\r\n    private [\"_name\", \"_displayName\", \"_statement\", \"_condition\", \"_action\"];\r\n\r\n    _name = format [QGVAR(Missile_%1), _x];\r\n    _displayName = format [localize LSTRING(LoadMagazine), getText (configFile >> \"CfgMagazines\" >> _x >> \"displayName\")];\r\n\r\n    _statement = {\r\n        (_this select 2) call DFUNC(load);\r\n    };\r\n\r\n    _condition = {\r\n        (_this select 2) call DFUNC(canLoad)\r\n    };\r\n\r\n    _action = [_name, _displayName, \"\", _statement, _condition, {}, [_unit, _target, _weapon, _x], \"\", 4] call EFUNC(interact_menu,createAction);\r\n\r\n    _actions pushBack [_action, [], _unit];\r\n} forEach _loadableMissiles;\r\n\r\nTRACE_1(\"return\",_actions);\r\n_actions\r\n"},{"name":"ace_reloadlaunchers_fnc_canLoad","file":"reloadlaunchers/functions/fnc_canLoad.sqf","text":"/*\r\n * Author: commy2\r\n * Check of the unit can reload the launcher of target unit.\r\n *\r\n * Arguments:\r\n * 0: Unit to do the reloading (Object)\r\n * 1: Unit eqipped with launcher (Object)\r\n * 2: weapon name (String)\r\n * 3: missile name (String)\r\n *\r\n * Return Value:\r\n * NONE\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", \"_weapon\", \"_magazine\"];\r\nTRACE_4(\"params\",_unit,_target,_weapon,_magazine);\r\n\r\nif (!alive _target) exitWith {false};\r\nif (vehicle _target != _target) exitWith {false};\r\nif !([_unit, _target, []] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n// target is awake\r\nif (_target getVariable [\"ACE_isUnconscious\", false]) exitWith {false};\r\n\r\n// has secondary weapon equipped\r\nif !(_weapon in weapons _target) exitWith {false};\r\n\r\n// check if the target really needs to be reloaded\r\nif (count secondaryWeaponMagazine _target > 0) exitWith {false};\r\n\r\n// check if the launcher is compatible\r\nif (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(enabled)) == 0) exitWith {false};\r\n\r\n// check if the magazine compatible with targets launcher\r\n_magazine in ([_unit, _weapon] call FUNC(getLoadableMissiles))\r\n"},{"name":"ace_reloadlaunchers_fnc_getLoadableMissiles","file":"reloadlaunchers/functions/fnc_getLoadableMissiles.sqf","text":"/*\r\n * Author: commy2\r\n * Return all magazine types from reloaders inventory that are compatible with given weapon.\r\n *\r\n * Arguments:\r\n * 0: Unit to to the reload (Object)\r\n * 1: A launcher (String)\r\n *\r\n * Return Value:\r\n * Reloable magazines (Array)\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\nTRACE_2(\"params\",_unit,_weapon);\r\n\r\n// get available magazines of reloader, Note: \"magazines\" does not include currently loaded magazines\r\nprivate _magazines = magazines _unit;\r\n\r\n// case sensitvity\r\n_magazines = _magazines apply {toLower _x};\r\n\r\n// get reloaders magazine types compatible with targets launcher. No duplicates.\r\ngetArray (configFile >> \"CfgWeapons\" >> _weapon >> \"magazines\") select {toLower _x in _magazines} // return\r\n"},{"name":"ace_reloadlaunchers_fnc_load","file":"reloadlaunchers/functions/fnc_load.sqf","text":"/*\r\n * Author: commy2\r\n * Reload a launcher\r\n *\r\n * Arguments:\r\n * 0: Unit with magazine (Object)\r\n * 1: Unit with launcher (Object)\r\n * 2: weapon name (String)\r\n * 3: missile name (String)\r\n *\r\n * Return Value:\r\n * NONE\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", \"_weapon\", \"_magazine\"];\r\nTRACE_4(\"params\",_unit,_target,_weapon,_magazine);\r\n\r\nprivate _reloadTime = if (isNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(buddyReloadTime))) then {\r\n    getNumber (configFile >> \"CfgWeapons\" >> _weapon >> QGVAR(buddyReloadTime))\r\n} else {\r\n    2.5\r\n};\r\n\r\n// do animation\r\n[_unit] call EFUNC(common,goKneeling);\r\n\r\n// show progress bar\r\nprivate [\"_onSuccess\", \"_onFailure\", \"_condition\"];\r\n\r\n_onSuccess =  {\r\n    (_this select 0 select 0) removeMagazine (_this select 0 select 3);\r\n    [QGVAR(reloadLauncher), _this select 0, _this select 0 select 1] call CBA_fnc_targetEvent;\r\n\r\n    [localize LSTRING(LauncherLoaded)] call DEFUNC(common,displayTextStructured);\r\n};\r\n\r\n_onFailure = {\r\n    [localize ELSTRING(common,ActionAborted)] call DEFUNC(common,displayTextStructured);\r\n};\r\n\r\n_condition = {\r\n    (_this select 0) call DFUNC(canLoad) && {(_this select 0 select 0) distance (_this select 0 select 1) < 4}\r\n};\r\n\r\n[_reloadTime, [_unit, _target, _weapon, _magazine], _onSuccess, _onFailure, localize LSTRING(LoadingLauncher), _condition] call EFUNC(common,progressBar);\r\n"},{"name":"ace_reloadlaunchers_fnc_reloadLauncher","file":"reloadlaunchers/functions/fnc_reloadLauncher.sqf","text":"/*\r\n * Author: commy2\r\n * Reload a launcher\r\n *\r\n * Arguments:\r\n * 0: Unit to do the reloading (Object)\r\n * 1: Target to rload (Object)\r\n * 2: weapon name (String)\r\n * 3: missile name (String)\r\n *\r\n * Return Value:\r\n * NONE\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\",\"_target\",\"_weapon\",\"_magazine\"];\r\nTRACE_4(\"params\",_unit,_target,_weapon,_magazine);\r\n\r\n_target selectWeapon _weapon;\r\n\r\nif (currentWeapon _target != _weapon) exitWith {};\r\nif (currentMagazine _target != \"\") exitWith {};\r\n\r\n// command is wip, reload time for launchers is not intended.\r\n_target addWeaponItem [_weapon, _magazine]; \r\n"}],"repair":[{"name":"ace_repair_fnc_addRepairActions","file":"repair/functions/fnc_addRepairActions.sqf","text":"/*\r\n * Author: commy2, SilentSpike\r\n * Checks if the vehicles class already has the actions initialized, otherwise add all available repair options. Calleed from init EH.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle] call ace_repair_fnc_addRepairActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_2(\"params\", _vehicle,typeOf _vehicle);\r\n\r\nprivate[\"_action\", \"_childHitPoint\", \"_condition\", \"_groupsConfig\", \"_hitPoint\", \"_hitPointsAddedAmount\", \"_hitPointsAddedNames\", \"_hitPointsAddedStrings\", \"_icon\", \"_initializedClasses\", \"_name\", \"_position\", \"_positionsConfig\", \"_processedHitPoints\", \"_selection\", \"_statement\", \"_target\", \"_type\"];\r\n\r\n_type = typeOf _vehicle;\r\n\r\n_initializedClasses = GETMVAR(GVAR(initializedClasses),[]);\r\n\r\n// do nothing if the class is already initialized\r\nif (_type in _initializedClasses) exitWith {};\r\n\r\n// get all hitpoints and selections\r\n(getAllHitPointsDamage _vehicle) params [[\"_hitPoints\", []], [\"_hitSelections\", []]];\r\n\r\n// get hitpoints of wheels with their selections\r\n([_vehicle] call FUNC(getWheelHitPointsWithSelections)) params [\"_wheelHitPoints\", \"_wheelHitSelections\"];\r\n\r\n_hitPointsAddedNames = [];\r\n_hitPointsAddedStrings = [];\r\n_hitPointsAddedAmount = [];\r\n_processedHitpoints = [];\r\n\r\n{\r\n    _selection = _x;\r\n    _hitpoint = _hitPoints select _forEachIndex;\r\n\r\n    if (_selection in _wheelHitSelections) then {\r\n        // Wheels should always be unique\r\n        if (_hitpoint in _processedHitpoints) exitWith {TRACE_3(\"Duplicate Wheel\",_hitpoint,_forEachIndex,_selection);};\r\n\r\n        _icon = \"A3\\ui_f\\data\\igui\\cfg\\actions\\repair_ca.paa\";\r\n\r\n        _position = compile format [\"_target selectionPosition ['%1', 'HitPoints'];\", _selection];\r\n\r\n        TRACE_3(\"Adding Wheel Actions\",_hitpoint,_forEachIndex,_selection);\r\n\r\n        // An action to remove the wheel is required\r\n        _name = format [\"Remove_%1_%2\", _forEachIndex, _hitpoint];\r\n        _text = localize LSTRING(RemoveWheel);\r\n        _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"RemoveWheel\"] call DFUNC(canRepair)};\r\n        _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"RemoveWheel\"] call DFUNC(repair)};\r\n        _action = [_name, _text, _icon, _statement, _condition, {}, [_hitpoint], _position, 2] call EFUNC(interact_menu,createAction);\r\n        [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\r\n\r\n        // An action to replace the wheel is required\r\n        _name = format [\"Replace_%1_%2\", _forEachIndex, _hitpoint];\r\n        _text = localize LSTRING(ReplaceWheel);\r\n        _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"ReplaceWheel\"] call DFUNC(canRepair)};\r\n        _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"ReplaceWheel\"] call DFUNC(repair)};\r\n        _action = [_name, _text, _icon, _statement, _condition, {}, [_hitpoint], _position, 2] call EFUNC(interact_menu,createAction);\r\n        [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\r\n    } else {\r\n        //Skip glass hitpoints\r\n        if (((toLower _hitPoint) find \"glass\") != -1) exitWith {\r\n            TRACE_3(\"Skipping Glass\",_hitpoint,_forEachIndex,_selection);\r\n        };\r\n        // Empty selections don't exist\r\n        // Empty hitpoints don't contain enough information\r\n        if (_selection isEqualTo \"\") exitWith { TRACE_3(\"Selection Empty\",_hitpoint,_forEachIndex,_selection); };\r\n        if (_hitpoint isEqualTo \"\") exitWith { TRACE_3(\"Hitpoint Empty\",_hitpoint,_forEachIndex,_selection); };\r\n        //Depends hitpoints shouldn't be modified directly (will be normalized)\r\n        if (isText (configFile >> \"CfgVehicles\" >> _type >> \"HitPoints\" >> _hitpoint >> \"depends\")) exitWith {\r\n            TRACE_3(\"Skip Depends\",_hitpoint,_forEachIndex,_selection);\r\n        };\r\n\r\n        // Associated hitpoints can be grouped via config to produce a single repair action\r\n        _groupsConfig = configFile >> \"CfgVehicles\" >> _type >> QGVAR(hitpointGroups);\r\n        _childHitPoint = false;\r\n        if (isArray _groupsConfig) then {\r\n            {\r\n                {\r\n                    if (_hitpoint == _x) exitWith {\r\n                        _childHitPoint = true;\r\n                    };\r\n                } forEach (_x select 1);\r\n            } forEach (getArray _groupsConfig);\r\n        };\r\n        // If the current selection is associated with a child hitpoint, then skip\r\n        if (_childHitPoint) exitWith { TRACE_3(\"childHitpoint\",_hitpoint,_forEachIndex,_selection); };\r\n\r\n        // Find the action position\r\n        _position = compile format [\"_target selectionPosition ['%1', 'HitPoints'];\", _selection];\r\n\r\n        // Custom position can be defined via config for associated hitpoint\r\n        _positionsConfig = configFile >> \"CfgVehicles\" >> _type >> QGVAR(hitpointPositions);\r\n        if (isArray _positionsConfig) then {\r\n            {\r\n                _x params [\"_hit\", \"_pos\"];\r\n                if (_hitpoint == _hit) exitWith {\r\n                    if (_pos isEqualType []) exitWith {\r\n                        _position = _pos; // Position in model space\r\n                    };\r\n                    if (_pos isEqualType \"\") exitWith {\r\n                        _position = compile format [\"_target selectionPosition ['%1', 'HitPoints'];\", _pos];\r\n                    };\r\n                    ACE_LOGERROR_3(\"Invalid custom position %1 of hitpoint %2 in vehicle %3.\",_position,_hitpoint,_type);\r\n                };\r\n            } forEach (getArray _positionsConfig);\r\n        };\r\n\r\n        // Prepair the repair action\r\n        _name = format [\"Repair_%1_%2\", _forEachIndex, _selection];\r\n        _icon = \"A3\\ui_f\\data\\igui\\cfg\\actions\\repair_ca.paa\";\r\n\r\n        // Find localized string and track those added for numerization\r\n        ([_hitpoint, \"%1\", _hitpoint, [_hitPointsAddedNames, _hitPointsAddedStrings, _hitPointsAddedAmount]] call FUNC(getHitPointString)) params [\"_text\", \"_trackArray\"];\r\n        _hitPointsAddedNames = _trackArray select 0;\r\n        _hitPointsAddedStrings = _trackArray select 1;\r\n        _hitPointsAddedAmount = _trackArray select 2;\r\n\r\n        if (_hitpoint in TRACK_HITPOINTS) then {\r\n            // Tracks should always be unique\r\n            if (_hitpoint in _processedHitpoints) exitWith {TRACE_3(\"Duplicate Track\",_hitpoint,_forEachIndex,_selection);};\r\n            if (_hitpoint == \"HitLTrack\") then {\r\n                _position = [-1.75, 0, -1.75];\r\n            } else {\r\n                _position = [1.75, 0, -1.75];\r\n            };\r\n            TRACE_4(\"Adding RepairTrack\",_hitpoint,_forEachIndex,_selection,_text);\r\n            _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"RepairTrack\"] call DFUNC(canRepair)};\r\n            _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"RepairTrack\"] call DFUNC(repair)};\r\n            _action = [_name, _text, _icon, _statement, _condition, {}, [_hitpoint], _position, 4] call EFUNC(interact_menu,createAction);\r\n            [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\r\n        } else {\r\n            TRACE_4(\"Adding MiscRepair\",_hitpoint,_forEachIndex,_selection,_text);\r\n            _condition = {[_this select 1, _this select 0, _this select 2 select 0, \"MiscRepair\"] call DFUNC(canRepair)};\r\n            _statement = {[_this select 1, _this select 0, _this select 2 select 0, \"MiscRepair\"] call DFUNC(repair)};\r\n            _action = [_name, _text, _icon, _statement, _condition, {}, [_forEachIndex], _position, 5] call EFUNC(interact_menu,createAction);\r\n            // Put inside main actions if no other position was found above\r\n            if (_position isEqualTo [0,0,0]) then {\r\n                [_type, 0, [\"ACE_MainActions\", QGVAR(Repair)], _action] call EFUNC(interact_menu,addActionToClass);\r\n            } else {\r\n                [_type, 0, [], _action] call EFUNC(interact_menu,addActionToClass);\r\n            };\r\n        };\r\n\r\n        _processedHitPoints pushBack _hitPoint;\r\n    };\r\n} forEach _hitSelections;\r\n\r\n_condition = {[_this select 1, _this select 0, \"\", \"fullRepair\"] call DFUNC(canRepair)};\r\n_statement = {[_this select 1, _this select 0, \"\", \"fullRepair\"] call DFUNC(repair)};\r\n_action = [QGVAR(fullRepair), localize LSTRING(fullRepair), \"A3\\ui_f\\data\\igui\\cfg\\actions\\repair_ca.paa\", _statement, _condition, {}, [], \"\", 4] call EFUNC(interact_menu,createAction);\r\n[_type, 0, [\"ACE_MainActions\", QGVAR(Repair)], _action] call EFUNC(interact_menu,addActionToClass);\r\n\r\n// set class as initialized\r\n_initializedClasses pushBack _type;\r\n\r\nSETMVAR(GVAR(initializedClasses),_initializedClasses);\r\n"},{"name":"ace_repair_fnc_addSpareParts","file":"repair/functions/fnc_addSpareParts.sqf","text":"/*\r\n * Author: Jonpas\r\n * Adds spare parts to the vehicle. Before SettingsInitialized only collect for later execution.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Amount <NUMBER> (default: 1)\r\n * 2: Spare Part Classname <STRING> (default: \"\")\r\n * 3: Force (add even if setting is disabled) <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle] call ace_repair_fnc_addSpareParts\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", [\"_amount\", 1], [\"_part\", \"\"], [\"_force\", false]];\r\nTRACE_2(\"params\",_vehicle,_amount);\r\n\r\n// Exit if ace_cargo is not loaded or no part supplied\r\nif (!([\"ace_cargo\"] call EFUNC(common,isModLoaded)) || {_part == \"\"}) exitWith {};\r\n\r\n// Collect until SettingsInitialized\r\nif (!EGVAR(common,settingsInitFinished)) exitWith {\r\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(addSpareParts), _this];\r\n};\r\n\r\n// Exit if not forced and add spare parts is disabled (after settings initted to make sure it really is)\r\nif (!_force && !GVAR(addSpareParts)) exitWith {};\r\n\r\n// Load\r\n[\"ace_addCargoByClass\", [_part, _vehicle, _amount]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_repair_fnc_canMiscRepair","file":"repair/functions/fnc_canMiscRepair.sqf","text":"/*\r\n * Author: Jonpas\r\n * Check if misc repair action can be done, called from callbackSuccess.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint INDEX <NUMBER>\r\n *\r\n * Return Value:\r\n * Can Misc Repair <BOOL>\r\n *\r\n * Example:\r\n * [unit, vehicle, 5] call ace_repair_fnc_canMiscRepair\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_hitpointGroupConfig\", \"_hitpointGroup\", \"_postRepairDamage\", \"_return\", \"_hitPointClassname\", \"_subHitIndex\"];\r\nparams [\"_caller\", \"_target\", \"_hitPointIndex\"];\r\n\r\n(getAllHitPointsDamage _target) params [\"_allHitPoints\", \"\", \"_allHitPointDamages\"];\r\n\r\nif !([_caller, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n// Get hitpoint groups if available\r\n_hitpointGroupConfig = configFile >> \"CfgVehicles\" >> typeOf _target >> QGVAR(hitpointGroups);\r\n_hitpointGroup = [];\r\nif (isArray _hitpointGroupConfig) then {\r\n    _hitPointClassname = _allHitPoints select _hitPointIndex;\r\n\r\n    // Retrieve hitpoint subgroup if current hitpoint is main hitpoint of a group\r\n    {\r\n        _x params [\"_masterHitpoint\", \"_subHitArray\"];\r\n        // Exit using found hitpoint group if this hitpoint is leader of any\r\n        if (_masterHitpoint == _hitPointClassname) exitWith {\r\n            {\r\n                _subHitIndex = _allHitPoints find _x;\r\n                if (_subHitIndex == -1) then {\r\n                    ERROR(\"Hitpoint Not Found\");\r\n                } else {\r\n                    _hitpointGroup pushBack _subHitIndex;\r\n                };\r\n            } forEach _subHitArray;\r\n        };\r\n    } forEach (getArray _hitpointGroupConfig);\r\n};\r\n\r\n// Add current hitpoint to the group\r\n_hitpointGroup pushBack _hitPointIndex;\r\n\r\n// Get post repair damage\r\n_postRepairDamage = [_caller] call FUNC(getPostRepairDamage);\r\n\r\n// Return true if damage can be repaired on any hitpoint in the group, else false\r\n_return = false;\r\n{\r\n    if ((_allHitPointDamages select _x) > _postRepairDamage) exitWith {\r\n        _return = true;\r\n    };\r\n} forEach _hitpointGroup;\r\n\r\n_return\r\n"},{"name":"ace_repair_fnc_canRemove","file":"repair/functions/fnc_canRemove.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit can remove given wheel/track of the vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n *\r\n * Return Value:\r\n * Can Remove <BOOL>\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canRemove\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\r\nTRACE_3(\"params\",_unit,_target,_hitPoint);\r\n\r\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\nalive _target && {_target getHitPointDamage _hitPoint < 1}\r\n"},{"name":"ace_repair_fnc_canRepair","file":"repair/functions/fnc_canRepair.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if the repair action can be performed.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\r\n * 3: Repair Action Classname <STRING>\r\n *\r\n * Return Value:\r\n * Can Repair <BOOL>\r\n *\r\n * Example:\r\n * [player, car, \"HitHull\", \"MiscRepair\"] call ace_repair_fnc_canRepair\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_hitPoint\", \"_className\"];\r\nTRACE_4(\"params\",_caller,_target,_hitPoint,_className);\r\n\r\nprivate [\"_config\", \"_engineerRequired\", \"_items\", \"_return\", \"_condition\", \"_vehicleStateCondition\", \"_settingName\", \"_settingItemsArray\"];\r\n\r\n_config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\r\nif !(isClass _config) exitWith {false}; // or go for a default?\r\n\r\n// if(isEngineOn _target) exitWith {false}; // Ignore here so action shows, then exit and show warning when selected #3348\r\n\r\n_engineerRequired = if (isNumber (_config >> \"requiredEngineer\")) then {\r\n    getNumber (_config >> \"requiredEngineer\");\r\n} else {\r\n    // Check for required class\r\n    if (isText (_config >> \"requiredEngineer\")) exitWith {\r\n        missionNamespace getVariable [(getText (_config >> \"requiredEngineer\")), 0];\r\n    };\r\n    0;\r\n};\r\nif !([_caller, _engineerRequired] call FUNC(isEngineer)) exitWith {false};\r\n\r\n//Items can be an array of required items or a string to a ACE_Setting array\r\n_items = if (isArray (_config >> \"items\")) then {\r\n    getArray (_config >> \"items\");\r\n} else {\r\n    _settingName = getText (_config >> \"items\");\r\n    _settingItemsArray = getArray (configFile >> \"ACE_Settings\" >> _settingName >> \"_values\");\r\n    if ((isNil _settingName) || {(missionNamespace getVariable _settingName) >= (count _settingItemsArray)}) exitWith {\r\n        ERROR(\"bad setting\"); [\"BAD\"]\r\n    };\r\n    _settingItemsArray select (missionNamespace getVariable _settingName);\r\n};\r\nif (count _items > 0 && {!([_caller, _items] call FUNC(hasItems))}) exitWith {false};\r\n\r\n_return = true;\r\nif (getText (_config >> \"condition\") != \"\") then {\r\n    _condition = getText (_config >> \"condition\");\r\n    if (isNil _condition) then {\r\n        _condition = compile _condition;\r\n    } else {\r\n        _condition = missionNamespace getVariable _condition;\r\n    };\r\n    if (_condition isEqualType false) then {\r\n        _return = _condition;\r\n    } else {\r\n        _return = [_caller, _target, _hitPoint, _className] call _condition;\r\n    };\r\n};\r\n\r\nif (!_return) exitWith {false};\r\n\r\n// _vehicleStateCondition = if (isText(_config >> \"vehicleStateCondition\")) then {\r\n    // missionNamespace getVariable [getText(_config >> \"vehicleStateCondition\"), 0]\r\n// } else {\r\n    // getNumber(_config >> \"vehicleStateCondition\")\r\n// };\r\n// if (_vehicleStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitWith {false};\r\n\r\nprivate _repairLocations = getArray (_config >> \"repairLocations\");\r\nif (!(\"All\" in _repairLocations)) then {\r\n    private _repairFacility = {([_caller] call FUNC(isInRepairFacility)) || ([_target] call FUNC(isInRepairFacility))};\r\n    private _repairVeh = {([_caller] call FUNC(isNearRepairVehicle)) || ([_target] call FUNC(isNearRepairVehicle))};\r\n    {\r\n        if (_x == \"field\") exitWith {_return = true;};\r\n        if (_x == \"RepairFacility\" && _repairFacility) exitWith {_return = true;};\r\n        if (_x == \"RepairVehicle\" && _repairVeh) exitWith {_return = true;};\r\n        if !(isNil _x) exitWith {\r\n            private _val = missionNamespace getVariable _x;\r\n            if (_val isEqualType 0) then {\r\n                _return = switch (_val) do {\r\n                    case 0: {true}; //useAnywhere\r\n                    case 1: {call _repairVeh}; //repairVehicleOnly\r\n                    case 2: {call _repairFacility}; //repairFacilityOnly\r\n                    case 3: {(call _repairFacility) || {call _repairVeh}}; //vehicleAndFacility\r\n                    default {false}; //Disabled\r\n                };\r\n            };\r\n        };\r\n    } forEach _repairLocations;\r\n};\r\nif (!_return) exitWith {false};\r\n\r\n//Check that there are required objects nearby\r\nprivate _requiredObjects = getArray (_config >> \"claimObjects\");\r\nif (!(_requiredObjects isEqualTo [])) then {\r\n    private _objectsAvailable = [_caller, 5, _requiredObjects] call FUNC(getClaimObjects);\r\n    if (_objectsAvailable isEqualTo []) then {\r\n            TRACE_2(\"Missing Required Objects\",_requiredObjects,_objectsAvailable);\r\n        _return = false\r\n    };\r\n};\r\n\r\n_return && {alive _target};\r\n"},{"name":"ace_repair_fnc_canRepairTrack","file":"repair/functions/fnc_canRepairTrack.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit can replace given track of the vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canRepairTrack\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\r\nTRACE_3(\"params\",_unit,_target,_hitPoint);\r\n\r\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n//check for a near track is handled by claimObjects[] config\r\n\r\n(_target getHitPointDamage _hitPoint > 0)\r\n"},{"name":"ace_repair_fnc_canReplaceTrack","file":"repair/functions/fnc_canReplaceTrack.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit can replace given track of the vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canReplaceTrack\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\r\nTRACE_3(\"params\",_unit,_target,_hitPoint);\r\n\r\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n//check for a near track object is handled by claimObjects[] config\r\n\r\n(_target getHitPointDamage _hitPoint >= 1)\r\n"},{"name":"ace_repair_fnc_canReplaceWheel","file":"repair/functions/fnc_canReplaceWheel.sqf","text":"/*\r\n * Author: commy2\r\n * Check if the unit can replace given wheel of the vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_canReplaceWheel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_target\", \"_hitPoint\"];\r\nTRACE_3(\"params\",_unit,_target,_hitPoint);\r\n\r\nif !([_unit, _target, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)) exitWith {false};\r\n\r\n//check for GVAR(engineerSetting_Wheel) is handeled by requiredEngineer config\r\n//check for a near wheel object is handled by claimObjects[] config\r\n\r\n(_target getHitPointDamage _hitPoint >= 1)\r\n"},{"name":"ace_repair_fnc_doFullRepair","file":"repair/functions/fnc_doFullRepair.sqf","text":"/*\r\n * Author: Glowbal\r\n * Fully repairs vehicle\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing (not used) <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle] call ace_repair_fnc_doFullRepair\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"_vehicle\"];\r\nTRACE_1(\"params\",_vehicle);\r\n\r\n_vehicle setDamage 0;\r\n"},{"name":"ace_repair_fnc_doRemoveTrack","file":"repair/functions/fnc_doRemoveTrack.sqf","text":"/*\r\n * Author: commy2\r\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_doRemoveTrack\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\"];\r\nTRACE_3(\"params\",_unit,_vehicle,_hitPoint);\r\n\r\n// get current hitpoint damage\r\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\r\n\r\n// can't remove destroyed or already removed wheel\r\nif (_hitPointDamage >= 1) exitWith {};\r\n\r\n// don't die by spawning / moving the wheel\r\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\r\n\r\n// spawn track\r\nprivate _newTrack = [\"ACE_Track\", getPosASL _unit, _hitPointDamage] call FUNC(spawnObject);\r\nTRACE_2(\"new track created\",_newTrack,damage _newTrack);\r\n\r\n// raise event to set the new hitpoint damage\r\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, 1], _vehicle] call CBA_fnc_targetEvent;\r\n\r\n// display text message if enabled\r\nif (GVAR(DisplayTextOnRepair)) then {\r\n    [localize LSTRING(RemovedTrack)] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_repair_fnc_doRemoveWheel","file":"repair/functions/fnc_doRemoveWheel.sqf","text":"/*\r\n * Author: commy2\r\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\"] call ace_repair_fnc_doRemoveWheel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\"];\r\nTRACE_3(\"params\",_unit,_vehicle,_hitPoint);\r\n\r\n// get current hitpoint damage\r\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\r\n\r\n// can't remove destroyed or already removed wheel\r\nif (_hitPointDamage >= 1) exitWith {};\r\n\r\n// don't die by spawning / moving the wheel\r\n[QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\r\n\r\n// spawn wheel\r\nprivate _newWheel = [\"ACE_Wheel\", getPosASL _unit, _hitPointDamage] call FUNC(spawnObject);\r\nTRACE_2(\"new wheel created\",_newWheel,damage _newWheel);\r\n\r\n// raise event to set the new hitpoint damage\r\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, 1], _vehicle] call CBA_fnc_targetEvent;\r\n\r\n// display text message if enabled\r\nif (GVAR(DisplayTextOnRepair)) then {\r\n    [localize LSTRING(RemovedWheel)] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_repair_fnc_doRepair","file":"repair/functions/fnc_doRepair.sqf","text":"/*\r\n * Author: commy2\r\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpointIndex <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, 6, \"MiscRepair\"] call ace_repair_fnc_doRepair\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_hitPointIndex\"];\r\nTRACE_3(\"params\",_unit,_vehicle,_hitPointIndex);\r\n\r\nprivate _postRepairDamageMin = [_unit] call FUNC(getPostRepairDamage);\r\n\r\n(getAllHitPointsDamage _vehicle) params [\"_allHitPoints\"];\r\nprivate _hitPointClassname = _allHitPoints select _hitPointIndex;\r\n\r\n// get current hitpoint damage\r\nprivate _hitPointCurDamage = _vehicle getHitIndex _hitPointIndex;\r\n\r\n// repair a max of 0.5, don't use negative values for damage\r\nprivate _hitPointNewDamage = (_hitPointCurDamage - 0.5) max _postRepairDamageMin;\r\n\r\nif (_hitPointNewDamage < _hitPointCurDamage) then {\r\n    // raise event to set the new hitpoint damage\r\n    TRACE_3(\"repairing main point\", _vehicle, _hitPointIndex, _hitPointNewDamage);\r\n    [QGVAR(setVehicleHitPointDamage), [_vehicle, _hitPointIndex, _hitPointNewDamage], _vehicle] call CBA_fnc_targetEvent;\r\n    _hitPointCurDamage = _hitPointNewDamage;\r\n};\r\n\r\n// Get hitpoint groups if available\r\nprivate _hitpointGroupConfig = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> QGVAR(hitpointGroups);\r\nif (isArray _hitpointGroupConfig) then {\r\n    // Retrieve hitpoint subgroup if current hitpoint is main hitpoint of a group\r\n    {\r\n        _x params [\"_masterHitpoint\", \"_subHitArray\"];\r\n        // Exit using found hitpoint group if this hitpoint is leader of any\r\n        if (_masterHitpoint == _hitPointClassname) exitWith {\r\n            {\r\n                private _subHitIndex = _allHitPoints find _x; //convert hitpoint classname to index\r\n                if (_subHitIndex == -1) then {\r\n                    ACE_LOGERROR_2(\"Invalid hitpoint %1 in hitpointGroups of %2\",_x,_vehicle);\r\n                } else {\r\n                    private _subPointCurDamage = _vehicle getHitIndex _hitPointIndex;\r\n                    private _subPointNewDamage = (_subPointCurDamage - 0.5) max _postRepairDamageMin;\r\n                    if (_subPointNewDamage < _subPointCurDamage) then {\r\n                        TRACE_3(\"repairing sub point\", _vehicle, _subHitIndex, _subPointNewDamage);\r\n                        [QGVAR(setVehicleHitPointDamage), [_vehicle, _subHitIndex, _subPointNewDamage], _vehicle] call CBA_fnc_targetEvent;\r\n                    };\r\n                };\r\n            } forEach _subHitArray;\r\n        };\r\n    } forEach (getArray _hitpointGroupConfig);\r\n};\r\n\r\n// display text message if enabled\r\nif (GVAR(DisplayTextOnRepair)) then {\r\n    // Find localized string\r\n    private _textLocalized = localize ([LSTRING(RepairedHitPointFully), LSTRING(RepairedHitPointPartially)] select (_hitPointCurDamage > 0));\r\n    private _textDefault = localize ([LSTRING(RepairedFully), LSTRING(RepairedPartially)] select (_hitPointCurDamage > 0));\r\n    ([_hitPointClassname, _textLocalized, _textDefault] call FUNC(getHitPointString)) params [\"_text\"];\r\n\r\n    // Display text\r\n    [_text] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_repair_fnc_doRepairTrack","file":"repair/functions/fnc_doRepairTrack.sqf","text":"/*\r\n * Author: commy2\r\n * Called by repair action / progress bar. Raise events to set the new hitpoint damage.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n * 3: Repair Action Classname (Not used) <STRING>\r\n * 4: (Not used) <ARRAY>\r\n * 5: (Not used) <ARRAY>\r\n * 6: Required Repair Objects <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\", \"RepairTrack\", [], [], [aTrack]] call ace_repair_fnc_doRepairTrack\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\", \"\", \"\", \"\", \"_claimedObjects\"];\r\nTRACE_4(\"params\",_unit,_vehicle,_hitPoint,_claimedObjects);\r\n\r\n_claimedObjects params [[\"_track\", objNull]];\r\nif ((isNull _track) || {!([_unit, _track, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith))}) exitWith {\r\n    ACE_LOGERROR_1(\"Bad Track\", _claimedObjects);\r\n};\r\n\r\n// can't use a destroyed track\r\nif ((damage _track) >= 1) exitWith {};\r\n\r\n// get current hitpoint damage\r\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\r\nprivate _damageRepaired = (1 - (damage _track)) / 4; // require 4 tracks to fully replace one side\r\n\r\n// don't die by spawning / moving the wheel\r\n_hitPointDamage = (_hitPointDamage - _damageRepaired) min 0;\r\ndeleteVehicle _track;\r\n\r\n// raise event to set the new hitpoint damage\r\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, _hitPointDamage], _vehicle] call CBA_fnc_targetEvent;\r\n\r\n// display text message if enabled\r\nif (GVAR(DisplayTextOnRepair)) then {\r\n    [LSTRING(ReplacedTrack)] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_repair_fnc_doReplaceTrack","file":"repair/functions/fnc_doReplaceTrack.sqf","text":"/*\r\n * Author: commy2\r\n * Replaces a track.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n * 3: Repair Action Classname (Not used) <STRING>\r\n * 4: (Not used) <ARRAY>\r\n * 5: (Not used) <ARRAY>\r\n * 6: Required Repair Objects <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\", \"ReplaceTrack\", [], [], [aTrack]] call ace_repair_fnc_doReplaceTrack\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\", \"\", \"\", \"\", \"_claimedObjects\"];\r\nTRACE_4(\"params\",_unit,_vehicle,_hitPoint,_claimedObjects);\r\n\r\n_claimedObjects params [[\"_track\", objNull]];\r\nif ((isNull _track) || {!([_unit, _track, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith))}) exitWith {\r\n    ACE_LOGERROR_1(\"Bad Track\", _claimedObjects);\r\n};\r\n\r\n// get current hitpoint damage\r\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\r\n\r\n// can't replace not destroyed wheel\r\nif (_hitPointDamage < 1) exitWith {};\r\n\r\n// get track's damage\r\nprivate _newHitPointDamage = damage _track;\r\n\r\n// can't replace with a destroyed wheel\r\nif (_newHitPointDamage >= 1) exitWith {};\r\n\r\ndeleteVehicle _track;\r\n\r\n// raise event to set the new hitpoint damage\r\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, _newHitPointDamage], _vehicle] call CBA_fnc_targetEvent;\r\n\r\n// display text message if enabled\r\nif (GVAR(DisplayTextOnRepair)) then {\r\n    [LSTRING(ReplacedTrack)] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_repair_fnc_doReplaceWheel","file":"repair/functions/fnc_doReplaceWheel.sqf","text":"/*\r\n * Author: commy2\r\n * Repairs a vehicle's wheel with a ACE_wheel spare part object.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint <STRING>\r\n * 3: Repair Action Classname (Not used) <STRING>\r\n * 4: (Not used) <ARRAY>\r\n * 5: (Not used) <ARRAY>\r\n * 6: Required Repair Objects <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\", \"ReplaceWheel\", [], [], [aWheel]] call ace_repair_fnc_doReplaceWheel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_hitPoint\", \"\", \"\", \"\", \"_claimedObjects\"];\r\nTRACE_4(\"params\",_unit,_vehicle,_hitPoint,_claimedObjects);\r\n\r\n_claimedObjects params [[\"_wheel\", objNull]];\r\nif ((isNull _wheel) || {!([_unit, _wheel, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith))}) exitWith {\r\n    ACE_LOGWARNING_1(\"Bad Claimed Wheel\", _claimedObjects);\r\n};\r\n\r\n// get current hitpoint damage\r\nprivate _hitPointDamage = _vehicle getHitPointDamage _hitPoint;\r\n\r\n// can't replace not destroyed wheel\r\nif (_hitPointDamage < 1) exitWith {};\r\n\r\n// get replacement wheel's damage\r\nprivate _newHitPointDamage = damage _wheel;\r\n\r\n// can't replace a destroyed wheel\r\nif (_newHitPointDamage >= 1) exitWith {};\r\n\r\ndeleteVehicle _wheel;\r\n\r\n// raise event to set the new hitpoint damage\r\n[QGVAR(setWheelHitPointDamage), [_vehicle, _hitPoint, _newHitPointDamage], _vehicle] call CBA_fnc_targetEvent;\r\n\r\n// display text message if enabled\r\nif (GVAR(DisplayTextOnRepair)) then {\r\n    [LSTRING(ReplacedWheel)] call EFUNC(common,displayTextStructured);\r\n};\r\n"},{"name":"ace_repair_fnc_getClaimObjects","file":"repair/functions/fnc_getClaimObjects.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Returns array of required nearby repair objects (wheels/tracks)\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Max range to seach from unit (meters) <NUMBER>\r\n * 2: Array of arrays of classnames <ARRAY>\r\n *\r\n * Return Value:\r\n * Array of objects, or [] if not all available <ARRAY>\r\n *\r\n * Example:\r\n * [player, 5, [[\"Ace_Track\"]]] call ace_repair_fnc_getClaimObjects\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_maxRange\", \"_objectsToClaim\"];\r\nTRACE_3(\"params\",_unit,_maxRange,_objectsToClaim);\r\n\r\nprivate _return = [];\r\n\r\n{\r\n    private _requiredList = _x; //eg [\"ace_track\", \"ace_track\"]\r\n    private _ableToAquire = []; //will be array of ojbects\r\n    {\r\n        private _nearObjects = nearestObjects [_unit, [_x], _maxRange];\r\n        private _canClaimObject = objNull;\r\n        {\r\n            if ((!(_x in _ableToAquire))\r\n                    && {[_unit, _x, [\"isNotDragging\", \"isNotCarrying\", \"isNotOnLadder\"]] call EFUNC(common,canInteractWith)}\r\n                    &&{(damage _x) < 1}\r\n                    ) exitWith { _canClaimObject = _x; };\r\n        } forEach _nearObjects;\r\n        if (isNull _canClaimObject) exitWith {};\r\n        _ableToAquire pushBack _canClaimObject;\r\n    } forEach _x;\r\n    TRACE_2(\"Check required equals available\",_requiredList,_ableToAquire);\r\n    if ((count _ableToAquire) == (count _requiredList)) exitWith {_return = _ableToAquire};\r\n    false\r\n} count _objectsToClaim;\r\n\r\n_return\r\n"},{"name":"ace_repair_fnc_getHitPointString","file":"repair/functions/fnc_getHitPointString.sqf","text":"/*\r\n * Author: Jonpas\r\n * Finds the localized string of the given hitpoint name or uses default text if none found.\r\n *\r\n * Arguments:\r\n * 0: Hitpoint <STRING>\r\n * 1: Localized Text <STRING>\r\n * 2: Default Text <STRING>\r\n * 3: Track Added Hitpoints <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * 0: Text\r\n * 1: Added Hitpoint (default: [])\r\n *\r\n * Example:\r\n * [\"HitFuel\", \"Repairing %1 ...\", \"Repairing HitFuel\"] call ace_repair_fnc_getHitPointString\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_hitPoint\", \"_textLocalized\", \"_textDefault\", [\"_trackArray\", []]];\r\n\r\nprivate [\"_track\", \"_trackNames\", \"_trackStrings\", \"_trackAmount\", \"_text\", \"_toFind\", \"_trackIndex\", \"_combinedString\"];\r\n\r\n_track = if (count _trackArray > 0) then {true} else {false};\r\n_trackNames = [];\r\n_trackStrings = [];\r\n_trackAmount = [];\r\n\r\nif (_track) then {\r\n    _trackNames = _trackArray select 0;\r\n    _trackStrings = _trackArray select 1;\r\n    _trackAmount = _trackArray select 2;\r\n};\r\n\r\n// Prepare first part of the string from stringtable\r\n_text = LSTRING(Hit);\r\n\r\n// Remove \"Hit\" from hitpoint name if one exists\r\n_toFind = if ((toLower _hitPoint) find \"hit\" == 0) then {\r\n    [_hitPoint, 3] call CBA_fnc_substr\r\n} else {\r\n    _hitPoint\r\n};\r\n\r\n// Loop through always shorter part of the hitpoint name to find the string from stringtable\r\nfor \"_i\" from 0 to (count _hitPoint) do {\r\n    if (_track) then {\r\n        // Loop through already added hitpoints and save index\r\n        _trackIndex = -1;\r\n        {\r\n            if (_x == _toFind) exitWith {\r\n                _trackIndex = _forEachIndex;\r\n            };\r\n        } forEach _trackNames;\r\n\r\n        // Use already added hitpoint if one found above and numerize\r\n        if (_trackIndex != -1) exitWith {\r\n            _text = localize (_trackStrings select _trackIndex) + \" \" + str(_trackAmount select _trackIndex);\r\n            _trackAmount set [_trackIndex, (_trackAmount select _trackIndex) + 1]; // Set amount\r\n            TRACE_2(\"Same hitpoint found\",_toFind,_trackNames);\r\n        };\r\n    };\r\n\r\n\r\n    // Localize if localization found\r\n    _combinedString = _text + _toFind;\r\n    if (isLocalized _combinedString) exitWith {\r\n        _text = format [_textLocalized, localize _combinedString];\r\n        TRACE_1(\"Hitpoint localized\",_toFind);\r\n\r\n        if (_track) then {\r\n            // Add hitpoint to the list\r\n            _trackNames pushBack _toFind;\r\n            _trackStrings pushBack _combinedString;\r\n            _trackAmount pushBack 2;\r\n        };\r\n    };\r\n\r\n    // Cut off one character\r\n    _toFind = [_toFind, 0, count _toFind - 1] call CBA_fnc_substr;\r\n};\r\n\r\n// Don't display part name if no string is found in stringtable\r\nif (_text == LSTRING(Hit)) then {\r\n    if (_hitPoint != \"\") then { ACE_LOGWARNING_1(\"Hitpoint [%1] - could not be localized\", _hitPoint); };\r\n    _text = _textDefault;\r\n};\r\n\r\n[_text, [_trackNames, _trackStrings, _trackAmount]]\r\n"},{"name":"ace_repair_fnc_getPostRepairDamage","file":"repair/functions/fnc_getPostRepairDamage.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the damage threshold based on settings and unit type.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n *\r\n * Return Value:\r\n * 0: Rpair Damage Threshold <NUMBER>\r\n *\r\n * Example:\r\n * [unit] call ace_repair_fnc_getPostRepairDamage\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\n//If in facility or near vehicle then complete repair of hitpoint:\r\nif (([_unit] call FUNC(isInRepairFacility) || {[_unit] call FUNC(isNearRepairVehicle)})) exitWith {0};\r\n\r\nprivate _class = _unit getVariable [\"ACE_IsEngineer\", getNumber (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"engineer\")];\r\n//If specialist or more qualified than min, then use engineer threshold:\r\nif ((_class isEqualTo 2) || {[_unit, GVAR(engineerSetting_Repair) + 1] call FUNC(isEngineer)}) exitWith {\r\n    (GVAR(repairDamageThreshold_Engineer) min GVAR(repairDamageThreshold))\r\n};\r\n\r\n//Return default threshold:\r\nGVAR(repairDamageThreshold)\r\n"},{"name":"ace_repair_fnc_getWheelHitPointsWithSelections","file":"repair/functions/fnc_getWheelHitPointsWithSelections.sqf","text":"/*\r\n * Author: commy2\r\n * Returns the wheel hitpoints and their selections.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * 0: Wheel hitpoints <ARRAY>\r\n * 1: Wheel hitpoint selections in model coordinates <ARRAY>\r\n *\r\n * Example:\r\n * [car1] call ace_repair_fnc_getWheelHitPointsWithSelections\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_1(\"params\",_vehicle);\r\n\r\nprivate[\"_bestDist\", \"_bestIndex\", \"_wheelBone\", \"_wheelBoneNameResized\", \"_wheelCenter\", \"_wheelCenterPos\", \"_wheelHitPoint\", \"_wheelHitPointSelection\", \"_wheelHitPointSelections\", \"_wheelHitPoints\", \"_wheelName\", \"_xDist\", \"_xPos\"];\r\n\r\n// get the vehicles wheel config\r\nprivate \"_wheels\";\r\n_wheels = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"Wheels\";\r\n\r\n// exit with nothing if the vehicle has no wheels class\r\nif !(isClass _wheels) exitWith {TRACE_1(\"No Wheels\",_wheels); [[],[]]};\r\n\r\n// get all hitpoints and selections\r\n(getAllHitPointsDamage _vehicle) params [\"_hitPoints\", \"_hitPointSelections\"];\r\n\r\n// get all wheels and read selections from config\r\n_wheels = \"true\" configClasses _wheels;\r\n\r\n_wheelHitPoints = [];\r\n_wheelHitPointSelections = [];\r\n\r\n{\r\n    _wheelName = configName _x;\r\n    _wheelCenter = getText (_x >> \"center\");\r\n    _wheelBone = getText (_x >> \"boneName\");\r\n    _wheelBoneNameResized = _wheelBone select [0, 9]; //ount \"wheel_X_Y\"; // this is a requirement for physx. Should work for all addon vehicles.\r\n\r\n    TRACE_4(\"\",_wheelName,_wheelCenter,_wheelBone,_wheelBoneNameResized);\r\n\r\n    _wheelHitPoint = \"\";\r\n    _wheelHitPointSelection = \"\";\r\n\r\n    //Commy's orginal method\r\n    {\r\n        if ((_wheelBoneNameResized != \"\") && {_x find _wheelBoneNameResized == 0}) exitWith {  // same as above. Requirement for physx.\r\n            _wheelHitPoint = _hitPoints select _forEachIndex;\r\n            _wheelHitPointSelection = _hitPointSelections select _forEachIndex;\r\n            TRACE_2(\"wheel found [Orginal]\", _wheelName, _wheelHitPoint);\r\n        };\r\n    } forEach _hitPointSelections;\r\n\r\n\r\n    if (_vehicle isKindOf \"Car\") then {\r\n        //Backup method, search for the closest hitpoint to the wheel's center selection pos.\r\n        //Ref #2742 - RHS's HMMWV\r\n        if (_wheelHitPoint == \"\") then {\r\n            _wheelCenterPos = _vehicle selectionPosition _wheelCenter;\r\n            if (_wheelCenterPos isEqualTo [0,0,0]) exitWith {TRACE_1(\"no center?\",_wheelCenter);};\r\n\r\n\r\n            _bestDist = 99;\r\n            _bestIndex = -1;\r\n            {\r\n                if (_x != \"\") then {\r\n                     //Filter out things that definitly aren't wheeels (#3759)\r\n                    if ((toLower (_hitPoints select _forEachIndex)) in [\"hitengine\", \"hitfuel\", \"hitbody\"]) exitWith {TRACE_1(\"filter\",_x)};\r\n                    _xPos = _vehicle selectionPosition _x;\r\n                    if (_xPos isEqualTo [0,0,0]) exitWith {};\r\n                    _xDist = _wheelCenterPos distance _xPos;\r\n                    if (_xDist < _bestDist) then {\r\n                        _bestIndex = _forEachIndex;\r\n                        _bestDist = _xDist;\r\n                    };\r\n                };\r\n            } forEach _hitPointSelections;\r\n\r\n            TRACE_2(\"closestPoint\",_bestDist,_bestIndex);\r\n            if (_bestIndex != -1) then {\r\n                _wheelHitPoint = _hitPoints select _bestIndex;\r\n                _wheelHitPointSelection = _hitPointSelections select _bestIndex;\r\n                TRACE_2(\"wheel found [Backup]\", _wheelName, _wheelHitPoint);\r\n            };\r\n        };\r\n    };\r\n\r\n    if ((_wheelHitPoint != \"\") && {_wheelHitPointSelection != \"\"}) then {\r\n        _wheelHitPoints pushBack _wheelHitPoint;\r\n        _wheelHitPointSelections pushBack _wheelHitPointSelection;\r\n    };\r\n} forEach _wheels;\r\n\r\n[_wheelHitPoints, _wheelHitPointSelections]\r\n"},{"name":"ace_repair_fnc_hasItems","file":"repair/functions/fnc_hasItems.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if the engineer has all items.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Items required <ARRAY>\r\n *\r\n * Return Value:\r\n * Has Items <BOOL>\r\n *\r\n * Example:\r\n * [engineer, [items]] call ace_repair_fnc_hasItems\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_items\"];\r\nTRACE_2(\"params\",_unit,_items);\r\n\r\nprivate [\"_return\"];\r\n\r\n_return = true;\r\n{\r\n    if ((_x isEqualType []) && {({[_unit, _x] call EFUNC(common,hasItem)} count _x == 0)}) exitWith {\r\n        _return = false;\r\n    };\r\n    if ((_x isEqualType \"\") && {!([_unit, _x] call EFUNC(common,hasItem))}) exitWith {\r\n        _return = false;\r\n    };\r\n} forEach _items;\r\n\r\n_return;\r\n"},{"name":"ace_repair_fnc_isEngineer","file":"repair/functions/fnc_isEngineer.sqf","text":"/*\r\n * Author: Glowbal, KoffeinFlummi, commy2\r\n * Check if a unit is any engineer class.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Class <NUMBER> (default: 1)\r\n *\r\n * Return Value:\r\n * Is Engineer Class <BOOL>\r\n *\r\n * Example:\r\n * [unit, 1] call ace_repair_fnc_isEngineer\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_engineerN\", 1]];\r\nTRACE_2(\"params\",_unit,_engineerN);\r\n\r\nprivate [\"_class\"];\r\n_class = _unit getVariable [\"ACE_IsEngineer\", getNumber (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"engineer\")];\r\n\r\n// This if statement is here for copmatability with the common variant of isEngineer, which requires a bool.\r\n// We cannot move this function to common because we require the GVAR(engineerSetting_Repair), which only makes sense to include in the repair module.\r\nif (_class isEqualType false) then {_class = [0, 1] select _class};\r\n\r\n_class >= _engineerN;\r\n"},{"name":"ace_repair_fnc_isInRepairFacility","file":"repair/functions/fnc_isInRepairFacility.sqf","text":"/*\r\n * Author: Glowbal\r\n * Checks if a unit is in a repair facility.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Is inside a repair facility <BOOL>\r\n *\r\n * Example:\r\n * [unit] call ace_repair_fnc_isInRepairFacility\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\nTRACE_1(\"params\",_object);\r\n\r\nprivate [\"_position\",\"_objects\",\"_isInBuilding\",\"_repairFacility\"];\r\n\r\n_position = getPosASL _object;\r\n_isInBuilding = false;\r\n_repairFacility = [];\r\n\r\n_objects = (lineIntersectsWith [_object modelToWorldVisual [0, 0, (_position select 2)], _object modelToWorldVisual [0, 0, (_position select 2) +10], _object]);\r\n{\r\n    if (((typeOf _x) in _repairFacility) || (_x getVariable [\"ACE_isRepairFacility\",0]) > 0) exitWith {\r\n        _isInBuilding = true;\r\n    };\r\n} forEach _objects;\r\n\r\nif (!_isInBuilding) then {\r\n    _objects = position _object nearObjects 7.5;\r\n    {\r\n        if (((typeOf _x) in _repairFacility) || (_x getVariable [\"ACE_isRepairFacility\",0]) > 0) exitWith {\r\n            _isInBuilding = true;\r\n        };\r\n    } forEach _objects;\r\n};\r\n_isInBuilding;\r\n"},{"name":"ace_repair_fnc_isNearRepairVehicle","file":"repair/functions/fnc_isNearRepairVehicle.sqf","text":"/*\r\n * Author: KoffeinFlummi\r\n * Checks if a unit is near an engineering vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Is near engineering vehicle <BOOL>\r\n *\r\n * Example:\r\n * [unit] call ace_repair_fnc_isNearRepairVehicle\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nTRACE_1(\"params\",_unit);\r\n\r\nprivate [\"_nearObjects\", \"_return\"];\r\n\r\n_nearObjects = nearestObjects [_unit, [\"Air\",\"LandVehicle\"], 20];\r\n\r\n_return = false;\r\n{\r\n    if ([_x] call FUNC(isRepairVehicle)) exitWith {_return = true;};\r\n} forEach _nearObjects;\r\n\r\n_return;\r\n"},{"name":"ace_repair_fnc_isRepairVehicle","file":"repair/functions/fnc_isRepairVehicle.sqf","text":"/*\r\n * Author: Glowbal\r\n * Check if vehicle is a engineering vehicle.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * ReturnValue:\r\n * Is engineering vehicle <BOOL>\r\n *\r\n * Example:\r\n * [vehicle] call ace_repair_fnc_isRepairVehicle\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_1(\"params\",_vehicle);\r\n\r\nif (_vehicle isKindOf \"CAManBase\") exitWith {false};\r\n\r\n((_vehicle getVariable [\"ACE_isRepairVehicle\", getNumber (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> QGVAR(canRepair))]) > 0);\r\n"},{"name":"ace_repair_fnc_moduleAddSpareParts","file":"repair/functions/fnc_moduleAddSpareParts.sqf","text":"/*\r\n * Author: Jonpas\r\n * Adds spare parts to a vehicle.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic] call ace_repair_fnc_moduleAddSpareParts\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\nif (!isNull _logic) then {\r\n    private [\"_list\", \"_part\", \"_amount\"];\r\n    _list = _logic getVariable [\"List\", \"\"];\r\n    _part = _logic getVariable [\"Part\", 0];\r\n    _amount = _logic getVariable [\"Amount\", 1];\r\n\r\n    // Parse list\r\n    _list = [_list, true, true] call EFUNC(common,parseList);\r\n\r\n    // Add synchronized objects to list\r\n    {\r\n        _list pushBack _x;\r\n        nil\r\n    } count (synchronizedObjects _logic);\r\n\r\n    if (_list isEqualTo []) exitWith {};\r\n\r\n    TRACE_3(\"Module info parsed\",_list,_part,_amount);\r\n\r\n    // Add spare parts\r\n    {\r\n        [_x, _amount, _part, true] call FUNC(addSpareParts);\r\n        false\r\n    } count _list;\r\n};\r\n"},{"name":"ace_repair_fnc_moduleAssignEngineer","file":"repair/functions/fnc_moduleAssignEngineer.sqf","text":"/*\r\n * Author: Glowbal\r\n * Assign an engineer role to a unit.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic] call ace_repair_fnc_moduleAssignEngineer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\nif (!isNull _logic) then {\r\n    private [\"_list\", \"_setting\"];\r\n    _list = _logic getVariable [\"EnableList\", \"\"];\r\n    _setting = _logic getVariable [\"role\", 0];\r\n\r\n    [_list, \"ACE_IsEngineer\", _setting, true] call EFUNC(common,assignObjectsInList);\r\n    [synchronizedObjects _logic, \"ACE_IsEngineer\", _setting, true] call EFUNC(common,assignObjectsInList);\r\n};\r\n"},{"name":"ace_repair_fnc_moduleAssignRepairFacility","file":"repair/functions/fnc_moduleAssignRepairFacility.sqf","text":"/*\r\n * Author: Glowbal\r\n * Assign a repair facility.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic] call ace_repair_fnc_moduleAssignRepairFacility\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\nif (!isNull _logic) then {\r\n    private [\"_list\", \"_setting\"];\r\n    _list = _logic getVariable [\"EnableList\", \"\"];\r\n    _setting = _logic getVariable [\"role\", 0];\r\n\r\n    [_list, \"ACE_isRepairFacility\", _setting, true] call EFUNC(common,assignObjectsInList);\r\n    [synchronizedObjects _logic, \"ACE_isRepairFacility\", _setting, true] call EFUNC(common,assignObjectsInList);\r\n };\r\n"},{"name":"ace_repair_fnc_moduleAssignRepairVehicle","file":"repair/functions/fnc_moduleAssignRepairVehicle.sqf","text":"/*\r\n * Author: Glowbal\r\n * Assign a repair vehicle.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic] call ace_repair_fnc_moduleAssignRepairVehicle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\nif (!isNull _logic) then {\r\n    private [\"_list\", \"_setting\"];\r\n    _list = _logic getVariable [\"EnableList\", \"\"];\r\n    _setting = _logic getVariable [\"role\", 0];\r\n\r\n    [_list, \"ACE_isRepairVehicle\", _setting, true] call EFUNC(common,assignObjectsInList);\r\n    [synchronizedObjects _logic, \"ACE_isRepairVehicle\", _setting, true] call EFUNC(common,assignObjectsInList);\r\n};\r\n"},{"name":"ace_repair_fnc_moduleRepairSettings","file":"repair/functions/fnc_moduleRepairSettings.sqf","text":"/*\r\n * Author: commy2\r\n * Adjusts repair damage settings.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic] call ace_repair_fnc_moduleRepairSettings\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\"];\r\n\r\nif (!isServer) exitWith {};\r\n\r\n[_logic, QGVAR(engineerSetting_Repair), \"engineerSetting_Repair\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(engineerSetting_Wheel), \"engineerSetting_Wheel\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(consumeItem_ToolKit), \"consumeItem_ToolKit\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(repairDamageThreshold), \"repairDamageThreshold\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(repairDamageThreshold_Engineer), \"repairDamageThreshold_Engineer\"] call EFUNC(common,readSettingFromModule);\r\n\r\n\r\n[_logic, QGVAR(fullRepairLocation), \"fullRepairLocation\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(engineerSetting_fullRepair), \"engineerSetting_fullRepair\"] call EFUNC(common,readSettingFromModule);\r\n\r\n[_logic, QGVAR(addSpareParts), \"addSpareParts\"] call EFUNC(common,readSettingFromModule);\r\n\r\n[_logic, QGVAR(wheelRepairRequiredItems), \"wheelRepairRequiredItems\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO(\"Repair Module Initialized.\");\r\n"},{"name":"ace_repair_fnc_normalizeHitPoints","file":"repair/functions/fnc_normalizeHitPoints.sqf","text":"/*\r\n * Author: commy2\r\n * Used to normalize dependant hitpoints. May overwrite some global variables that are named like hitpoints or \"Total\" though...\r\n *\r\n * Arguments:\r\n * 0: Local Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle] call ace_repair_fnc_normalizeHitPoints\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_2(\"params\",_vehicle, typeOf _vehicle);\r\n\r\n// Can't execute all commands if the vehicle isn't local, exit if that's so\r\nif !(local _vehicle) exitWith {ACE_LOGERROR_1(\"Vehicle Not Local %1\", _vehicle);};\r\n\r\n(getAllHitPointsDamage _vehicle) params [[\"_allHitPoints\", []]];\r\n\r\nprivate _config = configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"HitPoints\";\r\n\r\nprivate _realHitPoints = [];\r\nprivate _dependentHitPoints = [];\r\nprivate _dependentHitPointScripts = [];\r\n\r\n// Find dependent hitpoints\r\n{\r\n    if ((_x != \"\") && {isClass (_config >> _x)} && {!(_x in _realHitPoints)}) then {\r\n        _realHitPoints pushBack _x;\r\n        if (isText (_config >> _x >> \"depends\")) then {\r\n            _dependentHitPoints pushBack _x;\r\n            _dependentHitPointScripts pushBack compile getText (_config >> _x >> \"depends\");\r\n        };\r\n    };\r\n} forEach _allHitPoints;\r\n\r\nTRACE_2(\"\",_realHitPoints,_dependentHitPoints);\r\n\r\n// Don't bother setting variables if no depends on vehicle:\r\nif (_dependentHitPoints isEqualTo []) exitWith {};\r\n\r\n\r\n// Define global variables\r\nTotal = damage _vehicle;\r\n{\r\n    missionNamespace setVariable [_x, _vehicle getHitPointDamage _x];\r\n} forEach _realHitPoints;\r\n\r\n// apply normalized damage to all dependand hitpoints\r\n{\r\n    private _damage = call (_dependentHitPointScripts select _forEachIndex);\r\n    TRACE_2(\"setting depend hitpoint\", _x, _damage);\r\n    _vehicle setHitPointDamage [_x, _damage];\r\n} forEach _dependentHitPoints;\r\n"},{"name":"ace_repair_fnc_repair_failure","file":"repair/functions/fnc_repair_failure.sqf","text":"/*\r\n * Author: KoffeinFlummi, Glowbal\r\n * Callback when repair fails.\r\n *\r\n * Arguments:\r\n * 0: Arguments <ARRAY>\r\n *   0: Unit that does the repairing <OBJECT>\r\n *   1: Vehicle to repair <OBJECT\r\n *   2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\r\n *   3: Repair Action Classname <STRING>\r\n *   4: None\r\n *   5: Items available <ARRAY>\r\n *   6: Claimed Repair Objects <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[unit, vehicle, \"hitpoint\", \"classname\", nil, [items], [aWheel]]] call ace_repair_fnc_repair_failure\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_args\"];\r\n_args params [\"_caller\", \"_target\",\"_selectionName\",\"_className\",\"\",\"_usersOfItems\", \"_claimedObjects\"];\r\nTRACE_5(\"params\",_caller,_target,_selectionName,_className,_usersOfItems);\r\n\r\nprivate [\"_config\",\"_callback\", \"_usersOfItems\", \"_weaponSelect\"];\r\n\r\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\r\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\r\n};\r\nif (vehicle _caller == _caller) then {\r\n    [_caller, _caller getVariable [QGVAR(repairPrevAnimCaller), \"\"], 2] call EFUNC(common,doAnimation);\r\n};\r\n_caller setVariable [QGVAR(repairPrevAnimCaller), nil];\r\n\r\n_weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnrepair), \"\"]);\r\nif (_weaponSelect != \"\") then {\r\n    _caller selectWeapon _weaponSelect;\r\n} else {\r\n    _caller action [\"SwitchWeapon\", _caller, _caller, 99];\r\n};\r\n\r\n{\r\n    (_x select 0) addItem (_x select 1);\r\n} forEach _usersOfItems;\r\n\r\n//Unclaim repair objects:\r\n{\r\n    TRACE_2(\"Releasing\", _x, (typeOf _x));\r\n    [objNull, _x, false] call EFUNC(common,claim);\r\n} forEach _claimedObjects;\r\n\r\n\r\n// Record specific callback\r\n_config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\r\n\r\n_callback = getText (_config >> \"callbackFailure\");\r\nif (isNil _callback) then {\r\n    _callback = compile _callback;\r\n} else {\r\n    _callback = missionNamespace getVariable _callback;\r\n};\r\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\r\n\r\n_args call _callback;\r\n\r\n//todo: repair litter?\r\n"},{"name":"ace_repair_fnc_repair_success","file":"repair/functions/fnc_repair_success.sqf","text":"/*\r\n * Author: KoffeinFlummi, Glowbal\r\n * Callback when repair completes.\r\n *\r\n * Arguments:\r\n * 0: Arguments <ARRAY>\r\n *   0: Unit that does the repairing <OBJECT>\r\n *   1: Vehicle to repair <OBJECT\r\n *   2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\r\n *   3: Repair Action Classname <STRING>\r\n *   4: Items <ARRAY>\r\n *   5: User of Items <ARRAY>\r\n *   6: Claimed Repair Objects <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[unit, vehicle, \"hitpoint\", \"classname\", [], [], [aWheel]]] call ace_repair_fnc_repair_success\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_args\"];\r\n_args params [\"_caller\", \"_target\",\"_selectionName\",\"_className\",\"\",\"\",\"_claimedObjects\"];\r\nTRACE_4(\"params\",_caller,_target,_selectionName,_className);\r\n\r\nprivate [\"_config\",\"_callback\", \"_weaponSelect\"];\r\n\r\nif (primaryWeapon _caller == \"ACE_FakePrimaryWeapon\") then {\r\n    _caller removeWeapon \"ACE_FakePrimaryWeapon\";\r\n};\r\nif (vehicle _caller == _caller) then {\r\n    [_caller, _caller getVariable [QGVAR(repairPrevAnimCaller), \"\"], 2] call EFUNC(common,doAnimation);\r\n};\r\n_caller setVariable [QGVAR(repairPrevAnimCaller), nil];\r\n\r\n_weaponSelect = (_caller getVariable [QGVAR(selectedWeaponOnrepair), \"\"]);\r\nif (_weaponSelect != \"\") then {\r\n    _caller selectWeapon _weaponSelect;\r\n} else {\r\n    _caller action [\"SwitchWeapon\", _caller, _caller, 99];\r\n};\r\n\r\n//Unclaim repair objects:\r\n{\r\n    TRACE_2(\"Releasing\", _x, (typeOf _x));\r\n    [objNull, _x, false] call EFUNC(common,claim);\r\n} forEach _claimedObjects;\r\n\r\n// Record specific callback\r\n_config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\r\n\r\n_callback = getText (_config >> \"callbackSuccess\");\r\nif (isNil _callback) then {\r\n    _callback = compile _callback;\r\n} else {\r\n    _callback = missionNamespace getVariable _callback;\r\n};\r\nif (!(_callback isEqualType {})) then {_callback = {TRACE_1(\"callback was NOT code\",_callback)};};\r\n\r\n_args call _callback;\r\n\r\n//todo: repair litter?\r\n"},{"name":"ace_repair_fnc_repair","file":"repair/functions/fnc_repair.sqf","text":"/*\r\n * Author: Glowbal, KoffeinFlummi\r\n * Starts the repair process.\r\n *\r\n * Arguments:\r\n * 0: Unit that does the repairing <OBJECT>\r\n * 1: Vehicle to repair <OBJECT>\r\n * 2: Selected hitpoint or hitpointIndex <STRING>or<NUMBER>\r\n * 3: Repair Action Classname <STRING>\r\n *\r\n * Return Value:\r\n * Succesful Repair Started <BOOL>\r\n *\r\n * Example:\r\n * [unit, vehicle, \"hitpoint\", \"classname\"] call ace_repair_fnc_repair\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_caller\", \"_target\", \"_hitPoint\", \"_className\"];\r\nTRACE_4(\"params\",_calller,_target,_hitPoint,_className);\r\n\r\nprivate[\"_callbackProgress\", \"_callerAnim\", \"_calller\", \"_condition\", \"_config\", \"_consumeItems\", \"_displayText\", \"_engineerRequired\", \"_iconDisplayed\", \"_items\", \"_repairTime\", \"_repairTimeConfig\", \"_return\", \"_usersOfItems\", \"_vehicleStateCondition\", \"_wpn\", \"_settingName\", \"_settingItemsArray\", \"_hitPointClassname\"];\r\n\r\n_config = (ConfigFile >> \"ACE_Repair\" >> \"Actions\" >> _className);\r\nif !(isClass _config) exitWith {false}; // or go for a default?\r\n\r\n_engineerRequired = if (isNumber (_config >> \"requiredEngineer\")) then {\r\n    getNumber (_config >> \"requiredEngineer\");\r\n} else {\r\n    // Check for required class\r\n    if (isText (_config >> \"requiredEngineer\")) exitWith {\r\n        missionNamespace getVariable [(getText (_config >> \"requiredEngineer\")), 0];\r\n    };\r\n    0;\r\n};\r\nif !([_caller, _engineerRequired] call FUNC(isEngineer)) exitWith {false};\r\n\r\nif ((isEngineOn _target) && {GVAR(autoShutOffEngineWhenStartingRepair)}) then {\r\n    [QEGVAR(common,engineOn), [_target, false], _target] call CBA_fnc_targetEvent;\r\n};\r\nif ((isEngineOn _target) && {!GVAR(autoShutOffEngineWhenStartingRepair)}) exitWith {\r\n    [LSTRING(shutOffEngineWarning), 1.5, _caller] call EFUNC(common,displayTextStructured);\r\n    false\r\n};\r\n\r\n//Items can be an array of required items or a string to a ACE_Setting array\r\n_items = if (isArray (_config >> \"items\")) then {\r\n    getArray (_config >> \"items\");\r\n} else {\r\n    _settingName = getText (_config >> \"items\");\r\n    _settingItemsArray = getArray (configFile >> \"ACE_Settings\" >> _settingName >> \"_values\");\r\n    if ((isNil _settingName) || {(missionNamespace getVariable _settingName) >= (count _settingItemsArray)}) exitWith {\r\n        ERROR(\"bad setting\"); [\"BAD\"]\r\n    };\r\n    _settingItemsArray select (missionNamespace getVariable _settingName);\r\n};\r\nif (count _items > 0 && {!([_caller, _items] call FUNC(hasItems))}) exitWith {false};\r\n\r\n_return = true;\r\nif (getText (_config >> \"condition\") != \"\") then {\r\n    _condition = getText (_config >> \"condition\");\r\n    if (isNil _condition) then {\r\n        _condition = compile _condition;\r\n    } else {\r\n        _condition = missionNamespace getVariable _condition;\r\n    };\r\n    if (_condition isEqualType false) then {\r\n        _return = _condition;\r\n    } else {\r\n        _return = [_caller, _target, _hitPoint, _className] call _condition;\r\n    };\r\n};\r\nif (!_return) exitWith {false};\r\n\r\n// _vehicleStateCondition = if (isText(_config >> \"vehicleStateCondition\")) then {\r\n    // missionNamespace getVariable [getText(_config >> \"vehicleStateCondition\"), 0]\r\n// } else {\r\n    // getNumber(_config >> \"vehicleStateCondition\")\r\n// };\r\n// if (_vehicleStateCondition == 1 && {!([_target] call FUNC(isInStableCondition))}) exitWith {false};\r\n\r\nprivate _repairLocations = getArray (_config >> \"repairLocations\");\r\nif (!(\"All\" in _repairLocations)) then {\r\n    private _repairFacility = {([_caller] call FUNC(isInRepairFacility)) || ([_target] call FUNC(isInRepairFacility))};\r\n    private _repairVeh = {([_caller] call FUNC(isNearRepairVehicle)) || ([_target] call FUNC(isNearRepairVehicle))};\r\n    {\r\n        if (_x == \"field\") exitWith {_return = true;};\r\n        if (_x == \"RepairFacility\" && _repairFacility) exitWith {_return = true;};\r\n        if (_x == \"RepairVehicle\" && _repairVeh) exitWith {_return = true;};\r\n        if !(isNil _x) exitWith {\r\n            private _val = missionNamespace getVariable _x;\r\n            if (_val isEqualType 0) then {\r\n                _return = switch (_val) do {\r\n                    case 0: {true}; //useAnywhere\r\n                    case 1: {call _repairVeh}; //repairVehicleOnly\r\n                    case 2: {call _repairFacility}; //repairFacilityOnly\r\n                    case 3: {(call _repairFacility) || {call _repairVeh}}; //vehicleAndFacility\r\n                    default {false}; //Disabled\r\n                };\r\n            };\r\n        };\r\n    } forEach _repairLocations;\r\n};\r\n\r\nprivate _requiredObjects = getArray (_config >> \"claimObjects\");\r\nprivate _claimObjectsAvailable = [];\r\nif (!(_requiredObjects isEqualTo [])) then {\r\n    _claimObjectsAvailable = [_caller, 5, _requiredObjects] call FUNC(getClaimObjects);\r\n    if (_claimObjectsAvailable isEqualTo []) then {\r\n        TRACE_2(\"Missing Required Objects\",_requiredObjects,_claimObjectsAvailable);\r\n        _return = false\r\n    };\r\n};\r\n\r\nif !(_return && alive _target) exitWith {false};\r\n//Last exitWith: repair_success or repair_failure will be run\r\n\r\n//Claim required objects\r\n{\r\n    TRACE_2(\"Claiming\", _x, (typeOf _x));\r\n    [_caller, _x, false] call EFUNC(common,claim);\r\n} forEach _claimObjectsAvailable;\r\n\r\n_consumeItems = if (isNumber (_config >> \"itemConsumed\")) then {\r\n    getNumber (_config >> \"itemConsumed\");\r\n} else {\r\n    // Check for required class\r\n    if (isText (_config >> \"itemConsumed\")) exitWith {\r\n        missionNamespace getVariable [(getText (_config >> \"itemConsumed\")), 0];\r\n    };\r\n    0;\r\n};\r\n\r\n_usersOfItems = [];\r\nif (_consumeItems > 0) then {\r\n    _usersOfItems = ([_caller, _items] call FUNC(useItems)) select 1;\r\n};\r\n\r\n// Parse the config for the progress callback\r\n_callbackProgress = getText (_config >> \"callbackProgress\");\r\nif (_callbackProgress == \"\") then {\r\n    _callbackProgress = \"true\";\r\n};\r\nif (isNil _callbackProgress) then {\r\n    _callbackProgress = compile _callbackProgress;\r\n} else {\r\n    _callbackProgress = missionNamespace getVariable _callbackProgress;\r\n};\r\n\r\n\r\n// Player Animation\r\n_callerAnim = [getText (_config >> \"animationCaller\"), getText (_config >> \"animationCallerProne\")] select (stance _caller == \"PRONE\");\r\n_caller setVariable [QGVAR(selectedWeaponOnrepair), currentWeapon _caller];\r\n\r\n// Cannot use secondairy weapon for animation\r\nif (currentWeapon _caller == secondaryWeapon _caller) then {\r\n    _caller selectWeapon (primaryWeapon _caller);\r\n};\r\n\r\n_wpn = [\"non\", \"rfl\", \"pst\"] select (1 + ([primaryWeapon _caller, handgunWeapon _caller] find (currentWeapon _caller)));\r\n_callerAnim = [_callerAnim, \"[wpn]\", _wpn] call CBA_fnc_replace;\r\nif (vehicle _caller == _caller && {_callerAnim != \"\"}) then {\r\n    if (primaryWeapon _caller == \"\") then {\r\n        _caller addWeapon \"ACE_FakePrimaryWeapon\";\r\n    };\r\n    if (currentWeapon _caller == \"\") then {\r\n        _caller selectWeapon (primaryWeapon _caller); // unit always has a primary weapon here\r\n    };\r\n\r\n    if (stance _caller == \"STAND\") then {\r\n        _caller setVariable [QGVAR(repairPrevAnimCaller), \"amovpknlmstpsraswrfldnon\"];\r\n    } else {\r\n        _caller setVariable [QGVAR(repairPrevAnimCaller), animationState _caller];\r\n    };\r\n    [_caller, _callerAnim] call EFUNC(common,doAnimation);\r\n};\r\n\r\n//Get repair time\r\n_repairTime = if (isNumber (_config >> \"repairingTime\")) then {\r\n    getNumber (_config >> \"repairingTime\");\r\n} else {\r\n    if (isText (_config >> \"repairingTime\")) exitWith {\r\n        _repairTimeConfig = getText(_config >> \"repairingTime\");\r\n        if (isNil _repairTimeConfig) then {\r\n            _repairTimeConfig = compile _repairTimeConfig;\r\n        } else {\r\n            _repairTimeConfig = missionNamespace getVariable _repairTimeConfig;\r\n        };\r\n        if (_repairTimeConfig isEqualType 0) exitWith {\r\n            _repairTimeConfig;\r\n        };\r\n        [_caller, _target, _hitPoint, _className] call _repairTimeConfig;\r\n    };\r\n    0;\r\n};\r\n\r\nprivate [\"_processText\"];\r\n// Find localized string\r\n_hitPointClassname = if ((typeName _hitPoint) == \"STRING\") then {\r\n    _hitPoint\r\n} else {\r\n    ((getAllHitPointsDamage _target) select 0) select _hitPoint\r\n};\r\n_processText = getText (_config >> \"displayNameProgress\");\r\nprivate _backupText = format [localize LSTRING(RepairingHitPoint), _hitPointClassname];\r\n([_hitPointClassname, _processText, _backupText] call FUNC(getHitPointString)) params [\"_text\"];\r\n\r\nTRACE_4(\"display\",_hitPoint,_hitPointClassname,_processText,_text);\r\n\r\n// Start repair\r\n[\r\n    _repairTime,\r\n    [_caller, _target, _hitPoint, _className, _items, _usersOfItems, _claimObjectsAvailable],\r\n    DFUNC(repair_success),\r\n    DFUNC(repair_failure),\r\n    _text,\r\n    _callbackProgress,\r\n    [\"isNotOnLadder\"]\r\n] call EFUNC(common,progressBar);\r\n\r\n// Display Icon\r\n_iconDisplayed = getText (_config >> \"actionIconPath\");\r\nif (_iconDisplayed != \"\") then {\r\n    [QGVAR(repairActionIcon), true, _iconDisplayed, [1,1,1,1], getNumber(_config >> \"actionIconDisplayTime\")] call EFUNC(common,displayIcon);\r\n};\r\n\r\n// handle display of text/hints\r\n_displayText = \"\";\r\nif (_target != _caller) then {\r\n    _displayText = getText(_config >> \"displayTextOther\");\r\n} else {\r\n    _displayText = getText(_config >> \"displayTextSelf\");\r\n};\r\n\r\nif (_displayText != \"\") then {\r\n    [QEGVAR(common,displayTextStructured), [[_displayText, [_caller] call EFUNC(common,getName), [_target] call EFUNC(common,getName)], 1.5, _caller], [_caller]] call CBA_fnc_targetEvent;\r\n};\r\n\r\ntrue;\r\n"},{"name":"ace_repair_fnc_setDamage","file":"repair/functions/fnc_setDamage.sqf","text":"/*\r\n * Author: commy2\r\n * Sets the structural damage of a vehicle without altering the hitPoints, requires local vehicle.\r\n *\r\n * Arguments:\r\n * 0: Local Vehicle to Damage <OBJECT>\r\n * 1: Total Damage <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle, 0.5] call ace_repair_fnc_setDamage\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_damage\"];\r\nTRACE_2(\"params\",_vehicle,_damage);\r\n\r\n// can't execute all commands if the vehicle isn't local. exit here.\r\nif !(local _vehicle) exitWith {};\r\n\r\n// save array with damage values of all hitpoints\r\n(getAllHitPointsDamage _vehicle) params [[\"_allHitPoints\", []], [\"_allHitPointsSelections\", []], [\"_allHitPointDamages\", []]];\r\n\r\n// set damage of the vehicle\r\n_vehicle setDamage _damage;\r\n\r\n// restore original hitpoint damage values\r\n{\r\n    _vehicle setHitIndex [_forEachIndex, _x];\r\n} forEach _allHitPointDamages;\r\n\r\n// normalize hitpoints\r\n[_vehicle] call FUNC(normalizeHitPoints);\r\n"},{"name":"ace_repair_fnc_setHitPointDamage","file":"repair/functions/fnc_setHitPointDamage.sqf","text":"/*\r\n * Author: commy2\r\n * Set the hitpoint damage and change the structural damage acordingly, requires local vehicle.\r\n * Handles the \"ace_repair_setVehicleHitPointDamage\" event\r\n *\r\n * Arguments:\r\n * 0: Local Vehicle to Damage <OBJECT>\r\n * 1: Selected hitpoint INDEX <NUMBER>\r\n * 2: Total Damage <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle, 1, 0.5] call ace_repair_fnc_setHitPointDamage\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_hitPointIndex\", \"_hitPointDamage\"];\r\nTRACE_4(\"params\",_vehicle,typeOf _vehicle,_hitPointIndex,_hitPointDamage);\r\n\r\nprivate[\"_damageNew\", \"_damageOld\", \"_hitPointDamageRepaired\", \"_hitPointDamageSumOld\", \"_realHitpointCount\", \"_selectionName\"];\r\n\r\n// can't execute all commands if the vehicle isn't local. exit here.\r\nif !(local _vehicle) exitWith {ACE_LOGERROR_1(\"Vehicle Not Local %1\", _vehicle);};\r\n\r\n//Check for bad typeName (changed from orignal v3.3 that took string)\r\nif (_hitPointIndex isEqualType \"\") then {\r\n    ACE_DEPRECATED(\"repair-setHitPointDamage (hit point name <string>\",\"3.5.0\",\"hit index <number>\");\r\n    _hitPointIndex = _allHitPoints find _hitPointIndex;\r\n};\r\n\r\n// get all hitpoints and selections and damages\r\n(getAllHitPointsDamage _vehicle) params [[\"_allHitPoints\", []], [\"_allHitPointsSelections\", []], [\"_allHitPointDamages\", []]];\r\n\r\n// exit if the hitpoint is not valid\r\nif ((_hitPointIndex < 0) || {_hitPointIndex >= (count _allHitPoints)}) exitWith {ACE_LOGERROR_2(\"NOT A VALID HITPOINT: %1-%2\", _hitPointIndex,_vehicle);};\r\n\r\n// save structural damage and sum of hitpoint damages\r\n\r\n_damageOld = damage _vehicle;\r\n\r\n_realHitpointCount = 0;\r\n_hitPointDamageSumOld = 0;\r\n_hitPointDamageRepaired = 0; //positive for repairs : newSum = (oldSum - repaired)\r\n{\r\n    _selectionName = _allHitPointsSelections select _forEachIndex;\r\n    //Filter out all the bad hitpoints (HitPoint=\"\" or no selection)\r\n    if ((!isNil {_vehicle getHit _selectionName}) && {_x != \"\"}) then {\r\n        _realHitpointCount = _realHitpointCount + 1;\r\n\r\n        if ((((toLower _x) find \"glass\") == -1) && {!isText (configFile >> \"CfgVehicles\" >> typeOf _vehicle >> \"HitPoints\" >> _x >> \"depends\")}) then {\r\n            _hitPointDamageSumOld = _hitPointDamageSumOld + (_allHitPointDamages select _forEachIndex);\r\n            if (_forEachIndex == _hitPointIndex) then {\r\n                _hitPointDamageRepaired = (_allHitPointDamages select _forEachIndex) - _hitPointDamage;\r\n            };\r\n        };\r\n    };\r\n} forEach _allHitPoints;\r\n\r\n// calculate new structural damage\r\n_damageNew = (_hitPointDamageSumOld - _hitPointDamageRepaired) / _realHitpointCount;\r\n\r\nif (_hitPointDamageSumOld > 0) then {\r\n    _damageNew = _damageOld * ((_hitPointDamageSumOld - _hitPointDamageRepaired) / _hitPointDamageSumOld);\r\n};\r\nTRACE_5(\"structuralDamage\",_damageOld,_damageNew,_hitPointDamageRepaired,_hitPointDamageSumOld,_realHitpointCount);\r\n\r\n// set new structural damage value\r\n_vehicle setDamage _damageNew;\r\n\r\n//Repair the hitpoint in the damages array:\r\n_allHitPointDamages set [_hitPointIndex, _hitPointDamage];\r\n\r\n//Set the new damage for all hitpoints\r\n{\r\n    _vehicle setHitIndex [_forEachIndex, _x];\r\n} forEach _allHitPointDamages;\r\n\r\n// normalize hitpoints\r\n[_vehicle] call FUNC(normalizeHitPoints);\r\n"},{"name":"ace_repair_fnc_spawnObject","file":"repair/functions/fnc_spawnObject.sqf","text":"/*\r\n * Author: commy2\r\n * Spawns an object of specified string, at specified position with specified damage taken.\r\n *\r\n * Arguments:\r\n * 0: Item classname <STRING>\r\n * 1: Position ASL <ARRAY>\r\n * 2: Damage <NUMBER>\r\n *\r\n * Return Value:\r\n * The new object <OBJECT>\r\n *\r\n * Example:\r\n * [\"classname\", [0, 0, 0], 1] call ace_repair_fnc_spawnObject\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_item\", \"_position\", [\"_damage\", 0]];\r\nTRACE_3(\"params\",_item,_position,_damage);\r\n\r\n// randomized end position\r\n_position = _position vectorAdd [1 - random 2, 1 - random 2, 0];\r\n\r\nprivate _newObject = createVehicle [_item, _position, [], 0, \"NONE\"];\r\n_newObject setPosASL _position;\r\n\r\n_newObject setDamage _damage;\r\n\r\n[QEGVAR(common,fixCollision), _newObject] call CBA_fnc_localEvent;\r\n[QEGVAR(common,fixPosition), _newObject] call CBA_fnc_localEvent;\r\n\r\n_newObject\r\n"},{"name":"ace_repair_fnc_useItem","file":"repair/functions/fnc_useItem.sqf","text":"/*\r\n * Author: Glowbal\r\n * Use Equipment if any is available.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Item classname <STRING>\r\n *\r\n * ReturnValue:\r\n * [Had Item to Use <BOOL>, Unit <OBJECT>] <ARRAY>\r\n *\r\n * Example:\r\n * [unit, \"classname\"] call ace_repair_fnc_useItem\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_item\"];\r\nTRACE_2(\"params\",_unit,_item);\r\n\r\nif ([_unit, _item] call EFUNC(common,hasItem)) exitWith {\r\n    [\"ace_useItem\", [_unit, _item], _unit] call CBA_fnc_targetEvent;\r\n    [true, _unit];\r\n};\r\n\r\n[false, objNull];\r\n"},{"name":"ace_repair_fnc_useItems","file":"repair/functions/fnc_useItems.sqf","text":"/*\r\n * Author: Glowbal\r\n * Use Equipment items if any is available.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Item classnames <ARRAY>\r\n *\r\n * ReturnValue:\r\n * [Had Item to Use <BOOL>, Array of units that used the items <ARRAY>] <ARRAY>\r\n *\r\n * Example:\r\n * [unit, [\"classname1\", \"classname2\"]] call ace_repair_fnc_useItems\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_items\"];\r\nTRACE_2(\"params\",_unit,_items);\r\n\r\nprivate [\"_itemUsedInfo\", \"_itemsUsedBy\"];\r\n\r\n_itemsUsedBy = [];\r\n{\r\n    // handle a one of type use item\r\n    if (_x isEqualType []) then {\r\n        {\r\n            _itemUsedInfo = [_unit, _x] call FUNC(useItem);\r\n            if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushback [(_itemUsedInfo select 1), _x]};\r\n        } forEach _x;\r\n    };\r\n\r\n    // handle required item\r\n    if (_x isEqualType \"\") then {\r\n        _itemUsedInfo = [_unit, _x] call FUNC(useItem);\r\n        if (_itemUsedInfo select 0) exitWith { _itemsUsedBy pushback [(_itemUsedInfo select 1), _x]};\r\n    };\r\n} forEach _items;\r\n\r\n[count _items == count _itemsUsedBy, _itemsUsedBy];\r\n"}],"respawn":[{"name":"ace_respawn_fnc_canMoveRallypoint","file":"respawn/functions/fnc_canMoveRallypoint.sqf","text":"/*\r\n * Author: commy2\r\n * Checks if a unit can move a rally point.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Side <SIDE>\r\n *\r\n * Return Value:\r\n * Can move <BOOL>\r\n *\r\n * Example:\r\n * [ACE_Player, side ACE_Player] call ace_respawn_fnc_canMoveRallypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_side\"];\r\n\r\n// player has to be a rallypoint mover. group leader by default\r\nif !(_unit getVariable [\"ACE_canMoveRallypoint\", false]) exitWith {false};\r\n\r\n// rallypoint of that side has to exist\r\n!isNull ([\r\n    objNull,\r\n    missionNamespace getVariable [\"ACE_Rallypoint_West\", objNull],\r\n    missionNamespace getVariable [\"ACE_Rallypoint_East\", objNull],\r\n    missionNamespace getVariable [\"ACE_Rallypoint_Independent\", objNull]\r\n] select ([west, east, independent] find _side) + 1) // return\r\n"},{"name":"ace_respawn_fnc_handleInitPostServer","file":"respawn/functions/fnc_handleInitPostServer.sqf","text":"/*\r\n * Author: commy2\r\n * Handle XEH Init Post on Server.\r\n * Execution on server only.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_Player] call ace_respawn_fnc_handleInitPostServer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nprivate [\"_groupUnit\", \"_rallypoint\", \"_leaderVarName\"];\r\n\r\n_groupUnit = group _unit; // _group is a reserved veriable and shouldn't be used\r\n\r\n_rallypoint = [\r\n    objNull,\r\n    missionNamespace getVariable [\"ACE_Rallypoint_West\", objNull],\r\n    missionNamespace getVariable [\"ACE_Rallypoint_East\", objNull],\r\n    missionNamespace getVariable [\"ACE_Rallypoint_Independent\", objNull]\r\n] select ([west, east, independent] find side _groupUnit) + 1;\r\n\r\n// exit if no moveable rallypoint is placed for that side\r\nif (isNull _rallypoint) exitWith {};\r\n\r\n// find leader\r\n_leaderVarName = _groupUnit getVariable [QGVAR(leaderVarName), \"\"];\r\n\r\n// exit if group already has a playable slot assigned as rallypoint leader\r\nif (_leaderVarName != \"\") exitWith {\r\n    // assign JIP unit as rallypoint leader\r\n    if (str _unit == _leaderVarName) then {\r\n        _unit setVariable [\"ACE_canMoveRallypoint\", true, true];\r\n    };\r\n};\r\n\r\n// treat group leader\r\n_unit = leader _groupUnit;\r\n\r\n_leaderVarName = vehicleVarName _unit;\r\n\r\nif (_leaderVarName == \"\") then {\r\n    private \"_leaderID\";\r\n    _leaderID = GETGVAR(NextLeaderID,0);\r\n\r\n    _leaderVarName = format [QUOTE(ACE_Rallypoint_Leader_%1), _leaderID];\r\n\r\n    _unit setVehicleVarName _leaderVarName;\r\n\r\n    GVAR(NextLeaderID) = _leaderID + 1;\r\n};\r\n\r\n// prevent group from getting multiple leaders; use this to assign rallypoint moving ability on JIP\r\n_groupUnit setVariable [QGVAR(leaderVarName), _leaderVarName];\r\n\r\n_unit setVariable [\"ACE_canMoveRallypoint\", true, true];\r\n"},{"name":"ace_respawn_fnc_handleKilled","file":"respawn/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: bux578\r\n * Handles the XEH killed event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Killer <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, bad_dude] call ace_respawn_fnc_handleKilled\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// Saves the gear when the player! (and only him) is killed\r\nif (ACE_player == _unit && {GVAR(SavePreDeathGear)}) then {\r\n    _unit setVariable [QGVAR(unitGear), getUnitLoadout _unit];\r\n    _unit setVariable [QGVAR(activeWeaponAndMuzzle), [currentWeapon _unit, currentMuzzle _unit, currentWeaponMode _unit]];\r\n};\r\n\r\nif (missionNamespace getVariable [QGVAR(showFriendlyFireMessage), false]) then {\r\n    [QGVAR(showFriendlyFireMessageEvent), _this] call CBA_fnc_globalEvent;\r\n};\r\n"},{"name":"ace_respawn_fnc_handlePlayerChanged","file":"respawn/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle player changed event. Updates visibility of Rallypoint markers.\r\n *\r\n * Arguments:\r\n * 0: New Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player] call ace_respawn_fnc_handlePlayerChanged\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_newUnit\"];\r\n\r\nprivate \"_side\";\r\n_side = side group _newUnit;\r\n\r\n((GETMVAR(ACE_Rallypoint_West,             objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == west));\r\n((GETMVAR(ACE_Rallypoint_West_Base,        objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == west));\r\n((GETMVAR(ACE_Rallypoint_East,             objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == east));\r\n((GETMVAR(ACE_Rallypoint_East_Base,        objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == east));\r\n((GETMVAR(ACE_Rallypoint_Independent,      objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == independent));\r\n((GETMVAR(ACE_Rallypoint_Independent_Base, objNull)) getVariable [QGVAR(marker), \"\"]) setMarkerAlphaLocal ([0, 1] select (_side == independent));\r\n"},{"name":"ace_respawn_fnc_handleRespawn","file":"respawn/functions/fnc_handleRespawn.sqf","text":"/*\r\n * Author: bux578\r\n * Handles the XEH Respawn event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Corpse <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_Player, old_body_lying_on_floor] call ace_respawn_fnc_handleRespawn\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// Restores the gear when the player respawns\r\nif (GVAR(SavePreDeathGear)) then {\r\n    [\r\n        _unit,\r\n        _unit getVariable QGVAR(unitGear),\r\n        _unit getVariable QGVAR(activeWeaponAndMuzzle)\r\n    ] call FUNC(restoreGear);\r\n};\r\n\r\n// fix for setVariable public being lost on respawn for machines that JIP after the command was broadcasted\r\nif (_unit getVariable [\"ACE_canMoveRallypoint\", false]) then {\r\n    _unit setVariable [\"ACE_canMoveRallypoint\", true, true];\r\n};\r\n"},{"name":"ace_respawn_fnc_initRallypoint","file":"respawn/functions/fnc_initRallypoint.sqf","text":"/*\r\n * Author: commy2\r\n * Init code for rallypoints.\r\n *\r\n * Arguments:\r\n * 0: Rallypoint Object <OBJECT>\r\n * 1: Respawn Marker <STRING>\r\n * 2: Side <SIDE>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [respawn_object, \"\", west] call ace_respawn_fnc_initRallypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_rallypoint\", \"_respawnMarker\", \"_side\"];\r\n\r\nprivate _name = typeOf _rallypoint;\r\n\r\nif (isNil _name) then {\r\n    missionNamespace setVariable [_name, _rallypoint];\r\n\r\n    _rallypoint setVariable [QGVAR(side), _side];\r\n\r\n    if (isServer) then {\r\n        if (_respawnMarker != \"\" && {!(_respawnMarker in allMapMarkers)}) then {\r\n            createMarker [_respawnMarker, _rallypoint];\r\n        };\r\n\r\n        [\"ace_rallypointMoved\", [_rallypoint, _side]] call CBA_fnc_globalEvent;\r\n    };\r\n} else {\r\n    deleteVehicle _rallypoint;\r\n    ACE_LOGERROR(\"Multiple Rallypoints of same type.\");\r\n};\r\n\r\n// init visible marker\r\nif (hasInterface) then {\r\n    [{\r\n        params [\"_rallypoint\", \"_respawnMarker\", \"_side\", \"_name\"];\r\n\r\n        private _marker = format [\"ACE_Marker_%1\", _name];\r\n\r\n        // exit if marker already exist\r\n        if (_marker in allMapMarkers) exitWith {};\r\n\r\n        _marker = createMarkerLocal [_marker, getPosASL _rallypoint];\r\n\r\n        private _type = [\"selector_selectedFriendly\", \"selector_selectedEnemy\"] select (_respawnMarker == \"\");\r\n\r\n        _marker setMarkerTypeLocal _type;\r\n        _marker setMarkerAlphaLocal ([0,1] select (_side == playerSide)); // playerSide to guarantee init\r\n\r\n        private _date = _rallypoint getVariable [QGVAR(markerDate), \"\"];\r\n\r\n        _marker setMarkerTextLocal _date;\r\n\r\n        _rallypoint setVariable [QGVAR(marker), _marker];\r\n    }, [_rallypoint, _respawnMarker, _side, _name], 0.1] call CBA_fnc_waitAndExecute;\r\n};\r\n"},{"name":"ace_respawn_fnc_module","file":"respawn/functions/fnc_module.sqf","text":"/*\r\n * Author: KoffeinFlummi, bux578, esteldunedain, commy2\r\n * Initializes the respawn module.\r\n *\r\n * Arguments:\r\n * 0: Logic <OBJECT>\r\n * 1: Synced units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic, [ACE_Player], true] call ace_respawn_fnc_module\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif (!_activated) exitWith {};\r\n\r\n[_logic, QGVAR(SavePreDeathGear), \"SavePreDeathGear\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(RemoveDeadBodiesDisconnected), \"RemoveDeadBodiesDisconnected\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO(\"Respawn Module Initialized.\");\r\n"},{"name":"ace_respawn_fnc_moduleFriendlyFire","file":"respawn/functions/fnc_moduleFriendlyFire.sqf","text":"/*\r\n * Author: commy2\r\n * Initializes the friendly fire module.\r\n *\r\n * Arguments:\r\n * 0: Logic <OBJECT>\r\n * 1: Synced units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic, [ACE_Player], true] call ace_respawn_fnc_moduleFriendlyFire\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n// this is done for JIP compatibility\r\nif (isServer) then {\r\n    [{\r\n        missionNamespace setVariable [QGVAR(showFriendlyFireMessage), true];\r\n        publicVariable QGVAR(showFriendlyFireMessage);\r\n    },\r\n    [], 0.1] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\nACE_LOGINFO(\"Friendly Fire Messages Module Initialized.\");\r\n"},{"name":"ace_respawn_fnc_moduleRallypoint","file":"respawn/functions/fnc_moduleRallypoint.sqf","text":"/*\r\n * Author: commy2\r\n * Initializes the Rallypoint module.\r\n *\r\n * Arguments:\r\n * 0: Logic <OBJECT>\r\n * 1: Synced units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [logic, [ACE_Player], true] call ace_respawn_fnc_moduleRallypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n{\r\n    _x setVariable [\"ACE_canMoveRallypoint\", true];\r\n    false\r\n} count _units;\r\n\r\nACE_LOGINFO(\"Rallypoint Module Initialized.\");\r\n"},{"name":"ace_respawn_fnc_moveRallypoint","file":"respawn/functions/fnc_moveRallypoint.sqf","text":"/*\r\n * Author: commy2\r\n * Moves a rallypoint to the players location.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Side <SIDE>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_Player, side ACE_Player] call ace_respawn_fnc_moveRallypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_side\"];\r\n\r\nprivate [\"_rallypoint\", \"_position\"];\r\n\r\n_rallypoint = [\r\n    objNull,\r\n    missionNamespace getVariable [\"ACE_Rallypoint_West\", objNull],\r\n    missionNamespace getVariable [\"ACE_Rallypoint_East\", objNull],\r\n    missionNamespace getVariable [\"ACE_Rallypoint_Independent\", objNull]\r\n] select ([west, east, independent] find _side) + 1;\r\n\r\nTRACE_3(\"moving rally\",_unit,_rallypoint,typeOf _rallypoint);\r\n\r\nif (isNull _rallypoint) exitWith {};\r\n\r\n_position = getPosATL _unit;\r\n_position = _position findEmptyPosition [0, 2, typeOf _rallypoint];\r\n\r\nif (_position isEqualTo []) then {_position = getPosATL _unit};\r\n\r\n_position set [2, 0];\r\n\r\n[localize LSTRING(Deploy)] call EFUNC(common,displayTextStructured);\r\n\r\n[{\r\n    params [\"_rallypoint\", \"_unit\", \"_position\"];\r\n\r\n    _rallypoint setPosATL _position;\r\n    _unit reveal _rallypoint;\r\n\r\n    _rallypoint setVariable [QGVAR(markerDate), [dayTime, \"HH:MM\"] call BIS_fnc_timeToString, true];\r\n\r\n    [\"ace_rallypointMoved\", [_rallypoint, _side, _position]] call CBA_fnc_globalEvent;\r\n\r\n    [localize LSTRING(Deployed)] call EFUNC(common,displayTextStructured);\r\n}, [_rallypoint, _unit, _position], 5] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_respawn_fnc_restoreGear","file":"respawn/functions/fnc_restoreGear.sqf","text":"/*\r\n * Author: bux578, commy2\r\n * Restores previously saved gear.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: All Gear based on return value of ACE_common_fnc_getAllGear <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_Player, stored_allGear, active_weapon_muzzle_and_mode] call ace_respawn_fnc_restoreGear\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_allGear\", \"_activeWeaponAndMuzzle\"];\r\n\r\n// restore all gear\r\nif (!isNil \"_allGear\") then {\r\n    _unit setUnitLoadout _allGear;\r\n};\r\n\r\n// restore the last active weapon, muzzle and weaponMode\r\nif (!isNil \"_activeWeaponAndMuzzle\") then {\r\n    // @todo, replace this with CBA_fnc_selectWeapon after next CBA update\r\n    _activeWeaponAndMuzzle params [\"_activeWeapon\", \"_activeMuzzle\", \"_activeWeaponMode\"];\r\n\r\n    if (\r\n        (_activeMuzzle != \"\") &&\r\n        {_activeMuzzle != _activeWeapon} &&\r\n        {_activeMuzzle in getArray (configFile >> \"CfgWeapons\" >> _activeWeapon >> \"muzzles\")}\r\n    ) then {\r\n        _unit selectWeapon _activeMuzzle;\r\n    } else {\r\n        if (_activeWeapon != \"\") then {\r\n            _unit selectWeapon _activeWeapon;\r\n        };\r\n    };\r\n\r\n    if (currentWeapon _unit != \"\") then {\r\n        private _index = 0;\r\n\r\n        while {\r\n            _index < 100 && {currentWeaponMode _unit != _activeWeaponMode}\r\n        } do {\r\n            _unit action [\"SwitchWeapon\", _unit, _unit, _index];\r\n            _index = _index + 1;\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_respawn_fnc_showFriendlyFireMessage","file":"respawn/functions/fnc_showFriendlyFireMessage.sqf","text":"/*\r\n * Author: commy2\r\n * Shows a message in system chat of who killed whom.\r\n *\r\n * Arguments:\r\n * 0: Unitn <OBJECT>\r\n * 1: Killer <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_Player, killer] call ace_module_fnc_functionName\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_killer\"];\r\n\r\nif (_unit != _killer && {side group _unit in [side group ACE_player, civilian]} && {side group _killer == side group ACE_player}) then {\r\n    systemChat format [\"%1 was killed by %2\", [_unit, false, true] call EFUNC(common,getName), [_killer, false, true] call EFUNC(common,getName)];\r\n\r\n    // Raise ACE globalEvent\r\n    [\"ace_killedByFriendly\", [_unit, _killer]] call CBA_fnc_globalEvent;\r\n};\r\n"},{"name":"ace_respawn_fnc_teleportToRallypoint","file":"respawn/functions/fnc_teleportToRallypoint.sqf","text":"/*\r\n * Author: commy2\r\n * Teleports a unit to a rallypoint\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Side <SIDE>\r\n * 2: Rallypoint name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, side ACE_Player, rallypoint_name] call ace_respawn_fnc_teleportToRallypoint;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_side\", \"_rallypoint\"];\r\n\r\nprivate \"_toBase\";\r\n_toBase = _rallypoint find \"_Base\" != -1;\r\n\r\n_rallypoint = missionNamespace getVariable [_rallypoint, objNull];\r\n\r\nif (isNull _rallypoint) exitWith {};\r\n\r\n_unit setPosASL getPosASL _rallypoint;\r\n\r\n[[localize LSTRING(TeleportedToRallypoint), localize LSTRING(TeleportedToBase)] select _toBase] call EFUNC(common,displayTextStructured);\r\n"},{"name":"ace_respawn_fnc_updateRallypoint","file":"respawn/functions/fnc_updateRallypoint.sqf","text":"/*\r\n * Author: commy2\r\n * Updates marker position and texts.\r\n *\r\n * Arguments:\r\n * 0: Marker <STRING>\r\n * 1: Side <SIDE>\r\n * 2: Position <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [marker_name, side ACE_Player, getPos ACE_Player] call ace_respawn_fnc_updateRallypoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_rallypoint\", \"_side\", \"_position\"];\r\n\r\nif (!hasInterface) exitWith {};\r\n\r\nprivate [\"_marker\", \"_markerDate\"];\r\n\r\n_marker = _rallypoint getVariable [QGVAR(marker), \"\"];\r\n_markerDate = _rallypoint getVariable [QGVAR(markerDate), \"\"];\r\n\r\n_marker setMarkerPosLocal _position;\r\n_marker setMarkerTextLocal _markerDate;\r\n"}],"safemode":[{"name":"ace_safemode_fnc_lockSafety","file":"safemode/functions/fnc_lockSafety.sqf","text":"/*\r\n * Author: commy2\r\n * Put weapon on safety, or take it off safety if safety is already put on.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n * 2: Muzzle <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, currentWeapon ACE_player, currentMuzzle ACE_player] call ace_safemode_fnc_lockSafety\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// don't immediately switch back\r\nif (inputAction \"nextWeapon\" > 0) exitWith {};\r\n\r\nparams [\"_unit\", \"_weapon\", \"_muzzle\"];\r\n\r\nprivate [\"_safedWeapons\", \"_picture\"];\r\n\r\n_safedWeapons = _unit getVariable [QGVAR(safedWeapons), []];\r\n\r\nif (_weapon in _safedWeapons) exitWith {\r\n    _this call FUNC(unlockSafety);\r\n};\r\n\r\n_safedWeapons pushBack _weapon;\r\n\r\n_unit setVariable [QGVAR(safedWeapons), _safedWeapons];\r\n\r\nif (_unit getVariable [QGVAR(actionID), -1] == -1) then {\r\n    _unit setVariable [QGVAR(actionID), [\r\n        _unit, \"DefaultAction\", {\r\n            if (\r\n                [_this select 1] call CBA_fnc_canUseWeapon\r\n                && {\r\n                    if (currentMuzzle (_this select 1) in ((_this select 1) getVariable [QGVAR(safedWeapons), []])) then {\r\n                        if (inputAction \"nextWeapon\" > 0) exitWith {\r\n                            [_this select 1, currentWeapon (_this select 1), currentMuzzle (_this select 1)] call FUNC(unlockSafety);\r\n                            false\r\n                        };\r\n                        true\r\n                    } else {false}\r\n                }\r\n            ) then {\r\n                // player hud\r\n                [false] call FUNC(setSafeModeVisual);\r\n                true\r\n            } else {\r\n                // player hud\r\n                [true] call FUNC(setSafeModeVisual);\r\n                false\r\n            };\r\n        }, {}\r\n    ] call EFUNC(common,addActionEventHandler)];\r\n};\r\n\r\nif (_muzzle isEqualType \"\") then {\r\n    _unit selectWeapon _muzzle;\r\n};\r\n\r\n// play fire mode selector sound\r\n[_unit, _weapon, _muzzle] call FUNC(playChangeFiremodeSound);\r\n\r\n// show info box\r\n_picture = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\");\r\n[localize LSTRING(PutOnSafety), _picture] call EFUNC(common,displayTextPicture);\r\n"},{"name":"ace_safemode_fnc_playChangeFiremodeSound","file":"safemode/functions/fnc_playChangeFiremodeSound.sqf","text":"/*\r\n * Author: commy2\r\n * Play weapon firemode change sound.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, currentWeapon ACE_player] call ace_safemode_fnc_playChangeFiremodeSound\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\n\r\nprivate [\"_sound\", \"_position\"];\r\n\r\n_sound = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"changeFiremodeSound\");\r\n\r\nif (_sound isEqualTo []) exitWith {\r\n    playSound \"ACE_Sound_Click\";\r\n};\r\n\r\n// get position where to play the sound (position of the weapon)\r\n_position = AGLToASL (_unit modelToWorldVisual (_unit selectionPosition \"RightHand\"));\r\n\r\n_sound params [\"_filename\", [\"_volume\", 1], [\"_soundPitch\", 1], [\"_distance\", 0]];\r\n\r\nif (_filename == \"\") exitWith {\r\n    playSound \"ACE_Sound_Click\";\r\n};\r\n\r\n// add file extension .wss as default\r\nif !(toLower (_filename select [count _filename - 4]) in [\".wav\", \".ogg\", \".wss\"]) then {\r\n    _filename = format [\"%1.wss\", _filename];\r\n};\r\n\r\nplaySound3D [_filename, objNull, false, _position, _volume, _soundPitch, _distance];\r\n"},{"name":"ace_safemode_fnc_setSafeModeVisual","file":"safemode/functions/fnc_setSafeModeVisual.sqf","text":"/*\r\n * Author: commy2\r\n * Show firemode indicator, representing safety lock\r\n *\r\n * Arguments:\r\n * 0: Show firemode <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [true] call ace_safemode_fnc_setSafeModeVisual\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_show\"];\r\n\r\ndisableSerialization;\r\n\r\nprivate \"_control\";\r\n_control = (uiNamespace getVariable [\"ACE_dlgSoldier\", displayNull]) displayCtrl 187;\r\n\r\nif (isNull _control) exitWith {};\r\n\r\nif (_show) then {\r\n    private \"_config\";\r\n    _config = configFile >> \"RscInGameUI\" >> \"RscUnitInfoSoldier\" >> \"WeaponInfoControlsGroupLeft\" >> \"controls\" >> \"CA_ModeTexture\";\r\n\r\n    _control ctrlSetPosition [getNumber (_config >> \"x\"), getNumber (_config >> \"y\"), getNumber (_config >> \"w\"), getNumber (_config >> \"h\")];\r\n    _control ctrlCommit 0;\r\n} else {\r\n    _control ctrlSetPosition [0, 0, 0, 0];\r\n    _control ctrlCommit 0;\r\n};\r\n"},{"name":"ace_safemode_fnc_unlockSafety","file":"safemode/functions/fnc_unlockSafety.sqf","text":"/*\r\n * Author: commy2\r\n * Take weapon of safety lock.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n * 2: Muzzle <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, currentWeapon ACE_player, currentMuzzle ACE_player] call ace_safemode_fnc_unlockSafety\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\", \"_muzzle\"];\r\n\r\nprivate [\"_safedWeapons\", \"_picture\"];\r\n\r\n_safedWeapons = _unit getVariable [QGVAR(safedWeapons), []];\r\n_safedWeapons deleteAt (_safedWeapons find _weapon);\r\n\r\n_unit setVariable [QGVAR(safedWeapons), _safedWeapons];\r\n\r\n// remove action if all weapons have put their safety on\r\nif (_safedWeapons isEqualTo []) then {\r\n    [_unit, \"DefaultAction\", _unit getVariable [QGVAR(actionID), -1]] call EFUNC(common,removeActionEventHandler);\r\n    _unit setVariable [QGVAR(actionID), -1];\r\n};\r\n\r\n_unit selectWeapon _muzzle;\r\n\r\nif (inputAction \"nextWeapon\" > 0) then {\r\n    // switch to the last mode to roll over to first after the default nextWeapon action\r\n    private [\"_modes\", \"_mode\", \"_index\"];\r\n\r\n    // get weapon modes\r\n    _modes = [];\r\n    {\r\n        if (getNumber (configFile >> \"CfgWeapons\" >> _weapon >> _x >> \"showToPlayer\") == 1) then {\r\n            _modes pushBack _x;\r\n        };\r\n        if (_x == \"this\") then {\r\n            _modes pushBack _weapon;\r\n        };\r\n        nil\r\n    } count getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"modes\");\r\n\r\n    // select last mode\r\n    _mode = _modes select (count _modes - 1);\r\n\r\n    // switch to last mode\r\n    _index = 0;\r\n    while {\r\n        _index < 100 && {currentMuzzle _unit != _weapon || {currentWeaponMode _unit != _mode}}\r\n    } do {\r\n        _unit action [\"SwitchWeapon\", _unit, _unit, _index];\r\n        _index = _index + 1;\r\n    };\r\n} else {\r\n    // play fire mode selector sound\r\n    [_unit, _weapon, _muzzle] call FUNC(playChangeFiremodeSound);\r\n};\r\n\r\n// player hud\r\n[true] call FUNC(setSafeModeVisual);\r\n\r\n// show info box\r\n_picture = getText (configFile >> \"CfgWeapons\" >> _weapon >> \"picture\");\r\n[localize LSTRING(TookOffSafety), _picture] call EFUNC(common,displayTextPicture);\r\n"}],"sandbag":[{"name":"ace_sandbag_fnc_canDeploy","file":"sandbag/functions/fnc_canDeploy.sqf","text":"/*\r\n * Author: Ruthberg, commy2\r\n * Checks if the player can deploy a sandbag\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Can deploy <BOOL>\r\n *\r\n * Example:\r\n * [ACE_player] call ace_sandbag_fnc_canDeploy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define SURFACE_BLACKLIST [\"water\", \"concrete\", \"tarmac\", \"wood\", \"metal\", \"roof_tin\", \"roof_tiles\", \"wood_int\", \"concrete_int\", \"tiles_int\", \"metal_int\", \"stony\", \"rock\", \"int_concrete\", \"int_tiles\", \"int_wood\", \"tiling\", \"wavymetal\", \"int_metal\"]\r\n\r\nparams [\"_unit\"];\r\n\r\nif !(\"ACE_Sandbag_empty\" in items _unit) exitWith {false};\r\n\r\nprivate [\"_surfaceClass\", \"_surfaceType\"];\r\n\r\n_surfaceClass = (surfaceType getPosASL _unit) select [1];\r\n_surfaceType = getText (configFile >> \"CfgSurfaces\" >> _surfaceClass >> \"soundEnviron\");\r\n\r\n!(_surfaceType in SURFACE_BLACKLIST)\r\n"},{"name":"ace_sandbag_fnc_deploy","file":"sandbag/functions/fnc_deploy.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\r\n * Starts the deploy process for sandbags.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player] call ace_sandbag_fnc_deploy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// prevent the placing unit from running\r\n[_unit, \"forceWalk\", \"ACE_Sandbag\", true] call EFUNC(common,statusEffect_set);\r\n\r\n// create the sandbag\r\nprivate \"_sandBag\";\r\n_sandBag = createVehicle [\"ACE_SandbagObject_NoGeo\", [0, 0, 0], [], 0, \"NONE\"];\r\n\r\nGVAR(sandBag) = _sandBag;\r\n\r\n// prevent collisions with sandbag\r\n[QEGVAR(common,enableSimulationGlobal), [_sandBag, false]] call CBA_fnc_serverEvent;\r\n\r\nGVAR(deployDirection) = 0;\r\n\r\n// pfh that runs while the deployment is in progress\r\nGVAR(deployPFH) = [{\r\n    (_this select 0) params [\"_unit\", \"_sandBag\"];\r\n\r\n    if (isNull _sandBag) exitWith {\r\n        [_unit] call FUNC(deployCancel);\r\n    };\r\n\r\n    _sandBag setPosASL (eyePos _unit vectorAdd (positionCameraToWorld [0, 0, 1] vectorDiff positionCameraToWorld [0, 0, 0]));\r\n    _sandBag setDir (GVAR(deployDirection) + getDir _unit);\r\n}, 0, [_unit, _sandBag]] call CBA_fnc_addPerFrameHandler;\r\n\r\n// add mouse button action and hint\r\n[localize LSTRING(ConfirmDeployment), localize LSTRING(CancelDeployment), localize LSTRING(ScrollAction)] call EFUNC(interaction,showMouseHint);\r\n\r\n_unit setVariable [QGVAR(Deploy), [\r\n    _unit, \"DefaultAction\",\r\n    {GVAR(deployPFH) != -1},\r\n    {[_this select 0] call FUNC(deployConfirm)}\r\n] call EFUNC(common,addActionEventHandler)];\r\n\r\n_unit setVariable [QGVAR(isDeploying), true, true];\r\n"},{"name":"ace_sandbag_fnc_deployCancel","file":"sandbag/functions/fnc_deployCancel.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\r\n * Cancels sandbag deployment\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Key <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player] call ace_sandbag_fnc_deployCancel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_key\"];\r\n\r\nif (_key != 1 || {GVAR(deployPFH) == -1}) exitWith {};\r\n\r\n// enable running again\r\n[_unit, \"forceWalk\", \"ACE_Sandbag\", false] call EFUNC(common,statusEffect_set);\r\n\r\n// delete placement dummy\r\ndeleteVehicle GVAR(sandBag);\r\n\r\n// remove deployment pfh\r\n[GVAR(deployPFH)] call CBA_fnc_removePerFrameHandler;\r\nGVAR(deployPFH) = -1;\r\n\r\n// remove mouse button actions\r\ncall EFUNC(interaction,hideMouseHint);\r\n\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(common,removeActionEventHandler);\r\n[_unit, \"zoomtemp\",      _unit getVariable [QGVAR(Cancel), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\n_unit setVariable [QGVAR(isDeploying), false, true];\r\n"},{"name":"ace_sandbag_fnc_deployConfirm","file":"sandbag/functions/fnc_deployConfirm.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\r\n * Confirms sandbag deployment\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player] call ace_sandbag_fnc_deployConfirm\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// enable running again\r\n[_unit, \"forceWalk\", \"ACE_Sandbag\", false] call EFUNC(common,statusEffect_set);\r\n\r\n// remove sandbag from inventory\r\n_unit removeItem \"ACE_Sandbag_empty\";\r\n\r\n// delete placement dummy and create real sandbag\r\n[{\r\n    if (isNull GVAR(sandBag)) exitWith {};\r\n\r\n    params [\"_unit\"];\r\n\r\n    private [\"_position\", \"_direction\", \"_sandBag\"];\r\n\r\n    _position = getPosASL GVAR(sandBag);\r\n    _direction = getDir GVAR(sandBag);\r\n\r\n    deleteVehicle GVAR(sandBag);\r\n\r\n    _sandBag = createVehicle [\"ACE_SandbagObject\", [0, 0, 0], [], 0, \"NONE\"];\r\n    _sandBag setPosASL _position;\r\n    _sandBag setDir _direction;\r\n\r\n    GVAR(sandBag) = objNull;\r\n}, [_unit], 1] call CBA_fnc_waitAndExecute;\r\n\r\n// remove deployment pfh\r\n[GVAR(deployPFH)] call CBA_fnc_removePerFrameHandler;\r\nGVAR(deployPFH) = -1;\r\n\r\n// remove mouse button actions\r\ncall EFUNC(interaction,hideMouseHint);\r\n\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\n// play animation\r\n_unit playActionNow \"PutDown\";\r\n\r\n_unit setVariable [QGVAR(isDeploying), false, true];\r\n"},{"name":"ace_sandbag_fnc_handleInteractMenuOpened","file":"sandbag/functions/fnc_handleInteractMenuOpened.sqf","text":"/*\r\n * Author: commy2\r\n * Handle opening of interaction menu.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\r\n    [_unit] call FUNC(deployCancel);\r\n};\r\n"},{"name":"ace_sandbag_fnc_handleKilled","file":"sandbag/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: commy2\r\n * Handle death.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\r\n    [_unit] call FUNC(deployCancel);\r\n};\r\n"},{"name":"ace_sandbag_fnc_handlePlayerChanged","file":"sandbag/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle player changes.\r\n *\r\n * Arguments:\r\n * 0: New Player Unit <OBJECT>\r\n * 1: Old Player Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_newPlayer\", \"_oldPlayer\"];\r\n\r\nif (_newPlayer getVariable [QGVAR(isDeploying), false]) then {\r\n    [_newPlayer] call FUNC(deployCancel);\r\n};\r\n\r\nif (_oldPlayer getVariable [QGVAR(isDeploying), false]) then {\r\n    [_oldPlayer] call FUNC(deployCancel);\r\n};\r\n"},{"name":"ace_sandbag_fnc_handlePlayerInventoryChanged","file":"sandbag/functions/fnc_handlePlayerInventoryChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle the InventoryChanged event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\r\n    if !(\"ACE_Sandbag_empty\" in items _unit) then {\r\n        [_unit] call FUNC(deployCancel);\r\n    };\r\n};\r\n"},{"name":"ace_sandbag_fnc_handleScrollWheel","file":"sandbag/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg\r\n * Handles sandbag rotation\r\n *\r\n * Arguments:\r\n * 0: scroll amount <NUMBER>\r\n *\r\n * Return Value:\r\n * handled <BOOL>\r\n *\r\n * Example:\r\n * [1.2] call ace_sandbag_fnc_handleScrollWheel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(deployPFH) == -1) exitWith {false};\r\n\r\nparams [\"_scroll\"];\r\n\r\nGVAR(deployDirection) = GVAR(deployDirection) + (_scroll * 5);\r\n\r\ntrue\r\n"},{"name":"ace_sandbag_fnc_handleUnconscious","file":"sandbag/functions/fnc_handleUnconscious.sqf","text":"/*\r\n * Author: commy2\r\n * Handle unconsciousness.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isDeploying), false]) then {\r\n    [_unit] call FUNC(deployCancel);\r\n};\r\n"},{"name":"ace_sandbag_fnc_pickup","file":"sandbag/functions/fnc_pickup.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Pick up sandbag\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: sandbag <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit, _sandbag] call ace_sandbag_fnc_pickup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_sandbag\"];\r\n\r\n_unit playActionNow \"PutDown\";\r\n\r\n_unit setVariable [QGVAR(isUsingSandbag), true];\r\n\r\n[{\r\n    params [\"_unit\", \"_sandbag\"];\r\n\r\n    _unit setVariable [QGVAR(isUsingSandbag), false];\r\n\r\n    if (isNull _sandbag) exitWith {};\r\n\r\n    deletevehicle _sandbag;\r\n\r\n    // Force physx update\r\n    {\r\n        _x setPosASL (getPosASL _x);\r\n    } count (_unit nearObjects [\"ACE_SandbagObject\", 5]);\r\n\r\n    [_unit, \"ACE_Sandbag_empty\"] call EFUNC(common,addToInventory);\r\n}, [_unit, _sandbag], 1.5] call CBA_fnc_waitAndExecute;\r\n"}],"scopes":[{"name":"ace_scopes_fnc_adjustScope","file":"scopes/functions/fnc_adjustScope.sqf","text":"/*\r\n * Author: KoffeinFlummi, Ruthberg\r\n * Changes the adjustment for the current scope\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Turret and Direction <NUMBER>\r\n * 2: Major Step <BOOL>\r\n *\r\n * Return Value:\r\n * Did we adjust anything? <BOOL>\r\n *\r\n * Example:\r\n * [player, ELEVATION_UP, false] call ace_scopes_fnc_adjustScope\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_weaponIndex\", \"_zeroing\", \"_optic\", \"_opticConfig\", \"_verticalIncrement\", \"_horizontalIncrement\", \"_maxVertical\", \"_maxHorizontal\", \"_adjustment\"];\r\n\r\nparams [\"_unit\", \"_turretAndDirection\", \"_majorStep\"];\r\n\r\nif (!(_unit isKindOf \"Man\")) exitWith {false};\r\nif (currentMuzzle _unit != currentWeapon _unit) exitWith {false};\r\n\r\n_weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\r\nif (_weaponIndex < 0) exitWith {false};\r\n\r\n_adjustment = _unit getVariable QGVAR(Adjustment);\r\nif (isNil \"_adjustment\") then {\r\n    _adjustment = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]; // [Windage, Elevation, Zero]\r\n};\r\n\r\nif (isNil QGVAR(Optics)) then {\r\n    GVAR(Optics) = [\"\", \"\", \"\"];\r\n};\r\n\r\n_optic = GVAR(Optics) select _weaponIndex;\r\n_opticConfig = configFile >> \"CfgWeapons\" >> _optic;\r\n_verticalIncrement = getNumber (_opticConfig >> \"ACE_ScopeAdjust_VerticalIncrement\");\r\n_horizontalIncrement = getNumber (_opticConfig >> \"ACE_ScopeAdjust_HorizontalIncrement\");\r\n_maxVertical = getArray (_opticConfig >> \"ACE_ScopeAdjust_Vertical\");\r\n_maxHorizontal = getArray (_opticConfig >> \"ACE_ScopeAdjust_Horizontal\");\r\n\r\nif ((count _maxHorizontal < 2) || (count _maxVertical < 2)) exitWith {false};\r\nif ((_verticalIncrement == 0) && (_turretAndDirection in [ELEVATION_UP, ELEVATION_DOWN])) exitWith {false};\r\nif ((_horizontalIncrement == 0) && (_turretAndDirection in [WINDAGE_UP, WINDAGE_DOWN])) exitWith {false};\r\n\r\n_zeroing = _adjustment select _weaponIndex;\r\n_zeroing params [\"_elevation\", \"_windage\", \"_zero\"];\r\n\r\nswitch (_turretAndDirection) do {\r\n    case ELEVATION_UP:   { _elevation = _elevation + _verticalIncrement };\r\n    case ELEVATION_DOWN: { _elevation = _elevation - _verticalIncrement };\r\n    case WINDAGE_LEFT:   { _windage = _windage - _horizontalIncrement };\r\n    case WINDAGE_RIGHT:  { _windage = _windage + _horizontalIncrement };\r\n};\r\n\r\nif (_majorStep) then {\r\n    switch (_turretAndDirection) do {\r\n        case ELEVATION_UP:   { _elevation = ceil(_elevation) };\r\n        case ELEVATION_DOWN: { _elevation = floor(_elevation) };\r\n        case WINDAGE_LEFT:   { _windage = floor(_windage) };\r\n        case WINDAGE_RIGHT:  { _windage = ceil(_windage) };\r\n    };\r\n};\r\n\r\n_elevation = round(_elevation * 10) / 10;\r\n_windage = round(_windage * 10) / 10;\r\n\r\nif ((_elevation + _zero) < _maxVertical select 0 or (_elevation + _zero) > _maxVertical select 1) exitWith {false};\r\nif (_windage < _maxHorizontal select 0 or _windage > _maxHorizontal select 1) exitWith {false};\r\n\r\n[_unit, _elevation, _windage, _zero] call FUNC(applyScopeAdjustment);\r\n\r\ntrue\r\n"},{"name":"ace_scopes_fnc_adjustZero","file":"scopes/functions/fnc_adjustZero.sqf","text":"/*\r\n * Author: KoffeinFlummi, Ruthberg\r\n * Updates the zero reference for the current scope\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * true <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_scopes_fnc_adjustZero\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_weaponIndex\", \"_adjustment\", \"_zeroing\"];\r\n\r\nparams [\"_unit\"];\r\n\r\nif (vehicle _unit != _unit) exitWith {false};\r\n\r\n_weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\r\nif (_weaponIndex < 0) exitWith {false};\r\n\r\n_adjustment = _unit getVariable QGVAR(Adjustment);\r\nif (isNil \"_adjustment\") then {\r\n    // [Windage, Elevation, Zero]\r\n    _adjustment = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\r\n};\r\n\r\n_zeroing = _adjustment select _weaponIndex;\r\n_zeroing params [\"_elevation\", \"_windage\", \"_zero\"];\r\n\r\n_zero = round((_zero + _elevation) * 10) / 10;\r\n_elevation = 0;\r\n\r\n[_unit, _elevation, _windage, _zero] call FUNC(applyScopeAdjustment);\r\n\r\ntrue\r\n"},{"name":"ace_scopes_fnc_applyScopeAdjustment","file":"scopes/functions/fnc_applyScopeAdjustment.sqf","text":"/*\r\n * Author: KoffeinFlummi, Ruthberg\r\n * Applies the adjustment for the current scope\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Absolute elevation <NUMBER>\r\n * 2: Absolute windage <NUMBER>\r\n * 3: Absolute zero reference <NUMBER>\r\n *\r\n * Return Value:\r\n * True <BOOL>\r\n *\r\n * Example:\r\n * [player, 1.3, 0.3, 0.1] call ace_scopes_fnc_applyScopeAdjustment\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_adjustmentDifference\", \"_pitchBankYaw\", \"_adjustment\", \"_weaponIndex\"];\r\n\r\nparams [\"_unit\", \"_elevation\", \"_windage\", \"_zero\"];\r\n\r\n_weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\r\n\r\n_adjustment = _unit getVariable QGVAR(Adjustment);\r\nif (isNil \"_adjustment\") then {\r\n    // [Windage, Elevation, Zero]\r\n    _adjustment = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\r\n    _unit setVariable [QGVAR(Adjustment), _adjustment];\r\n};\r\n\r\n_adjustmentDifference = (_adjustment select _weaponIndex) vectorDiff [_elevation, _windage, _zero];\r\nif (_adjustmentDifference isEqualTo [0,0,0]) exitWith {false};  // Don't coninue if no adjustment is made\r\n\r\n_adjustment set [_weaponIndex, [_elevation, _windage, _zero]];\r\n[_unit, QGVAR(Adjustment), _adjustment, 0.5] call EFUNC(common,setVariablePublic);\r\n\r\nplaySound selectRandom [\"ACE_Scopes_Click_1\", \"ACE_Scopes_Click_2\", \"ACE_Scopes_Click_3\"];\r\n\r\n// slightly rotate the player if looking through optic\r\nif (cameraView == \"GUNNER\") then {\r\n    // Convert adjustmentDifference from mils to degrees\r\n    _adjustmentDifference = _adjustmentDifference apply {_x * 0.05625};\r\n    _adjustmentDifference params [\"_elevationDifference\", \"_windageDifference\"];\r\n    _pitchBankYaw = [_unit] call EFUNC(common,getPitchBankYaw);\r\n    _pitchBankYaw params [\"_pitch\", \"_bank\", \"_yaw\"];\r\n    _pitch = _pitch + _elevationDifference;\r\n    _yaw = _yaw + _windageDifference;\r\n    [_unit, _pitch, _bank, _yaw] call EFUNC(common,setPitchBankYaw);\r\n} else {\r\n    [] call FUNC(showZeroing);\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_scopes_fnc_canAdjustZero","file":"scopes/functions/fnc_canAdjustZero.sqf","text":"/*\r\n * Author: KoffeinFlummi, Ruthberg\r\n * Changes the adjustment for the current scope\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Can we update the zero reference? <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_scopes_fnc_canAdjustZero\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_weaponIndex\", \"_adjustment\", \"_elevation\"];\r\n\r\nparams [\"_unit\"];\r\n\r\nif (cameraView == \"GUNNER\") exitWith {false};\r\nif (vehicle _unit != _unit) exitWith {false};\r\nif (!(missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false])) exitWith {false};\r\n\r\n_weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\r\nif (_weaponIndex < 0) exitWith {false};\r\n\r\n_adjustment = _unit getVariable QGVAR(Adjustment);\r\nif (isNil \"_adjustment\") then {\r\n    // [Windage, Elevation, Zero]\r\n    _adjustment = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\r\n};\r\n\r\n_elevation = (_adjustment select _weaponIndex) select 0;\r\n\r\n// You can only adjust your zero reference, if your relative elevation setting is not 0\r\n_elevation != 0\r\n"},{"name":"ace_scopes_fnc_firedEH","file":"scopes/functions/fnc_firedEH.sqf","text":"/*\r\n * Author: KoffeinFlummi, esteldunedain\r\n * Adjusts the flight path of the bullet according to the zeroing. Called from the unified fired EH only for local and non-local players on foot.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nprivate [\"_adjustment\", \"_weaponIndex\", \"_zeroing\", \"_adjustment\"];\r\n\r\n_adjustment = _unit getVariable [QGVAR(Adjustment), []];\r\nif (_adjustment isEqualTo []) exitWith {};\r\n\r\n_weaponIndex = [_unit, currentWeapon _unit] call EFUNC(common,getWeaponIndex);\r\nif (_weaponIndex < 0) exitWith {};\r\n\r\n_zeroing = _adjustment select _weaponIndex;\r\nTRACE_1(\"Adjusting With\",_zeroing);\r\n\r\nif (_zeroing isEqualTo [0, 0, 0]) exitWith {};\r\n\r\n// Convert zeroing from mils to degrees\r\n_zeroing = _zeroing vectorMultiply 0.05625;\r\n_zeroing params [\"_elevation\", \"_windage\", \"_zero\"];\r\n\r\n[_projectile, _windage, _elevation + _zero, 0] call EFUNC(common,changeProjectileDirection);\r\n"},{"name":"ace_scopes_fnc_getOptics","file":"scopes/functions/fnc_getOptics.sqf","text":"/*\r\n * Author: commy2\r\n * Gets the optic classnames of all currently equipped weapons.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * 0: Optic of primary <STRING>\r\n * 1: Optic of secondary <STRING>\r\n * 2: Optic of handgun <STRING>\r\n *\r\n * Example:\r\n * [player] call ace_scopes_fnc_getOptics\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_optics\";\r\n\r\nparams [\"_unit\"];\r\n\r\n_optics = [\"\", \"\", \"\"];\r\n\r\nif (!(_unit isKindOf \"CAManBase\")) exitWith {_optics};\r\n\r\n{\r\n    if (count _x >= 2) then {\r\n        _optics set [_forEachIndex, _x select 2];\r\n    };\r\n} forEach [primaryWeaponItems _unit, secondaryWeaponItems _unit, handgunItems _unit];\r\n\r\n_optics\r\n"},{"name":"ace_scopes_fnc_inventoryCheck","file":"scopes/functions/fnc_inventoryCheck.sqf","text":"/*\r\n * Author: KoffeinFlummi, Commy2\r\n * Check if weapon optics changed and reset zeroing if needed\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_scopes_fnc_inventoryCheck\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_newOptics\", \"_adjustment\"];\r\n\r\nparams [\"_player\"];\r\n\r\n_adjustment = ACE_player getVariable QGVAR(Adjustment);\r\nif (isNil \"_adjustment\") then {\r\n    // [Windage, Elevation, Zero]\r\n    _adjustment = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\r\n    ACE_player setVariable [QGVAR(Adjustment), _adjustment];\r\n    [ACE_player, QGVAR(Adjustment), _adjustment, 0.5] call EFUNC(common,setVariablePublic);\r\n};\r\n\r\nif (isNil QGVAR(Optics)) then {\r\n    GVAR(Optics) = [\"\", \"\", \"\"];\r\n};\r\n_newOptics = [_player] call FUNC(getOptics);\r\n\r\n{\r\n    if (_newOptics select _forEachIndex != _x) then {\r\n        // The optic for this weapon changed, set adjustment to zero\r\n        if (!((_adjustment select _forEachIndex) isEqualTo [0, 0, 0])) then {\r\n            _adjustment set [_forEachIndex, [0, 0, 0]];\r\n            [ACE_player, QGVAR(Adjustment), _adjustment, 0.5] call EFUNC(common,setVariablePublic);\r\n        };\r\n    };\r\n} forEach GVAR(Optics);\r\n\r\n_adjustment = ACE_player getVariable QGVAR(Adjustment);\r\nGVAR(Optics) = _newOptics;\r\n"},{"name":"ace_scopes_fnc_showZeroing","file":"scopes/functions/fnc_showZeroing.sqf","text":"/*\r\n * Author: KoffeinFlummi, esteldunedain\r\n * Display the adjustment knobs, update their value and fade them out later\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_scopes_fnc_showZeroing\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_weaponIndex\", \"_adjustment\", \"_layer\", \"_display\", \"_zeroing\", \"_vertical\", \"_horizontal\"];\r\n\r\ndisableSerialization;\r\n\r\n_weaponIndex = [ACE_player, currentWeapon ACE_player] call EFUNC(common,getWeaponIndex);\r\nif (_weaponIndex < 0) exitWith {};\r\n\r\n_adjustment = ACE_player getVariable QGVAR(Adjustment);\r\nif (isNil \"_adjustment\") then {\r\n    // [Windage, Elevation, Zero]\r\n    _adjustment = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];\r\n};\r\n\r\n// Display the adjustment knobs\r\n_layer = [QGVAR(Zeroing)] call BIS_fnc_rscLayer;\r\n_layer cutRsc [QGVAR(Zeroing), \"PLAIN\", 0, false];\r\n\r\n// Find the display\r\n_display = uiNamespace getVariable [QGVAR(ZeroingDisplay), displayNull];\r\nif (isNull _display) exitWith {};\r\n\r\n// Update values\r\n_zeroing = _adjustment select _weaponIndex;\r\n_zeroing params [\"_elevation\", \"_windage\"];\r\n_vertical = _display displayCtrl 12;\r\n_horizontal = _display displayCtrl 13;\r\n_vertical ctrlSetText (str _elevation);\r\n_horizontal ctrlSetText (str _windage);\r\n\r\n// Set the time when to hide the knobs\r\nGVAR(timeToHide) = diag_tickTime + 3.0;\r\n\r\nif !(isNil QGVAR(fadePFH)) exitWith {};\r\n\r\n// Launch a PFH to wait and fade out the knobs\r\nGVAR(fadePFH) = [{\r\n    if (diag_tickTime >= GVAR(timeToHide)) exitWith {\r\n        private \"_layer\";\r\n        params [\"\", \"_pfhId\"];\r\n        _layer = [QGVAR(Zeroing)] call BIS_fnc_rscLayer;\r\n        _layer cutFadeOut 2;\r\n\r\n        GVAR(fadePFH) = nil;\r\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n}, 0.1, []] call CBA_fnc_addPerFrameHandler\r\n"}],"sitting":[{"name":"ace_sitting_fnc_addSitActions","file":"sitting/functions/fnc_addSitActions.sqf","text":"/*\r\n * Author: Jonpas\r\n * Adds sit actions.\r\n *\r\n * Arguments:\r\n * 0: Seat <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [seat] call ace_sitting_fnc_addSitActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_seat\"];\r\n\r\nprivate _type = typeOf _seat;\r\n\r\n// Exit if the object is not specified as a seat\r\nif (getNumber (configFile >> \"CfgVehicles\" >> _type >> QGVAR(canSit)) != 1) exitWith {};\r\n\r\n// only run this after the settings are initialized\r\nif !(EGVAR(common,settingsInitFinished)) exitWith {\r\n    EGVAR(common,runAtSettingsInitialized) pushBack [FUNC(addSitActions), _this];\r\n};\r\n\r\n//If not enabled, don't add actions:\r\nif (!GVAR(enable)) exitWith {};\r\n\r\n// Exit if class already initialized\r\nif (_type in GVAR(initializedClasses)) exitWith {};\r\n\r\nGVAR(initializedClasses) pushBack _type;\r\n\r\nTRACE_1(\"Adding Sit Action\",_type);\r\n\r\nprivate _sitAction = [\r\n    QGVAR(Sit),\r\n    localize LSTRING(Sit),\r\n    QPATHTOF(UI\\sit_ca.paa),\r\n    {_this call FUNC(sit)},\r\n    {_this call FUNC(canSit)},\r\n    {},\r\n    [],\r\n    [0, 0, 0],\r\n    1.5\r\n] call EFUNC(interact_menu,createAction);\r\n[_type, 0, [\"ACE_MainActions\"], _sitAction] call EFUNC(interact_menu,addActionToClass);\r\n"},{"name":"ace_sitting_fnc_canSit","file":"sitting/functions/fnc_canSit.sqf","text":"/*\r\n * Author: Jonpas\r\n * Check if the player can sit down.\r\n *\r\n * Arguments:\r\n * 0: Seat <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Sit Down <BOOL>\r\n *\r\n * Example:\r\n * [seat] call ace_sitting_fnc_canSit\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_seat\"];\r\n\r\n// Sitting enabled, is seat object, not occupied and standing up (or not on a big slope)\r\nGVAR(enable) &&\r\n{!(_seat call EFUNC(common,owned))} &&\r\n{round (vectorUp _seat select 0) == 0 && {round (vectorUp _seat select 1) == 0} && {round (vectorUp _seat select 2) == 1}}\r\n"},{"name":"ace_sitting_fnc_canStand","file":"sitting/functions/fnc_canStand.sqf","text":"/*\r\n * Author: Jonpas\r\n * Check if the player can stand up (is in sitting position).\r\n *\r\n * Arguments:\r\n * Player <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Stand Up <BOOL>\r\n *\r\n * Example:\r\n * player call ace_sitting_fnc_canStand;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\"];\r\n\r\n// Sitting\r\n!isNil {_player getVariable QGVAR(isSitting)}\r\n"},{"name":"ace_sitting_fnc_getRandomAnimation","file":"sitting/functions/fnc_getRandomAnimation.sqf","text":"/*\r\n * Author: Jonpas\r\n * Gets a random animations from the list.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Random Animation <STRING>\r\n *\r\n * Example:\r\n * _animation = call ace_sitting_fnc_getRandomAnimation\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Select random animation from Animations Pool\r\nselectRandom [\r\n    QGVAR(HubSittingChairA_idle1),\r\n    QGVAR(HubSittingChairA_idle2),\r\n    QGVAR(HubSittingChairA_idle3),\r\n    QGVAR(HubSittingChairA_move1),\r\n    QGVAR(HubSittingChairB_idle1),\r\n    QGVAR(HubSittingChairB_idle2),\r\n    QGVAR(HubSittingChairB_idle3),\r\n    QGVAR(HubSittingChairB_move1),\r\n    QGVAR(HubSittingChairC_idle1),\r\n    QGVAR(HubSittingChairC_idle2),\r\n    QGVAR(HubSittingChairC_idle3),\r\n    QGVAR(HubSittingChairC_move1),\r\n    QGVAR(HubSittingChairUA_idle1),\r\n    QGVAR(HubSittingChairUA_idle2),\r\n    QGVAR(HubSittingChairUA_idle3),\r\n    QGVAR(HubSittingChairUA_move1),\r\n    QGVAR(HubSittingChairUB_idle1),\r\n    QGVAR(HubSittingChairUB_idle2),\r\n    QGVAR(HubSittingChairUB_idle3),\r\n    QGVAR(HubSittingChairUB_move1),\r\n    QGVAR(HubSittingChairUC_idle1),\r\n    QGVAR(HubSittingChairUC_idle2),\r\n    QGVAR(HubSittingChairUC_idle3),\r\n    QGVAR(HubSittingChairUC_move1)\r\n]\r\n"},{"name":"ace_sitting_fnc_handleInterrupt","file":"sitting/functions/fnc_handleInterrupt.sqf","text":"/*\r\n * Author: Jonpas\r\n * Handles interruptions of sitting, like killed or unconsciousness.\r\n *\r\n * Arguments:\r\n * 0: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * player call ace_sitting_fnc_handleInterrupt\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\"];\r\n\r\nif (!isNil {_player getVariable QGVAR(isSitting)}) then {\r\n    _player call FUNC(stand);\r\n};\r\n"},{"name":"ace_sitting_fnc_moduleInit","file":"sitting/functions/fnc_moduleInit.sqf","text":"/*\r\n * Author: Jonpas\r\n * Initializes the Sitting module.\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: Units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif (!_activated) exitWith {};\r\n\r\n[_logic, QGVAR(enable), \"enable\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO(\"Sitting Module Initialized.\");\r\n"},{"name":"ace_sitting_fnc_sit","file":"sitting/functions/fnc_sit.sqf","text":"/*\r\n * Author: Jonpas\r\n * Sits down the player.\r\n *\r\n * Arguments:\r\n * 0: Seat <OBJECT>\r\n * 1: Player <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [seat, player] call ace_sitting_fnc_sit;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_seat\", \"_player\"];\r\n\r\n// Overwrite weird position, because Arma decides to set it differently based on current animation/stance...\r\n_player switchMove \"amovpknlmstpsraswrfldnon\";\r\n\r\n// Add scroll-wheel action to release object\r\nprivate _actionID = _player addAction [\r\n    format [\"<t color='#FFFF00'>%1</t>\", localize LSTRING(Stand)],\r\n    QUOTE((_this select 0) call FUNC(stand)),\r\n    nil,\r\n    20,\r\n    false,\r\n    true,\r\n    \"GetOut\",\r\n    QUOTE(_this call FUNC(canStand))\r\n];\r\n\r\n// Read config\r\nprivate _configFile = configFile >> \"CfgVehicles\" >> typeOf _seat;\r\nprivate _sitDirection = (getDir _seat) + getNumber (_configFile >> QGVAR(sitDirection));\r\nprivate _sitPosition = getArray (_configFile >> QGVAR(sitPosition));\r\n\r\n// Get random animation and perform it (before moving player to ensure correct placement)\r\n[_player, call FUNC(getRandomAnimation), 2] call EFUNC(common,doAnimation); // Correctly places when using non-transitional animations\r\n[_player, \"\", 1] call EFUNC(common,doAnimation); // Correctly applies animation's config values (such as disallow throwing of grenades, intercept keybinds... etc).\r\n\r\n// Set direction and position\r\n_player setDir _sitDirection;\r\n//modelToWorld returns AGL\r\n_player setPosASL (AGLtoASL (_seat modelToWorld _sitPosition));\r\n\r\n// Set variables, save seat object on player\r\n_player setVariable [QGVAR(isSitting), [_seat, _actionID]];\r\n[_player, _seat] call EFUNC(common,claim); // To prevent multiple people sitting on one seat\r\n\r\n\r\n// Add automatical stand PFH in case of interruptions\r\nprivate _seatPosOrig = getPosASL _seat;\r\n[{\r\n    params [\"_args\", \"_pfhId\"];\r\n    _args params [\"_player\", \"_seat\", \"_seatPosOrig\"];\r\n\r\n    // Remove PFH if not sitting any more\r\n    if (isNil {_player getVariable QGVAR(isSitting)}) exitWith {\r\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\r\n        TRACE_1(\"Remove PFH\",_player getVariable [ARR_2(QGVAR(isSitting), false)]);\r\n    };\r\n\r\n    //  Stand up if chair gets deleted or moved\r\n    if (isNull _seat || !((getPosASL _seat) isEqualTo _seatPosOrig)) exitWith {\r\n        _player call FUNC(stand);\r\n        TRACE_2(\"Chair moved\",getPosASL _seat,_seatPosOrig);\r\n    };\r\n}, 0, [_player, _seat, _seatPosOrig]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_sitting_fnc_stand","file":"sitting/functions/fnc_stand.sqf","text":"/*\r\n * Author: Jonpas\r\n * Stands up the player.\r\n *\r\n * Arguments:\r\n * Player <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * player call ace_sitting_fnc_stand;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\"];\r\n\r\n(_player getVariable QGVAR(isSitting)) params [\"_seat\", \"_actionID\"];\r\n\r\n// Remove scroll-wheel action\r\n_player removeAction _actionID;\r\n\r\n// Restore animation\r\nprivate _animation = switch (currentWeapon _player) do {\r\n    case \"\": {\"amovpercmstpsnonwnondnon\"};\r\n    case (primaryWeapon _player): {\"amovpercmstpslowwrfldnon\"};\r\n    case (handgunWeapon _player): {\"amovpercmstpslowwpstdnon\"};\r\n    default {\"amovpercmstpsnonwnondnon\"};\r\n};\r\n\r\n[_player, _animation, 2] call EFUNC(common,doAnimation);\r\n\r\n// Set variables to nil\r\n_player setVariable [QGVAR(isSitting), nil];\r\nif (isNull _seat) exitWith {};\r\n[objNull, _seat] call EFUNC(common,claim);\r\n"}],"slideshow":[{"name":"ace_slideshow_fnc_addSlideActions","file":"slideshow/functions/fnc_addSlideActions.sqf","text":"/*\r\n * Author: Jonpas\r\n * Adds controller slide actions.\r\n *\r\n * Arguments:\r\n * 0: Objects <ARRAY>\r\n * 1: Images <ARRAY>\r\n * 2: Names <ARRAY>\r\n * 3: Controller <OBJECT>\r\n * 4: Current Slideshow <NUMBER>\r\n *\r\n * Return Value:\r\n * List of actions <ARRAY>\r\n *\r\n * Example:\r\n * [[object], [\"image\"], [\"name\"], controller, 1] call ace_slideshow_fnc_addSlideActions\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_actions\";\r\nparams [\"_objects\", \"_images\", \"_names\", \"_controller\", \"_currentSlideshow\"];\r\n\r\n_actions = [];\r\n{\r\n    _actions pushBack\r\n    [\r\n        [\r\n            format [QGVAR(slideshow%1_slide%2), _currentSlideshow, _forEachIndex + 1],\r\n            _names select _forEachIndex,\r\n            \"\",\r\n            {\r\n                (_this select 2) params [\"_objects\", \"_image\"];\r\n                {\r\n                    _x setObjectTextureGlobal [0, _image]\r\n                } count _objects;\r\n            },\r\n            {true},\r\n            {},\r\n            [_objects, _x]\r\n        ] call EFUNC(interact_menu,createAction),\r\n        [],\r\n        _controller\r\n    ];\r\n} forEach _images;\r\n\r\nTRACE_1(\"Children actions\",_actions);\r\n\r\n_actions\r\n"},{"name":"ace_slideshow_fnc_autoTransition","file":"slideshow/functions/fnc_autoTransition.sqf","text":"/*\r\n * Author: Jonpas\r\n * Handles automatic slide transitions using waitAndExecute in a PFH-like manner resulting in no performance loss.\r\n *\r\n * Arguments:\r\n * 0: Objects <ARRAY>\r\n * 1: Image Paths <ARRAY>\r\n * 2: State Variable Name <ARRAY>\r\n * 3: Duration <NUMBER> (0 disables automatic transitions)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [objects, images, \"ace_slideshow_slideshow1\", duration] call ace_slideshow_fnc_autoTransition\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_currentSlide\";\r\nparams [\"_objects\", \"_images\", \"_varString\", \"_duration\"];\r\n\r\n// Get current slide number of this slideshow\r\n_currentSlide = missionNamespace getVariable [_varString, 0];\r\n\r\n// Increment slide or return to first slide if reached end\r\n_currentSlide = (_currentSlide + 1) mod (count _images);\r\n\r\n// Save slide back into global variable (PFH's local variables do not persist through PFH run)\r\nmissionNamespace setVariable [_varString, _currentSlide];\r\n\r\n// Set slide\r\n{\r\n    _x setObjectTextureGlobal [0, _images select _currentSlide];\r\n} count _objects;\r\n\r\n// Log current slide and execute Next slide\r\nTRACE_4(\"Auto-transition\",_images select _currentSlide,_currentSlide,count _images,_duration);\r\n[FUNC(autoTransition), [_objects, _images, _varString, _duration], _duration] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_slideshow_fnc_createSlideshow","file":"slideshow/functions/fnc_createSlideshow.sqf","text":"/*\r\n * Author: Jonpas, DaC\r\n * Prepares necessary variables and default image.\r\n *\r\n * Arguments:\r\n * 0: Objects <ARRAY>\r\n * 1: Controller Objects <ARRAY>\r\n * 2: Image Paths <ARRAY>\r\n * 3: Action Names <ARRAY>\r\n * 4: Slide Duration <NUMBER> (0 disables automatic transitions)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[object1, object2, object3], [controller1], [\"images\\image1.paa\", \"images\\image2.paa\"], [\"Action1\", \"Action2\"], 5] call ace_slideshow_fnc_createSlideshow\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_currentSlideshow\", \"_slidesAction\", \"_varString\"];\r\nparams [\r\n    [\"_objects\", [], [[]] ],\r\n    [\"_controllers\", [], [[]] ],\r\n    [\"_images\", [], [[]] ],\r\n    [\"_names\", [], [[]] ],\r\n    [\"_duration\", 0, [0]]\r\n];\r\n\r\n// Verify data\r\nif (_objects isEqualTo []) exitWith {\r\n    ACE_LOGERROR(\"Slideshow Objects field must NOT be empty!\");\r\n};\r\nif (count _images != count _names || {_images isEqualTo []} || {_names isEqualTo []}) exitWith {\r\n    ACE_LOGERROR(\"Slideshow Images or Names fields must NOT be empty and must have equal number of items!\");\r\n};\r\n\r\n// If no controllers use objects as controllers\r\nif (_controllers isEqualTo []) then {\r\n    _controllers = _objects;\r\n};\r\n\r\nTRACE_4(\"Information\",_objects,_controllers,_images,_names);\r\n\r\nif (isServer) then {\r\n    // Default images on whiteboards (first image)\r\n    {\r\n        _x setObjectTextureGlobal [0, _images select 0];\r\n    } count _objects;\r\n\r\n    // Number of slideshows (multiple modules support)\r\n    GVAR(slideshows) = GVAR(slideshows) + 1;\r\n};\r\n\r\n_currentSlideshow = GVAR(slideshows); // Local variable in case GVAR gets changed during execution of below code\r\n\r\n// If interaction menu module is not present, set default duration value\r\nif !([\"ace_interact_menu\"] call EFUNC(common,isModLoaded)) then {\r\n    _duration = NOINTERACTMENU_DURATION;\r\n    ACE_LOGINFO_1(\"Interaction Menu module not present, defaulting duration value to %1\",_duration);\r\n};\r\n\r\n// Add interactions if automatic transitions are disabled, else setup automatic transitions\r\nif (_duration == 0) then {\r\n    {\r\n        // Add Slides sub-action and populate with images\r\n        _slidesAction = [QGVAR(Slides), localize LSTRING(Interaction), \"\", {}, {true}, {(_this select 2) call FUNC(addSlideActions)}, [_objects, _images, _names, _x, _currentSlideshow], [0, 0, 0], 2] call EFUNC(interact_menu,createAction);\r\n        [_x, 0, [\"ACE_MainActions\"], _slidesAction] call EFUNC(interact_menu,addActionToObject);\r\n        nil\r\n    } count _controllers;\r\n} else {\r\n    if !(isServer) exitWith {};\r\n\r\n    // Formatted GVAR string (multiple modules support)\r\n    _varString = format [QGVAR(slideshow%1), _currentSlideshow];\r\n    TRACE_1(\"Current Slide\",_varString);\r\n\r\n    // Set formatted GVAR to first slide\r\n    missionNamespace setVariable [_varString, 0];\r\n\r\n    // Automatic transitions handler\r\n    [FUNC(autoTransition), [_objects, _images, _varString, _duration], _duration] call CBA_fnc_waitAndExecute;\r\n};\r\n"},{"name":"ace_slideshow_fnc_moduleInit","file":"slideshow/functions/fnc_moduleInit.sqf","text":"/*\r\n * Author: Jonpas\r\n * Initializes the module.\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: Units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Exit on Headless Client\r\nif (!hasInterface && !isDedicated) exitWith {};\r\n\r\nprivate [\"_objects\", \"_controllers\", \"_images\", \"_names\", \"_duration\"];\r\nparams [[\"_logic\", objNull, [objNull]], \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\nif (isNull _logic) exitWith {};\r\n\r\n// Extract variables from logic\r\n_objects = [_logic getVariable [\"Objects\", \"\"], true, true] call EFUNC(common,parseList);\r\n_controllers = [_logic getVariable [\"Controllers\", \"\"], true, true] call EFUNC(common,parseList);\r\n_images = [_logic getVariable [\"Images\", \"\"], false, false] call EFUNC(common,parseList);\r\n_names = [_logic getVariable [\"Names\", \"\"], false, false] call EFUNC(common,parseList);\r\n_duration = _logic getVariable [\"Duration\", 0];\r\n\r\n// Objects synced to the module\r\n{\r\n    _objects pushBack _x;\r\n    nil\r\n} count (synchronizedObjects _logic);\r\n\r\n// Prepare with actions\r\n[_objects, _controllers, _images, _names, _duration] call FUNC(createSlideshow);\r\n\r\nACE_LOGINFO_1(\"Slideshow Module Initialized on %1 Objects\", count _objects);\r\n"}],"smallarms":[],"spectator":[{"name":"ace_spectator_fnc_cacheUnitInfo","file":"spectator/functions/fnc_cacheUnitInfo.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Caches the units information for quick retrevial in spectator interface PFHs\r\n *\r\n * Arguments:\r\n * 0: Unit to have info cached for <OBJECT>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [vehicle player] call ace_spectator_fnc_cacheUnitInfo\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\nprivate [\"_color\",\"_icon\",\"_name\"];\r\n\r\n// Group info only needs to be cached once (groups can't change)\r\nif (isNil { GETVAR((group _unit),GVAR(gColor),nil) }) then {\r\n    _color = [side group _unit] call BIS_fnc_sideColor;\r\n    SETVAR((group _unit),GVAR(gColor),_color);\r\n};\r\n\r\n// Unit info should be updated each time\r\n_icon = getText (configFile >> \"CfgVehicles\" >> typeOf _unit >> \"Icon\");\r\n_name = [_unit,false] call EFUNC(common,getName);\r\n\r\n// Handle CfgVehicleIcons\r\nif (isText (configFile >> \"CfgVehicleIcons\" >> _icon)) then {\r\n    _icon = getText (configFile >> \"CfgVehicleIcons\" >> _icon);\r\n};\r\n\r\nSETVAR(_unit,GVAR(uIcon),_icon);\r\nSETVAR(_unit,GVAR(uName),_name);\r\n"},{"name":"ace_spectator_fnc_cycleCamera","file":"spectator/functions/fnc_cycleCamera.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Cycle through the spectator camera vision/view/units in steps\r\n *\r\n * Arguments:\r\n * 0: Camera mode steps <NUMBER>\r\n * 1: Camera unit steps <NUMBER>\r\n * 2: Vision mode steps <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [0, -1] call ace_spectator_fnc_cycleCamera\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_stepMode\",0], [\"_stepUnit\",0], [\"_stepVision\",0]];\r\nprivate [\"_modes\",\"_visions\",\"_iMode\",\"_iVision\",\"_countModes\",\"_countVisions\",\"_newMode\",\"_newVision\",\"_newUnit\"];\r\n\r\n_modes = GVAR(availableModes);\r\n_units = GVAR(unitList);\r\n_visions = GVAR(availableVisions);\r\n\r\n// Get current index\r\n_iMode = (_modes find GVAR(camMode)) max 0;\r\n_iUnit = (_units find GVAR(camUnit)) max 0;\r\n_iVision = (_visions find GVAR(camVision)) max 0;\r\n\r\n_countModes = count _modes;\r\n_countUnits = count _units;\r\n_countVisions = count _visions;\r\n\r\n// Step index by step number (loop at ends)\r\nif (_countModes != 0) then {\r\n    _iMode = (_iMode + _stepMode) % _countModes;\r\n    if (_iMode < 0) then { _iMode = _countModes + _iMode; };\r\n};\r\n\r\nif (_countUnits != 0) then {\r\n    _iUnit = (_iUnit + _stepUnit) % _countUnits;\r\n    if (_iUnit < 0) then { _iUnit = _countUnits + _iUnit; };\r\n};\r\n\r\nif (_countVisions != 0) then {\r\n    _iVision = (_iVision + _stepVision) % _countVisions;\r\n    if (_iVision < 0) then { _iVision = _countVisions + _iVision; };\r\n};\r\n\r\n// Get value at new index\r\n_newMode = _modes select _iMode;\r\n_newUnit = _units select _iUnit;\r\n_newVision = _visions select _iVision;\r\n\r\n[_newMode, _newUnit, _newVision] call FUNC(transitionCamera);\r\n"},{"name":"ace_spectator_fnc_handleCamera","file":"spectator/functions/fnc_handleCamera.sqf","text":"/*\r\n * Author: F3 Project, Head, SilentSpike\r\n * Handles free camera manipulation according to input\r\n *\r\n * Arguments:\r\n * 0: Parameters <ANY>\r\n * 1: PFH handle <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [ace_spectator_fnc_handleCamera, 0] call CBA_fnc_addPerFrameHandler;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n// Kill PFH when not in free cam (or display is closed)\r\nif (isNil QGVAR(camHandler)) exitWith { [_this select 1] call CBA_fnc_removePerFrameHandler; };\r\n\r\nprivate [\"_camera\",\"_pan\",\"_tilt\"];\r\n\r\n_pan = (GVAR(camPan) + 360) % 360;\r\n_tilt = GVAR(camTilt);\r\n\r\nif (GVAR(camMode) == 0) then {\r\n    private [\"_oldPos\",\"_altMod\",\"_zoomMod\",\"_mX\",\"_mY\",\"_mZ\",\"_x\",\"_y\",\"_z\"];\r\n    _camera = GVAR(freeCamera);\r\n    _oldPos = GVAR(camPos);\r\n\r\n    // Dolly/Boom amount should be influnced by zoom level (it should really be exponential)\r\n    // Dollying should also slow as the camera gets close to the ground\r\n    _zoomMod = (GVAR(camZoom) * 0.8) max 1;\r\n    _altMod = ((((getPos _camera) select 2) * 0.05) max 0.1) min 1;\r\n\r\n    _mX = (GVAR(camDolly) select 0) * _altMod / _zoomMod;\r\n    _mY = (GVAR(camDolly) select 1) * _altMod / _zoomMod;\r\n    _mZ = GVAR(camBoom) / _zoomMod;\r\n\r\n    _x = (_oldPos select 0) + (_mX * cos(_pan)) + (_mY * sin(_pan));\r\n    _y = (_oldPos select 1) - (_mX * sin(_pan)) + (_mY * cos(_pan));\r\n    _z = (_oldPos select 2) + _mZ;\r\n\r\n    // Prevent camera going under terrain\r\n    GVAR(camPos) = [_x,_y,_z max (getTerrainHeightASL [_x,_y])];\r\n\r\n    // Update camera position and rotation\r\n    _camera setPosASL GVAR(camPos);\r\n    _camera setDir _pan;\r\n    [_camera, _tilt, 0] call BIS_fnc_setPitchBank;\r\n} else {\r\n    private [\"_unit\",\"_target\",\"_distance\",\"_vector\"];\r\n    _camera = GVAR(unitCamera);\r\n\r\n    _unit = GVAR(camUnit);\r\n    _target = GVAR(targetCamera);\r\n    _distance = GVAR(camDistance);\r\n\r\n    // Generate a position vector relative to the unit\r\n    _vector = [0,-_distance*cos(_tilt),0];\r\n    _vector = [_vector,[-_pan] call CBA_fnc_simplifyAngle180] call BIS_fnc_rotateVector2D;\r\n    _vector = _vector vectorAdd [0,0,_distance*sin(-_tilt)];\r\n\r\n    // Update the position of the target camera (used for smooth unit tracking)\r\n    _target camSetPos ((_unit modelToWorldVisual [0,0,0]) vectorAdd [0,0,1.5]);\r\n    _target camCommit 0;\r\n\r\n    // Update the relative position of the unit camera\r\n    _camera camSetRelPos _vector;\r\n    _camera camCommit 0;\r\n\r\n    GVAR(camPos) = getPosASL _camera;\r\n};\r\n"},{"name":"ace_spectator_fnc_handleCompass","file":"spectator/functions/fnc_handleCompass.sqf","text":"/*\r\n * Author: SilentSpike, voiper\r\n * Handles the spectator UI compass\r\n *\r\n * Arguments:\r\n * 0: Parameters <ANY>\r\n * 1: PFH handle <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [ace_spectator_fnc_handleCompass, 0, _display] call CBA_fnc_addPerFrameHandler;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\"];\r\n\r\n// Kill PFH when compass hidden (or display is closed)\r\nif (isNil QGVAR(compHandler)) exitWith { [_this select 1] call CBA_fnc_removePerFrameHandler; };\r\n\r\nprivate [\"_compass\",\"_NE\",\"_ES\",\"_SW\",\"_WN\",\"_compassW\",\"_degree\",\"_heading\",\"_offset\",\"_positions\",\"_sequence\"];\r\n\r\n_compass = _display displayCtrl IDC_COMP;\r\n\r\n_NE = _compass controlsGroupCtrl IDC_COMP_0;\r\n_ES = _compass controlsGroupCtrl IDC_COMP_90;\r\n_SW = _compass controlsGroupCtrl IDC_COMP_180;\r\n_WN = _compass controlsGroupCtrl IDC_COMP_270;\r\n\r\n_compassW = (ctrlPosition _compass) select 2;\r\n_degree = _compassW / 180;\r\n\r\n// Get direction of screen rather than object (accounts for unit freelook)\r\n_heading = (positionCameraToWorld [0,0,1]) vectorDiff (positionCameraToWorld [0,0,0]);\r\n_heading = (((_heading select 0) atan2 (_heading select 1)) + 360) % 360;\r\n_offset = -(_heading % 90) * _degree;\r\n\r\n_positions = [\r\n    [_compassW * -0.5 + _offset, 0],\r\n    [_offset, 0],\r\n    [_compassW * 0.5 + _offset, 0],\r\n    [_compassW + _offset, 0]\r\n];\r\n\r\n_sequence = if (_heading < 90) then {\r\n    [_SW, _WN, _NE, _ES]\r\n} else {\r\n    if (_heading < 180) then {\r\n        [_WN, _NE, _ES, _SW]\r\n    } else {\r\n        if (_heading < 270) then {\r\n            [_NE, _ES, _SW, _WN]\r\n        } else {\r\n            [_ES, _SW, _WN, _NE]\r\n        };\r\n    };\r\n};\r\n\r\n\r\n{\r\n    _x ctrlSetPosition (_positions select _forEachIndex);\r\n    _x ctrlCommit 0;\r\n} forEach _sequence;\r\n"},{"name":"ace_spectator_fnc_handleIcons","file":"spectator/functions/fnc_handleIcons.sqf","text":"/*\r\n * Author: Head, SilentSpike\r\n * Handles rendering the spectator 3D unit icons\r\n *\r\n * Arguments:\r\n * 0: Parameters <ANY>\r\n * 1: PFH handle <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [ace_spectator_fnc_handleIcons, 0] call CBA_fnc_addPerFrameHandler;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif !(GVAR(showIcons)) exitWith {};\r\nprivate [\"_refPoint\",\"_drawVehicles\",\"_leader\",\"_color\",\"_txt\",\"_unit\"];\r\n\r\n// Draw groups unless leader is within distance\r\n_refPoint = [GVAR(freeCamera),GVAR(camUnit)] select (GVAR(camMode) > 0);\r\n_drawVehicles = [];\r\n{\r\n    _leader = leader _x;\r\n    if ((_leader distanceSqr _refPoint) > 40000) then {\r\n        _color = GETVAR(_x,GVAR(gColor),[ARR_4(0,0,0,0)]);\r\n        _txt = groupID _x;\r\n\r\n        drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\nato\\b_inf.paa\", _color, _leader modelToWorldVisual [0,0,30], 1, 1, 0, _txt, 2, 0.02];\r\n    } else {\r\n        _drawVehicles append (units _x);\r\n    };\r\n    false\r\n} count GVAR(groupList);\r\n\r\n// Draw units for groups within distance\r\n{\r\n    _color = GETVAR((group _x),GVAR(gColor),[ARR_4(0,0,0,0)]);\r\n    _txt = [\"\", GETVAR(_x,GVAR(uName),\"\")] select (isPlayer _x);\r\n\r\n    drawIcon3D [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", _color, _x modelToWorldVisual [0,0,3], 0.7, 0.7, 0, _txt, 1, 0.02];\r\n    false\r\n} count (_drawVehicles arrayIntersect GVAR(unitList));\r\n"},{"name":"ace_spectator_fnc_handleInterface","file":"spectator/functions/fnc_handleInterface.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Handles spectator interface events\r\n *\r\n * Arguments:\r\n * 0: Event name <STRING>\r\n * 1: Event arguments <ANY>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [\"onLoad\",_this] call ace_spectator_fnc_handleInterface\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_mode\",[\"_args\",[]]];\r\n\r\nswitch (toLower _mode) do {\r\n    case \"onload\": {\r\n        _args params [\"_display\"];\r\n        SETUVAR(GVAR(interface),_display);\r\n\r\n        // Always show interface and hide map upon opening\r\n        [_display,nil,nil,!GVAR(showInterface),GVAR(showMap)] call FUNC(toggleInterface);\r\n\r\n        // Initalize the unit tree\r\n        [\"onUnitsUpdate\",[(_display displayCtrl IDC_UNIT) controlsGroupCtrl IDC_UNIT_TREE]] call FUNC(handleInterface);\r\n\r\n        // Keep unit list and tree up to date\r\n        [FUNC(handleUnits), 9, _display] call CBA_fnc_addPerFrameHandler;\r\n\r\n        // Handle 3D unit icons\r\n        GVAR(iconHandler) = addMissionEventHandler [\"Draw3D\",FUNC(handleIcons)];\r\n\r\n        // Populate the help window\r\n        private \"_help\";\r\n        _help = (_display displayCtrl IDC_HELP) controlsGroupCtrl IDC_HELP_LIST;\r\n        {\r\n            _i = _help lbAdd (_x select 0);\r\n            if ((_x select 1) == \"\") then {\r\n                _help lbSetPicture [_i,\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\"];\r\n                _help lbSetPictureColor [_i,[COL_FORE]];\r\n            } else {\r\n                _help lbSetTooltip [_i,_x select 1];\r\n            };\r\n        } forEach [\r\n            [localize LSTRING(uiControls),\"\"],\r\n            [localize LSTRING(uiToggleUnits),keyName 2],\r\n            [localize LSTRING(uiToggleHelp),keyName 3],\r\n            [localize LSTRING(uiToggleTools),keyName 4],\r\n            [localize LSTRING(uiToggleCompass),keyName 5],\r\n            [localize LSTRING(uiToggleIcons),keyName 6],\r\n            [localize LSTRING(uiToggleMap),keyName 50],\r\n            [localize LSTRING(uiToggleInterface),keyName 14],\r\n            [localize LSTRING(freeCamControls),\"\"],\r\n            [localize LSTRING(freeCamForward),keyName 17],\r\n            [localize LSTRING(freeCamBackward),keyName 31],\r\n            [localize LSTRING(freeCamLeft),keyName 30],\r\n            [localize LSTRING(freeCamRight),keyName 32],\r\n            [localize LSTRING(freeCamUp),keyName 16],\r\n            [localize LSTRING(freeCamDown),keyName 44],\r\n            [localize LSTRING(freeCamPan),\"RMB (Hold)\"],\r\n            [localize LSTRING(freeCamDolly),\"LMB (Hold)\"],\r\n            [localize LSTRING(freeCamBoost),\"Shift (Hold)\"],\r\n            [localize LSTRING(attributeControls),\"\"],\r\n            [localize LSTRING(nextCam),keyName 200],\r\n            [localize LSTRING(prevCam),keyName 208],\r\n            [localize LSTRING(nextUnit),keyName 205],\r\n            [localize LSTRING(prevUnit),keyName 203],\r\n            [localize LSTRING(nextVis),keyName 49],\r\n            [localize LSTRING(prevVis),format[\"%1 + %2\",keyName 29,keyname 49]],\r\n            [localize LSTRING(adjZoom),\"Scrollwheel\"],\r\n            [localize LSTRING(adjSpeed),format[\"%1 + Scrollwheel\",keyName 29]],\r\n            [localize LSTRING(incZoom),format[\"%1/%2\",keyName 74,keyName 78]],\r\n            [localize LSTRING(incSpeed),format[\"%1 + %2/%3\",keyName 29,keyName 74,keyName 78]],\r\n            [localize LSTRING(reZoom),format[\"%1 + %2\",keyName 56,keyName 74]],\r\n            [localize LSTRING(reSpeed),format[\"%1 + %2\",keyName 56,keyName 78]]\r\n        ];\r\n\r\n        // Handle support for BI's respawn counter\r\n        [{\r\n            if !(isNull (GETUVAR(RscRespawnCounter,displayNull))) then {\r\n                disableSerialization;\r\n                private [\"_counter\",\"_title\",\"_back\",\"_timer\",\"_frame\",\"_x\",\"_y\"];\r\n                _counter = GETUVAR(RscRespawnCounter,displayNull);\r\n                _title = _counter displayCtrl 1001;\r\n                _back = _counter displayCtrl 1002;\r\n                _timer = _counter displayCtrl 1003;\r\n                _frame = _counter ctrlCreate [\"RscFrame\",1008];\r\n\r\n                _x = safeZoneX + safeZoneW - TOOL_W * 4 - MARGIN * 3;\r\n                _y = safeZoneY + safeZoneH - TOOL_H;\r\n\r\n                // Timer\r\n                _title ctrlSetPosition [_x,_y,TOOL_W,TOOL_H];\r\n                _back ctrlSetPosition [_x,_y,TOOL_W,TOOL_H];\r\n                _timer ctrlSetPosition [_x,_y,TOOL_W,TOOL_H];\r\n                _frame ctrlSetPosition [_x,_y,TOOL_W,TOOL_H];\r\n\r\n                _title ctrlSetBackgroundColor [0,0,0,0];\r\n                _back ctrlSetBackgroundColor [COL_BACK];\r\n                _timer ctrlSetFontHeight TOOL_H;\r\n                _frame ctrlSetTextColor [COL_FORE];\r\n\r\n                _title ctrlCommit 0;\r\n                _back ctrlCommit 0;\r\n                _timer ctrlCommit 0;\r\n                _frame ctrlCommit 0;\r\n            };\r\n        },[],0.5] call CBA_fnc_waitAndExecute;\r\n    };\r\n    case \"onunload\": {\r\n        // Kill GUI PFHs\r\n        removeMissionEventHandler [\"Draw3D\",GVAR(iconHandler)];\r\n        GVAR(camHandler) = nil;\r\n        GVAR(compHandler) = nil;\r\n        GVAR(iconHandler) = nil;\r\n        GVAR(toolHandler) = nil;\r\n\r\n        // Reset variables\r\n        GVAR(camBoom) = 0;\r\n        GVAR(camDolly) = [0,0];\r\n        GVAR(ctrlKey) = false;\r\n        GVAR(heldKeys) = [];\r\n        GVAR(heldKeys) resize 255;\r\n        GVAR(mouse) = [false,false];\r\n        GVAR(mousePos) = [0.5,0.5];\r\n    };\r\n    // Mouse events\r\n    case \"onmousebuttondown\": {\r\n        _args params [\"_ctrl\",\"_button\"];\r\n        GVAR(mouse) set [_button,true];\r\n\r\n        // Detect right click\r\n        if ((_button == 1) && (GVAR(camMode) == 1)) then {\r\n            // In first person toggle sights mode\r\n            GVAR(camGun) = !GVAR(camGun);\r\n            [] call FUNC(transitionCamera);\r\n        };\r\n    };\r\n    case \"onmousebuttonup\": {\r\n        _args params [\"_ctrl\",\"_button\"];\r\n\r\n        GVAR(mouse) set [_button,false];\r\n        if (_button == 0) then { GVAR(camDolly) = [0,0]; };\r\n    };\r\n    case \"onmousezchanged\": {\r\n        _args params [\"_ctrl\",\"_zChange\"];\r\n\r\n        // Scroll to modify distance value in third person\r\n        if (GVAR(camMode) == 0) then {\r\n            // Scroll to change speed, modifier for zoom\r\n            if (GVAR(ctrlKey)) then {\r\n                [nil,nil,nil,nil,nil,nil,nil, GVAR(camSpeed) + _zChange * 0.2] call FUNC(setCameraAttributes);\r\n            } else {\r\n                [nil,nil,nil,nil,nil,nil, GVAR(camZoom) + _zChange * 0.1] call FUNC(setCameraAttributes);\r\n            };\r\n        } else {\r\n            GVAR(camDistance) = ((GVAR(camDistance) - _zChange * 2) max 5) min 50;\r\n        };\r\n    };\r\n    case \"onmousemoving\": {\r\n        _args params [\"_ctrl\",\"_x\",\"_y\"];\r\n\r\n        [_x,_y] call FUNC(handleMouse);\r\n    };\r\n    // Keyboard events\r\n    case \"onkeydown\": {\r\n        _args params [\"_display\",\"_dik\",\"_shift\",\"_ctrl\",\"_alt\"];\r\n\r\n        if ((alive player) && {_dik in (actionKeys \"curatorInterface\")} && {!isNull (getAssignedCuratorLogic player)}) exitWith {\r\n            [QGVAR(zeus)] call FUNC(interrupt);\r\n            [\"zeus\"] call FUNC(handleInterface);\r\n        };\r\n        if (_dik in (actionKeys \"Chat\")) exitWith {\r\n            false\r\n        };\r\n        if (_dik in (actionKeys \"PrevChannel\" + actionKeys \"NextChannel\")) exitWith {\r\n            !(isServer || serverCommandAvailable \"#kick\")\r\n        };\r\n\r\n        // Handle held keys (prevent repeat calling)\r\n        if (GVAR(heldKeys) param [_dik,false]) exitWith {};\r\n        // Exclude movement/adjustment keys so that speed can be adjusted on fly\r\n        if !(_dik in [16,17,30,31,32,44,74,78]) then {\r\n            GVAR(heldKeys) set [_dik,true];\r\n        };\r\n\r\n        switch (_dik) do {\r\n            case 1: { // Esc\r\n                [QGVAR(escape)] call FUNC(interrupt);\r\n                [\"escape\"] call FUNC(handleInterface);\r\n            };\r\n            case 2: { // 1\r\n                [_display,nil,nil,nil,nil,nil,true] call FUNC(toggleInterface);\r\n            };\r\n            case 3: { // 2\r\n                [_display,nil,true] call FUNC(toggleInterface);\r\n            };\r\n            case 4: { // 3\r\n                [_display,nil,nil,nil,nil,true] call FUNC(toggleInterface);\r\n            };\r\n            case 5: { // 4\r\n                [_display,true] call FUNC(toggleInterface);\r\n            };\r\n            case 6: { // 5\r\n                GVAR(showIcons) = !GVAR(showIcons);\r\n            };\r\n            case 14: { // Backspace\r\n                [_display,nil,nil,true] call FUNC(toggleInterface);\r\n            };\r\n            case 16: { // Q\r\n                GVAR(camBoom) = 0.5 * GVAR(camSpeed) * ([1, 2] select _shift);\r\n            };\r\n            case 17: { // W\r\n                GVAR(camDolly) set [1, GVAR(camSpeed) * ([1, 2] select _shift)];\r\n            };\r\n            case 29: { // Ctrl\r\n                GVAR(ctrlKey) = true;\r\n            };\r\n            case 30: { // A\r\n                GVAR(camDolly) set [0, -GVAR(camSpeed) * ([1, 2] select _shift)];\r\n            };\r\n            case 31: { // S\r\n                GVAR(camDolly) set [1, -GVAR(camSpeed) * ([1, 2] select _shift)];\r\n            };\r\n            case 32: { // D\r\n                GVAR(camDolly) set [0, GVAR(camSpeed) * ([1, 2] select _shift)];\r\n            };\r\n            case 44: { // Z\r\n                GVAR(camBoom) = -0.5 * GVAR(camSpeed) * ([1, 2] select _shift);\r\n            };\r\n            case 49: { // N\r\n                if (GVAR(camMode) != 1) then {\r\n                    if (_ctrl) then {\r\n                        [nil,nil,-1] call FUNC(cycleCamera);\r\n                    } else {\r\n                        [nil,nil,1] call FUNC(cycleCamera);\r\n                    };\r\n                };\r\n            };\r\n            case 50: { // M\r\n                [_display,nil,nil,nil,true] call FUNC(toggleInterface);\r\n            };\r\n            case 57: { // Spacebar\r\n                // Switch between unit and freecam here\r\n            };\r\n            case 74: { // Num -\r\n                if (_alt) exitWith { [nil,nil,nil,nil,nil,nil, 1.25] call FUNC(setCameraAttributes); };\r\n                if (_ctrl) then {\r\n                    [nil,nil,nil,nil,nil,nil,nil, GVAR(camSpeed) - 0.05] call FUNC(setCameraAttributes);\r\n                } else {\r\n                    [nil,nil,nil,nil,nil,nil, GVAR(camZoom) - 0.01] call FUNC(setCameraAttributes);\r\n                };\r\n            };\r\n            case 78: { // Num +\r\n                if (_alt) exitWith { [nil,nil,nil,nil,nil,nil,nil, 1.5] call FUNC(setCameraAttributes); };\r\n                if (_ctrl) then {\r\n                    [nil,nil,nil,nil,nil,nil,nil, GVAR(camSpeed) + 0.05] call FUNC(setCameraAttributes);\r\n                } else {\r\n                    [nil,nil,nil,nil,nil,nil, GVAR(camZoom) + 0.01] call FUNC(setCameraAttributes);\r\n                };\r\n            };\r\n            case 200: { // Up arrow\r\n                [-1] call FUNC(cycleCamera);\r\n            };\r\n            case 203: { // Left arrow\r\n                [nil,1] call FUNC(cycleCamera);\r\n            };\r\n            case 205: { // Right arrow\r\n                [nil,-1] call FUNC(cycleCamera);\r\n            };\r\n            case 208: { // Down arrow\r\n                [1] call FUNC(cycleCamera);\r\n            };\r\n        };\r\n\r\n        true\r\n    };\r\n    case \"onkeyup\": {\r\n        _args params [\"_display\",\"_dik\",\"_shift\",\"_ctrl\",\"_alt\"];\r\n\r\n        // No longer being held\r\n        GVAR(heldKeys) set [_dik,nil];\r\n\r\n        switch (_dik) do {\r\n            case 16: { // Q\r\n                GVAR(camBoom) = 0;\r\n            };\r\n            case 17: { // W\r\n                GVAR(camDolly) set [1, 0];\r\n            };\r\n            case 29: { // Ctrl\r\n                GVAR(ctrlKey) = false;\r\n            };\r\n            case 30: { // A\r\n                GVAR(camDolly) set [0, 0];\r\n            };\r\n            case 31: { // S\r\n                GVAR(camDolly) set [1, 0];\r\n            };\r\n            case 32: { // D\r\n                GVAR(camDolly) set [0, 0];\r\n            };\r\n            case 44: { // Z\r\n                GVAR(camBoom) = 0;\r\n            };\r\n        };\r\n\r\n        true\r\n    };\r\n    // Tree events\r\n    case \"ontreedblclick\": {\r\n        // Update camera view when listbox unit is double clicked on\r\n        _args params [\"_tree\",\"_sel\"];\r\n\r\n        // Ensure a unit was selected\r\n        if (count _sel == 3) then {\r\n            private [\"_netID\",\"_newUnit\",\"_newMode\"];\r\n            _netID = (_args select 0) tvData _sel;\r\n            _newUnit = objectFromNetId _netID;\r\n\r\n            // When unit is reselected, toggle camera mode\r\n            if (_newUnit == GVAR(camUnit) || GVAR(camMode) == 0) then {\r\n                _newMode = [2,2,1] select GVAR(camMode);\r\n            };\r\n\r\n            [_newMode,_newUnit] call FUNC(transitionCamera);\r\n        };\r\n    };\r\n    case \"onunitsupdate\": {\r\n        _args params [\"_tree\"];\r\n        private [\"_cachedUnits\",\"_cachedGrps\",\"_cachedSides\",\"_sT\",\"_gT\",\"_uT\",\"_s\",\"_g\",\"_u\",\"_grp\",\"_unit\",\"_side\"];\r\n\r\n        // Cache existing group and side nodes and cull removed data\r\n        _cachedUnits = [];\r\n        _cachedGrps = [];\r\n        _cachedSides = [];\r\n        // Track deleted nodes to account for decrease in index\r\n        _sT = _tree tvCount [];\r\n        for [{_s = 0;}, {_s < _sT}, {_s = _s + 1}] do {\r\n            _gT = _tree tvCount [_s];\r\n\r\n            for [{_g = 0;}, {_g < _gT}, {_g = _g + 1}] do {\r\n                _grp = groupFromNetID (_tree tvData [_s,_g]);\r\n\r\n                if (_grp in GVAR(groupList)) then {\r\n                    _cachedGrps pushBack _grp;\r\n                    _cachedGrps pushBack _g;\r\n\r\n                    _uT = _tree tvCount [_s,_g];\r\n                    for [{_u = 0;}, {_u < _uT}, {_u = _u + 1}] do {\r\n                        _unit = objectFromNetId (_tree tvData [_s,_g,_u]);\r\n\r\n                        if (_unit in GVAR(unitList)) then {\r\n                            _cachedUnits pushBack _unit;\r\n                        } else {\r\n                            _tree tvDelete [_s,_g,_u];\r\n                            _u = _u - 1;\r\n                            _uT = _uT - 1;\r\n                        };\r\n                    };\r\n                } else {\r\n                    _tree tvDelete [_s,_g];\r\n                    _g = _g - 1;\r\n                    _gT = _gT - 1;\r\n                };\r\n            };\r\n\r\n            if ((_tree tvCount [_s]) > 0) then {\r\n                _cachedSides pushBack (_tree tvText [_s]);\r\n                _cachedSides pushBack _s;\r\n            } else {\r\n                _tree tvDelete [_s];\r\n                _s = _s - 1;\r\n                _sT = _sT - 1;\r\n            };\r\n        };\r\n\r\n        // Update the tree from the unit list\r\n        {\r\n            _grp = group _x;\r\n            _side = [side _grp] call BIS_fnc_sideName;\r\n\r\n            // Use correct side node\r\n            if !(_side in _cachedSides) then {\r\n                // Add side node\r\n                _s = _tree tvAdd [[], _side];\r\n                _tree tvExpand [_s];\r\n\r\n                _cachedSides pushBack _side;\r\n                _cachedSides pushBack _s;\r\n            } else {\r\n                // If side already processed, use existing node\r\n                _s = _cachedSides select ((_cachedSides find _side) + 1);\r\n            };\r\n\r\n            // Use correct group node\r\n            if !(_grp in _cachedGrps) then {\r\n                // Add group node\r\n                _g = _tree tvAdd [[_s], groupID _grp];\r\n                _tree tvSetData [[_s,_g], netID _grp];\r\n\r\n                _cachedGrps pushBack _grp;\r\n                _cachedGrps pushBack _g;\r\n            } else {\r\n                // If group already processed, use existing node\r\n                _g = _cachedGrps select ((_cachedGrps find _grp) + 1);\r\n            };\r\n\r\n            _u = _tree tvAdd [[_s,_g], GETVAR(_x,GVAR(uName),\"\")];\r\n            _tree tvSetData [[_s,_g,_u], netID _x];\r\n            _tree tvSetPicture [[_s,_g,_u], GETVAR(_x,GVAR(uIcon),\"\")];\r\n            _tree tvSetPictureColor [[_s,_g,_u], GETVAR(_grp,GVAR(gColor),[ARR_4(1,1,1,1)])];\r\n\r\n            _tree tvSort [[_s,_g],false];\r\n        } forEach (GVAR(unitList) - _cachedUnits);\r\n\r\n        _tree tvSort [[],false];\r\n\r\n        if ((_tree tvCount []) <= 0) then {\r\n            _tree tvAdd [[], localize LSTRING(units_none)];\r\n        };\r\n    };\r\n    // Map events\r\n    case \"onmapclick\": {\r\n        _args params [\"_map\",\"_button\",\"_x\",\"_y\",\"_shift\",\"_ctrl\",\"_alt\"];\r\n        private [\"_newPos\",\"_oldZ\"];\r\n\r\n        if ((GVAR(camMode) == 0) && (_button == 0)) then {\r\n            _newPos = _map ctrlMapScreenToWorld [_x,_y];\r\n            _oldZ = (ASLtoATL GVAR(camPos)) select 2;\r\n            _newPos set [2, _oldZ];\r\n            [nil,nil,nil, _newPos] call FUNC(setCameraAttributes);\r\n        };\r\n    };\r\n    // Interrupt events\r\n    case \"escape\": {\r\n        private \"_dlg\";\r\n\r\n        createDialog ([\"RscDisplayInterrupt\", \"RscDisplayMPInterrupt\"] select isMultiplayer);\r\n\r\n        disableSerialization;\r\n        _dlg = finddisplay 49;\r\n        _dlg displayAddEventHandler [\"KeyDown\", {\r\n            _key = _this select 1;\r\n            !(_key == 1)\r\n        }];\r\n\r\n        // Disable save, respawn, options & manual buttons\r\n        (_dlg displayCtrl 103) ctrlEnable false;\r\n        if !(alive player) then {\r\n            (_dlg displayCtrl 1010) ctrlEnable false;\r\n        };\r\n        (_dlg displayCtrl 101) ctrlEnable false;\r\n        (_dlg displayCtrl 122) ctrlEnable false;\r\n\r\n        // Initalize abort button (the \"spawn\" is a necessary evil)\r\n        (_dlg displayCtrl 104) ctrlAddEventHandler [\"ButtonClick\",{_this spawn {\r\n            disableSerialization;\r\n            _display = ctrlparent (_this select 0);\r\n            _abort = [localize \"str_msg_confirm_return_lobby\",nil,localize \"str_disp_xbox_hint_yes\",localize \"str_disp_xbox_hint_no\",_display,nil,true] call BIS_fnc_guiMessage;\r\n            if (_abort) then {_display closeDisplay 2; failMission \"loser\"};\r\n        }}];\r\n\r\n        // PFH to re-open display when menu closes\r\n        [{\r\n            if !(isNull (_this select 0)) exitWith {};\r\n\r\n            // If still a spectator then re-enter the interface\r\n            [QGVAR(escape),false] call FUNC(interrupt);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n        },0,_dlg] call CBA_fnc_addPerFrameHandler;\r\n    };\r\n    case \"zeus\": {\r\n        openCuratorInterface;\r\n\r\n        [{\r\n            // PFH to re-open display when menu closes\r\n            [{\r\n                if !((isNull curatorCamera) && {isNull (GETMVAR(bis_fnc_moduleRemoteControl_unit,objNull))}) exitWith {};\r\n\r\n                // If still a spectator then re-enter the interface\r\n                [QGVAR(zeus),false] call FUNC(interrupt);\r\n\r\n                [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n            },0] call CBA_fnc_addPerFrameHandler;\r\n        },[],5] call CBA_fnc_waitAndExecute;\r\n\r\n        true\r\n    };\r\n};\r\n"},{"name":"ace_spectator_fnc_handleMap","file":"spectator/functions/fnc_handleMap.sqf","text":"/*\r\n * Author: Head, SilentSpike\r\n * Handles rendering the spectator map icons\r\n *\r\n * Arguments:\r\n * 0: Parameters <ANY>\r\n * 1: PFH handle <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [ace_spectator_fnc_handleIcons, 0] call CBA_fnc_addPerFrameHandler;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_map\"];\r\nprivate [\"_center\",\"_radius\",\"_scaled\",\"_drawVehicles\",\"_leader\",\"_color\",\"_cachedVehicles\",\"_unit\",\"_icon\",\"_txt\"];\r\n\r\nif (GVAR(camMode) == 0) then {\r\n    _map drawIcon [\"\\A3\\UI_F\\Data\\GUI\\Rsc\\RscDisplayMissionEditor\\iconcamera_ca.paa\",[0,0,0,1],GVAR(freeCamera),20,20,GVAR(camPan)];\r\n};\r\n\r\n_center = _map ctrlMapScreenToWorld [0.5,0.5];\r\n_radius = (_map ctrlMapScreenToWorld [safeZoneX,safeZoneY]) distance2D _center;\r\n_scaled = (ctrlMapScale _map) > 0.2;\r\n\r\n// Draw only group icons when scaled out\r\n_drawVehicles = [];\r\n{\r\n    _leader = leader _x;\r\n    if (_scaled) then {\r\n        _color = GETVAR(_x,GVAR(gColor),[ARR_4(0,0,0,0)]);\r\n        _map drawIcon [\"\\A3\\ui_f\\data\\map\\markers\\nato\\b_inf.paa\", _color, _leader, 20, 20, 0, \"\", 0, 0];\r\n    } else {\r\n        if ((_leader distance2D _center) < _radius) then {\r\n            _drawVehicles append (units _x);\r\n        };\r\n    };\r\n    nil\r\n} count GVAR(groupList);\r\n\r\n// Draw units when group leader is within screen bounds\r\n_cachedVehicles = [];\r\n{\r\n    _unit = vehicle _x;\r\n\r\n    if !(_unit in _cachedVehicles) then {\r\n        _cachedVehicles pushBack _unit;\r\n\r\n        // Use previously cached info where possible\r\n        if (GETVAR(_unit,GVAR(uIcon),\"\") == \"\") then {\r\n            [_unit] call FUNC(cacheUnitInfo);\r\n        };\r\n\r\n        // Function has caching built in\r\n        _color = [side effectiveCommander _unit] call BIS_fnc_sideColor;\r\n        _icon = GETVAR(_unit,GVAR(uIcon),\"\");\r\n        _txt = [\"\", GETVAR(_x,GVAR(uName),\"\")] select (isPlayer _x);\r\n\r\n        _map drawIcon [_icon, _color, _unit, 19, 19, getDir _unit, _txt, 1, 0.04];\r\n    };\r\n    nil\r\n} count (_drawVehicles arrayIntersect GVAR(unitList));\r\n"},{"name":"ace_spectator_fnc_handleMouse","file":"spectator/functions/fnc_handleMouse.sqf","text":"/*\r\n * Author: F3 Project, Head, SilentSpike\r\n * Processes the change in mouse position for the spectator camera\r\n *\r\n * Arguments:\r\n * 0: Mouse x coord <NUMBER>\r\n * 1: Mouse y coord <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [0.5, 0.5] call ace_spectator_fnc_handleMouse;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_x\",\"_y\"];\r\nprivate [\"_leftButton\",\"_rightButton\",\"_oldX\",\"_oldY\",\"_deltaX\",\"_deltaY\",\"_zoomMod\"];\r\n\r\n_leftButton = GVAR(mouse) select 0;\r\n_rightButton = GVAR(mouse) select 1;\r\n\r\n_oldX = GVAR(mousePos) select 0;\r\n_oldY = GVAR(mousePos) select 1;\r\n\r\n// Get change in pos\r\n_deltaX = _oldX - _x;\r\n_deltaY = _oldY - _y;\r\n\r\nif (_leftButton) then {\r\n    GVAR(camDolly) set [0, _deltaX * -100 * GVAR(camSpeed)];\r\n    GVAR(camDolly) set [1, _deltaY * 100 * GVAR(camSpeed)];\r\n} else {\r\n    if (_rightButton) then {\r\n        // Pan/Tilt amount should be influnced by zoom level (it should really be exponential)\r\n        _zoomMod = (GVAR(camZoom) * 0.8) max 1;\r\n\r\n        GVAR(camPan) = GVAR(camPan) - ((_deltaX * 360) / _zoomMod);\r\n        GVAR(camTilt) = ((GVAR(camTilt) + ((_deltaY * 180) / _zoomMod)) min 89) max -89;\r\n    };\r\n};\r\n\r\nGVAR(mousePos) = [_x,_y];\r\n"},{"name":"ace_spectator_fnc_handleToolbar","file":"spectator/functions/fnc_handleToolbar.sqf","text":"/*\r\n * Author: Karel Moricky, SilentSpike\r\n * Handles the spectator UI toolbar values\r\n *\r\n * Arguments:\r\n * 0: Parameters <ANY>\r\n * 1: PFH handle <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [ace_spectator_fnc_handleToolbar, 0, _display] call CBA_fnc_addPerFrameHandler;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\"];\r\n\r\n// Kill PFH when toolbar hidden (or display is closed)\r\nif (isNil QGVAR(toolHandler)) exitWith { [_this select 1] call CBA_fnc_removePerFrameHandler; };\r\n\r\nprivate [\"_name\",\"_vision\",\"_fov\",\"_speed\",\"_mode\",\"_time\",\"_toolbar\"];\r\n_toolbar = _display displayCtrl IDC_TOOL;\r\n\r\n// Find all tool values\r\nif (GVAR(camVision) >= 0) then {\r\n    _vision = localize LSTRING(VisionThermal);\r\n} else {\r\n    _vision = [localize LSTRING(VisionNight), localize LSTRING(VisionNormal)] select (GVAR(camVision) < -1);\r\n};\r\n\r\nif (GVAR(camMode) == 0) then {\r\n    _fov = format [\"%1x\", floor(GVAR(camZoom) * 100) * 0.01];\r\n    _speed = format [\"%1 m/s\", floor(GVAR(camSpeed) * 100) * 0.01];\r\n} else {\r\n    _vision = [side group GVAR(camUnit)] call BIS_fnc_sideName;\r\n    _fov = format [\"%1 m\", floor(getPosASL GVAR(camUnit) select 2)];\r\n    _speed = format [\"%1 km/h\", floor(speed GVAR(camUnit)) max 0];\r\n};\r\n\r\nif (alive GVAR(camUnit)) then {\r\n    _name = GETVAR(GVAR(camUnit),GVAR(uName),\"\");\r\n} else {\r\n    _name = localize \"STR_Special_None\";\r\n};\r\n\r\n_mode = [localize LSTRING(ViewFree),localize LSTRING(ViewInternal),localize LSTRING(ViewExternal)] select GVAR(camMode);\r\n_time = [daytime,\"HH:MM\"] call BIS_fnc_timeToString;\r\n\r\n// Update the UI tools\r\n(_toolbar controlsGroupCtrl IDC_TOOL_CLOCK) ctrlSetText _time;\r\n(_toolbar controlsGroupCtrl IDC_TOOL_VISION) ctrlSetText _vision;\r\n(_toolbar controlsGroupCtrl IDC_TOOL_FOV) ctrlSetText _fov;\r\n(_toolbar controlsGroupCtrl IDC_TOOL_NAME) ctrlSetText _name;\r\n(_toolbar controlsGroupCtrl IDC_TOOL_SPEED) ctrlSetText _speed;\r\n(_toolbar controlsGroupCtrl IDC_TOOL_VIEW) ctrlSetText _mode;\r\n"},{"name":"ace_spectator_fnc_handleUnits","file":"spectator/functions/fnc_handleUnits.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Maintains the spectatable unit list and updates the unit tree accordingly\r\n * Also updates current camera unit when status changes\r\n *\r\n * Arguments:\r\n * 0: Parameters <ANY>\r\n * 1: PFH handle <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [ace_spectator_fnc_handleUnits, 10, _display] call CBA_fnc_addPerFrameHandler;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\"];\r\n\r\n// Kill PFH when display is closed\r\nif (isNull _display) exitWith { [_this select 1] call CBA_fnc_removePerFrameHandler; };\r\n\r\n// Remove all dead and null units from the list\r\n[] call FUNC(updateUnits);\r\n\r\n// Camera shouldn't stay on unit that isn't in the list (unless dead)\r\nif !(GVAR(camUnit) in GVAR(unitList)) then {\r\n    if (alive GVAR(camUnit) || isNull GVAR(camUnit)) then {\r\n        [nil,1] call FUNC(cycleCamera);\r\n    };\r\n};\r\n\r\n// Reduce overhead when unit tree is hidden\r\nif (ctrlShown (_display displayCtrl IDC_UNIT)) then {\r\n    // Reduce overhead by spreading across frames\r\n    [FUNC(handleInterface),[\"onUnitsUpdate\",[(_display displayCtrl IDC_UNIT) controlsGroupCtrl IDC_UNIT_TREE]],1] call CBA_fnc_waitAndExecute;\r\n};\r\n"},{"name":"ace_spectator_fnc_interrupt","file":"spectator/functions/fnc_interrupt.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Interrupts the spectator interface for external systems\r\n *\r\n * Arguments:\r\n * 0: Reason <STRING>\r\n * 1: Interrupting <BOOL> (default: true)\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [\"mySystem\"] call ace_spectator_fnc_interrupt\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_reason\", \"\", [\"\"]], [\"_interrupt\", true, [true]]];\r\n\r\n// Nothing to do when spectator is closed\r\nif !(GVAR(isSet)) exitWith {};\r\n\r\nif (_reason == \"\") exitWith { ERROR(\"Invalid Reason\"); };\r\nif (_interrupt) then {\r\n    GVAR(interrupts) pushBack _reason;\r\n} else {\r\n    GVAR(interrupts) = GVAR(interrupts) - [_reason];\r\n};\r\n\r\nif (GVAR(interrupts) isEqualTo []) then {\r\n    if (isNull (GETUVAR(GVAR(interface),displayNull))) then {\r\n        (findDisplay 46) createDisplay QGVAR(interface);\r\n        [] call FUNC(transitionCamera);\r\n    };\r\n} else {\r\n    if !(isNull (GETUVAR(GVAR(interface),displayNull))) then {\r\n        while {dialog} do {\r\n            closeDialog 0;\r\n        };\r\n\r\n        (GETUVAR(GVAR(interface),displayNull)) closeDisplay 0;\r\n    };\r\n};\r\n"},{"name":"ace_spectator_fnc_moduleSpectatorSettings","file":"spectator/functions/fnc_moduleSpectatorSettings.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Read spectator settings from module\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(filterUnits), \"unitsFilter\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(filterSides), \"sidesFilter\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(restrictModes), \"cameraModes\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(restrictVisions), \"visionModes\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_spectator_fnc_respawnTemplate","file":"spectator/functions/fnc_respawnTemplate.sqf","text":"/*\r\n * Author: SilentSpike\r\n * The ace_spectator respawn template, handles killed + respawn\r\n * Can be used via BI's respawn framework, see:\r\n * https://community.bistudio.com/wiki/Arma_3_Respawn\r\n *\r\n * Arguments:\r\n * 0: Corpse/New Unit <OBJECT>\r\n * 1: Killer/Old Unit <OBJECT>\r\n * 2: Respawn Type <NUMBER>\r\n * 3: Respawn Delay <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\",objNull,[objNull]], [\"_killer\",objNull,[objNull]], [\"_respawn\",0,[0]], [\"_respawnDelay\",0,[0]]];\r\nprivate [\"_vision\",\"_pos\"];\r\n\r\n// Some environment information can be used for the initial camera attributes\r\nif (isNull _killer) then {_killer = _unit};\r\n_vision = [-2,-1] select (sunOrMoon < 1);\r\n_pos = (getPosATL _unit) vectorAdd [0,0,5];\r\n\r\n// Enter/exit spectator based on the respawn type and whether killed/respawned\r\nif (alive _unit) then {\r\n    if (_respawn == 1) then {\r\n        [_unit] call FUNC(stageSpectator);\r\n        [2,_killer,_vision,_pos,getDir _unit] call FUNC(setCameraAttributes);\r\n        [true] call FUNC(setSpectator);\r\n    } else {\r\n        [false] call FUNC(setSpectator);\r\n    };\r\n} else {\r\n    // Negligible respawn delay can result in entering spectator after respawn\r\n    if (playerRespawnTime <= 1) exitWith {};\r\n\r\n    [2,_killer,_vision,_pos,getDir _unit] call FUNC(setCameraAttributes);\r\n    [true] call FUNC(setSpectator);\r\n};\r\n"},{"name":"ace_spectator_fnc_setCameraAttributes","file":"spectator/functions/fnc_setCameraAttributes.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Sets the spectator camera attributes as desired\r\n * All values are optional and default to whatever the current value is\r\n *\r\n * Arguments:\r\n * 0: Camera mode <NUMBER>\r\n *   - 0: Free\r\n *   - 1: Internal\r\n *   - 2: External\r\n * 1: Camera unit (objNull for random) <OBJECT>\r\n * 2: Camera vision <NUMBER>\r\n *   - -2: Normal\r\n *   - -1: Night vision\r\n *   -  0: Thermal white hot\r\n *   -  1: Thermal black hot\r\n * 3: Camera position (ATL) <ARRAY>\r\n * 4: Camera pan (0 - 360) <NUMBER>\r\n * 5: Camera tilt (-90 - 90) <NUMBER>\r\n * 6: Camera zoom (0.01 - 2) <NUMBER>\r\n * 7: Camera speed in m/s (0.05 - 10) <NUMBER>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [1, objNull] call ace_spectator_fnc_setCameraAttributes\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\r\n    [\"_mode\",GVAR(camMode),[0]],\r\n    [\"_unit\",GVAR(camUnit),[objNull]],\r\n    [\"_vision\",GVAR(camVision),[0]],\r\n    [\"_position\",ASLtoATL GVAR(camPos),[[]],3],\r\n    [\"_heading\",GVAR(camPan),[0]],\r\n    [\"_tilt\",GVAR(camTilt),[0]],\r\n    [\"_zoom\",GVAR(camZoom),[0]],\r\n    [\"_speed\",GVAR(camSpeed),[0]]\r\n];\r\n\r\n// Normalize input\r\nif !(_mode in GVAR(availableModes)) then {\r\n    _mode = GVAR(availableModes) select ((GVAR(availableModes) find GVAR(camMode)) max 0);\r\n};\r\n\r\nif !(_vision in GVAR(availableVisions)) then {\r\n    _vision = GVAR(availableVisions) select ((GVAR(availableVisions) find GVAR(camVision)) max 0);\r\n};\r\n\r\nGVAR(camPan) = _heading % 360;\r\nGVAR(camSpeed) = (_speed max 0.05) min 10;\r\nGVAR(camTilt) = (_tilt max -89) min 89;\r\nGVAR(camUnit) = _unit;\r\nGVAR(camVision) = _vision;\r\nGVAR(camZoom) = (_zoom min 2) max 0.01;\r\n\r\n// Apply if camera exists\r\nif (GVAR(isSet)) then {\r\n    GVAR(freeCamera) setPosATL _position;\r\n    [_mode,_unit,_vision] call FUNC(transitionCamera);\r\n} else {\r\n    GVAR(camMode) = _mode;\r\n    GVAR(camPos) = (ATLtoASL _position);\r\n};\r\n"},{"name":"ace_spectator_fnc_setSpectator","file":"spectator/functions/fnc_setSpectator.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Sets local client to the given spectator state (virtually)\r\n * To physically handle a spectator see ace_spectator_fnc_stageSpectator\r\n *\r\n * Client will be able to communicate in ACRE/TFAR as appropriate\r\n * The spectator interface will be opened/closed\r\n *\r\n * Arguments:\r\n * 0: Spectator state of local client <BOOL> (default: true)\r\n * 1: Force interface <BOOL> (default: true)\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [true] call ace_spectator_fnc_setSpectator\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_set\",true,[true]], [\"_force\",true,[true]]];\r\n\r\n// Only clients can be spectators\r\nif !(hasInterface) exitWith {};\r\n\r\n// Exit if no change\r\nif (_set isEqualTo GVAR(isSet)) exitWith {};\r\n\r\n// Handle common addon audio\r\nif ([\"ace_hearing\"] call EFUNC(common,isModLoaded)) then {\r\n    EGVAR(hearing,disableVolumeUpdate) = _set;\r\n    EGVAR(hearing,deafnessDV) = 0;\r\n};\r\nif ([\"acre_sys_radio\"] call EFUNC(common,isModLoaded)) then {[_set] call acre_api_fnc_setSpectator};\r\nif ([\"task_force_radio\"] call EFUNC(common,isModLoaded)) then {[player, _set] call TFAR_fnc_forceSpectator};\r\n\r\nif (_set) then {\r\n    // Initalize camera variables\r\n    GVAR(camBoom) = 0;\r\n    GVAR(camDolly) = [0,0];\r\n    GVAR(camGun) = false;\r\n\r\n    // Initalize display variables\r\n    GVAR(ctrlKey) = false;\r\n    GVAR(heldKeys) = [];\r\n    GVAR(heldKeys) resize 255;\r\n    GVAR(mouse) = [false,false];\r\n    GVAR(mousePos) = [0.5,0.5];\r\n\r\n    // Update units before opening to support pre-set camera unit\r\n    [] call FUNC(updateUnits);\r\n\r\n    // Initalize the camera objects\r\n    GVAR(freeCamera) = \"Camera\" camCreate (ASLtoATL GVAR(camPos));\r\n    GVAR(unitCamera) = \"Camera\" camCreate [0,0,0];\r\n    GVAR(targetCamera) = \"Camera\" camCreate [0,0,0];\r\n\r\n    // Initalize view\r\n    GVAR(unitCamera) camSetTarget GVAR(targetCamera);\r\n    GVAR(unitCamera) camCommit 0;\r\n    [] call FUNC(transitionCamera);\r\n\r\n    // Cache current channel to switch back to on exit\r\n    GVAR(channelCache) = currentChannel;\r\n\r\n    // Channel index starts count after the 5 default channels\r\n    GVAR(channel) radioChannelAdd [player];\r\n    setCurrentChannel (5 + GVAR(channel));\r\n\r\n    // Close map and clear the chat\r\n    openMap [false,false];\r\n    clearRadio;\r\n    enableRadio false;\r\n\r\n    // Disable BI damage effects\r\n    BIS_fnc_feedback_allowPP = false;\r\n\r\n    // Close any open dialogs\r\n    while {dialog} do {\r\n        closeDialog 0;\r\n    };\r\n\r\n    [{\r\n        disableSerialization;\r\n        // Create the display\r\n        _display = (findDisplay 46) createDisplay QGVAR(interface);\r\n\r\n        // If not forced, make esc end spectator\r\n        if (_this) then {\r\n            _display displayAddEventHandler [\"KeyDown\", {\r\n                if (_this select 1 == 1) then {\r\n                    [false] call FUNC(setSpectator);\r\n                    true\r\n                };\r\n            }];\r\n        };\r\n    }, !_force] call CBA_fnc_execNextFrame;\r\n\r\n    // Cache and disable nametag settings\r\n    if ([\"ace_nametags\"] call EFUNC(common,isModLoaded)) then {\r\n        GVAR(nametagSettingCache) = [EGVAR(nametags,showPlayerNames), EGVAR(nametags,showNamesForAI)];\r\n        EGVAR(nametags,showPlayerNames) = 0;\r\n        EGVAR(nametags,showNamesForAI) = false;\r\n    };\r\n} else {\r\n    // Close any open dialogs (could be interrupts)\r\n    while {dialog} do {\r\n        closeDialog 0;\r\n    };\r\n\r\n    // Kill the display\r\n    (GETUVAR(GVAR(interface),displayNull)) closeDisplay 0;\r\n\r\n    // Terminate camera\r\n    GVAR(freeCamera) cameraEffect [\"terminate\", \"back\"];\r\n    camDestroy GVAR(freeCamera);\r\n    camDestroy GVAR(unitCamera);\r\n    camDestroy GVAR(targetCamera);\r\n\r\n    // Remove from spectator chat\r\n    GVAR(channel) radioChannelRemove [player];\r\n\r\n    // Restore cached channel and delete cache\r\n    setCurrentChannel GVAR(channelCache);\r\n    GVAR(channelCache) = nil;\r\n\r\n    // Clear any residual spectator chat\r\n    clearRadio;\r\n    enableRadio true;\r\n\r\n    // Return to player view\r\n    player switchCamera \"internal\";\r\n\r\n    // Enable BI damage effects\r\n    BIS_fnc_feedback_allowPP = true;\r\n\r\n    // Cleanup camera variables\r\n    GVAR(camBoom) = nil;\r\n    GVAR(camDolly) = nil;\r\n    GVAR(camGun) = nil;\r\n    GVAR(freeCamera) = nil;\r\n    GVAR(unitCamera) = nil;\r\n    GVAR(targetCamera) = nil;\r\n\r\n    //Kill these PFEH handlers now because the PFEH can run before the `onunload` event is handled\r\n    GVAR(camHandler) = nil;\r\n    GVAR(compHandler) = nil;\r\n    GVAR(toolHandler) = nil;\r\n\r\n    // Cleanup display variables\r\n    GVAR(ctrlKey) = nil;\r\n    GVAR(heldKeys) = nil;\r\n    GVAR(mouse) = nil;\r\n    GVAR(mousePos) = nil;\r\n\r\n    // Reset nametag settings\r\n    if ([\"ace_nametags\"] call EFUNC(common,isModLoaded)) then {\r\n        EGVAR(nametags,showPlayerNames) = GVAR(nametagSettingCache) select 0;\r\n        EGVAR(nametags,showNamesForAI) = GVAR(nametagSettingCache) select 1;\r\n        GVAR(nametagSettingCache) = nil;\r\n    };\r\n};\r\n\r\n// Reset interruptions\r\nGVAR(interrupts) = [];\r\n\r\n// Mark spectator state for reference\r\nGVAR(isSet) = _set;\r\n\r\n[\"ace_spectatorSet\", [_set]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_spectator_fnc_stageSpectator","file":"spectator/functions/fnc_stageSpectator.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Sets target unit to the given spectator state (physically)\r\n * To virtually handle a spectator see ace_spectator_fnc_setSpectator\r\n *\r\n * Units will be gathered at marker ace_spectator_respawn (or [0,0,0] by default)\r\n * Upon unstage, units will be moved to the position they were in upon staging\r\n *\r\n * Arguments:\r\n * 0: Unit to put into spectator stage <OBJECT> (default: player)\r\n * 1: Unit should be staged <BOOL> (default: true)\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [player, false] call ace_spectator_fnc_stageSpectator\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_unit\",player,[objNull]], [\"_set\",true,[true]]];\r\n\r\n// No change, no service (but allow spectators to be reset)\r\nif !(_set || (GETVAR(_unit,GVAR(isStaged),false))) exitWith {};\r\n\r\nif !(local _unit) exitWith {\r\n    [QGVAR(stageSpectator), [_unit, _set], _unit] call CBA_fnc_targetEvent;\r\n};\r\n\r\n// Prevent unit falling into water\r\n_unit enableSimulation !_set;\r\n\r\n// Move to/from group as appropriate\r\n[_unit, _set, QGVAR(isStaged), side group _unit] call EFUNC(common,switchToGroupSide);\r\n\r\nif (_set) then {\r\n    // Position should only be saved on first entry\r\n    if !(GETVAR(_unit,GVAR(isStaged),false)) then {\r\n        GVAR(oldPos) = getPosATL _unit;\r\n    };\r\n\r\n    // Ghosts can't talk\r\n    [_unit, QGVAR(isStaged)] call EFUNC(common,hideUnit);\r\n    [_unit, QGVAR(isStaged)] call EFUNC(common,muteUnit);\r\n\r\n    _unit setPos (markerPos QGVAR(respawn));\r\n} else {\r\n    // Physical beings can talk\r\n    [_unit, QGVAR(isStaged)] call EFUNC(common,unhideUnit);\r\n    [_unit, QGVAR(isStaged)] call EFUNC(common,unmuteUnit);\r\n\r\n    _unit setPosATL GVAR(oldPos);\r\n};\r\n\r\n// Spectators ignore damage (vanilla and ace_medical)\r\n_unit allowDamage !_set;\r\n_unit setVariable [QEGVAR(medical,allowDamage), !_set];\r\n\r\n// No theoretical change if an existing spectator was reset\r\nif !(_set isEqualTo (GETVAR(_unit,GVAR(isStaged),false))) then {\r\n    // Mark spectator state for reference\r\n    _unit setVariable [QGVAR(isStaged), _set, true];\r\n\r\n    [\"ace_spectatorStaged\", [_set]] call CBA_fnc_localEvent;\r\n};\r\n\r\n//BandAid for #2677 - if player in unitList weird before being staged, weird things can happen\r\nif ((player in GVAR(unitList)) || {ACE_player in GVAR(unitList)}) then {\r\n    [] call FUNC(updateUnits);  //update list now\r\n    if (!(isNull (findDisplay 12249))) then {//If display is open now, close it and restart\r\n        ACE_LOGWARNING(\"Player in unitList, call ace_spectator_fnc_stageSpectator before ace_spectator_fnc_setSpectator\");\r\n        [\"fixWeirdList\", true] call FUNC(interrupt);\r\n        [{[\"fixWeirdList\", false] call FUNC(interrupt);}, []] call CBA_fnc_execNextFrame;\r\n    };\r\n};\r\n"},{"name":"ace_spectator_fnc_toggleInterface","file":"spectator/functions/fnc_toggleInterface.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Correctly handles toggling of spectator interface elements for clean UX\r\n *\r\n * Arguments:\r\n * 0: Display\r\n * 1: Toogle compass <BOOL> <OPTIONAL>\r\n * 2: Toogle help <BOOL> <OPTIONAL>\r\n * 3: Toogle interface <BOOL> <OPTIONAL>\r\n * 4: Toogle map <BOOL> <OPTIONAL>\r\n * 5: Toogle toolbar <BOOL> <OPTIONAL>\r\n * 6: Toogle unit list <BOOL> <OPTIONAL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [_dsiplay, nil, true] call ace_spectator_fnc_toggleInterface\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_display\", [\"_toggleComp\",false], [\"_toggleHelp\",false], [\"_toggleInterface\",false], [\"_toggleMap\",false], [\"_toggleTool\",false], [\"_toggleUnit\",false]];\r\n\r\nprivate [\"_comp\",\"_help\",\"_map\",\"_tool\",\"_unit\"];\r\n_comp = _display displayCtrl IDC_COMP;\r\n_help = _display displayCtrl IDC_HELP;\r\n_map = _display displayCtrl IDC_MAP;\r\n_tool = _display displayCtrl IDC_TOOL;\r\n_unit = _display displayCtrl IDC_UNIT;\r\n\r\n// Map operates outside of interface\r\nGVAR(showMap) = [GVAR(showMap), !GVAR(showMap)] select _toggleMap;\r\n_map ctrlShow GVAR(showMap);\r\n\r\nif (GVAR(showMap)) then {\r\n    // When map is shown, temporarily hide interface to stop overlapping\r\n    {\r\n        _x ctrlShow false;\r\n    } forEach [_comp,_help,_tool,_unit];\r\n\r\n    // Centre map on camera/unit upon opening\r\n    if (_toggleMap) then {\r\n        _map ctrlMapAnimAdd [0, 0.5, [GVAR(camUnit),GVAR(freeCamera)] select (GVAR(camMode) == 0)];\r\n        ctrlMapAnimCommit _map;\r\n    };\r\n} else {\r\n    // Can only toggle interface with map minimised\r\n    GVAR(showInterface) = [GVAR(showInterface), !GVAR(showInterface)] select _toggleInterface;\r\n\r\n    if (GVAR(showInterface)) then {\r\n        // Can only toggle interface elements with interface shown\r\n        GVAR(showComp) = [GVAR(showComp), !GVAR(showComp)] select _toggleComp;\r\n        GVAR(showHelp) = [GVAR(showHelp), !GVAR(showHelp)] select _toggleHelp;\r\n        GVAR(showTool) = [GVAR(showTool), !GVAR(showTool)] select _toggleTool;\r\n        GVAR(showUnit) = [GVAR(showUnit), !GVAR(showUnit)] select _toggleUnit;\r\n\r\n        _comp ctrlShow GVAR(showComp);\r\n        _help ctrlShow GVAR(showHelp);\r\n        _tool ctrlShow GVAR(showTool);\r\n        _unit ctrlShow GVAR(showUnit);\r\n    } else {\r\n        {\r\n            _x ctrlShow false;\r\n        } forEach [_comp,_help,_tool,_unit];\r\n    };\r\n};\r\n\r\n// Only run PFHs when respective control is shown, otherwise kill\r\nif (ctrlShown _comp) then {\r\n    if (isNil QGVAR(compHandler)) then { GVAR(compHandler) = [FUNC(handleCompass), 0, _display] call CBA_fnc_addPerFrameHandler; };\r\n} else {\r\n    GVAR(compHandler) = nil;\r\n};\r\n\r\nif (ctrlShown _tool) then {\r\n    if (isNil QGVAR(toolHandler)) then { GVAR(toolHandler) = [FUNC(handleToolbar), 0, _display] call CBA_fnc_addPerFrameHandler; };\r\n} else {\r\n    GVAR(toolHandler) = nil;\r\n};\r\n"},{"name":"ace_spectator_fnc_transitionCamera","file":"spectator/functions/fnc_transitionCamera.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Transitions the spectator camera vision/view/unit\r\n *\r\n * Arguments:\r\n * 0: Camera mode <NUMBER>\r\n *   - 0: Free\r\n *   - 1: Internal\r\n *   - 2: External\r\n * 1: Camera unit <OBJECT>\r\n * 2: Vision mode <NUMBER>\r\n *   - -2: Normal\r\n *   - -1: NV\r\n *   -  0: White hot\r\n *   -  1: Black hot\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [0,objNull] call ace_spectator_fnc_transitionCamera\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_newMode\",GVAR(camMode)], [\"_newUnit\",GVAR(camUnit)], [\"_newVision\",GVAR(camVision)]];\r\n\r\n// If new mode isn't available then keep current (unless current also isn't)\r\nif !(_newMode in GVAR(availableModes)) then {\r\n    _newMode = GVAR(availableModes) select ((GVAR(availableModes) find GVAR(camMode)) max 0);\r\n};\r\n\r\n// When no units available to spectate, exit to freecam\r\nif ((GVAR(unitList) isEqualTo []) && (alive _newUnit || isNull _newUnit)) then {\r\n    _newMode = 0;\r\n    _newUnit = objNull;\r\n};\r\n\r\n// Reset gun cam if not internal\r\nif (_newMode != 1) then {\r\n    GVAR(camGun) = false;\r\n};\r\n\r\nprivate [\"_camera\"];\r\nif (_newMode == 0) then { // Free\r\n    _camera = GVAR(freeCamera);\r\n\r\n    // Preserve camUnit value for consistency when manually changing view\r\n    _camera cameraEffect [\"internal\", \"back\"];\r\n\r\n    // Apply the camera zoom\r\n    _camera camSetFov -(linearConversion [0.01,2,GVAR(camZoom),-2,-0.01,true]);\r\n    _camera camCommit 0;\r\n\r\n    // Agent is switched to in free cam to hide death table and prevent AI chat while allowing icons to draw (also prevents systemChat and unit HUD)\r\n    // (Why is so much stuff tied into the current camera unit BI?!)\r\n    if (isNull GVAR(camAgent)) then {\r\n        GVAR(camAgent) = createAgent [\"VirtualMan_F\",markerPos QGVAR(respawn),[],0,\"\"];\r\n    };\r\n\r\n    GVAR(camAgent) switchCamera \"internal\";\r\n} else {\r\n    _camera = GVAR(unitCamera);\r\n\r\n    // When null unit is given choose random\r\n    if (isNull _newUnit) then {\r\n        _newUnit = selectRandom GVAR(unitList);\r\n    };\r\n\r\n    // Switch camera view to internal unit view (external uses the camera)\r\n    if (GVAR(camGun)) then {\r\n        _newUnit switchCamera \"gunner\";\r\n    } else {\r\n        _newUnit switchCamera \"internal\";\r\n    };\r\n\r\n    // Handle camera differently for internal/external view\r\n    if (_newMode == 1) then {\r\n        // Terminate camera view\r\n        _camera cameraEffect [\"terminate\", \"back\"];\r\n        GVAR(camHandler) = nil;\r\n    } else {\r\n        // Switch to the camera\r\n        _camera cameraEffect [\"internal\", \"back\"];\r\n    };\r\n\r\n    GVAR(camUnit) = _newUnit;\r\n};\r\n\r\nif (_newMode in [0,2]) then {\r\n    // Set up camera UI\r\n    showCinemaBorder false;\r\n    cameraEffectEnableHUD true;\r\n\r\n    // Handle camera movement\r\n    if (isNil QGVAR(camHandler)) then { GVAR(camHandler) = [FUNC(handleCamera), 0] call CBA_fnc_addPerFrameHandler; };\r\n\r\n    // If new vision isn't available then keep current (unless current also isn't)\r\n    if !(_newVision in GVAR(availableVisions)) then {\r\n        _newVision = GVAR(availableVisions) select ((GVAR(availableVisions) find GVAR(camVision)) max 0);\r\n    };\r\n\r\n    // Vision mode applies to free and external cam\r\n    if (_newVision < 0) then {\r\n        false setCamUseTi 0;\r\n        camUseNVG (_newVision >= -1);\r\n    } else {\r\n        true setCamUseTi _newVision;\r\n    };\r\n    GVAR(camVision) = _newVision;\r\n};\r\n\r\nGVAR(camMode) = _newMode;\r\n"},{"name":"ace_spectator_fnc_updateCameraModes","file":"spectator/functions/fnc_updateCameraModes.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Adds or removes spectator camera modes from the selection available to the local player.\r\n * Possible camera modes are:\r\n *   - 0: Free\r\n *   - 1: Internal\r\n *   - 2: External\r\n *\r\n * Arguments:\r\n * 0: Camera modes to add <ARRAY>\r\n * 1: Camera modes to remove <ARRAY>\r\n *\r\n * Return Value:\r\n * Available camera modes <ARRAY>\r\n *\r\n * Example:\r\n * [[0], [1,2]] call ace_spectator_fnc_updateCameraModes\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_addModes\",[],[[]]], [\"_removeModes\",[],[[]]]];\r\nprivate [\"_newModes\",\"_currentModes\"];\r\n\r\n_currentModes = GVAR(availableModes);\r\n\r\n// Restrict additions to only possible values\r\n_newModes = _addModes arrayIntersect [0,1,2];\r\n_newModes append (_currentModes - _removeModes);\r\n\r\n_newModes = _newModes arrayIntersect _newModes;\r\n_newModes sort true;\r\n\r\n// Can't become an empty array\r\nif (_newModes isEqualTo []) then {\r\n    [\"Cannot remove all camera modes (%1)\", QFUNC(updateCameraModes)] call BIS_fnc_error;\r\n} else {\r\n    GVAR(availableModes) = _newModes;\r\n};\r\n\r\n// Update camera in case of change\r\nif (GVAR(isSet)) then {\r\n    [] call FUNC(transitionCamera);\r\n};\r\n\r\n_newModes\r\n"},{"name":"ace_spectator_fnc_updateSpectatableSides","file":"spectator/functions/fnc_updateSpectatableSides.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Adds or removes sides from the selection available to spectate by the local player.\r\n * Note that the side filter setting is applied to the available sides dynamically.\r\n *\r\n * Default selection is [west,east,resistance,civilian]\r\n *\r\n * Arguments:\r\n * 0: Sides to add <ARRAY>\r\n * 1: Sides to remove <ARRAY>\r\n *\r\n * Return Value:\r\n * Spectatable sides <ARRAY>\r\n *\r\n * Example:\r\n * [[west], [east,civilian]] call ace_spectator_fnc_updateSpectatableSides\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_addSides\",[],[[]]], [\"_removeSides\",[],[[]]]];\r\n\r\n// Add and remove sides\r\n_addSides append (GVAR(availableSides) - _removeSides);\r\n\r\n// Only need array of unique sides\r\n_addSides = _addSides arrayIntersect _addSides;\r\n\r\nGVAR(availableSides) = _addSides;\r\n\r\n_addSides\r\n"},{"name":"ace_spectator_fnc_updateUnits","file":"spectator/functions/fnc_updateUnits.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Adds units to spectator whitelist/blacklist and refreshes the filter units\r\n *\r\n * Arguments:\r\n * 0: Units to add to the whitelist <ARRAY>\r\n * 1: Use blacklist <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [allUnits,true] call ace_spectator_fnc_updateUnits\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_newUnits\",[],[[]]],[\"_blacklist\",false,[false]]];\r\n\r\n// Function only matters on player clients\r\nif (!hasInterface) exitWith {};\r\n\r\n// If adding to a list we can exit here, since it won't show up until the UI refreshes anyway\r\nif !(_newUnits isEqualTo []) exitWith {\r\n    if (_blacklist) then {\r\n        GVAR(unitWhitelist) = GVAR(unitWhitelist) - _newUnits;\r\n        GVAR(unitBlacklist) append _newUnits;\r\n    } else {\r\n        GVAR(unitBlacklist) = GVAR(unitBlacklist) - _newUnits;\r\n        GVAR(unitWhitelist) append _newUnits;\r\n    };\r\n};\r\n\r\nprivate [\"_sides\",\"_cond\",\"_filteredUnits\",\"_filteredGroups\"];\r\n\r\n// Unit setting filter\r\n_newUnits = [[],allPlayers,playableUnits,allUnits] select GVAR(filterUnits);\r\n\r\n// Side setting filter\r\n_sides = [];\r\n_cond = [{_this == (side group player)},{(_this getFriend (side group player)) >= 0.6},{(_this getFriend (side group player)) < 0.6},{true}] select GVAR(filterSides);\r\n{\r\n    if (_x call _cond) then {\r\n        _sides pushBack _x;\r\n    };\r\n} forEach GVAR(availableSides);\r\n\r\n// Filter units and append to list\r\n_filteredUnits = [];\r\n{\r\n    if (\r\n        (alive _x) &&\r\n        {(_x isKindOf \"CAManBase\")} &&\r\n        {(side group _x) in _sides} && // Side filter\r\n        {simulationEnabled _x} &&\r\n        {!(_x getVariable [QGVAR(isStaged), false])} // Who watches the watchmen?\r\n    ) then {\r\n        _filteredUnits pushBack _x;\r\n    };\r\n} forEach (_newUnits - GVAR(unitBlacklist));\r\n_filteredUnits append GVAR(unitWhitelist);\r\n\r\n// Cache icons and colour for drawing\r\n_filteredGroups = [];\r\n{\r\n    // Intentionally re-applied to units in case their status changes\r\n    [_x] call FUNC(cacheUnitInfo);\r\n    _filteredGroups pushBack (group _x);\r\n} forEach _filteredUnits;\r\n\r\n// Replace previous lists entirely (removes any no longer valid)\r\nGVAR(unitList) = _filteredUnits arrayIntersect _filteredUnits;\r\nGVAR(groupList) = _filteredGroups arrayIntersect _filteredGroups;\r\n"},{"name":"ace_spectator_fnc_updateVisionModes","file":"spectator/functions/fnc_updateVisionModes.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Adds or removes spectator vision modes from the selection available to the local player.\r\n * The default selection is [-2,-1,0,1].\r\n * Possible vision modes are:\r\n *   - -2: Normal\r\n *   - -1: Night vision\r\n *   -  0: White hot\r\n *   -  1: Black hot\r\n *   -  2: Light Green Hot / Darker Green cold\r\n *   -  3: Black Hot / Darker Green cold\r\n *   -  4: Light Red Hot / Darker Red Cold\r\n *   -  5: Black Hot / Darker Red Cold\r\n *   -  6: White Hot / Darker Red Cold\r\n *   -  7: Thermal (Shade of Red and Green, Bodies are white)\r\n *\r\n * Arguments:\r\n * 0: Vision modes to add <ARRAY>\r\n * 1: Vision modes to remove <ARRAY>\r\n *\r\n * Return Value:\r\n * Available vision modes <ARRAY>\r\n *\r\n * Example:\r\n * [[0], [1,2]] call ace_spectator_fnc_updateVisionModes\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_addModes\",[],[[]]], [\"_removeModes\",[],[[]]]];\r\nprivate [\"_newModes\",\"_currentModes\"];\r\n\r\n_currentModes = GVAR(availableVisions);\r\n\r\n// Restrict additions to only possible values\r\n_newModes = _addModes arrayIntersect [-2,-1,0,1,2,3,4,5,6,7];\r\n_newModes append (_currentModes - _removeModes);\r\n\r\n_newModes = _newModes arrayIntersect _newModes;\r\n_newModes sort true;\r\n\r\n// Can't become an empty array\r\nif (_newModes isEqualTo []) then {\r\n    [\"Cannot remove all vision modes (%1)\", QFUNC(updateVisionModes)] call BIS_fnc_error;\r\n} else {\r\n    GVAR(availableVisions) = _newModes;\r\n};\r\n\r\n// Update camera in case of change\r\nif (GVAR(isSet)) then {\r\n    [] call FUNC(transitionCamera);\r\n};\r\n\r\n_newModes\r\n"}],"spottingscope":[{"name":"ace_spottingscope_fnc_animateReticle","file":"spottingscope/functions/fnc_animateReticle.sqf","text":"/*\r\n * Author: commy2\r\n * Animate scripted reticle of spotting scope.\r\n *\r\n * Arguments:\r\n * 0: Reticles RSC info display <DISPLAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_display\"];\r\nuinamespace setVariable [QGVAR(dlgSpottingScope), _display]; \r\n\r\nprivate _ctrlReticle = _display displayCtrl IDC_RETICLE;\r\nprivate _ctrlBody = _display displayCtrl IDC_BODY;\r\nprivate _ctrlBlackLeft = _display displayCtrl IDC_BLACK_LEFT;\r\nprivate _ctrlBlackRight = _display displayCtrl IDC_BLACK_RIGHT;\r\n\r\n// check if optics are used\r\n// hide all controls otherwise\r\nprivate _isUsingOptic = ctrlShown (_display displayCtrl 154);\r\n\r\n_ctrlReticle ctrlShow _isUsingOptic;\r\n_ctrlBody ctrlShow _isUsingOptic;\r\n_ctrlBlackLeft ctrlShow _isUsingOptic;\r\n_ctrlBlackRight ctrlShow _isUsingOptic;\r\n\r\n// animate reticle\r\nprivate _zoom = ([] call EFUNC(common,getZoom)) * MAGIC_SCOPE_NUMBER;\r\n\r\n_ctrlReticle ctrlSetPosition [\r\n    POS_X_BASE(_zoom),\r\n    POS_Y_BASE(_zoom),\r\n    POS_W_BASE(_zoom),\r\n    POS_H_BASE(_zoom)\r\n];\r\n\r\n_ctrlReticle ctrlCommit 0;\r\n"},{"name":"ace_spottingscope_fnc_pickup","file":"spottingscope/functions/fnc_pickup.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n * Pick up spotting scope\r\n *\r\n * Arguments:\r\n * 0: spotting scope <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [spotting_scope, player] call ace_spottingscope_fnc_pickup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_spottingScope\", \"_unit\"];\r\n\r\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\r\n    _unit playMove \"AmovPercMstpSrasWrflDnon_diary\";\r\n};\r\n\r\n[{\r\n    params [\"_spottingScope\", \"_unit\"];\r\n\r\n    [_unit, \"ACE_SpottingScope\"] call EFUNC(common,addToInventory);\r\n    deleteVehicle _spottingScope;\r\n}, [_spottingScope, _unit], 1, 0]call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_spottingscope_fnc_place","file":"spottingscope/functions/fnc_place.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n * Place down spotting scope\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: scope class <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"ACE_SpottingScope\"] call ace_spottingscope_fnc_place\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_scopeClass\"];\r\n\r\n_unit removeItem _scopeClass;\r\n\r\nif ((_unit call CBA_fnc_getUnitAnim) select 0 == \"stand\") then {\r\n    _unit playMove \"AmovPercMstpSrasWrflDnon_diary\";\r\n};\r\n\r\n[{\r\n    params [\"_unit\"];\r\n\r\n    // prevent collision damage\r\n    [QEGVAR(common,fixCollision), _unit] call CBA_fnc_localEvent;\r\n\r\n    // Check for a place to land the spotting scope\r\n    private _direction = getDir _unit;\r\n    private _position = (getPosASL _unit) vectorAdd [0.8 * sin(_direction), 0.8 * cos(_direction), 0];\r\n    private _vectorUp = [0, 0, 1];\r\n    private _intersections = lineIntersectsSurfaces [_position vectorAdd [0, 0, 1.5], _position vectorDiff [0, 0, 1.5], _unit, objNull, true, 1, \"GEOM\", \"FIRE\"];\r\n    if (_intersections isEqualTo []) then {\r\n        TRACE_1(\"No intersections\",_intersections);\r\n    } else {\r\n        (_intersections select 0) params [\"_touchingPoint\", \"_surfaceNormal\"];\r\n        _position = _touchingPoint vectorAdd [0, 0, 0.05];\r\n        _vectorUp = _surfaceNormal;\r\n    };\r\n\r\n    // Create the scope and set its position and orientation\r\n    private _spottingScope = \"ACE_SpottingScopeObject\" createVehicle [0, 0, 0];\r\n    _spottingScope setDir _direction;\r\n    _spottingScope setPosASL _position;\r\n    _spottingScope setVectorUp _vectorUp;\r\n    [QEGVAR(common,fixPosition), _spottingScope, _spottingScope] call CBA_fnc_targetEvent;\r\n    [QEGVAR(common,fixFloating), _spottingScope, _spottingScope] call CBA_fnc_targetEvent;\r\n\r\n    _unit reveal _spottingScope;\r\n\r\n}, [_unit], 1, 0] call CBA_fnc_waitAndExecute;\r\n"}],"switchunits":[{"name":"ace_switchunits_fnc_addMapFunction","file":"switchunits/functions/fnc_addMapFunction.sqf","text":"/*\r\n * Author: bux578\r\n * Adds a mapClick Eventhandler\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: sides <ARRAY<OBJECT>>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit, _sides] call ace_switchunits_fnc_addMapFunction\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_sides\"];\r\n\r\n[\"theMapClick\", \"onMapSingleClick\", {\r\n    // IGNORE_PRIVATE_WARNING(_pos,_shift,_alt)\r\n    if (alive ACE_player && {GVAR(OriginalUnit) getVariable [\"ACE_CanSwitchUnits\", false]}) then {\r\n        [_this, _pos, _shift, _alt] call FUNC(handleMapClick);\r\n    };\r\n\r\n}, [_unit, _sides]] call BIS_fnc_addStackedEventHandler;\r\n"},{"name":"ace_switchunits_fnc_handleMapClick","file":"switchunits/functions/fnc_handleMapClick.sqf","text":"/*\r\n * Author: bux578\r\n * Switches to a unit close to a clicked map position\r\n *\r\n * Arguments:\r\n * 0: Faction\r\n *   0: unit <OBJECT>\r\n *   1: sides <ARRAY>\r\n * 1: Map Position <ARRAY>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[unit, _sides], [20, 30]] call ace_switchunits_fnc_handleMapClick\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_faction\", \"_pos\"];\r\n_faction params [\"\", \"_sides\"];\r\n\r\nprivate _sideNearest = [];\r\n\r\n{\r\n    if ([_x] call FUNC(isValidAi) && (side group _x in _sides)) then {\r\n        _sideNearest pushBack _x;\r\n    };\r\n    nil\r\n} count (nearestObjects [_pos, [\"Man\"], 15]);\r\n\r\nif (count _sideNearest > 0) then {\r\n    [_sideNearest select 0] call FUNC(switchUnit);\r\n    openMap false;\r\n};\r\n"},{"name":"ace_switchunits_fnc_initPlayer","file":"switchunits/functions/fnc_initPlayer.sqf","text":"/*\r\n * Author: bux578\r\n * Initializes the player\r\n *\r\n * Arguments:\r\n * 0: player <OBJECT>\r\n * 1: sides <ARRAY<OBJECT>>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, [west]] call ace_switchunits_fnc_initPlayer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_playerUnit\", \"_sides\"];\r\n\r\nif (vehicle _playerUnit == _playerUnit) then {\r\n    [_sides] call FUNC(markAiOnMap);\r\n\r\n    _playerUnit setVariable [QGVAR(IsPlayerUnit), true, true];\r\n    _playerUnit allowDamage false;\r\n\r\n    GVAR(OriginalUnit) = _playerUnit;\r\n    GVAR(OriginalName) = name _playerUnit;\r\n    GVAR(OriginalGroup) = group _playerUnit;\r\n\r\n    // remove all starting gear of a player\r\n    removeAllWeapons _playerUnit;\r\n    removeGoggles _playerUnit;\r\n    removeHeadgear _playerUnit;\r\n    removeVest _playerUnit;\r\n    removeAllAssignedItems _playerUnit;\r\n    clearAllItemsFromBackpack _playerUnit;\r\n    removeBackpack _playerUnit;\r\n    _playerUnit linkItem  \"ItemMap\";\r\n    removeUniform _playerUnit;\r\n\r\n    [_playerUnit, \"forceWalk\", \"ACE_SwitchUnits\", true] call EFUNC(common,statusEffect_set);\r\n\r\n    [_playerUnit, _sides] call FUNC(addMapFunction);\r\n};\r\n"},{"name":"ace_switchunits_fnc_isValidAi","file":"switchunits/functions/fnc_isValidAi.sqf","text":"/*\r\n * Author: bux578\r\n * Checks if AI is a valid target for switching.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Valid AI <BOOL>\r\n *\r\n * Example:\r\n * [_unit] call ace_switchunits_fnc_isValidAi\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n!([_unit] call EFUNC(common,isPlayer)\r\n|| {_unit in playableUnits}\r\n|| {vehicle _unit != _unit}\r\n|| {_unit getVariable [QGVAR(IsPlayerUnit), false]}\r\n|| {_unit getVariable [QGVAR(IsPlayerControlled), false]}) // return\r\n"},{"name":"ace_switchunits_fnc_markAiOnMap","file":"switchunits/functions/fnc_markAiOnMap.sqf","text":"/*\r\n * Author: bux578\r\n * Creates markers for AI units for given sides.\r\n * Marks players in a different colour.\r\n *\r\n * Arguments:\r\n * 0: side <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [[west, east]] call ace_switchunits_fnc_markAiOnMap\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_sidesToShow\"];\r\n\r\nGVAR(AllMarkerNames) = [];\r\n\r\n[{\r\n    params [\"_args\"];\r\n    _args params [\"_sides\"];\r\n\r\n    // delete markers\r\n    {\r\n        deleteMarkerLocal _x;\r\n    } count GVAR(AllMarkerNames);\r\n\r\n    // reset the array\r\n    GVAR(AllMarkerNames) = [];\r\n\r\n    if (alive ACE_player && {GVAR(OriginalUnit) getVariable [\"ACE_CanSwitchUnits\", false]}) then {\r\n\r\n        // create markers\r\n        {\r\n            if (([_x] call FUNC(isValidAi) && (side group _x in _sides)) || (_x getVariable [QGVAR(IsPlayerControlled), false])) then {\r\n\r\n                private _markerName = str _x;\r\n\r\n                private _marker = createMarkerLocal [_markerName, position _x];\r\n                _markerName setMarkerTypeLocal \"mil_triangle\";\r\n                _markerName setMarkerShapeLocal \"ICON\";\r\n                _markerName setMarkerSizeLocal [0.5, 0.7];\r\n                _markerName setMarkerDirLocal getDir _x;\r\n\r\n                // commy's one liner magic\r\n                private _markerColor = format [\"Color%1\", side group _x];\r\n\r\n                if ((_x getVariable [QGVAR(IsPlayerControlled), false])) then {\r\n                    _markerName setMarkerColorLocal \"ColorOrange\";\r\n                    _markerName setMarkerTextLocal (_x getVariable [QGVAR(PlayerControlledName), \"\"]);\r\n                } else {\r\n                    _markerName setMarkerColorLocal _markerColor;\r\n                    _markerName setMarkerTextLocal (getText (configFile >> \"CfgVehicles\" >> typeOf _x >> \"displayName\"));\r\n                };\r\n\r\n                GVAR(AllMarkerNames) pushBack _markerName;\r\n                nil\r\n            };\r\n        } count allUnits;\r\n    };\r\n}, 1.5, [_sidesToShow]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_switchunits_fnc_module","file":"switchunits/functions/fnc_module.sqf","text":"/*\r\n * Author: bux578\r\n * Initializes the SwitchUnits module\r\n *\r\n * Arguments:\r\n * 0: module logic <OBJECT>\r\n * 1: list of affected units <ARRAY<OBJECT>>\r\n * 2: isActivated <BOOLEAN>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\nGVAR(Module) = true;\r\n\r\n[_logic, QGVAR(SwitchToWest), \"SwitchToWest\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(SwitchToEast), \"SwitchToEast\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(SwitchToIndependent), \"SwitchToIndependent\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(SwitchToCivilian), \"SwitchToCivilian\"] call EFUNC(common,readSettingFromModule);\r\n\r\n[_logic, QGVAR(EnableSafeZone), \"EnableSafeZone\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(SafeZoneRadius), \"SafeZoneRadius\"] call EFUNC(common,readSettingFromModule);\r\n\r\n[QGVAR(EnableSwitchUnits), true, false, true] call EFUNC(common,setSetting);\r\n\r\nACE_LOGINFO(\"SwitchUnits Module Initialized.\");\r\n"},{"name":"ace_switchunits_fnc_nearestPlayers","file":"switchunits/functions/fnc_nearestPlayers.sqf","text":"/*\r\n * Author: bux578\r\n * Returns an array of alive players in a given radius around a given location\r\n *\r\n * Arguments:\r\n * 0: Center position <POSTION>\r\n * 1: Radius <NUMBER>\r\n *\r\n * Return Value:\r\n * Player units <ARRAY<OBJECT>>\r\n *\r\n * Example:\r\n * [[300,300,0], 100] call ace_switchunits_fnc_nearestPlayers\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_position\", \"_radius\"];\r\n\r\nprivate _nearestPlayers = [];\r\n\r\n{\r\n    if ([_x] call EFUNC(common,isPlayer) && {alive _x}) then {\r\n        _nearestPlayers pushBack _x;\r\n    };\r\n} forEach (nearestObjects [_position, [\"Man\"], _radius]);\r\n\r\n_nearestPlayers\r\n"},{"name":"ace_switchunits_fnc_startSwitchUnits","file":"switchunits/functions/fnc_startSwitchUnits.sqf","text":"/*\r\n * Author: bux578\r\n * Starts the SwitchUnits functionality\r\n *\r\n * Arguments:\r\n * 0: player <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_player] call ace_switchunits_fnc_startSwitchUnits\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_player\"];\r\n\r\nif (GVAR(EnableSwitchUnits)) then {\r\n    private _sides = [];\r\n\r\n    if(GVAR(SwitchToWest)) then {_sides pushBack west;};\r\n    if(GVAR(SwitchToEast)) then {_sides pushBack east;};\r\n    if(GVAR(SwitchToIndependent)) then {_sides pushBack independent;};\r\n    if(GVAR(SwitchToCivilian)) then {_sides pushBack civilian;};\r\n\r\n    if (_player getVariable [\"ACE_CanSwitchUnits\", false]) then {\r\n        [_player, _sides] call FUNC(initPlayer);\r\n    };\r\n};\r\n"},{"name":"ace_switchunits_fnc_switchBack","file":"switchunits/functions/fnc_switchBack.sqf","text":"/*\r\n * Author: bux578\r\n * Switches back to the original player unit\r\n *\r\n * Arguments:\r\n * 0: Original player unit <OBJECT>\r\n * 1: Respawned unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_originalPlayerUnit, _currentUnit] call ace_switchunits_fnc_switchBack\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_originalPlayerUnit\"];\r\n\r\n[_originalPlayerUnit] joinSilent GVAR(OriginalGroup);\r\n\r\n[{\r\n    params [\"_args\", \"_pfhId\"];\r\n    _args params [\"_originalPlayerUnit\", \"_currentUnit\"];\r\n\r\n    if (local _originalPlayerUnit) exitWith {\r\n        selectPlayer _originalPlayerUnit;\r\n\r\n        // deleteVehicle _currentUnit;\r\n\r\n        // private _layer = \"BIS_fnc_respawnCounter\" call bis_fnc_rscLayer;\r\n        // _layer cuttext [\"\",\"plain\"];\r\n\r\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n}, 0.2, _this] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_switchunits_fnc_switchUnit","file":"switchunits/functions/fnc_switchUnit.sqf","text":"/*\r\n * Author: bux578\r\n * Switches to the new given player unit\r\n *\r\n * Arguments:\r\n * 0: the unit to switch to <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit] call ace_switchunits_fnc_switchUnit\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// don't switch to original player units\r\nif (!([_unit] call FUNC(isValidAi))) exitWith {};\r\n\r\n// exit var\r\nprivate _leave = false;\r\n\r\nif (GVAR(EnableSafeZone)) then {\r\n    private _allNearestPlayers = [position _unit, GVAR(SafeZoneRadius)] call FUNC(nearestPlayers);\r\n    private _nearestEnemyPlayers = _allNearestPlayers select {((side GVAR(OriginalGroup)) getFriend side _x < 0.6) && !(_x getVariable [QGVAR(IsPlayerControlled), false])};\r\n\r\n    if (count _nearestEnemyPlayers > 0) exitWith {\r\n        _leave = true;\r\n    };\r\n};\r\n\r\n// exitWith doesn't exit past the \"if(EnableSafeZone)\" block\r\nif (_leave) exitWith {\r\n    [localize LSTRING(TooCloseToEnemy)] call EFUNC(common,displayTextStructured);\r\n};\r\n\r\n// should switch locality\r\n// This doesn't work anymore, because one's now able to switch to units from a different side\r\n//[_unit] joinSilent group player;\r\n[QGVAR(switchLocality), [_unit, player]] call CBA_fnc_serverEvent;\r\n\r\n[{\r\n    params [\"_args\", \"_pfhId\"];\r\n    _args params [\"_unit\", \"_oldUnit\"];\r\n\r\n    [localize LSTRING(TryingToSwitch)] call EFUNC(common,displayTextStructured);\r\n\r\n    if (local _unit) exitWith {\r\n        _oldUnit setVariable [QGVAR(IsPlayerControlled), false, true];\r\n        _oldUnit setVariable [QGVAR(PlayerControlledName), \"\", true];\r\n\r\n        private _killedEhId = _unit getVariable [QGVAR(KilledEhId), -1];\r\n        if (_killedEhId != -1) then {\r\n            _oldUnit removeEventHandler [\"Killed\", _killedEhId];\r\n        };\r\n\r\n        selectPlayer _unit;\r\n\r\n        _unit setVariable [QGVAR(IsPlayerControlled), true, true];\r\n        _unit setVariable [QGVAR(PlayerControlledName), GVAR(OriginalName), true];\r\n\r\n\r\n        _killedEhId = _unit addEventHandler [\"Killed\", {\r\n            [GVAR(OriginalUnit), _this select 0] call FUNC(switchBack);\r\n        }];\r\n        _unit setVariable [QGVAR(KilledEhId), _killedEhId, true];\r\n\r\n\r\n        // set owner back to original owner\r\n        private _oldOwner = _oldUnit getVariable[QGVAR(OriginalOwner), -1];\r\n        if (_oldOwner > -1) then {\r\n            [\"ace_setOwner\", [_oldUnit, _oldOwner]] call CBA_fnc_serverEvent;\r\n        };\r\n\r\n        [localize LSTRING(SwitchedUnit)] call EFUNC(common,displayTextStructured);\r\n\r\n        [_pfhId] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n}, 0.2, [_unit, player]] call CBA_fnc_addPerFrameHandler;\r\n"}],"tacticalladder":[{"name":"ace_tacticalladder_fnc_cancelTLdeploy","file":"tacticalladder/functions/fnc_cancelTLdeploy.sqf","text":"/*\r\n * Author: Rocko, Ruthberg, commy2\r\n * Cancel tactical ladder deployment\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Key <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_ladder] call ace_tacticalladder_fnc_cancelTLdeploy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __ANIMS [\"extract_1\",\"extract_2\",\"extract_3\",\"extract_4\",\"extract_5\",\"extract_6\",\"extract_7\",\"extract_8\",\"extract_9\",\"extract_10\",\"extract_11\"]\r\n\r\nparams [\"_unit\", \"_key\"];\r\n\r\nif (_key != 1 || {isNull GVAR(ladder)}) exitWith {};\r\n\r\n// enable running again\r\n[_unit, \"forceWalk\", \"ACE_Ladder\", false] call EFUNC(common,statusEffect_set);\r\n\r\ndetach GVAR(ladder);\r\n\r\nGVAR(ladder) animate [\"rotate\", 0];\r\n\r\n{\r\n    GVAR(ladder) animate [_x, 0];\r\n} count __ANIMS;\r\n\r\n// remove mouse buttons and hint\r\ncall EFUNC(interaction,hideMouseHint);\r\n\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(Common,removeActionEventHandler);\r\n\r\nGVAR(ladder) = objNull;\r\n"},{"name":"ace_tacticalladder_fnc_confirmTLdeploy","file":"tacticalladder/functions/fnc_confirmTLdeploy.sqf","text":"/*\r\n * Author: Rocko, Ruthberg, commy2\r\n * Confirm tactical ladder deployment\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: ladder <OBJECT>\r\n *\r\n * Return Value:\r\n * Success <BOOL>\r\n *\r\n * Example:\r\n * [_ladder] call ace_tacticalladder_fnc_confirmTLdeploy\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_ladder\"];\r\n\r\n// enable running again\r\n[_unit, \"forceWalk\", \"ACE_Ladder\", false] call EFUNC(common,statusEffect_set);\r\n\r\nprivate [\"_pos1\", \"_pos2\"];\r\n\r\n_pos1 = getPosASL _ladder;\r\n_pos2 = AGLToASL (_ladder modelToWorld (_ladder selectionPosition \"check2\"));\r\n\r\nif (lineIntersects [_pos1, _pos2, _ladder]) exitWith {false};\r\n\r\ndetach _ladder;\r\n\r\n// remove mouse buttons and hint\r\ncall EFUNC(interaction,hideMouseHint);\r\n\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Deploy), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\nGVAR(ladder) = objNull;\r\n\r\ntrue\r\n"},{"name":"ace_tacticalladder_fnc_deployTL","file":"tacticalladder/functions/fnc_deployTL.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n * Deploy tactical ladder\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit] call ace_tacticalladder_fnc_deployTL\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (backpack _unit != 'ACE_TacticalLadder_Pack') exitWith {};\r\n\r\nremoveBackpack _unit;\r\n\r\nprivate [\"_pos\", \"_offset\", \"_ladder\"];\r\n\r\n_pos = _unit modelToWorld [0,0,0];\r\n_offset = if ((_unit call CBA_fnc_getUnitAnim select 0) == \"prone\") then { 1 } else {0.8};\r\n\r\n_pos set [0, (_pos select 0) + (sin getDir _unit) * _offset];\r\n_pos set [1, (_pos select 1) + (cos getDir _unit) * _offset];\r\n_pos set [2, [_unit] call CBA_fnc_realHeight];\r\n\r\n_ladder = \"ACE_TacticalLadder\" createVehicle _pos;\r\n_ladder setPos _pos;\r\n_ladder setDir getDir _unit;\r\n\r\n_unit reveal _ladder;\r\n"},{"name":"ace_tacticalladder_fnc_handleInteractMenuOpened","file":"tacticalladder/functions/fnc_handleInteractMenuOpened.sqf","text":"/*\r\n * Author: commy2\r\n * Handle opening of interaction menu.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (!isNull (GETMVAR(GVAR(ladder),objNull)) && {GVAR(ladder) in attachedObjects _unit}) then {\r\n    [_unit, GVAR(ladder)] call FUNC(cancelTLdeploy);\r\n};\r\n"},{"name":"ace_tacticalladder_fnc_handleKilled","file":"tacticalladder/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: commy2\r\n * Handle death.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (!isNull (GETMVAR(ladder,objNull)) && {GVAR(ladder) in attachedObjects _unit}) then {\r\n    [_unit, GVAR(ladder)] call FUNC(cancelTLdeploy);\r\n};\r\n"},{"name":"ace_tacticalladder_fnc_handlePlayerChanged","file":"tacticalladder/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle player changes.\r\n *\r\n * Arguments:\r\n * 0: New Player Unit <OBJECT>\r\n * 1: Old Player Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nif (isNull (GETGVAR(ladder,objNull))) exitWith {};\r\n\r\nparams [\"_newPlayer\", \"_oldPlayer\"];\r\n\r\nif (GVAR(ladder) in attachedObjects _newPlayer) then {\r\n    [_newPlayer, GVAR(ladder)] call FUNC(cancelTLdeploy);\r\n};\r\n\r\nif (GVAR(ladder) in attachedObjects _oldPlayer) then {\r\n    [_oldPlayer, GVAR(ladder)] call FUNC(cancelTLdeploy);\r\n};\r\n"},{"name":"ace_tacticalladder_fnc_handleScrollWheel","file":"tacticalladder/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n * Handles lengthening and tilting of the ladder\r\n *\r\n * Arguments:\r\n * Amount scrolled <NUMBER>\r\n *\r\n * Return Value:\r\n * Handled <BOOL>\r\n *\r\n * Example:\r\n * [1] call ace_tacticalladder_fnc_handleScrollWheel;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_scroll\"];\r\n\r\nif (isNull GVAR(ladder)) exitWith { false };\r\n\r\nif (ACE_Modifier == 0) then {\r\n    private [\"_currentStep\"];\r\n    // Lengthening\r\n    if (_scroll > 0) then {\r\n        _currentStep = GVAR(currentStep);\r\n        if (_currentStep == 11) exitWith {};\r\n        _currentStep = _currentStep + 1;\r\n        if (GVAR(ladder) animationPhase (format[\"extract_%1\", _currentStep]) == 0) then {\r\n            GVAR(ladder) animate [format[\"extract_%1\", _currentStep], 1];\r\n            GVAR(currentStep) = _currentStep;\r\n        };\r\n    };\r\n    if (_scroll < 0) then {\r\n        _currentStep = GVAR(currentStep);\r\n        if (_currentStep == 3) exitWith {};\r\n        if (GVAR(ladder) animationPhase (format[\"extract_%1\", _currentStep]) == 1) then {\r\n            GVAR(ladder) animate [format[\"extract_%1\", _currentStep], 0];\r\n            GVAR(currentStep) = _currentStep - 1;\r\n        };\r\n    };\r\n} else {\r\n    // Tilting (disabled due to sinking, interaction point offset and unsuitable animation)\r\n    //GVAR(currentAngle) = 0 max (GVAR(currentAngle) + _scroll) min 30;\r\n    //GVAR(ladder) animate [\"rotate\", GVAR(currentAngle)];\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_tacticalladder_fnc_handleUnconscious","file":"tacticalladder/functions/fnc_handleUnconscious.sqf","text":"/*\r\n * Author: commy2\r\n * Handle unconsciousness.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (!isNull (GETMVAR(ladder,objNull)) && {GVAR(ladder) in attachedObjects _unit}) then {\r\n    [_unit, GVAR(ladder)] call FUNC(cancelTLdeploy);\r\n};\r\n"},{"name":"ace_tacticalladder_fnc_isLadderEmpty","file":"tacticalladder/functions/fnc_isLadderEmpty.sqf","text":"/*\r\n * Author: Jonpas\r\n * Checks if Tactical Ladder is empty (no one climbing it).\r\n *\r\n * Arguments:\r\n * 0: Ladder <OBJECT>\r\n *\r\n * Return Value:\r\n * Can Be Picked Up <BOOL>\r\n *\r\n * Example:\r\n * [ladder] call ace_tacticalladder_fnc_isLadderEmpty;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_ladder\"];\r\n\r\nprivate _unitsNearLadder = nearestObjects [_ladder, [\"CAManBase\"], 4];\r\nTRACE_1(\"Near Ladder\",_unitsNearLadder);\r\n\r\nprivate _ladderEmpty = true;\r\n{\r\n    if (getNumber (configFile >> \"CfgMovesMaleSdr\" >> \"States\" >> animationState _x >> \"ACE_isLadder\") == 1) exitWith {\r\n        _ladderEmpty = false;\r\n        TRACE_1(\"On Ladder\",_x);\r\n    };\r\n} forEach _unitsNearLadder;\r\n\r\n_ladderEmpty\r\n"},{"name":"ace_tacticalladder_fnc_pickupTL","file":"tacticalladder/functions/fnc_pickupTL.sqf","text":"/*\r\n * Author: Rocko, Ruthberg, commy2\r\n * Pick up tactical ladder\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: ladder <OBJECT>\r\n *\r\n * Return Value:\r\n * Success <BOOL>\r\n *\r\n * Example:\r\n * [_unit, _ladder] call ace_tacticalladder_fnc_pickupTL\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_ladder\"];\r\n\r\nif (backpack _unit != \"\") exitWith {false};\r\n\r\ndeleteVehicle _ladder;\r\n\r\n_unit addBackpack \"ACE_TacticalLadder_Pack\";\r\n\r\ntrue\r\n"},{"name":"ace_tacticalladder_fnc_positionTL","file":"tacticalladder/functions/fnc_positionTL.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n * Position tactical ladder\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: ladder <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit, _ladder] call ace_tacticalladder_fnc_positionTL\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __ANIMS [\"extract_1\",\"extract_2\",\"extract_3\",\"extract_4\",\"extract_5\",\"extract_6\",\"extract_7\",\"extract_8\",\"extract_9\",\"extract_10\",\"extract_11\"]\r\n\r\nparams [\"_unit\", \"_ladder\"];\r\n\r\n// prevent the placing unit from running\r\n[_unit, \"forceWalk\", \"ACE_Ladder\", true] call EFUNC(common,statusEffect_set);\r\n\r\n{\r\n    _ladder animate [_x, 0];\r\n} count __ANIMS;\r\n\r\n[_unit, \"amovpercmstpslowwrfldnon_player_idlesteady03\", 2] call EFUNC(common,doAnimation);\r\n\r\n_ladder attachTo [_unit, [0, 0.75, 0], \"\"]; // Position ladder in front of player\r\n\r\n_ladder animate [\"rotate\", 0];\r\n{\r\n    _ladder animate [_x, 1];\r\n} count [\"extract_1\", \"extract_2\", \"extract_3\"]; // Extract ladder at head height (extract_3)\r\n\r\nGVAR(ladder) = _ladder;\r\nGVAR(cancelTime) = CBA_missionTime + 1; // Workaround to prevent accidental canceling\r\nGVAR(currentStep) = 3;\r\nGVAR(currentAngle) = 0;\r\n\r\n// add mouse buttons and hints\r\n//private _adjustText = format [\"%1, +%2\", localize LSTRING(Adjust), localize LSTRING(AdjustTilt)]; // Tilting disabled due to sinking, interaction point offset and unsuitable animation\r\n[localize LSTRING(Deploy), localize LSTRING(Drop), /*_adjustText*/ localize LSTRING(Adjust)] call EFUNC(interaction,showMouseHint);\r\n\r\n_unit setVariable [QGVAR(Deploy), [\r\n    _unit, \"DefaultAction\",\r\n    {!isNull GVAR(ladder)},\r\n    {[_this select 0, GVAR(ladder)] call FUNC(confirmTLdeploy)}\r\n] call EFUNC(common,addActionEventHandler)];\r\n"}],"tagging":[{"name":"ace_tagging_fnc_checkTaggable","file":"tagging/functions/fnc_checkTaggable.sqf","text":"/*\r\n * Author: BaerMitUmlaut, esteldunedain\r\n * Checks if there is a taggable surface within 2.5m in front of the player.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Is wall taggable <BOOL>\r\n *\r\n * Example:\r\n * [] call ace_tagging_fnc_checkTaggable\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n[[], {\r\n    private _startPosASL = eyePos ACE_player;\r\n    private _cameraPosASL =  AGLToASL positionCameraToWorld [0, 0, 0];\r\n    private _cameraDir = (AGLToASL positionCameraToWorld [0, 0, 1]) vectorDiff _cameraPosASL;\r\n    private _endPosASL = _startPosASL vectorAdd (_cameraDir vectorMultiply 2.5);\r\n\r\n    private _intersections = lineIntersectsSurfaces [_startPosASL, _endPosASL, ACE_player, objNull, true, 1, \"FIRE\", \"GEOM\"];\r\n\r\n    // If there's no intersections\r\n    if (_intersections isEqualTo []) exitWith {false};\r\n\r\n    (_intersections select 0) params [\"\", \"\", \"\", \"_object\"];\r\n\r\n    // Exit if trying to tag a non static object\r\n    TRACE_1(\"Obj:\",_intersections);\r\n\r\n    // Exit if trying to tag a non static object\r\n    if ((!isNull _object) && {\r\n        // If the class is alright, do not exit\r\n        if (_object isKindOf \"Static\") exitWith {false};\r\n\r\n        // If the class is not categorized correctly search the cache\r\n        private _array = str(_object) splitString \" \";\r\n        private _str = toLower (_array select 1);\r\n        TRACE_1(\"Object:\",_str);\r\n        private _objClass = GVAR(cacheStaticModels) getVariable _str;\r\n        // If the class in not on the cache, exit\r\n        if (isNil \"_objClass\") exitWith {\r\n            false\r\n        };\r\n        true\r\n    }) exitWith {\r\n        TRACE_1(\"Pointed object is non static\",_object);\r\n        false\r\n    };\r\n\r\n    true\r\n}, missionNamespace, QGVAR(checkTaggableCache), 0.5] call EFUNC(common,cachedCall);\r\n"},{"name":"ace_tagging_fnc_createTag","file":"tagging/functions/fnc_createTag.sqf","text":"/*\r\n * Author: BaerMitUmlaut, esteldunedain\r\n * Creates a tag and handle its destruction. Only execute on the server.\r\n *\r\n * Arguments:\r\n * 0: Position ASL <ARRAY>\r\n * 1: Vector dir and up <ARRAY>\r\n * 2: Colour of the tag (valid colours are black, red, green and blue or full path to custom texture) <STRING>\r\n * 3: Object it should be tied to <OBJECT>\r\n * 4: Unit that created the tag <OBJECT>\r\n *\r\n * Return Value:\r\n * Tag created <BOOL>\r\n *\r\n * Example:\r\n * [positionASL, vectorDirAndUp, \"z\\ace\\addons\\tagging\\UI\\tags\\black\\0.paa\", object] call ace_tagging_fnc_createTag\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_tagPosASL\", \"_vectorDirAndUp\", \"_texture\", \"_object\", \"_unit\"];\r\nTRACE_5(\"createTag:\",_tagPosASL,_vectorDirAndUp,_texture,_object,_unit);\r\n\r\nif (_texture == \"\") exitWith {\r\n    ACE_LOGERROR_1(\"%1 is not a valid tag texture.\",_texture);\r\n    false\r\n};\r\n\r\nprivate _tag = \"UserTexture1m_F\" createVehicle [0,0,0];\r\n_tag setObjectTextureGlobal [0, _texture];\r\n_tag setPosASL _tagPosASL;\r\n_tag setVectorDirAndUp _vectorDirAndUp;\r\n\r\n// Throw a global event for mision makers\r\n[\"ace_tagCreated\", [_tag, _texture, _object, _unit]] call CBA_fnc_globalEvent;\r\n\r\nif (isNull _object) exitWith {true};\r\n\r\n// If the tag is applied to an object, handle its destruction\r\n_object setVariable [QGVAR(testVar), true];\r\nif (_object getVariable [QGVAR(testVar), false]) then {\r\n    // The object supports variables and hence HandleDamage too\r\n    // Use the cheaper alternative for handling destruction: HandleDamage\r\n\r\n    // If the object already has tags attached, just add the new one to the list\r\n    private _attachedTags = _object getVariable QGVAR(attachedTags);\r\n    if !(isNil  \"_attachedTags \") exitWith {\r\n        _attachedTags pushBack _tag;\r\n    };\r\n\r\n    _attachedTags = [_tag];\r\n    _object setVariable [QGVAR(attachedTags), _attachedTags];\r\n\r\n    // If it's the first tag attached to that object, add a handledamage event handler\r\n    _object addEventHandler [\"HandleDamage\", {\r\n        params [\"_object\", \"_selection\", \"_damage\"];\r\n        if (_selection == \"\" && _damage >= 1) then {\r\n            {\r\n                deleteVehicle _x;\r\n            } foreach (_object getVariable [QGVAR(attachedTags), []]);\r\n            _object setVariable [QGVAR(attachedTags), []];\r\n        };\r\n    }];\r\n};\r\n\r\n// Periodic test the tag:\r\n// - For object that don't support handledamage\r\n// - For object that do, to support doors opening/closing, etc\r\nGVAR(tagsToTest) pushBack [_tag, _tagPosASL, _vectorDirAndUp];\r\n\r\n// Run the test\r\nif (!GVAR(testingThread)) then {\r\n    call FUNC(tagTestingThread);\r\n};\r\n\r\ntrue\r\n"},{"name":"ace_tagging_fnc_getTexture","file":"tagging/functions/fnc_getTexture.sqf","text":"/*\r\n * Author: BaerMitUmlaut, esteldunedain, Jonpas\r\n * Puts together a full path to the given tag color texture. Internal ACE3 textures only.\r\n *\r\n * Arguments:\r\n * 0: The colour of the tag (valid colours are black, red, green and blue) <STRING>\r\n *\r\n * Return Value:\r\n * Texture (full path), \"\" if not found <STRING>\r\n *\r\n * Example:\r\n * texture = [\"blue\"] call ace_tagging_fnc_getTexture\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_color\"];\r\n\r\nif !((toLower _color) in [\"black\", \"red\", \"green\", \"blue\"]) exitWith {\r\n    ACE_LOGERROR_1(\"%1 is not a valid tag colour.\",_color);\r\n    \"\"\r\n};\r\n\r\nQUOTE(PATHTOF(UI)) + \"\\tags\\\" + _color + \"\\\" + str (floor (random 3)) + \".paa\"\r\n"},{"name":"ace_tagging_fnc_tag","file":"tagging/functions/fnc_tag.sqf","text":"/*\r\n * Author: BaerMitUmlaut, esteldunedain\r\n * Creates a tag on a wall that is on the closest surface within 2m on front of the unit.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: The colour of the tag (valid colours are black, red, green and blue or full path to custom texture) <STRING>\r\n *\r\n * Return Value:\r\n * Sucess <BOOL>\r\n *\r\n * Example:\r\n * success = [player, \"z\\ace\\addons\\tagging\\UI\\tags\\black\\0.paa\"] call ace_tagging_fnc_tag\r\n *\r\n * Public: Yes\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\r\n    [\"_unit\", objNull, [objNull]],\r\n    [\"_texture\", \"\", [\"\"]]\r\n];\r\n\r\nif (isNull _unit || {_texture == \"\"}) exitWith {\r\n    ACE_LOGERROR_2(\"Tag parameters invalid. Unit: %1, Texture: %2\",_unit,_texture);\r\n};\r\n\r\nprivate _startPosASL = eyePos _unit;\r\nprivate _cameraPosASL =  AGLToASL positionCameraToWorld [0, 0, 0];\r\nprivate _cameraDir = (AGLToASL positionCameraToWorld [0, 0, 1]) vectorDiff _cameraPosASL;\r\nprivate _endPosASL = _startPosASL vectorAdd (_cameraDir vectorMultiply 2.5);\r\n\r\n// Check for intersections below the unit\r\nprivate _intersections = lineIntersectsSurfaces [_startPosASL, _endPosASL, _unit, objNull, true, 1, \"GEOM\", \"FIRE\"];\r\n\r\n// If there's no intersections\r\nif (_intersections isEqualTo []) exitWith {\r\n    TRACE_3(\"No intersections\",_intersections);\r\n    false\r\n};\r\n\r\n(_intersections select 0) params [\"_touchingPoint\", \"_surfaceNormal\", \"\", \"_object\"];\r\nTRACE_3(\"\",_touchingPoint, _surfaceNormal, _object);\r\n\r\n// Exit if trying to tag a non static object\r\nif ((!isNull _object) && {\r\n    // If the class is alright, do not exit\r\n    if (_object isKindOf \"Static\") exitWith {false};\r\n\r\n    // If the class is not categorized correctly search the cache\r\n    private _array = str(_object) splitString \" \";\r\n    private _str = toLower (_array select 1);\r\n    TRACE_1(\"Object:\",_str);\r\n    private _objClass = GVAR(cacheStaticModels) getVariable _str;\r\n    // If the class in not on the cache, exit\r\n    if (isNil \"_objClass\") exitWith {\r\n        false\r\n    };\r\n    true\r\n}) exitWith {\r\n    TRACE_1(\"Pointed object is non static\",_object);\r\n    false\r\n};\r\n\r\n\r\n// If the surface normal points away, flip it. This happens in weird places like the Stratis Pier\r\nif (_surfaceNormal vectorDotProduct  (_endPosASL vectorDiff _startPosASL) > 0) then {\r\n    _surfaceNormal = _surfaceNormal vectorMultiply -1;\r\n};\r\n\r\n// Check if its a valid surface: big enough, reasonably plane\r\nprivate _v1 = vectorNormalized (_surfaceNormal vectorMultiply -1);\r\nprivate _v2 = vectorNormalized (_v1 vectorCrossProduct (_endPosASL vectorDiff _startPosASL));\r\n// If the surface is not horizontal (>20º), create vup _v2 pointing upward instead of away\r\nif (abs (_v1 select 2) < 0.94) then {\r\n    private _v3Temp = _v1 vectorCrossProduct [0, 0, 1];\r\n    _v2 = _v3Temp vectorCrossProduct _v1;\r\n};\r\nprivate _v3 = _v2 vectorCrossProduct _v1;\r\n\r\nTRACE_3(\"Reference:\", _v1, _v2, _v3);\r\n\r\n_fnc_isOk = {\r\n    params [\"_rx\", \"_ry\"];\r\n    private _startPosASL2 = _touchingPoint vectorAdd (_v2 vectorMultiply _rx) vectorAdd (_v3 vectorMultiply _ry) vectorAdd (_v1 vectorMultiply (-0.06));\r\n    private _endPosASL2   = _startPosASL2 vectorAdd (_v1 vectorMultiply (0.12));\r\n    private _intersections = lineIntersectsSurfaces [_startPosASL2, _endPosASL2, _unit, objNull, true, 1, \"GEOM\", \"FIRE\"];\r\n    // If there's no intersections\r\n    if (_intersections isEqualTo []) exitWith {false;};\r\n\r\n    if !(((_intersections select 0) select 3) isEqualTo _object) exitWith {false;};\r\n\r\n    true\r\n};\r\n\r\nif ( !([ 0.5*TAG_SIZE, 0.5*TAG_SIZE] call _fnc_isOk) ||\r\n    {!([ 0.5*TAG_SIZE,-0.5*TAG_SIZE] call _fnc_isOk) ||\r\n    {!([-0.5*TAG_SIZE, 0.5*TAG_SIZE] call _fnc_isOk) ||\r\n    {!([-0.5*TAG_SIZE,-0.5*TAG_SIZE] call _fnc_isOk)}}}) exitWith {\r\n    TRACE_3(\"Unsuitable location:\",_touchingPoint);\r\n    false\r\n};\r\n\r\nprivate _vectorDirAndUp = [_surfaceNormal vectorMultiply -1, _v3];\r\n\r\n// Everything ok, make the unit create the tag\r\n_unit playActionNow \"PutDown\";\r\n\r\n[{\r\n    params [\"\", \"\", \"\", \"\", \"_unit\"];\r\n    TRACE_2(\"Unit:\",_unit,_this);\r\n\r\n    playSound3D [QUOTE(PATHTO_R(sounds\\spray.ogg)), _unit, false, (eyePos _unit), 10, 1, 15];\r\n\r\n    // Tell the server to create the tag and handle its destruction\r\n    [QGVAR(createTag), _this] call CBA_fnc_serverEvent;\r\n}, [_touchingPoint vectorAdd (_surfaceNormal vectorMultiply 0.06), _vectorDirAndUp, _texture, _object, _unit], 0.6] call CBA_fnc_waitAndExecute;\r\n\r\ntrue\r\n"},{"name":"ace_tagging_fnc_tagTestingThread","file":"tagging/functions/fnc_tagTestingThread.sqf","text":"/*\r\n * Author: esteldunedain\r\n * Checks if tags are still leaning on an object periodically.\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_tagging_fnc_tagTestingThread\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(tagsToTest) = GVAR(tagsToTest) select {\r\n    _x params [\"_tag\", \"_tagPosASL\", \"_vectorDirAndUp\"];\r\n\r\n    _vectorDirAndUp params [\"_v1\", \"_v2\"];\r\n\r\n    private _endPosASL = _tagPosASL vectorAdd (_v1 vectorMultiply 0.08);\r\n\r\n    // Check for intersections below the unit\r\n    private _intersections = lineIntersectsSurfaces [_tagPosASL, _endPosASL, _tag, objNull, true, 1, \"GEOM\", \"FIRE\"];\r\n\r\n    // If there's no intersections\r\n    if (_intersections isEqualTo []) exitWith {\r\n        TRACE_1(\"No intersections, deleting:\",_tag);\r\n        deleteVehicle _tag;\r\n        false\r\n    };\r\n    true\r\n};\r\n\r\n// If there's no more tag\r\nif (GVAR(tagsToTest) isEqualTo []) exitWith {\r\n    GVAR(testingThread) = false;\r\n};\r\n\r\n// Schedule for execution again after 5 seconds\r\n[DFUNC(tagTestingThread), [], 5] call CBA_fnc_waitAndExecute;\r\nGVAR(testingThread) = true;\r\n"}],"thermals":[],"trenches":[{"name":"ace_trenches_fnc_canContinueDiggingTrench","file":"trenches/functions/fnc_canContinueDiggingTrench.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Checks if a unit can continue digging a trench\r\n *\r\n * Arguments:\r\n * 0: trench <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Can continue <BOOL>\r\n *\r\n * Example:\r\n * [TrenchObj, ACE_player] call ace_trenches_fnc_canContinueDiggingTrench\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_trench\", \"_unit\"];\r\n\r\nif !(\"ACE_EntrenchingTool\" in items _unit) exitWith {false};\r\nif ((_trench getVariable [QGVAR(progress), 0]) >= 1) exitWith {false};\r\n\r\n// Prevent removing/digging trench by more than one person\r\nif (_trench getVariable [QGVAR(digging), false]) exitWith {false};\r\n\r\ntrue\r\n"},{"name":"ace_trenches_fnc_canDigTrench","file":"trenches/functions/fnc_canDigTrench.sqf","text":"/*\r\n * Author: Ruthberg, commy2, esteldunedain\r\n * Checks if a unit can dig a trench\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Can dig <BOOL>\r\n *\r\n * Example:\r\n * [ACE_player] call ace_trenches_fnc_canDigTrench\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define SURFACE_BLACKLIST [\"water\", \"concrete\", \"tarmac\", \"wood\", \"metal\", \"roof_tin\", \"roof_tiles\", \"wood_int\", \"concrete_int\", \"tiles_int\", \"metal_int\", \"stony\", \"rock\", \"int_concrete\", \"int_tiles\", \"int_wood\", \"tiling\", \"wavymetal\", \"int_metal\"]\r\n\r\nparams [\"_unit\"];\r\n\r\nif !(\"ACE_EntrenchingTool\" in items _unit) exitWith {false};\r\n\r\n// Can't dig trench if above ground level\r\nif ((getPosATL _unit) select 2 > 0.05) exitWith {false};\r\n\r\nprivate _surfaceClass = (surfaceType getPosASL _unit) select [1];\r\nprivate _surfaceType = getText (configFile >> \"CfgSurfaces\" >> _surfaceClass >> \"soundEnviron\");\r\nTRACE_1(\"\",_surfaceType);\r\n\r\n!(_surfaceType in SURFACE_BLACKLIST)\r\n"},{"name":"ace_trenches_fnc_canRemoveTrench","file":"trenches/functions/fnc_canRemoveTrench.sqf","text":"/*\r\n * Author: SzwedzikPL\r\n * Checks if a unit can remove a trench\r\n *\r\n * Arguments:\r\n * 0: trench <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * Can remove <BOOL>\r\n *\r\n * Example:\r\n * [TrenchObj, ACE_player] call ace_trenches_fnc_canRemoveTrench\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_trench\", \"_unit\"];\r\n\r\nif !(\"ACE_EntrenchingTool\" in items _unit) exitWith {false};\r\n\r\n// Prevent removing/digging trench by more than one person\r\nif (_trench getVariable [QGVAR(digging), false]) exitWith {false};\r\n\r\ntrue\r\n"},{"name":"ace_trenches_fnc_continueDiggingTrench","file":"trenches/functions/fnc_continueDiggingTrench.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support, esteldunedain\r\n * Continue process of digging trench.\r\n *\r\n * Arguments:\r\n * 0: trench <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [TrenchObj, ACE_player] call ace_trenches_fnc_continueDiggingTrench\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_trench\", \"_unit\"];\r\nTRACE_2(\"continueDiggingTrench\",_trench,_unit);\r\n\r\nprivate _actualProgress = _trench getVariable [QGVAR(progress), 0];\r\nif(_actualProgress == 1) exitWith {};\r\n\r\n// Mark trench as being worked on\r\n_trench setVariable [QGVAR(digging), true, true];\r\n\r\nprivate _digTime = getNumber (configFile >> \"CfgVehicles\" >> (typeof _trench) >> QGVAR(diggingDuration));\r\nprivate _digTimeLeft = _digTime * (1 - _actualProgress);\r\n\r\nprivate _placeData = _trench getVariable [QGVAR(placeData), [[], []]];\r\n_placeData params [\"_basePos\", \"_vecDirAndUp\"];\r\n\r\nprivate _trenchId = _unit getVariable [QGVAR(isDiggingId), -1];\r\nif(_trenchId < 0) then {\r\n    _trenchId = GVAR(trenchId);\r\n    _unit setVariable [QGVAR(isDiggingId), _trenchId, true];\r\n    GVAR(trenchId) = GVAR(trenchId) + 1;\r\n};\r\n\r\n// Create progress bar\r\nprivate _fnc_onFinish = {\r\n    (_this select 0) params [\"_unit\", \"_trench\"];\r\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\r\n    _trench setVariable [QGVAR(digging), false, true];\r\n\r\n    // Save progress global\r\n    private _progress = _trench getVariable [QGVAR(progress), 0];\r\n    _trench setVariable [QGVAR(progress), _progress, true];\r\n\r\n    // Reset animation\r\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\r\n};\r\nprivate _fnc_onFailure = {\r\n    (_this select 0) params [\"_unit\", \"_trench\"];\r\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\r\n    _trench setVariable [QGVAR(digging), false, true];\r\n\r\n    // Save progress global\r\n    private _progress = _trench getVariable [QGVAR(progress), 0];\r\n    _trench setVariable [QGVAR(progress), _progress, true];\r\n\r\n    // Reset animation\r\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\r\n};\r\n[(_digTimeLeft + 0.5), [_unit, _trench], _fnc_onFinish, _fnc_onFailure, localize LSTRING(DiggingTrench)] call EFUNC(common,progressBar);\r\n\r\nif(_actualProgress == 0) then {\r\n    [_unit, _trench, _trenchId, _basePos vectorDiff [0, 0, 1.0], _vecDirAndUp, _actualProgress] call FUNC(setTrenchPlacement);\r\n\r\n    //Remove grass\r\n    {\r\n        private _trenchGrassCutter = createVehicle [\"Land_ClutterCutter_medium_F\", [0, 0, 0], [], 0, \"NONE\"];\r\n        private _cutterPos = AGLToASL (_trench modelToWorld _x);\r\n        _cutterPos set [2, getTerrainHeightASL _cutterPos];\r\n        _trenchGrassCutter setPosASL _cutterPos;\r\n        deleteVehicle _trenchGrassCutter;\r\n    } foreach getArray (configFile >> \"CfgVehicles\" >> (typeof _trench) >> QGVAR(grassCuttingPoints));\r\n};\r\n\r\nprivate _progressLeft = (_actualProgress * 10) + 1;\r\nprivate [\"_i\"];\r\nfor \"_i\" from _progressLeft to 10 do {\r\n    private _vectorDiffZ = 1 - (_i / 10);\r\n    private _delay = _digTime * ((_i / 10) - _actualProgress);\r\n    private _progress = _i / 10;\r\n    [DFUNC(setTrenchPlacement), [_unit, _trench, _trenchId, _basePos vectorDiff [0, 0, _vectorDiffZ], _vecDirAndUp, _progress], _delay] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n// Play animation\r\n[_unit, \"AinvPknlMstpSnonWnonDnon_medic4\"] call EFUNC(common,doAnimation);\r\n"},{"name":"ace_trenches_fnc_handleInteractMenuOpened","file":"trenches/functions/fnc_handleInteractMenuOpened.sqf","text":"/*\r\n * Author: commy2\r\n * Handle opening of interaction menu.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\r\n    [_unit] call FUNC(placeCancel);\r\n};\r\n"},{"name":"ace_trenches_fnc_handleKilled","file":"trenches/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: commy2\r\n * Handle death.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\r\n    [_unit] call FUNC(placeCancel);\r\n};\r\n"},{"name":"ace_trenches_fnc_handlePlayerChanged","file":"trenches/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle player changes.\r\n *\r\n * Arguments:\r\n * 0: New Player Unit <OBJECT>\r\n * 1: Old Player Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_newPlayer\", \"_oldPlayer\"];\r\n\r\nif (_newPlayer getVariable [QGVAR(isPlacing), false]) then {\r\n    [_newPlayer] call FUNC(placeCancel);\r\n};\r\n\r\nif (_oldPlayer getVariable [QGVAR(isPlacing), false]) then {\r\n    [_oldPlayer] call FUNC(placeCancel);\r\n};\r\n"},{"name":"ace_trenches_fnc_handlePlayerInventoryChanged","file":"trenches/functions/fnc_handlePlayerInventoryChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle the InventoryChanged event.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\r\n    if !(\"ACE_EntrenchingTool\" in items _unit) then {\r\n        [_unit] call FUNC(placeCancel);\r\n    };\r\n};\r\n"},{"name":"ace_trenches_fnc_handleScrollWheel","file":"trenches/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg\r\n * Handles sandbag rotation\r\n *\r\n * Arguments:\r\n * 0: scroll amount <NUMBER>\r\n *\r\n * Return Value:\r\n * handled <BOOL>\r\n *\r\n * Example:\r\n * [1.2] call ace_sandbag_fnc_handleScrollWheel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(digPFH) == -1) exitWith {false};\r\n\r\nparams [\"_scroll\"];\r\n\r\nGVAR(digDirection) = GVAR(digDirection) + (_scroll * 5);\r\n\r\ntrue\r\n"},{"name":"ace_trenches_fnc_handleUnconscious","file":"trenches/functions/fnc_handleUnconscious.sqf","text":"/*\r\n * Author: commy2\r\n * Handle unconsciousness.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(isPlacing), false]) then {\r\n    [_unit] call FUNC(placeCancel);\r\n};\r\n"},{"name":"ace_trenches_fnc_placeCancel","file":"trenches/functions/fnc_placeCancel.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support\r\n * Cancels trench dig\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Key <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player] call ace_sandbag_fnc_placeCancel\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_key\"];\r\n\r\nif (_key != 1 || {GVAR(digPFH) == -1}) exitWith {};\r\n\r\n// enable running again\r\n[_unit, \"forceWalk\", \"ACE_Trenches\", false] call EFUNC(common,statusEffect_set);\r\n\r\n// delete placement dummy\r\ndeleteVehicle GVAR(trench);\r\n\r\n// remove digment pfh\r\n[GVAR(digPFH)] call CBA_fnc_removePerFrameHandler;\r\nGVAR(digPFH) = -1;\r\n\r\n// remove mouse button actions\r\ncall EFUNC(interaction,hideMouseHint);\r\n\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Dig), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\n_unit setVariable [QGVAR(isPlacing), false, true];\r\n"},{"name":"ace_trenches_fnc_placeConfirm","file":"trenches/functions/fnc_placeConfirm.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support and esteldunedain\r\n * Confirms trench dig\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player] call ace_trenches_fnc_placeConfirm\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n// enable running again\r\n[_unit, \"forceWalk\", \"ACE_Trenches\", false] call EFUNC(common,statusEffect_set);\r\n\r\n// remove dig pfh\r\n[GVAR(digPFH)] call CBA_fnc_removePerFrameHandler;\r\nGVAR(digPFH) = -1;\r\n\r\n// remove mouse button actions\r\ncall EFUNC(interaction,hideMouseHint);\r\n\r\n[_unit, \"DefaultAction\", _unit getVariable [QGVAR(Dig), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\n_unit setVariable [QGVAR(isPlacing), false, true];\r\n\r\n// Delete placement dummy and create real trench\r\nparams [\"_unit\"];\r\nif (isNull GVAR(trench)) exitWith {};\r\n\r\ndeleteVehicle GVAR(trench);\r\nprivate _trench = createVehicle [GVAR(trenchClass), [0, 0, 0], [], 0, \"NONE\"];\r\n\r\nGVAR(trenchPlacementData) params [\"_dx\", \"_dy\", \"_offset\"];\r\nprivate _basePos = GVAR(trenchPos);\r\nprivate _angle = (GVAR(digDirection) + getDir _unit);\r\n\r\n// _v1 forward from the player, _v2 to the right, _v3 points away from the ground\r\nprivate _v3 = surfaceNormal _basePos;\r\nprivate _v2 = [sin _angle, +cos _angle, 0] vectorCrossProduct _v3;\r\nprivate _v1 = _v3 vectorCrossProduct _v2;\r\n\r\n// Stick the trench to the ground\r\n_basePos set [2, getTerrainHeightASL _basePos];\r\nprivate _minzoffset = 0;\r\nprivate [\"_ix\",\"_iy\"];\r\nfor [{_ix = -_dx/2},{_ix <= _dx/2},{_ix = _ix + _dx/3}] do {\r\n    for [{_iy = -_dy/2},{_iy <= _dy/2},{_iy = _iy + _dy/3}] do {\r\n        private _pos = _basePos vectorAdd (_v2 vectorMultiply _ix)\r\n                                vectorAdd (_v1 vectorMultiply _iy);\r\n        _minzoffset = _minzoffset min ((getTerrainHeightASL _pos) - (_pos select 2));\r\n        #ifdef DEBUG_MODE_FULL\r\n            _pos set [2, getTerrainHeightASL _pos];\r\n            _pos2 = +_pos;\r\n            _pos2 set [2, getTerrainHeightASL _pos + 1];\r\n            drawLine3D [ASLtoAGL _pos, ASLtoAGL _pos2, [1,1,0,1]];\r\n        #endif\r\n    };\r\n};\r\n_basePos set [2, (_basePos select 2) + _minzoffset + _offset];\r\nprivate _vecDirAndUp = [_v1, _v3];\r\nGVAR(trench) = objNull;\r\n\r\n_trench setVariable [QGVAR(placeData), [_basePos, _vecDirAndUp], true];\r\n\r\n[_trench, _unit] call FUNC(continueDiggingTrench);\r\n"},{"name":"ace_trenches_fnc_placeTrench","file":"trenches/functions/fnc_placeTrench.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support, esteldunedain\r\n * Starts the place process for trench.\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: Trench class <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, \"ACE_envelope_small\"] call ace_trenches_fnc_placeTrench\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_trenchClass\"];\r\n\r\n//Load trench data\r\nprivate _noGeoModel = getText (configFile >> \"CfgVehicles\" >> _trenchClass >> QGVAR(noGeoClass));\r\nif(_noGeoModel == \"\") then {_noGeoModel = _trenchClass;};\r\n\r\nGVAR(trenchClass) = _trenchClass;\r\nGVAR(trenchPlacementData) = getArray (configFile >> \"CfgVehicles\" >> _trenchClass >> QGVAR(placementData));\r\nTRACE_1(\"\",GVAR(trenchPlacementData));\r\n\r\n// prevent the placing unit from running\r\n[_unit, \"forceWalk\", \"ACE_Trenches\", true] call EFUNC(common,statusEffect_set);\r\n\r\n// create the trench\r\nprivate \"_trench\";\r\n_trench = createVehicle [_noGeoModel, [0, 0, 0], [], 0, \"NONE\"];\r\n\r\nGVAR(trench) = _trench;\r\n\r\n// prevent collisions with trench\r\n[QEGVAR(common,enableSimulationGlobal), [_trench, false]] call CBA_fnc_serverEvent;\r\n\r\nGVAR(digDirection) = 0;\r\n\r\n// pfh that runs while the dig is in progress\r\nGVAR(digPFH) = [{\r\n    (_this select 0) params [\"_unit\", \"_trench\"];\r\n\r\n    // Cancel if the helper object is gone\r\n    if (isNull _trench) exitWith {\r\n        [_unit] call FUNC(placeCancel);\r\n    };\r\n\r\n    // Cancel if the place is no longer suitable\r\n    if !([_unit] call FUNC(canDigTrench)) exitWith {\r\n        [_unit] call FUNC(placeCancel);\r\n    };\r\n\r\n    // Update trench position\r\n    GVAR(trenchPlacementData) params [\"_dx\", \"_dy\", \"_offset\"];\r\n    private _basePos = eyePos _unit vectorAdd ([sin getDir _unit, +cos getDir _unit, 0] vectorMultiply 1.0);\r\n\r\n    private _angle = (GVAR(digDirection) + getDir _unit);\r\n\r\n    // _v1 forward from the player, _v2 to the right, _v3 points away from the ground\r\n    private _v3 = surfaceNormal _basePos;\r\n    private _v2 = [sin _angle, +cos _angle, 0] vectorCrossProduct _v3;\r\n    private _v1 = _v3 vectorCrossProduct _v2;\r\n\r\n    // Stick the trench to the ground\r\n    _basePos set [2, getTerrainHeightASL _basePos];\r\n    private _minzoffset = 0;\r\n    private [\"_ix\",\"_iy\"];\r\n    for [{_ix = -_dx/2},{_ix <= _dx/2},{_ix = _ix + _dx/3}] do {\r\n        for [{_iy = -_dy/2},{_iy <= _dy/2},{_iy = _iy + _dy/3}] do {\r\n            private _pos = _basePos vectorAdd (_v2 vectorMultiply _ix)\r\n                                    vectorAdd (_v1 vectorMultiply _iy);\r\n            _minzoffset = _minzoffset min ((getTerrainHeightASL _pos) - (_pos select 2));\r\n            #ifdef DEBUG_MODE_FULL\r\n                _pos set [2, getTerrainHeightASL _pos];\r\n                _pos2 = +_pos;\r\n                _pos2 set [2, getTerrainHeightASL _pos + 1];\r\n                drawLine3D [ASLtoAGL _pos, ASLtoAGL _pos2, [1,1,0,1]];\r\n            #endif\r\n        };\r\n    };\r\n    _basePos set [2, (_basePos select 2) + _minzoffset + _offset];\r\n    TRACE_2(\"\",_minzoffset,_offset);\r\n    _trench setPosASL _basePos;\r\n    _trench setVectorDirAndUp [_v1, _v3];\r\n    GVAR(trenchPos) = _basePos;\r\n\r\n}, 0, [_unit, _trench]] call CBA_fnc_addPerFrameHandler;\r\n\r\n// add mouse button action and hint\r\n[localize LSTRING(ConfirmDig), localize LSTRING(CancelDig), localize LSTRING(ScrollAction)] call EFUNC(interaction,showMouseHint);\r\n\r\n_unit setVariable [QGVAR(Dig), [\r\n    _unit, \"DefaultAction\",\r\n    {GVAR(digPFH) != -1},\r\n    {[_this select 0] call FUNC(placeConfirm)}\r\n] call EFUNC(common,addActionEventHandler)];\r\n\r\n_unit setVariable [QGVAR(isPlacing), true, true];\r\n"},{"name":"ace_trenches_fnc_removeTrench","file":"trenches/functions/fnc_removeTrench.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support and esteldunedain\r\n * Removes trench\r\n *\r\n * Arguments:\r\n * 0: trench <OBJECT>\r\n * 1: unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [TrenchObj, ACE_player] call ace_trenches_fnc_removeTrench\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_trench\", \"_unit\"];\r\nTRACE_2(\"removeTrench\",_trench,_unit);\r\n\r\nprivate _actualProgress = _trench getVariable [QGVAR(progress), 0];\r\nif(_actualProgress == 0) exitWith {};\r\n\r\n// Mark trench as being worked on\r\n_trench setVariable [QGVAR(digging), true, true];\r\n\r\nprivate _removeTime = getNumber (configFile >> \"CfgVehicles\" >> (typeof _trench) >> QGVAR(removalDuration));\r\nprivate _removeTimeLeft = _removeTime * _actualProgress;\r\n\r\nprivate _placeData = _trench getVariable [QGVAR(placeData), [[], []]];\r\n_placeData params [\"_basePos\", \"_vecDirAndUp\"];\r\n\r\nprivate _trenchId = _unit getVariable [QGVAR(isDiggingId), -1];\r\nif(_trenchId < 0) then {\r\n    _trenchId = GVAR(trenchId);\r\n    _unit setVariable [QGVAR(isDiggingId), _trenchId, true];\r\n    GVAR(trenchId) = GVAR(trenchId) + 1;\r\n};\r\n\r\n// Create progress bar\r\nprivate _fnc_onFinish = {\r\n    (_this select 0) params [\"_unit\", \"_trench\"];\r\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\r\n\r\n    // Remove trench\r\n    deleteVehicle _trench;\r\n\r\n    // Reset animation\r\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\r\n};\r\nprivate _fnc_onFailure = {\r\n    (_this select 0) params [\"_unit\", \"_trench\"];\r\n    _unit setVariable [QGVAR(isDiggingId), -1, true];\r\n    _trench setVariable [QGVAR(digging), false, true];\r\n\r\n    // Save progress global\r\n    private _progress = _trench getVariable [QGVAR(progress), 0];\r\n    _trench setVariable [QGVAR(progress), _progress, true];\r\n\r\n    // Reset animation\r\n    [_unit, \"\", 1] call EFUNC(common,doAnimation);\r\n};\r\n[(_removeTimeLeft + 0.5), [_unit, _trench], _fnc_onFinish, _fnc_onFailure, localize LSTRING(RemovingTrench)] call EFUNC(common,progressBar);\r\n\r\nprivate _progressLeft = ((1 - _actualProgress) * 10) + 1;\r\nprivate [\"_i\"];\r\nfor \"_i\" from _progressLeft to 10 do {\r\n    private _vectorDiffZ = _i / 10;\r\n    private _delay = _removeTime * ((_i / 10) - (1 - _actualProgress));\r\n    private _progress = 1 - (_i / 10);\r\n\r\n    [DFUNC(setTrenchPlacement), [_unit, _trench, _trenchId, _basePos vectorDiff [0, 0, _vectorDiffZ], _vecDirAndUp, _progress], _delay] call CBA_fnc_waitAndExecute;\r\n};\r\n\r\n// Play animation\r\n[_unit, \"AinvPknlMstpSnonWnonDnon_medic4\"] call EFUNC(common,doAnimation);\r\n"},{"name":"ace_trenches_fnc_setTrenchPlacement","file":"trenches/functions/fnc_setTrenchPlacement.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg, edited by commy2 for better MP and eventual AI support and esteldunedain\r\n * Sets trench placement\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: trench <OBJECT>\r\n * 2: trench id <NUMBER>\r\n * 3: position ASL <ARRAY>\r\n * 4: vector dir and up <ARRAY>\r\n * 5: progress <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, TrenchObj, 2, [0,0,0], [[0,0,0],[0,0,0]], 0.5] call ace_trenches_fnc_setTrenchPlacement\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_trench\", \"_trenchId\", \"_pos\", \"_vecDirAndUp\", \"_progress\"];\r\n\r\n// If the progress bar was cancelled, cancel elevation\r\n// We use an uid to avoid any chance of an older trench being raised when a new one is built\r\nif (_unit getVariable [QGVAR(isDiggingId), -1] != _trenchId) exitWith {};\r\n\r\n_trench setPosASL _pos;\r\n_trench setVectorDirAndUp _vecDirAndUp;\r\n\r\n// Save progress local\r\n_trench setVariable [QGVAR(progress), _progress];\r\n"}],"tripod":[{"name":"ace_tripod_fnc_adjust","file":"tripod/functions/fnc_adjust.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Adjust tripod height\r\n *\r\n * Arguments:\r\n * 0: tripod <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, tripod] call ace_tripod_fnc_adjust\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_tripod\"];\r\n\r\n_unit setVariable [QGVAR(adjusting), true, true];\r\n\r\n// add PFH to adjust the tripod animation\r\nGVAR(adjustPFH) = [{\r\n    (_this select 0) params [\"_unit\", \"_tripod\"];\r\n\r\n    if (!(_unit getVariable [QGVAR(adjusting), false]) || {isNull _tripod} || {_unit distance _tripod > 5}) exitWith {\r\n        call EFUNC(interaction,hideMouseHint);\r\n\r\n        [_unit, \"DefaultAction\", _unit getVariable [QGVAR(Adjust), -1]] call EFUNC(common,removeActionEventHandler);\r\n\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    {\r\n        _tripod animate [_x, 1 - GVAR(height)];\r\n    } count [\"slide_down_tripod\", \"retract_leg_1\", \"retract_leg_2\", \"retract_leg_3\"];\r\n\r\n}, 0, [_unit, _tripod]] call CBA_fnc_addPerFrameHandler;\r\n\r\n// add mouse button action and hint\r\n[localize \"STR_ACE_Tripod_Done\", \"\", localize \"STR_ACE_Tripod_ScrollAction\"] call EFUNC(interaction,showMouseHint);\r\n\r\n_unit setVariable [QGVAR(Adjust), [\r\n    _unit, \"DefaultAction\",\r\n    {GVAR(adjustPFH) != -1},\r\n    {(_this select 0) setVariable [QGVAR(adjusting), false, true]}\r\n] call EFUNC(common,addActionEventHandler)];\r\n"},{"name":"ace_tripod_fnc_handleInteractMenuOpened","file":"tripod/functions/fnc_handleInteractMenuOpened.sqf","text":"/*\r\n * Author: commy2\r\n * Handle opening of interaction menu.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(adjusting), false]) then {\r\n    _unit setVariable [QGVAR(adjusting), false, true];\r\n};\r\n"},{"name":"ace_tripod_fnc_handleKilled","file":"tripod/functions/fnc_handleKilled.sqf","text":"/*\r\n * Author: commy2\r\n * Handle death.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(adjusting), false]) then {\r\n    _unit setVariable [QGVAR(adjusting), false, true];\r\n};\r\n"},{"name":"ace_tripod_fnc_handlePlayerChanged","file":"tripod/functions/fnc_handlePlayerChanged.sqf","text":"/*\r\n * Author: commy2\r\n * Handle player changes.\r\n *\r\n * Arguments:\r\n * 0: New Player Unit <OBJECT>\r\n * 1: Old Player Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_newPlayer\", \"_oldPlayer\"];\r\n\r\nif (_newPlayer getVariable [QGVAR(adjusting), false]) then {\r\n    _newPlayer setVariable [QGVAR(adjusting), false, true];\r\n};\r\n\r\nif (_oldPlayer getVariable [QGVAR(adjusting), false]) then {\r\n    _oldPlayer setVariable [QGVAR(adjusting), false, true];\r\n};\r\n"},{"name":"ace_tripod_fnc_handleScrollWheel","file":"tripod/functions/fnc_handleScrollWheel.sqf","text":"/*\r\n * Author: Garth 'L-H' de Wet, Ruthberg\r\n * Handles sandbag rotation\r\n *\r\n * Arguments:\r\n * 0: scroll amount <NUMBER>\r\n *\r\n * Return Value:\r\n * handled <BOOL>\r\n *\r\n * Example:\r\n * [1.2] call ace_tripod_fnc_handleScrollWheel;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_scroll\"];\r\n\r\nif (GVAR(adjustPFH) == -1) exitWith {false};\r\n\r\nGVAR(height) = 0 max (GVAR(height) + (_scroll / 20)) min 1;\r\n\r\ntrue\r\n"},{"name":"ace_tripod_fnc_handleUnconscious","file":"tripod/functions/fnc_handleUnconscious.sqf","text":"/*\r\n * Author: commy2\r\n * Handle unconsciousness.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\nif (_unit getVariable [QGVAR(adjusting), false]) then {\r\n    _unit setVariable [QGVAR(adjusting), false, true];\r\n};\r\n"},{"name":"ace_tripod_fnc_pickup","file":"tripod/functions/fnc_pickup.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n * Pick up tripod\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: tripod <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, tripod] call ace_tripod_fnc_pickup\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_tripod\"];\r\n\r\nif (stance _unit == \"STAND\") then {\r\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\"] call EFUNC(common,doAnimation);\r\n};\r\n\r\n[{\r\n    params [\"_unit\", \"_tripod\"];\r\n\r\n    if (isNull _tripod) exitWith {};\r\n\r\n    deleteVehicle _tripod;\r\n\r\n    [_unit, \"ACE_Tripod\"] call EFUNC(common,addToInventory);\r\n}, [_unit, _tripod], 1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_tripod_fnc_place","file":"tripod/functions/fnc_place.sqf","text":"/*\r\n * Author: Rocko, Ruthberg\r\n * Place down tripod\r\n *\r\n * Arguments:\r\n * 0: unit <OBJECT>\r\n * 1: tripod class <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, \"ACE_Tripod\"] call ace_tripod_fnc_place\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_tripodClass\"];\r\n\r\n_unit removeItem _tripodClass;\r\n\r\nif (stance _unit == \"STAND\") then {\r\n    [_unit, \"AmovPercMstpSrasWrflDnon_diary\"] call EFUNC(common,doAnimation);\r\n};\r\n\r\n[{\r\n    params [\"_unit\"];\r\n\r\n    private [\"_direction\", \"_position\", \"_tripod\"];\r\n\r\n    _direction = getDir _unit;\r\n    _position = getPosASL _unit vectorAdd [0.8 * sin _direction, 0.8 * cos _direction, 0.02];\r\n\r\n    _tripod = \"ACE_TripodObject\" createVehicle [0, 0, 0];\r\n\r\n    {\r\n        _tripod animate [_x, 1];\r\n    } count [\"slide_down_tripod\", \"retract_leg_1\", \"retract_leg_2\", \"retract_leg_3\"];\r\n\r\n    [{\r\n        (_this select 0) params [\"_tripod\", \"_direction\", \"_position\"];\r\n\r\n        if (_tripod animationPhase \"slide_down_tripod\" == 1) then {\r\n            _tripod setDir _direction;\r\n            _tripod setPosASL _position;\r\n\r\n            if ((getPosATL _tripod select 2) - (getPos _tripod select 2) < 1E-5) then { // if not on object, then adjust to surface normale\r\n                _tripod setVectorUp (surfaceNormal (position _tripod));\r\n            };\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n        };\r\n    }, 0, [_tripod, _direction, _position]] call CBA_fnc_addPerFrameHandler;\r\n\r\n}, [_unit], 1] call CBA_fnc_waitAndExecute;\r\n"}],"ui":[{"name":"ace_ui_fnc_findSetElement","file":"ui/functions/fnc_findSetElement.sqf","text":"/*\r\n * Author: Jonpas\r\n * Finds set element by element name and returns index, source of the set element and state.\r\n *\r\n * Arguments:\r\n * 0: Element Name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"ace_ui_ammoCount\"] call ace_ui_fnc_findSetElement\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_element\"];\r\n\r\n{\r\n    if (_element in _x) exitWith {\r\n        [_forEachIndex, _x select 0, _x select 2]\r\n    };\r\n    [-1, \"\", false]\r\n} forEach GVAR(elementsSet);\r\n"},{"name":"ace_ui_fnc_moduleInit","file":"ui/functions/fnc_moduleInit.sqf","text":"/*\r\n * Author: Jonpas\r\n * Initializes the UI module.\r\n *\r\n * Arguments:\r\n * 0: Module Logic <LOGIC>\r\n * 1: Units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif (!_activated) exitWith {};\r\n\r\n[_logic, QGVAR(allowSelectiveUI), \"allowSelectiveUI\"] call EFUNC(common,readSettingFromModule);\r\n\r\n// Basic\r\nif (isArray (missionConfigFile >> \"showHUD\")) then {\r\n    // HUD visibility is hardcoded in mission config and showHUD command is overriden\r\n    ACE_LOGINFO(\"User Interface Module Failed to Initialize Basic settings - showHUD overriden in mission config!\");\r\n} else {\r\n    [_logic, QGVAR(soldierVehicleWeaponInfo), \"soldierVehicleWeaponInfo\"] call EFUNC(common,readSettingFromModule);\r\n    [_logic, QGVAR(vehicleRadar), \"vehicleRadar\"] call EFUNC(common,readSettingFromModule);\r\n    [_logic, QGVAR(vehicleCompass), \"vehicleCompass\"] call EFUNC(common,readSettingFromModule);\r\n    [_logic, QGVAR(commandMenu), \"commandMenu\"] call EFUNC(common,readSettingFromModule);\r\n    [_logic, QGVAR(groupBar), \"groupBar\"] call EFUNC(common,readSettingFromModule);\r\n};\r\n\r\n// Advanced\r\n[_logic, QGVAR(weaponName), \"weaponName\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(weaponNameBackground), \"weaponNameBackground\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(firingMode), \"firingMode\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(ammoType), \"ammoType\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(ammoCount), \"ammoCount\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(magCount), \"magCount\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(throwableName), \"throwableName\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(throwableCount), \"throwableCount\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(zeroing), \"zeroing\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(weaponLowerInfoBackground), \"weaponLowerInfoBackground\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(stance), \"stance\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(staminaBar), \"staminaBar\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerWeaponName), \"gunnerWeaponName\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerWeaponNameBackground), \"gunnerWeaponNameBackground\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerFiringMode), \"gunnerFiringMode\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerAmmoType), \"gunnerAmmoType\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerAmmoCount), \"gunnerAmmoCount\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerMagCount), \"gunnerMagCount\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerLaunchableName), \"gunnerLaunchableName\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerLaunchableCount), \"gunnerLaunchableCount\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerZeroing), \"gunnerZeroing\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(gunnerWeaponLowerInfoBackground), \"gunnerWeaponLowerInfoBackground\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleName), \"vehicleName\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleNameBackground), \"vehicleNameBackground\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleFuelBar), \"vehicleFuelBar\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleSpeed), \"vehicleSpeed\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleAltitude), \"vehicleAltitude\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleDamage), \"vehicleDamage\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleInfoBackground), \"vehicleInfoBackground\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO_1(\"User Interface Module Initialized. Allow client modifications: %1\",GVAR(allowSelectiveUI));\r\n"},{"name":"ace_ui_fnc_setAdvancedElement","file":"ui/functions/fnc_setAdvancedElement.sqf","text":"/*\r\n * Author: Jonpas\r\n * Sets advanced visible element of the UI using displays and controls.\r\n *\r\n * Arguments:\r\n * 0: Element Name <STRING>\r\n * 1: Show/Hide Element <BOOL>\r\n * 2: Show Hint <BOOL>\r\n * 3: Force change even when disallowed <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * Successfully Set <BOOL>\r\n *\r\n * Example:\r\n * [\"ace_ui_ammoCount\", true, false] call ace_ui_fnc_setAdvancedElement\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_element\", \"_show\", [\"_showHint\", false, [true]], [\"_force\", false, [true]] ];\r\n\r\nif (!_force && {!GVAR(allowSelectiveUI)}) exitWith {\r\n    [LSTRING(Disallowed), 2] call EFUNC(common,displayTextStructured);\r\n    false\r\n};\r\n\r\nprivate _config = configFile >> \"ACE_UI\" >> _element;\r\n\r\n// Exit if main vehicle type condition not fitting\r\nprivate _location = getNumber (_config >> \"location\"); // (0-both, 1-ground, 2-vehicle)\r\nprivate _canUseWeapon = ACE_player call CBA_fnc_canUseWeapon;\r\nif ((_canUseWeapon && _location == 2) || (!_canUseWeapon && _location == 1)) exitWith {false};\r\n\r\nprivate _idd = getNumber (_config >> \"idd\");\r\nprivate _elements = getArray (_config >> \"elements\");\r\n\r\n// Get setting from config API\r\n{\r\n    private _condition = call compile (getText _x);\r\n    if !(_condition) exitWith {\r\n        // Display and print info which component forced the element except for default vehicle check\r\n        if (_showHint) then {\r\n            [LSTRING(Disabled), 2] call EFUNC(common,displayTextStructured);\r\n            ACE_LOGINFO_2(\"Attempted modification of a forced User Interface element '%1' by '%2'\",_element,configName _x);\r\n        };\r\n        _show = false;\r\n    };\r\n} forEach (configProperties [_config >> \"conditions\"]);\r\n\r\n// Get setting from scripted API\r\nif (!_force) then {\r\n    private _setElement = [_element] call FUNC(findSetElement);\r\n    _setElement params [\"_indexSet\", \"_sourceSet\", \"_showSet\"];\r\n\r\n    if (_indexSet != -1) then {\r\n        if (_showHint) then {\r\n            [LSTRING(Disabled), 2] call EFUNC(common,displayTextStructured);\r\n            ACE_LOGINFO_2(\"Attempted modification of a forced User Interface element '%1' by '%2'\",_element,_sourceSet);\r\n        };\r\n        _show = _showSet;\r\n    };\r\n};\r\n\r\n_show = [1, 0] select _show;\r\n\r\n// Disable/Enable elements\r\nprivate _success = false;\r\n{\r\n    private _idc = _x;\r\n\r\n    // Loop through IGUI displays as they can be present several times for some reason\r\n    {\r\n        if (_idd == ctrlIDD _x) then {\r\n            //TRACE_3(\"Setting Element Visibility\",_show,_idd,_idc);\r\n\r\n            (_x displayCtrl _idc) ctrlSetFade _show;\r\n            (_x displayCtrl _idc) ctrlCommit 0;\r\n\r\n            _success = true;\r\n        };\r\n    } forEach (uiNamespace getVariable \"IGUI_displays\");\r\n} forEach _elements;\r\n\r\n_success\r\n"},{"name":"ace_ui_fnc_setElements","file":"ui/functions/fnc_setElements.sqf","text":"/*\r\n * Author: Jonpas\r\n * Sets basic visible elements of the UI using showHUD setter.\r\n *\r\n * Arguments:\r\n * 0: Show Hint <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [false] call ace_ui_fnc_setElements\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [[\"_showHint\", false]];\r\n\r\nif (isArray (missionConfigFile >> \"showHUD\")) exitWith {\r\n    if (_showHint) then {\r\n        [LSTRING(Disabled)] call EFUNC(common,displayTextStructured);\r\n    };\r\n};\r\n\r\n[\"ui\", [\r\n    true,\r\n    GVAR(soldierVehicleWeaponInfo),\r\n    GVAR(vehicleRadar),\r\n    GVAR(vehicleCompass),\r\n    true,\r\n    GVAR(commandMenu),\r\n    GVAR(groupBar),\r\n    true\r\n]] call EFUNC(common,showHud);\r\n"},{"name":"ace_ui_fnc_setElementVisibility","file":"ui/functions/fnc_setElementVisibility.sqf","text":"/*\r\n * Author: Jonpas\r\n * Setter for toggling advanced element visibility.\r\n *\r\n * Arguments:\r\n * 0: Source <STRING>\r\n * 1: Set/Unset <BOOL>\r\n * 2: Element Name <STRING>\r\n * 3: Show/Hide Element <BOOL> (default: false)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [\"ace_reload\", true, \"ace_ui_ammoCount\", false] call ace_ui_fnc_setElementVisibility\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\r\n    [\"_source\", \"\", [\"\"]],\r\n    [\"_set\", true, [true]],\r\n    [\"_element\", \"\", [\"\"]],\r\n    [\"_show\", false, [true]]\r\n];\r\n\r\n// Verify element is bound\r\nif (!isClass (configFile >> \"ACE_UI\" >> _element)) exitWith {\r\n    ACE_LOGWARNING_1(\"Element '%1' does not exist\",_element);\r\n};\r\n\r\nif (_source == \"\" || {_element == \"\"}) exitWith {\r\n    ACE_LOGWARNING(\"Source or Element may not be empty strings!\");\r\n};\r\n\r\nprivate _return = false;\r\n\r\nprivate _setElement = [_element] call FUNC(findSetElement);\r\n_setElement params [\"_indexSet\", \"_sourceSet\"];\r\n\r\nif (_set) then {\r\n    // Exit if element has been set from another component, print warning if after interface initialization\r\n    if (_indexSet != -1) exitWith {\r\n        if (GVAR(interfaceInitialized)) then {\r\n            ACE_LOGWARNING_2(\"Element '%1' already set by %2\",_element,_sourceSet);\r\n        };\r\n    };\r\n\r\n    TRACE_4(\"Setting element\",_source,_element,_show,GVAR(elementsSet));\r\n    private _success = [_element, _show, false, true] call FUNC(setAdvancedElement);\r\n\r\n    if (_success) then {\r\n        GVAR(elementsSet) pushBack [_source, _element, _show];\r\n        _return = true;\r\n    };\r\n} else {\r\n    if (_indexSet != -1) then {\r\n        TRACE_4(\"Unsetting element\",_sourceSet,_element,_show,GVAR(elementsSet));\r\n\r\n        GVAR(elementsSet) deleteAt _indexSet;\r\n\r\n        [_element, _show, false, true] call FUNC(setAdvancedElement);\r\n        _return = true;\r\n    };\r\n};\r\n\r\nTRACE_2(\"Visibility set\",_return,GVAR(elementsSet));\r\n_return\r\n"}],"vector":[{"name":"ace_vector_fnc_adjustBrightness","file":"vector/functions/fnc_adjustBrightness.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate \"_color\";\r\n\r\n_color = [[1,0,0,0.5], [1,0,0,1]] select (_this select 0);\r\n\r\n(_dlgVector displayCtrl 1301) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1302) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1310) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1311) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1312) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1313) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1314) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1315) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1316) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1317) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1318) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1319) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1321) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1322) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1323) ctrlSetTextColor _color;\r\n(_dlgVector displayCtrl 1324) ctrlSetTextColor _color;\r\n\r\nGVAR(illuminate) = _this select 0;\r\n\r\n_this call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_clearDisplay","file":"vector/functions/fnc_clearDisplay.sqf","text":"/*\r\n\r\nby commy2\r\n\r\nClears the vectors control items.\r\n\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nswitch (_this select 0) do {\r\n    case (\"azimuth\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1317) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1318) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1319) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"distance\"): {\r\n        (_dlgVector displayCtrl 1310) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1311) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1312) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n};\r\n"},{"name":"ace_vector_fnc_convertToTexturesDegree","file":"vector/functions/fnc_convertToTexturesDegree.sqf","text":"/* by commy2\r\n\r\nconverts azimuth into array of textures for the vectors scripted info control\r\n\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_number\";\r\n\r\n_number = _this select 0;\r\n\r\nif (GVAR(useMil)) then {\r\n\r\n    _number = round (6400 / 360 * _number);\r\n    if (_number == 6400) then {_number = 0};\r\n\r\n    [_number] call FUNC(convertToTexturesDistance)    // return\r\n\r\n} else {\r\n\r\n    _number = round _number;\r\n\r\n    private \"_isNegative\";\r\n    _isNegative = _number < 0;\r\n\r\n    _number = abs _number;\r\n    if (_number == 360) then {_number = 0};\r\n\r\n    private [\"_digit1\", \"_digit2\", \"_digit3\", \"_digit4\"];\r\n\r\n    _digit1 = floor (_number / 100);\r\n    _digit2 = floor (_number / 10) - _digit1 * 10;\r\n    _digit3 = _number mod 10;\r\n    _digit4 = QPATHTOF(rsc\\vector_degree.paa);\r\n\r\n    if (_isNegative) then {\r\n\r\n        if (_digit1 == 0) then {\r\n            if (_digit2 == 0) then {\r\n                _digit1 = \"\";\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n            } else {\r\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n            };\r\n        } else {\r\n            _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n            _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n            _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n            _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n        };\r\n\r\n    } else {\r\n\r\n        if (_digit1 == 0) then {\r\n            if (_digit2 == 0) then {\r\n                _digit1 = \"\";\r\n                _digit2 = \"\";\r\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n            } else {\r\n                _digit1 = \"\";\r\n                _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n            };\r\n        } else {\r\n            _digit1 = format [QPATHTOF(rsc\\vector_%1.paa), _digit1];\r\n            _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n            _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n        };\r\n\r\n    };\r\n\r\n    [_digit1, _digit2, _digit3, _digit4]    // return\r\n}\r\n"},{"name":"ace_vector_fnc_convertToTexturesDistance","file":"vector/functions/fnc_convertToTexturesDistance.sqf","text":"/* by commy2\r\n\r\nconverts rangefinder distance into array of textures for the vectors scripted info control\r\n\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_number\", \"_isNegative\"];\r\n\r\n_number = _this select 0;\r\n\r\n_number = round _number;\r\n_isNegative = _number < 0;\r\n_number = abs _number;\r\n\r\nif (_number >= 10000) exitWith {\r\n    [QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa)]    // return\r\n};\r\n\r\nprivate [\"_digit1\", \"_digit2\", \"_digit3\", \"_digit4\"];\r\n\r\n_digit1 = floor (_number / 1000);\r\n_digit2 = floor (_number / 100) - _digit1 * 10;\r\n_digit3 = floor (_number / 10) - _digit1 * 100 - _digit2 * 10;\r\n_digit4 = _number mod 10;\r\n\r\nif (_isNegative) then {\r\n\r\n    if (_digit1 == 0) then {\r\n        if (_digit2 == 0) then {\r\n            if (_digit3 == 0) then {\r\n                _digit1 = \"\";\r\n                _digit2 = \"\";\r\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n            } else {\r\n                _digit1 = \"\";\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n            };\r\n        } else {\r\n            _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n            _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n            _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n            _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n        };\r\n    } else {\r\n        _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n        _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n        _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n        _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n    };\r\n\r\n} else {\r\n\r\n    if (_digit1 == 0) then {\r\n        if (_digit2 == 0) then {\r\n            if (_digit3 == 0) then {\r\n                _digit1 = \"\";\r\n                _digit2 = \"\";\r\n                _digit3 = \"\";\r\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n            } else {\r\n                _digit1 = \"\";\r\n                _digit2 = \"\";\r\n                _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n            };\r\n        } else {\r\n            _digit1 = \"\";\r\n            _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n            _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n            _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n        };\r\n    } else {\r\n        _digit1 = format [QPATHTOF(rsc\\vector_%1.paa), _digit1];\r\n        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n        _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n    };\r\n\r\n};\r\n\r\n[_digit1, _digit2, _digit3, _digit4]\r\n"},{"name":"ace_vector_fnc_convertToTexturesFOS","file":"vector/functions/fnc_convertToTexturesFOS.sqf","text":"/* by commy2\r\n\r\nconverts rangefinder distance into array of textures for the vectors scripted info control\r\n\r\n*/\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_number\", \"_coordinate\", \"_isNegative\"];\r\n\r\n_number = _this select 0;\r\n_coordinate = _this select 1;\r\n\r\n_number = round (_number select _coordinate);\r\n_isNegative = _number < 0;\r\n_number = abs _number;\r\n\r\nif (_number > 9999) exitWith {\r\n    [QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa)]    // return\r\n};\r\n\r\nprivate [\"_digit0\", \"_digit1\", \"_digit2\", \"_digit3\", \"_digit4\"];\r\n\r\n_digit0 = \"\";\r\n_digit1 = floor (_number / 1000);\r\n_digit2 = floor (_number / 100) - _digit1 * 10;\r\n_digit3 = floor (_number / 10) - _digit1 * 100 - _digit2 * 10;\r\n_digit4 = _number mod 10;\r\n\r\nswitch (_coordinate) do {\r\n    case 0 : {\r\n\r\n        if (_isNegative) then {\r\n\r\n            if (_digit1 == 0) then {\r\n                if (_digit2 == 0) then {\r\n                    if (_digit3 == 0) then {\r\n                        _digit0 = QPATHTOF(rsc\\vector_l.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit3 = \"\";\r\n                        _digit4 = \"\";\r\n                    } else {\r\n                        _digit0 = QPATHTOF(rsc\\vector_l.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit4 = \"\";\r\n                    };\r\n                } else {\r\n                    _digit0 = QPATHTOF(rsc\\vector_l.paa);\r\n                    _digit1 = \"\";\r\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                };\r\n            } else {\r\n                _digit0 = \"\";\r\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n            };\r\n\r\n        } else {\r\n\r\n            if (_digit1 == 0) then {\r\n                if (_digit2 == 0) then {\r\n                    if (_digit3 == 0) then {\r\n                        _digit0 = QPATHTOF(rsc\\vector_r.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit3 = \"\";\r\n                        _digit4 = \"\";\r\n                    } else {\r\n                        _digit0 = QPATHTOF(rsc\\vector_r.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit4 = \"\";\r\n                    };\r\n                } else {\r\n                    _digit0 = QPATHTOF(rsc\\vector_r.paa);\r\n                    _digit1 = \"\";\r\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                };\r\n            } else {\r\n                _digit0 = \"\";\r\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case 1 : {\r\n\r\n        if (_isNegative) then {\r\n\r\n            if (_digit1 == 0) then {\r\n                if (_digit2 == 0) then {\r\n                    if (_digit3 == 0) then {\r\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit3 = \"\";\r\n                        _digit4 = \"\";\r\n                    } else {\r\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit4 = \"\";\r\n                    };\r\n                } else {\r\n                    _digit0 = QPATHTOF(rsc\\vector_d.paa);\r\n                    _digit1 = \"\";\r\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                };\r\n            } else {\r\n                _digit0 = \"\";\r\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n            };\r\n\r\n        } else {\r\n\r\n            if (_digit1 == 0) then {\r\n                if (_digit2 == 0) then {\r\n                    if (_digit3 == 0) then {\r\n                        _digit0 = QPATHTOF(rsc\\vector_a.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit3 = \"\";\r\n                        _digit4 = \"\";\r\n                    } else {\r\n                        _digit0 = QPATHTOF(rsc\\vector_a.paa);\r\n                        _digit1 = \"\";\r\n                        _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit4 = \"\";\r\n                    };\r\n                } else {\r\n                    _digit0 = QPATHTOF(rsc\\vector_a.paa);\r\n                    _digit1 = \"\";\r\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                };\r\n            } else {\r\n                _digit0 = \"\";\r\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case 2 : {\r\n\r\n        if (_isNegative) then {\r\n\r\n            if (_digit1 == 0) then {\r\n                if (_digit2 == 0) then {\r\n                    if (_digit3 == 0) then {\r\n                        _digit0 = QPATHTOF(rsc\\vector_u.paa);\r\n                        _digit1 = QPATHTOF(rsc\\vector_p.paa);\r\n                        _digit2 = \"\";\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit4 = \"\";\r\n                    } else {\r\n                        _digit0 = QPATHTOF(rsc\\vector_u.paa);\r\n                        _digit1 = QPATHTOF(rsc\\vector_p.paa);\r\n                        _digit2 = \"\";\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                        _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                    };\r\n                } else {\r\n                    _digit0 = QPATHTOF(rsc\\vector_u.paa);\r\n                    _digit1 = QPATHTOF(rsc\\vector_p.paa);\r\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                };\r\n            } else {\r\n                _digit0 = \"\";\r\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n            };\r\n\r\n        } else {\r\n\r\n            if (_digit1 == 0) then {\r\n                if (_digit2 == 0) then {\r\n                    if (_digit3 == 0) then {\r\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\r\n                        _digit1 = QPATHTOF(rsc\\vector_n.paa);\r\n                        _digit2 = \"\";\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                        _digit4 = \"\";\r\n                    } else {\r\n                        _digit0 = QPATHTOF(rsc\\vector_d.paa);\r\n                        _digit1 = QPATHTOF(rsc\\vector_n.paa);\r\n                        _digit2 = \"\";\r\n                        _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                        _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                    };\r\n                } else {\r\n                    _digit0 = QPATHTOF(rsc\\vector_d.paa);\r\n                    _digit1 = QPATHTOF(rsc\\vector_n.paa);\r\n                    _digit2 = format [QPATHTOF(rsc\\vector_%1.paa), _digit2];\r\n                    _digit3 = format [QPATHTOF(rsc\\vector_%1.paa), _digit3];\r\n                    _digit4 = format [QPATHTOF(rsc\\vector_%1.paa), _digit4];\r\n                };\r\n            } else {\r\n                _digit0 = \"\";\r\n                _digit1 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit2 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit3 = QPATHTOF(rsc\\vector_minus.paa);\r\n                _digit4 = QPATHTOF(rsc\\vector_minus.paa);\r\n            };\r\n        };\r\n\r\n    };\r\n};\r\n\r\n// trap errors\r\nif !([_digit0, _digit1, _digit2, _digit3, _digit4] isEqualTypeAll \"\") exitWith {\r\n    [QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa), QPATHTOF(rsc\\vector_minus.paa)]    // return\r\n};\r\n\r\n[_digit0, _digit1, _digit2, _digit3, _digit4]\r\n"},{"name":"ace_vector_fnc_dataTransfer","file":"vector/functions/fnc_dataTransfer.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Data transfer over a connected cable. Based on page 14 of pdf.\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [] call ace_vector_fnc_dataTransfer\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_distance\", \"_direction\", \"_azimuth\", \"_inclination\"];\r\n\r\n_distance = call FUNC(getDistance);\r\n_direction = call FUNC(getDirection);\r\n_azimuth = _direction select 0;\r\n_inclination = _direction select 1;\r\n//Send Data to connected GPS\r\n[QGVAR(rangefinderData), [_distance, _azimuth, _inclination]] call CBA_fnc_localEvent;\r\n"},{"name":"ace_vector_fnc_getDirection","file":"vector/functions/fnc_getDirection.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\n/*\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector, displayNull);\r\n\r\n[\r\n    round parseNumber ctrlText (_dlgVector displayCtrl 156),\r\n    round parseNumber ctrlText (_dlgVector displayCtrl 182)\r\n]\r\n*/\r\n\r\n#define MAX_ABSINCLINATION 45\r\n\r\nprivate [\"_position\", \"_direction\", \"_azimuth\", \"_inclination\"];\r\n\r\n_position = ATLToASL positionCameraToWorld [0,0,0];\r\n_direction = ATLToASL positionCameraToWorld [0,0,1];\r\n\r\n_azimuth = ((_direction select 0) - (_position select 0)) atan2 ((_direction select 1) - (_position select 1));\r\n_inclination = asin ((_direction select 2) - (_position select 2));\r\n\r\nif (_azimuth < 0) then {_azimuth = _azimuth + 360};\r\nif (abs _inclination > MAX_ABSINCLINATION) then {_inclination = -1000};\r\n\r\n[_azimuth, _inclination]\r\n"},{"name":"ace_vector_fnc_getDistance","file":"vector/functions/fnc_getDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\n#define MIN_DISTANCE 10\r\n#define MAX_DISTANCE [6000, 9000] select GVAR(useFeet)\r\n\r\nprivate [\"_dlgVector\", \"_distance\"];\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\n_distance = ctrlText (_dlgVector displayCtrl 151);\r\n\r\nif (_distance == \"----\") exitWith {-1000};\r\n\r\n_distance = round parseNumber _distance;\r\n\r\nif (GVAR(useFeet)) then {\r\n    _distance = 3.28084 * _distance;\r\n};\r\n\r\nif (_distance > MAX_DISTANCE) exitWith {-1000};\r\nif (_distance < MIN_DISTANCE) exitWith {-1000};\r\n\r\n_distance\r\n"},{"name":"ace_vector_fnc_getFallOfShot","file":"vector/functions/fnc_getFallOfShot.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_distanceP1\", \"_directionP1\", \"_azimuthP1\", \"_inclinationP1\", \"_distanceP2\", \"_directionP2\", \"_azimuthP2\", \"_inclinationP2\"];\r\n\r\n_distanceP1 = GVAR(pData) select 0;\r\n_directionP1 = GVAR(pData) select 1;\r\n_azimuthP1 = _directionP1 select 0;\r\n_inclinationP1 = _directionP1 select 1;\r\n\r\n_distanceP2 = call FUNC(getDistance);\r\n_directionP2 = call FUNC(getDirection);\r\n_azimuthP2 = _directionP2 select 0;\r\n_inclinationP2 = _directionP2 select 1;\r\n\r\nprivate [\"_abscissa\", \"_ordinate\", \"_applicate\"];\r\n\r\n_abscissa = _distanceP1 * sin (_azimuthP1 - _azimuthP2);\r\n_ordinate = _distanceP1 * cos (_inclinationP1 - _inclinationP2) - _distanceP2 * cos (_azimuthP1 - _azimuthP2);\r\n_applicate = (sin _inclinationP2 * _distanceP2) - (sin _inclinationP1 * _distanceP1);\r\n\r\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\r\n    [-1000, -1000, -1000]    // return\r\n};\r\n\r\n[_abscissa, _ordinate, _applicate]\r\n"},{"name":"ace_vector_fnc_getHeightDistance","file":"vector/functions/fnc_getHeightDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_distance\", \"_direction\", \"_azimuth\", \"_inclination\"];\r\n\r\n_distance = call FUNC(getDistance);\r\n_direction = call FUNC(getDirection);\r\n\r\n_azimuth = _direction select 0;\r\n_inclination = _direction select 1;\r\n\r\nif (_distance < -999) exitWith {\r\n    [-1000, -1000]    // return\r\n};\r\n\r\n[sin _inclination * _distance, cos _inclination * _distance]\r\n"},{"name":"ace_vector_fnc_getRelativeAzimuthDistance","file":"vector/functions/fnc_getRelativeAzimuthDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_distanceP1\", \"_directionP1\", \"_azimuthP1\", \"_inclinationP1\", \"_distanceP2\", \"_directionP2\", \"_azimuthP2\", \"_inclinationP2\"];\r\n\r\n_distanceP1 = GVAR(pData) select 0;\r\n_directionP1 = GVAR(pData) select 1;\r\n_azimuthP1 = _directionP1 select 0;\r\n_inclinationP1 = _directionP1 select 1;\r\n\r\n_distanceP2 = call FUNC(getDistance);\r\n_directionP2 = call FUNC(getDirection);\r\n_azimuthP2 = _directionP2 select 0;\r\n_inclinationP2 = _directionP2 select 1;\r\n\r\nprivate [\"_relDirection\", \"_relDistance\", \"_relHeight\", \"_relLength\", \"_lenghtP1\", \"_lenghtP2\", \"_relAzimuth\"];\r\n\r\n_relDirection = sqrt ((_azimuthP1 - _azimuthP2) ^ 2 + (_inclinationP1 - _inclinationP2) ^ 2);\r\n_relDistance = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _relDirection);\r\n_relHeight = (sin _inclinationP1 * _distanceP1) - (sin _inclinationP2 * _distanceP2);\r\n_relLength = sqrt (_relDistance ^ 2 - _relHeight ^ 2); if (str(_relLength) == \"-1.#IND\") then {_relLength = 0};\r\n\r\n_lenghtP1 = cos _inclinationP1 * _distanceP1;\r\n_lenghtP2 = cos _inclinationP2 * _distanceP2;\r\n_relAzimuth = (sin _azimuthP2 * _lenghtP2 - sin _azimuthP1 * _lenghtP1) atan2 (cos _azimuthP2 * _lenghtP2 - cos _azimuthP1 * _lenghtP1);\r\nif (_relAzimuth < 0) then {_relAzimuth = _relAzimuth + 360};\r\n\r\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\r\n    [-1000, -1000]    // return\r\n};\r\n\r\n[_relAzimuth, _relLength]\r\n"},{"name":"ace_vector_fnc_getRelativeDistance","file":"vector/functions/fnc_getRelativeDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_distanceP1\", \"_directionP1\", \"_azimuthP1\", \"_inclinationP1\", \"_distanceP2\", \"_directionP2\", \"_azimuthP2\", \"_inclinationP2\"];\r\n\r\n_distanceP1 = GVAR(pData) select 0;\r\n_directionP1 = GVAR(pData) select 1;\r\n_azimuthP1 = _directionP1 select 0;\r\n_inclinationP1 = _directionP1 select 1;\r\n\r\n_distanceP2 = call FUNC(getDistance);\r\n_directionP2 = call FUNC(getDirection);\r\n_azimuthP2 = _directionP2 select 0;\r\n_inclinationP2 = _directionP2 select 1;\r\n\r\nprivate [\"_relDirection\", \"_relDistance\"];\r\n\r\n_relDirection = sqrt ((_azimuthP1 - _azimuthP2) ^ 2 + (_inclinationP1 - _inclinationP2) ^ 2);\r\n_relDistance = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _relDirection);\r\n\r\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\r\n    -1000    // return\r\n};\r\n\r\n_relDistance\r\n"},{"name":"ace_vector_fnc_getRelativeHeightLength","file":"vector/functions/fnc_getRelativeHeightLength.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_distanceP1\", \"_directionP1\", \"_azimuthP1\", \"_inclinationP1\", \"_distanceP2\", \"_directionP2\", \"_azimuthP2\", \"_inclinationP2\"];\r\n\r\n_distanceP1 = GVAR(pData) select 0;\r\n_directionP1 = GVAR(pData) select 1;\r\n_azimuthP1 = _directionP1 select 0;\r\n_inclinationP1 = _directionP1 select 1;\r\n\r\n_distanceP2 = call FUNC(getDistance);\r\n_directionP2 = call FUNC(getDirection);\r\n_azimuthP2 = _directionP2 select 0;\r\n_inclinationP2 = _directionP2 select 1;\r\n\r\nprivate [\"_azimuth\", \"_inclination\", \"_height\", \"_length\"];\r\n\r\n_azimuth = abs (_azimuthP1 - _azimuthP2);\r\n_inclination = abs (_inclinationP1 - _inclinationP2);\r\n_height = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _inclination);\r\n_length = sqrt (_distanceP1 ^ 2 + _distanceP2 ^ 2 - 2 * _distanceP1 * _distanceP2 * cos _azimuth);\r\n\r\nif (_inclination < 0) then {_height = -1 * _height};\r\n\r\nif (_distanceP1 < -999 || {_distanceP2 < -999}) exitWith {\r\n    [-1000, -1000]    // return\r\n};\r\n\r\n[_height, _length]\r\n"},{"name":"ace_vector_fnc_illuminate","file":"vector/functions/fnc_illuminate.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nif (_this select 0) then {\r\n    {\r\n        if (ctrlIDC _x != 170) then {\r\n            private [\"_string\", \"_index\"];\r\n\r\n            _string = ctrlText _x;\r\n            _index = _string find \".paa\";\r\n\r\n            if (_index != -1 && {_string find \"_illum.paa\" == -1}) then {\r\n                _string = toArray _string;\r\n                _string resize _index;\r\n\r\n                _x ctrlSetText format [\"%1_illum.paa\", toString _string];\r\n            };\r\n        };\r\n    } forEach allControls _dlgVector;\r\n} else {\r\n    {\r\n        if (ctrlIDC _x != 170) then {\r\n            private [\"_string\", \"_index\"];\r\n\r\n            _string = ctrlText _x;\r\n            _index = _string find \"_illum.paa\";\r\n\r\n            if (_index != -1) then {\r\n                _string = toArray _string;\r\n                _string resize _index;\r\n\r\n                _x ctrlSetText format [\"%1.paa\", toString _string];\r\n            };\r\n\r\n        };\r\n    } forEach allControls _dlgVector;\r\n};\r\n"},{"name":"ace_vector_fnc_nextMode","file":"vector/functions/fnc_nextMode.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nswitch (_this select 0) do {\r\n    case (\"settings\"): {\r\n        switch (GVAR(configTemp)) do {\r\n            case ([false, false]): {\r\n                GVAR(configTemp) = [false, true];\r\n            };\r\n            case ([false, true]): {\r\n                GVAR(configTemp) = [true, true];\r\n            };\r\n            case ([true, true]): {\r\n                GVAR(configTemp) = [true, false];\r\n            };\r\n            case ([true, false]): {\r\n                GVAR(configTemp) = [false, false];\r\n            };\r\n        };\r\n\r\n        [[\"meter\", \"feet\"] select (GVAR(configTemp) select 0)] call FUNC(showText);\r\n        [[\"deg\",   \"mil\" ] select (GVAR(configTemp) select 1)] call FUNC(showText);\r\n    };\r\n\r\n    case (\"config\"): {\r\n        GVAR(configTemp) = GVAR(configTemp) + 1;\r\n        if (GVAR(configTemp) > 2) then {GVAR(configTemp) = 0};\r\n\r\n        switch (GVAR(configTemp)) do {\r\n            case (0): {\r\n                [\"eret\"] call FUNC(showText);\r\n                [\"off\"]  call FUNC(showText);\r\n            };\r\n            case (1): {\r\n                [\"eret\"] call FUNC(showText);\r\n                [\"on\"]   call FUNC(showText);\r\n            };\r\n            case (2): {\r\n                [\"nigt\"] call FUNC(showText);\r\n                [\"on\"]   call FUNC(showText);\r\n            };\r\n        };\r\n    };\r\n};\r\n"},{"name":"ace_vector_fnc_onKeyDown","file":"vector/functions/fnc_onKeyDown.sqf","text":"/*\r\n\r\nby commy2\r\n\r\nHandles pressing the special vector keys.\r\n\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\n// set vector config settings\r\nswitch (GVAR(modeReticle)) do {\r\n    case (0): {\r\n        [false] call FUNC(adjustBrightness);\r\n        [false] call FUNC(showReticle);\r\n    };\r\n    case (1): {\r\n        [false] call FUNC(adjustBrightness);\r\n        [true] call FUNC(showReticle);\r\n    };\r\n    case (2): {\r\n        [true] call FUNC(adjustBrightness);\r\n        [true] call FUNC(showReticle);\r\n    };\r\n};\r\n\r\nprivate \"_fnc_setPFH\";\r\n_fnc_setPFH = {\r\n    if (GVAR(holdKeyHandler) > -1) then {\r\n        [GVAR(holdKeyHandler)] call CBA_fnc_removePerFrameHandler;\r\n        GVAR(holdKeyHandler) = -1;\r\n    };\r\n\r\n    GVAR(currentMode) = _this;\r\n    GVAR(holdKeyHandler) = [FUNC(onKeyHold), 0, _this] call CBA_fnc_addPerFrameHandler;\r\n};\r\n\r\nswitch (_this select 0) do {\r\n    case (\"azimuth\"): {\r\n        GVAR(keyDownTabCountDistance) = 0;\r\n\r\n        // handle input in option menu\r\n        if (GVAR(currentMode) == \"settings\") exitWith {\r\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 1) exitWith {};\r\n\r\n            if (diag_tickTime < GVAR(keyDownTimeAzimuth) + 0.5) then {\r\n                GVAR(keyDownTabCountAzimuth) = (GETGVAR(keyDownTabCountAzimuth,0)) + 1;\r\n            } else {\r\n                GVAR(keyDownTabCountAzimuth) = 1;\r\n            };\r\n\r\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\r\n        };\r\n\r\n        if (GVAR(currentMode) == \"config\") exitWith {\r\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 0.5) exitWith {};\r\n\r\n            [\"config\"] call FUNC(nextMode);\r\n        };\r\n\r\n        // prevent additinal modifier input if advanced mode it set, spaghetti\r\n        if (GETGVAR(isKeyDownDistance,false) && {GETGVAR(currentMode,\"\") in [\"relative_distance\", \"relative_height+length\"]}) exitWith {};\r\n\r\n        [\"azimuth\"] call FUNC(clearDisplay);\r\n\r\n        GVAR(isKeyDownAzimuth) = true;\r\n        [false] call FUNC(showP1);\r\n\r\n        // handle 5 times clicking\r\n        if (diag_tickTime < GVAR(keyDownTimeAzimuth) + 0.5) then {\r\n            GVAR(keyDownTabCountAzimuth) = (GETGVAR(keyDownTabCountAzimuth,0)) + 1;\r\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\r\n        } else {\r\n            GVAR(keyDownTabCountAzimuth) = 1;\r\n        };\r\n\r\n        // open settings menu\r\n        if (GVAR(keyDownTabCountAzimuth) == 5) exitWith {\r\n            GVAR(keyDownTimeMenu) = diag_tickTime;\r\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\r\n            GVAR(keyDownTabCountAzimuth) = 0;\r\n            GVAR(configTemp) = [GVAR(useFeet), GVAR(useMil)];\r\n            [\"settings\"] call FUNC(showText);\r\n            \"settings\" call _fnc_setPFH;\r\n        };\r\n\r\n        if (diag_tickTime < GVAR(keyDownTimeAzimuth) + 0.5) exitWith {\r\n            \"azimuth+inclination\" call _fnc_setPFH;\r\n        };\r\n\r\n        GVAR(keyDownTimeAzimuth) = diag_tickTime;\r\n\r\n        if (diag_tickTime > GVAR(keyDownTimeDistance) + 0.5) then {\r\n            if !(GETGVAR(isKeyDownDistance,false)) then {\r\n                [\"distance\"] call FUNC(clearDisplay);\r\n                \"azimuth\" call _fnc_setPFH;\r\n            };\r\n        } else {\r\n            if (GETGVAR(isKeyDownDistance,false)) then {\r\n                \"azimuth+distance\" call _fnc_setPFH;\r\n            } else {\r\n                [\"distance\"] call FUNC(clearDisplay);\r\n                \"azimuth\" call _fnc_setPFH;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"distance\"): {\r\n        GVAR(keyDownTabCountAzimuth) = 0;\r\n\r\n        // handle input in option menu\r\n        if (GVAR(currentMode) == \"config\") exitWith {\r\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 0.5) exitWith {};\r\n\r\n            if (diag_tickTime < GVAR(keyDownTimeDistance) + 0.5) then {\r\n                GVAR(keyDownTabCountDistance) = (GETGVAR(keyDownTabCountDistance,0)) + 1;\r\n            } else {\r\n                GVAR(keyDownTabCountDistance) = 1;\r\n            };\r\n\r\n            GVAR(keyDownTimeDistance) = diag_tickTime;\r\n        };\r\n\r\n        if (GVAR(currentMode) == \"settings\") exitWith {\r\n            if (diag_tickTime < GVAR(keyDownTimeMenu) + 0.5) exitWith {};\r\n\r\n            [\"settings\"] call FUNC(nextMode);\r\n        };\r\n\r\n        // prevent additinal modifier input if advanced mode it set, spaghetti\r\n        if (GETGVAR(isKeyDownAzimuth,false) && {GETGVAR(currentMode,\"\") in [\"relative_azimuth+distance\", \"fall_of_shot\"]}) exitWith {};\r\n\r\n        // toggle fos values\r\n        if (GETGVAR(currentMode,\"\") == \"fall_of_shot\") exitWith {\r\n            [!(GETGVAR(FOSState,true))] call FUNC(showFallOfShot);\r\n        };\r\n\r\n        [\"distance\"] call FUNC(clearDisplay);\r\n\r\n        GVAR(isKeyDownDistance) = true;\r\n        [false] call FUNC(showP1);\r\n\r\n        // handle 5 times clicking\r\n        if (diag_tickTime < GVAR(keyDownTimeDistance) + 0.5) then {\r\n            GVAR(keyDownTabCountDistance) = (GETGVAR(keyDownTabCountDistance,0)) + 1;\r\n            GVAR(keyDownTimeDistance) = diag_tickTime;\r\n        } else {\r\n            GVAR(keyDownTabCountDistance) = 1;\r\n        };\r\n\r\n        // open config menu\r\n        if (GVAR(keyDownTabCountDistance) == 5) exitWith {\r\n            GVAR(keyDownTimeMenu) = diag_tickTime;\r\n            GVAR(keyDownTimeDistance) = diag_tickTime;\r\n            GVAR(keyDownTabCountDistance) = 0;\r\n            GVAR(configTemp) = GVAR(modeReticle);\r\n            [\"config\"] call FUNC(showText);\r\n            \"config\" call _fnc_setPFH;\r\n        };\r\n\r\n        if (diag_tickTime < GVAR(keyDownTimeDistance) + 0.5) exitWith {\r\n            \"height+distance\" call _fnc_setPFH;\r\n        };\r\n\r\n        GVAR(keyDownTimeDistance) = diag_tickTime;\r\n\r\n        if (diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5) then {\r\n            if !(GETGVAR(isKeyDownAzimuth,false)) then {\r\n                [\"azimuth\"] call FUNC(clearDisplay);\r\n                \"distance\" call _fnc_setPFH;\r\n            };\r\n        } else {\r\n            if (GETGVAR(isKeyDownAzimuth,false)) then {\r\n                \"azimuth+distance\" call _fnc_setPFH;\r\n            } else {\r\n                [\"azimuth\"] call FUNC(clearDisplay);\r\n                \"distance\" call _fnc_setPFH;\r\n            };\r\n        };\r\n\r\n    };\r\n};\r\n"},{"name":"ace_vector_fnc_onKeyHold","file":"vector/functions/fnc_onKeyHold.sqf","text":"/*\r\n\r\nby commy2\r\n\r\nPFH executed while holding a vector key down.\r\n\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nif (!((currentWeapon ACE_player) isKindOf [\"ACE_Vector\", configFile >> \"CfgWeapons\"])) exitWith {\r\n    [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n    GVAR(currentMode) = \"\";\r\n\r\n    if (GVAR(holdKeyHandler) > -1) then {\r\n        GVAR(holdKeyHandler) = -1;\r\n    };\r\n};\r\n\r\nswitch (_this select 0) do {\r\n    case (\"azimuth\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.2;\r\n\r\n        [false] call FUNC(showCenter);\r\n\r\n        if (_isReady) then {\r\n            call FUNC(showAzimuth);\r\n        };\r\n\r\n        if (!GVAR(isKeyDownAzimuth)) then {\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"distance\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\r\n\r\n        [_isReady] call FUNC(showCenter);\r\n\r\n        if (!GVAR(isKeyDownDistance)) then {\r\n            if (_isReady) then {\r\n                call FUNC(showDistance);\r\n                [false] call FUNC(showCenter);\r\n            };\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"azimuth+distance\"): {\r\n\r\n        call FUNC(showAzimuth);\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\r\n\r\n        [_isReady] call FUNC(showCenter);\r\n\r\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\r\n            if (_isReady) then {\r\n                call FUNC(showDistance);\r\n                [false] call FUNC(showCenter);\r\n                [] call FUNC(dataTransfer);\r\n            };\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"azimuth+inclination\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.2;\r\n\r\n        [false] call FUNC(showCenter);\r\n\r\n        if (_isReady) then {\r\n            call FUNC(showAzimuthInclination);\r\n        };\r\n\r\n        if (!GVAR(isKeyDownAzimuth)) then {\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"height+distance\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\r\n\r\n        [_isReady] call FUNC(showCenter);\r\n\r\n        if (!GVAR(isKeyDownDistance)) then {\r\n            if (_isReady) then {\r\n                call FUNC(showHeightDistance);\r\n                [false] call FUNC(showCenter);\r\n            };\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"relative_distance\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5;\r\n\r\n        [_isReady] call FUNC(showCenter);\r\n\r\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\r\n            if (_isReady) then {\r\n                call FUNC(showRelativeDistance);\r\n            };\r\n            [false] call FUNC(showCenter);\r\n            [false] call FUNC(showP1);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"relative_height+length\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5;\r\n\r\n        [_isReady] call FUNC(showCenter);\r\n\r\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\r\n            if (_isReady) then {\r\n                call FUNC(showRelativeHeightLength);\r\n            };\r\n            [false] call FUNC(showCenter);\r\n            [false] call FUNC(showP1);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"relative_azimuth+distance\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\r\n\r\n        [_isReady] call FUNC(showCenter);\r\n\r\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\r\n            if (_isReady) then {\r\n                call FUNC(showRelativeAzimuthDistance);\r\n            };\r\n            [false] call FUNC(showCenter);\r\n            [false] call FUNC(showP1);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"fall_of_shot\"): {\r\n\r\n        private \"_isReady\";\r\n        _isReady = diag_tickTime > GVAR(keyDownTimeDistance) + 0.5;\r\n\r\n        [_isReady] call FUNC(showCenter);\r\n\r\n        if (!GVAR(isKeyDownAzimuth) && {!GVAR(isKeyDownDistance)}) then {\r\n            if (_isReady) then {\r\n                GVAR(FOSData) = call FUNC(getFallOfShot);\r\n                [false] call FUNC(showFallOfShot);\r\n            };\r\n            [false] call FUNC(showCenter);\r\n            [false] call FUNC(showP1);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n    };\r\n\r\n    case (\"settings\"): {\r\n        if (diag_tickTime < GVAR(keyDownTimeMenu) + 1) exitWith {\r\n            GVAR(keyDownTimeAzimuth) = diag_tickTime;\r\n        };\r\n\r\n        [[\"meter\", \"feet\"] select (GVAR(configTemp) select 0)] call FUNC(showText);\r\n        [[\"deg\",   \"mil\" ] select (GVAR(configTemp) select 1)] call FUNC(showText);\r\n\r\n        if (GVAR(keyDownTabCountAzimuth) >= 5) exitWith {\r\n            GVAR(useFeet) = GVAR(configTemp) select 0;\r\n            GVAR(useMil) = GVAR(configTemp) select 1;\r\n\r\n            [\"clear_left\"] call FUNC(showText);\r\n            [\"clear_right\"] call FUNC(showText);\r\n            [\"stor\"] call FUNC(showText);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            GVAR(currentMode) = \"\";\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n        if (GVAR(keyDownTabCountAzimuth) > 0 && {diag_tickTime > GVAR(keyDownTimeAzimuth) + 0.5}) exitWith {\r\n\r\n            [\"clear_left\"] call FUNC(showText);\r\n            [\"clear_right\"] call FUNC(showText);\r\n            [\"old_settings\"] call FUNC(showText);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            GVAR(currentMode) = \"\";\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n    };\r\n\r\n    case (\"config\"): {\r\n        if (diag_tickTime < GVAR(keyDownTimeMenu) + 1) exitWith {\r\n            GVAR(keyDownTimeDistance) = diag_tickTime;\r\n        };\r\n\r\n        switch (GVAR(configTemp)) do {\r\n            case (0): {\r\n                [\"eret\"] call FUNC(showText);\r\n                [\"off\"]  call FUNC(showText);\r\n            };\r\n            case (1): {\r\n                [\"eret\"] call FUNC(showText);\r\n                [\"on\"]   call FUNC(showText);\r\n            };\r\n            case (2): {\r\n                [\"nigt\"] call FUNC(showText);\r\n                [\"on\"]   call FUNC(showText);\r\n            };\r\n        };\r\n\r\n        if (GVAR(keyDownTabCountDistance) >= 5) exitWith {\r\n            GVAR(modeReticle) = GVAR(configTemp);\r\n\r\n            [\"clear_left\"] call FUNC(showText);\r\n            [\"clear_right\"] call FUNC(showText);\r\n            [\"stor\"] call FUNC(showText);\r\n\r\n            // set new config settings\r\n            switch (GVAR(configTemp)) do {\r\n                case (0): {\r\n                    [false] call FUNC(adjustBrightness);\r\n                    [false] call FUNC(showReticle);\r\n                };\r\n                case (1): {\r\n                    [false] call FUNC(adjustBrightness);\r\n                    [true] call FUNC(showReticle);\r\n                };\r\n                case (2): {\r\n                    [true] call FUNC(adjustBrightness);\r\n                    [true] call FUNC(showReticle);\r\n                };\r\n            };\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            GVAR(currentMode) = \"\";\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n\r\n        if (GVAR(keyDownTabCountDistance) > 0 && {diag_tickTime > GVAR(keyDownTimeDistance) + 0.5}) exitWith {\r\n\r\n            [\"clear_left\"] call FUNC(showText);\r\n            [\"clear_right\"] call FUNC(showText);\r\n            [\"old_config\"] call FUNC(showText);\r\n\r\n            [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n\r\n            GVAR(currentMode) = \"\";\r\n\r\n            if (GVAR(holdKeyHandler) > -1) then {\r\n                GVAR(holdKeyHandler) = -1;\r\n            };\r\n        };\r\n    };\r\n\r\n};\r\n"},{"name":"ace_vector_fnc_onKeyUp","file":"vector/functions/fnc_onKeyUp.sqf","text":"/*\r\n\r\nby commy2\r\n\r\nHandles releasing the special vector keys.\r\n\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_fnc_setPFH\";\r\n_fnc_setPFH = {\r\n    if (GVAR(holdKeyHandler) > -1) then {\r\n        [GVAR(holdKeyHandler)] call CBA_fnc_removePerFrameHandler;\r\n        GVAR(holdKeyHandler) = -1;\r\n    };\r\n\r\n    GVAR(currentMode) = _this;//\r\n    GVAR(holdKeyHandler) = [FUNC(onKeyHold), 0, _this] call CBA_fnc_addPerFrameHandler;\r\n};\r\n\r\nswitch (_this select 0) do {\r\n    case (\"azimuth\"): {\r\n\r\n        GVAR(isKeyDownAzimuth) = false;\r\n\r\n        if (GVAR(isKeyDownDistance)) then {\r\n\r\n            switch (GVAR(currentMode)) do {\r\n                case (\"distance\"): {\r\n                    [\"azimuth\"] call FUNC(clearDisplay);\r\n                    [true] call FUNC(showP1);\r\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\r\n                    \"relative_distance\" call _fnc_setPFH;\r\n                };\r\n\r\n                case (\"height+distance\"): {\r\n                    [\"azimuth\"] call FUNC(clearDisplay);\r\n                    [true] call FUNC(showP1);\r\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\r\n                    \"relative_height+length\" call _fnc_setPFH;\r\n                };\r\n            };\r\n\r\n        };\r\n\r\n    };\r\n\r\n    case (\"distance\"): {\r\n\r\n        GVAR(isKeyDownDistance) = false;\r\n\r\n        if (GVAR(isKeyDownAzimuth)) then {\r\n\r\n            switch (GVAR(currentMode)) do {\r\n                case (\"azimuth\"): {\r\n                    [\"azimuth\"] call FUNC(clearDisplay);\r\n                    [\"distance\"] call FUNC(clearDisplay);\r\n                    [true] call FUNC(showP1);\r\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\r\n                    \"relative_azimuth+distance\" call _fnc_setPFH;\r\n                };\r\n\r\n                case (\"azimuth+inclination\"): {\r\n                    [\"azimuth\"] call FUNC(clearDisplay);\r\n                    [\"distance\"] call FUNC(clearDisplay);\r\n                    [true] call FUNC(showP1);\r\n                    GVAR(pData) = [call FUNC(getDistance), call FUNC(getDirection)];\r\n                    \"fall_of_shot\" call _fnc_setPFH;\r\n                };\r\n            };\r\n\r\n        };\r\n\r\n    };\r\n};\r\n"},{"name":"ace_vector_fnc_showAzimuth","file":"vector/functions/fnc_showAzimuth.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate [\"_direction\", \"_digits\"];\r\n\r\n_direction = call FUNC(getDirection);\r\n\r\n_digits = _direction call FUNC(convertToTexturesDegree);\r\n\r\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showAzimuthInclination","file":"vector/functions/fnc_showAzimuthInclination.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate [\"_direction\", \"_digits\"];\r\n\r\n_direction = call FUNC(getDirection);\r\n\r\n// azimuth\r\n_digits = [_direction select 0] call FUNC(convertToTexturesDegree);\r\n\r\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\r\n\r\n// inclination\r\n_digits = [_direction select 1] call FUNC(convertToTexturesDegree);\r\n\r\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showCenter","file":"vector/functions/fnc_showCenter.sqf","text":"/*\r\n\r\nby commy2\r\n\r\nShows or hides the vectors center square thingy.\r\n\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\n((GETUVAR(ACE_dlgVector,displayNull)) displayCtrl 1301) ctrlSetText ([\"\", QPATHTOF(rsc\\vector_center.paa)] select (_this select 0));\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showDistance","file":"vector/functions/fnc_showDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate [\"_distance\", \"_digits\"];\r\n\r\n_distance = call FUNC(getDistance);\r\n\r\n_digits = [_distance] call FUNC(convertToTexturesDistance);\r\n\r\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showFallOfShot","file":"vector/functions/fnc_showFallOfShot.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nGVAR(FOSState) = _this select 0;\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate \"_fosData\";\r\n\r\n_fosData = GVAR(FOSData);\r\n\r\nif !(_this select 0) then {\r\n    private \"_digits\";\r\n\r\n    // of ordinate\r\n    _digits = [_fosData, 1] call FUNC(convertToTexturesFOS);\r\n\r\n    (_dlgVector displayCtrl 1310) ctrlSetText (_digits select 0);\r\n    (_dlgVector displayCtrl 1311) ctrlSetText (_digits select 1);\r\n    (_dlgVector displayCtrl 1312) ctrlSetText (_digits select 2);\r\n    (_dlgVector displayCtrl 1313) ctrlSetText (_digits select 3);\r\n    (_dlgVector displayCtrl 1314) ctrlSetText (_digits select 4);\r\n\r\n    // of abscissa\r\n    _digits = [_fosData, 0] call FUNC(convertToTexturesFOS);\r\n\r\n    (_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\r\n    (_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\r\n    (_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\r\n    (_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\r\n    (_dlgVector displayCtrl 1319) ctrlSetText (_digits select 4);\r\n\r\n} else {\r\n    private \"_digits\";\r\n\r\n    // applicate\r\n    _digits = [_fosData, 2] call FUNC(convertToTexturesFOS);\r\n\r\n    (_dlgVector displayCtrl 1310) ctrlSetText (_digits select 0);\r\n    (_dlgVector displayCtrl 1311) ctrlSetText (_digits select 1);\r\n    (_dlgVector displayCtrl 1312) ctrlSetText (_digits select 2);\r\n    (_dlgVector displayCtrl 1313) ctrlSetText (_digits select 3);\r\n    (_dlgVector displayCtrl 1314) ctrlSetText (_digits select 4);\r\n\r\n    // nothing\r\n    (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n    (_dlgVector displayCtrl 1316) ctrlSetText \"\";\r\n    (_dlgVector displayCtrl 1317) ctrlSetText \"\";\r\n    (_dlgVector displayCtrl 1318) ctrlSetText \"\";\r\n    (_dlgVector displayCtrl 1319) ctrlSetText \"\";\r\n\r\n};\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showHeightDistance","file":"vector/functions/fnc_showHeightDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate [\"_heightDistance\", \"_digits\"];\r\n\r\n_heightDistance = call FUNC(getHeightDistance);\r\n\r\n// height\r\n_digits = [_heightDistance select 0] call FUNC(convertToTexturesDistance);\r\n\r\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\r\n\r\n// non-slope distance\r\n_digits = [_heightDistance select 1] call FUNC(convertToTexturesDistance);\r\n\r\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showP1","file":"vector/functions/fnc_showP1.sqf","text":"/*\r\n\r\nby commy2\r\n\r\nShows or hides the 1-P text line.\r\n\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nif (_this select 0) then {\r\n    (_dlgVector displayCtrl 1321) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\r\n    (_dlgVector displayCtrl 1322) ctrlSetText QPATHTOF(rsc\\vector_minus.paa);\r\n    (_dlgVector displayCtrl 1323) ctrlSetText QPATHTOF(rsc\\vector_p.paa);\r\n    (_dlgVector displayCtrl 1324) ctrlSetText \"\";\r\n} else {\r\n    (_dlgVector displayCtrl 1321) ctrlSetText \"\";\r\n    (_dlgVector displayCtrl 1322) ctrlSetText \"\";\r\n    (_dlgVector displayCtrl 1323) ctrlSetText \"\";\r\n    (_dlgVector displayCtrl 1324) ctrlSetText \"\";\r\n};\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showRelativeAzimuthDistance","file":"vector/functions/fnc_showRelativeAzimuthDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate [\"_azimuthDistance\", \"_digits\"];\r\n\r\n_azimuthDistance = call FUNC(getRelativeAzimuthDistance);\r\n\r\n// relative azimuth\r\n_digits = [_azimuthDistance select 0] call FUNC(convertToTexturesDegree);\r\n\r\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\r\n\r\n// relative non-slope distance\r\n_digits = [_azimuthDistance select 1] call FUNC(convertToTexturesDistance);\r\n\r\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showRelativeDistance","file":"vector/functions/fnc_showRelativeDistance.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate [\"_distance\", \"_digits\"];\r\n\r\n_distance = call FUNC(getRelativeDistance);\r\n\r\n// relative slope distance\r\n_digits = [_distance] call FUNC(convertToTexturesDistance);\r\n\r\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\r\n"},{"name":"ace_vector_fnc_showRelativeHeightLength","file":"vector/functions/fnc_showRelativeHeightLength.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nprivate [\"_heightLength\", \"_digits\"];\r\n\r\n_heightLength = call FUNC(getRelativeHeightLength);\r\n\r\n// height\r\n_digits = [_heightLength select 0] call FUNC(convertToTexturesDistance);\r\n\r\n(_dlgVector displayCtrl 1311) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1312) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1313) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1314) ctrlSetText (_digits select 3);\r\n\r\n// length\r\n_digits = [_heightLength select 1] call FUNC(convertToTexturesDistance);\r\n\r\n(_dlgVector displayCtrl 1315) ctrlSetText (_digits select 0);\r\n(_dlgVector displayCtrl 1316) ctrlSetText (_digits select 1);\r\n(_dlgVector displayCtrl 1317) ctrlSetText (_digits select 2);\r\n(_dlgVector displayCtrl 1318) ctrlSetText (_digits select 3);\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showReticle","file":"vector/functions/fnc_showReticle.sqf","text":"/*\r\n\r\nby commy2\r\n\r\nShows or hides the electronic reticle.\r\n\r\n*/\r\n#include \"script_component.hpp\"\r\n\r\n((GETUVAR(ACE_dlgVector,displayNull)) displayCtrl 1302) ctrlSetText ([\"\", QPATHTOF(rsc\\vector_crosshair.paa)] select (_this select 0));\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"},{"name":"ace_vector_fnc_showText","file":"vector/functions/fnc_showText.sqf","text":"// by commy2\r\n#include \"script_component.hpp\"\r\n\r\nprivate \"_dlgVector\";\r\n\r\ndisableSerialization;\r\n_dlgVector = GETUVAR(ACE_dlgVector,displayNull);\r\n\r\nswitch (_this select 0) do {\r\n    case (\"config\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_c.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_g.paa);\r\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"settings\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_u.paa);\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_5.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"nigt\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_g.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n    };\r\n\r\n    case (\"eret\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_r.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n    };\r\n\r\n    case (\"on\"): {\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"off\"): {\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\r\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"deg\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_3.paa);\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_6.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_0.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_degree.paa);\r\n    };\r\n\r\n    case (\"mil\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText QPATHTOF(rsc\\vector_6.paa);\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_4.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_0.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_0.paa);\r\n    };\r\n\r\n    case (\"meter\"): {\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_5.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_minus.paa);\r\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_u.paa);\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"feet\"): {\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_e.paa);\r\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"stor\"): {\r\n        (_dlgVector displayCtrl 1321) ctrlSetText QPATHTOF(rsc\\vector_5.paa);\r\n        (_dlgVector displayCtrl 1322) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n        (_dlgVector displayCtrl 1323) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\r\n        (_dlgVector displayCtrl 1324) ctrlSetText QPATHTOF(rsc\\vector_r.paa);\r\n    };\r\n\r\n    case (\"old_config\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_d.paa);\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_c.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\r\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_f.paa);\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"old_settings\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1317) ctrlSetText QPATHTOF(rsc\\vector_o.paa);\r\n        (_dlgVector displayCtrl 1318) ctrlSetText QPATHTOF(rsc\\vector_1.paa);\r\n        (_dlgVector displayCtrl 1319) ctrlSetText QPATHTOF(rsc\\vector_d.paa);\r\n        (_dlgVector displayCtrl 1310) ctrlSetText QPATHTOF(rsc\\vector_u.paa);\r\n        (_dlgVector displayCtrl 1311) ctrlSetText QPATHTOF(rsc\\vector_n.paa);\r\n        (_dlgVector displayCtrl 1312) ctrlSetText QPATHTOF(rsc\\vector_i.paa);\r\n        (_dlgVector displayCtrl 1313) ctrlSetText QPATHTOF(rsc\\vector_t.paa);\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"clear_left\"): {\r\n        (_dlgVector displayCtrl 1315) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1316) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1317) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1318) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1319) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"clear_right\"): {\r\n        (_dlgVector displayCtrl 1310) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1311) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1312) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1313) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1314) ctrlSetText \"\";\r\n    };\r\n\r\n    case (\"clear_stor\"): {\r\n        (_dlgVector displayCtrl 1321) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1322) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1323) ctrlSetText \"\";\r\n        (_dlgVector displayCtrl 1324) ctrlSetText \"\";\r\n    };\r\n};\r\n\r\n[GVAR(illuminate)] call FUNC(illuminate);\r\n"}],"vehiclelock":[{"name":"ace_vehiclelock_fnc_addKeyForVehicle","file":"vehiclelock/functions/fnc_addKeyForVehicle.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Adds a key to a unit that will open a vehicle\r\n * Note: has global effects for Unit (will add items to remote unit)\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Vehicle <OBJECT>\r\n * 2: custom key (true: custom key (magazine)  -  false: side key (item)) <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [ACE_player, car, true] call ACE_VehicleLock_fnc_addKeyForVehicle\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_previousMags\",\"_newMags\",\"_keyMagazine\",\"_keyName\"];\r\n\r\nif (!params [[\"_unit\", objNull, [objNull]], [\"_veh\", objNull, [objNull]], [\"_useCustom\", false, [false]]]) exitWith {\r\n    ERROR(\"Input wrong type\");\r\n};\r\nTRACE_3(\"params\",_unit,_veh,_useCustom);\r\n\r\nif (isNull _unit) exitWith {ERROR(\"null unit\");};\r\nif (isNull _veh) exitWith {ERROR(\"null vehicle\");};\r\n\r\nif (_useCustom) then {\r\n    _previousMags = magazinesDetail _unit;\r\n    _unit addMagazine [\"ACE_key_customKeyMagazine\", 1]; //addMagazine array has global effects\r\n    _newMags = (magazinesDetail _unit) - _previousMags;\r\n    if ((count _newMags) == 0) exitWith {ERROR(\"failed to add magazine (inventory full?)\");};\r\n    _keyMagazine = _newMags select 0;\r\n    TRACE_2(\"setting up key on server\",_veh,_keyMagazine);\r\n    //Have the server run add the key to the vehicle's key array:\r\n    [QGVAR(setupCustomKey), [_veh, _keyMagazine]] call CBA_fnc_serverEvent;\r\n} else {\r\n    _keyName = [_veh] call FUNC(getVehicleSideKey);\r\n    _unit addItem _keyName; //addItem has global effects\r\n};\r\n"},{"name":"ace_vehiclelock_fnc_getVehicleSideKey","file":"vehiclelock/functions/fnc_getVehicleSideKey.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Returns the side specifc key for a vehicle\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * The vehicle's side key classname <STRING>\r\n *\r\n * Example:\r\n * [tank1] call ACE_VehicleLock_fnc_getVehicleSideKey;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_vehConfigSide\",\"_vehSide\",\"_returnValue\"];\r\n\r\nparams [\"_veh\"];\r\nTRACE_1(\"params\",_veh);\r\n\r\nif (isNull _veh) exitWith {ERROR(\"null vehicle\"); \"error\"};\r\n\r\n_vehConfigSide = [_veh, true] call BIS_fnc_objectSide;\r\n_vehSide = _veh getVariable [QGVAR(lockSide), _vehConfigSide];\r\n\r\n_returnValue = \"\";\r\n\r\nswitch (_vehSide) do {\r\ncase (west):       {_returnValue = \"ACE_key_west\"};\r\ncase (east):       {_returnValue = \"ACE_key_east\"};\r\ncase (resistance): {_returnValue = \"ACE_key_indp\"};\r\n    default        {_returnValue = \"ACE_key_civ\"};\r\n};\r\n\r\n_returnValue\r\n"},{"name":"ace_vehiclelock_fnc_handleVehicleInitPost","file":"vehiclelock/functions/fnc_handleVehicleInitPost.sqf","text":"/*\r\n * Author: PabstMirror\r\n * For every lockable vehicle, sets the starting lock state to a sane value.\r\n * Only run if the InitModule is placed.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [car] call ACE_VehicleLock_fnc_handleVehicleInitPost\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {};\r\n\r\nparams [\"_vehicle\"];\r\nTRACE_1(\"params\",_vehicle);\r\n\r\n[{\r\n    //If the module wasn't placed, just exit (needs to be in wait because objectInitEH is before moduleInit)\r\n    if (GVAR(VehicleStartingLockState) == -1) exitWith {};\r\n\r\n    private [\"_lock\"];\r\n\r\n    params [\"_vehicle\"];\r\n\r\n    if ((_vehicle isKindOf \"Car\") || {_vehicle isKindOf \"Tank\"} || {_vehicle isKindOf \"Helicopter\"}) then {\r\n        //set lock state (eliminates the ambigious 1-\"Default\" and 3-\"Locked for Player\" states)\r\n        _lock = switch (GVAR(VehicleStartingLockState)) do {\r\n            case (0): { (locked _vehicle) in [2, 3] };\r\n            case (1): { true };\r\n            case (2): { false };\r\n        };\r\n        if ((_lock && {(locked _vehicle) != 2}) || {!_lock && {(locked _vehicle) != 0}}) then {\r\n            TRACE_3(\"Setting Lock State\",_lock,(typeOf _vehicle),_vehicle);\r\n            [QGVAR(SetVehicleLock), [_vehicle, _lock], [_vehicle]] call CBA_fnc_targetEvent;\r\n        };\r\n    };\r\n    //Delay call until mission start (so everyone has the eventHandler's installed)\r\n}, [_vehicle], 0.25] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_vehiclelock_fnc_hasKeyForVehicle","file":"vehiclelock/functions/fnc_hasKeyForVehicle.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Returns if user has a valid key for the vehicle\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * unit has key for vehicle <BOOL>\r\n *\r\n * Example:\r\n * [bob, car] call ACE_VehicleLock_fnc_hasKeyForVehicle;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_returnValue\",\"_sideKeyName\",\"_customKeys\"];\r\n\r\nparams [\"_unit\", \"_veh\"];\r\nTRACE_2(\"params\",_unit,_veh);\r\n\r\nif (isNull _unit) exitWith {ERROR(\"null unit\"); false};\r\nif (isNull _veh) exitWith {ERROR(\"null vehicle\"); false};\r\n\r\n_returnValue = false;\r\n\r\n//Master can open anything \"no matter what\"\r\nif (\"ACE_key_master\" in (items _unit)) then {_returnValue = true};\r\n\r\n//Check side key\r\n_sideKeyName = [_veh] call FUNC(getVehicleSideKey);\r\nif (_sideKeyName in (items _unit)) then {_returnValue = true};\r\n\r\n//Check custom keys\r\n_customKeys = _veh getVariable [QGVAR(customKeys), []];\r\n{\r\n    if (_x in (magazinesDetail _unit)) then {_returnValue = true;};\r\n} forEach _customKeys;\r\n\r\n_returnValue\r\n"},{"name":"ace_vehiclelock_fnc_lockpick","file":"vehiclelock/functions/fnc_lockpick.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles lockpick functionality.  Three different functions:\r\n * \"canLockpick\": returns BOOL if lockpick is possible\r\n * \"startLockpick\": starts the process\r\n * \"finishLockpick\": on completions, opens the lock\r\n *\r\n * Arguments:\r\n * 0: Unit (player) <OBJECT>\r\n * 1: Vehicle <OBJECT>\r\n * 2: Function Type <OBJECT>\r\n *\r\n * Return Value:\r\n * \"canLockpick\" <BOOL>\r\n *\r\n * Example:\r\n * [ACE_player, ACE_Interaction_Target, 'canLockpick'] call ACE_VehicleLock_fnc_lockpick\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_vehLockpickStrenth\",\"_condition\",\"_returnValue\"];\r\n\r\nparams [\"_unit\", \"_veh\", \"_funcType\"];\r\nTRACE_3(\"params\",_unit,_veh,_funcType);\r\n\r\nif (isNull _unit) exitWith {ERROR(\"null unit\"); false};\r\nif (isNull _veh) exitWith {ERROR(\"null vehicle\"); false};\r\n\r\n//Exit if vehicle unlocked:\r\nif ((locked _veh) == 0) exitWith {false};\r\n\r\n//need lockpick item\r\nif (!(\"ACE_key_lockpick\" in (items _unit))) exitWith {false};\r\n\r\n_vehLockpickStrenth = _veh getVariable[QGVAR(lockpickStrength), GVAR(DefaultLockpickStrength)];\r\nif (!(_vehLockpickStrenth isEqualType 0)) exitWith {ERROR(\"ACE_vehicleLock_LockpickStrength invalid\"); false};\r\n\r\n//-1 indicates unpickable lock\r\nif (_vehLockpickStrenth < 0) exitWith {false};\r\n\r\n//Condition check for progressBar\r\n_condition = {\r\n    params [\"_args\"];\r\n    _args params [\"_unit\", \"_veh\"];\r\n    ((_unit distance _veh) < 5) && {(speed _veh) < 0.1}\r\n};\r\n\r\nif (!([[_unit, _veh]] call _condition)) exitWith {false};\r\n\r\n_returnValue = _funcType in [\"canLockpick\", \"startLockpick\", \"finishLockpick\"];\r\nswitch (_funcType) do {\r\n    case \"startLockpick\": {\r\n        [_vehLockpickStrenth, [_unit, _veh, \"finishLockpick\"], {(_this select 0) call FUNC(lockpick)}, {}, (localize LSTRING(Action_LockpickInUse)), _condition] call EFUNC(common,progressBar);\r\n    };\r\n    case \"finishLockpick\": {\r\n        [QGVAR(setVehicleLock), [_veh, false], [_veh]] call CBA_fnc_targetEvent;\r\n    };\r\n    default {\r\n        ERROR(\"bad function type\");\r\n    };\r\n};\r\n\r\n_returnValue\r\n"},{"name":"ace_vehiclelock_fnc_moduleInit","file":"vehiclelock/functions/fnc_moduleInit.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Function for setup module.  Sets default lockpick strength and default lock state.\r\n *\r\n * Arguments:\r\n * 0: The Module Logic Object <OBJECT>\r\n * 1: synced objects <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [fromModule] call ACE_VehicleLock_fnc_hasKeyForVehicle;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_syncedUnits\", \"_activated\"];\r\nTRACE_3(\"params\",_logic,_syncedObjects,_activated);\r\n\r\nif (!_activated) exitWith {WARNING(\"Vehicle Lock Init Module - placed but not active\");};\r\n\r\n//Set the GVAR for default lockpick strength\r\n[_logic, QGVAR(DefaultLockpickStrength), \"DefaultLockpickStrength\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(LockVehicleInventory), \"LockVehicleInventory\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(VehicleStartingLockState), \"VehicleStartingLockState\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_vehiclelock_fnc_moduleSync","file":"vehiclelock/functions/fnc_moduleSync.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Function for sync module.  Assigns keys for all synced vehicles to any players that are synced.\r\n *\r\n * Arguments:\r\n * 0: The Module Logic Object <OBJECT>\r\n * 1: synced objects <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [fromModule] call ACE_VehicleLock_fnc_moduleSync;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_syncedObjects\", \"_activated\"];\r\nTRACE_3(\"params\",_logic,_syncedObjects,_activated);\r\n\r\nif !(_activated) exitWith {WARNING(\"Vehicle Lock Sync Module - placed but not active\");};\r\n\r\n[{\r\n    private [\"_listOfVehicles\"];\r\n\r\n    params [\"_syncedObjects\"];\r\n\r\n    _listOfVehicles = [];\r\n    {\r\n        if ((_x isKindOf \"Car\") || (_x isKindOf \"Tank\") || (_x isKindOf \"Helicopter\")) then {\r\n            _listOfVehicles pushBack _x;\r\n        };\r\n    } forEach _syncedObjects;\r\n\r\n    if ((count _listOfVehicles) == 0) exitWith {  //Verbose error for mission makers (only shows on server)\r\n        [\"ACE_VehicleLock_fnc_moduleSync: no vehicles synced\"] call BIS_fnc_error;\r\n    };\r\n\r\n    {\r\n        private \"_unit\";\r\n        _unit = _x;\r\n        if (_unit isKindOf \"CAManBase\") then {\r\n            {\r\n                [_unit, _x, true] call FUNC(addKeyForVehicle);\r\n            } forEach _listOfVehicles;\r\n        };\r\n    } forEach _syncedObjects;\r\n\r\n    //Wait to add keys until various gear assigns have finished (~5 seconds)\r\n}, [_syncedObjects], 5, 1] call CBA_fnc_waitAndExecute;\r\n"},{"name":"ace_vehiclelock_fnc_onOpenInventory","file":"vehiclelock/functions/fnc_onOpenInventory.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Handles the inventory opening.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Container <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, car] call ACE_VehicleLock_fnc_onOpenInventory;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_container\"];\r\nTRACE_2(\"params\",_unit,_container);\r\n\r\n//Only check for player:\r\nif (_unit != ace_player) exitWith {};\r\n\r\nif (GVAR(LockVehicleInventory) && //if setting not enabled\r\n        {(vehicle ace_player) == ace_player} && //Player dismounted\r\n        {(_container isKindOf \"Car\") || (_container isKindOf \"Tank\") || (_container isKindOf \"Helicopter\")} && //container is a lockable veh\r\n        {(locked _container) in [2,3]} && //Vehicle is locked\r\n        {!([ace_player, _container] call FUNC(hasKeyForVehicle))} //player doesn't have key\r\n        ) then {\r\n    //Give feedback that vehicle is locked\r\n    playSound \"ACE_Sound_Click\";\r\n\r\n    //For compatibiltiy with ACRE, wait until the display is open, close it and then reopen the player's own inventory\r\n    //ref: http://gitlab.idi-systems.com/idi-systems/acre2-public/issues/70\r\n    [{\r\n        !isNull (findDisplay 602)\r\n    },\r\n    {\r\n        TRACE_1(\"car display open: closing\", _this);\r\n        (findDisplay 602) closeDisplay 0;\r\n        [{\r\n            TRACE_1(\"Opening Player Inventory\", _this);\r\n            ACE_player action [\"Gear\", objNull]\r\n        }, []] call CBA_fnc_execNextFrame;\r\n    },\r\n    []] call CBA_fnc_waitUntilAndExecute;\r\n};\r\n"},{"name":"ace_vehiclelock_fnc_serverSetupCustomKeyEH","file":"vehiclelock/functions/fnc_serverSetupCustomKeyEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * On the server: Adds a key (magazineDetail name) to approved keys for a vehicle.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Magazine Name <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [tank1, \"someMagainze [id xx:yy]\"] call ACE_VehicleLock_fnc_serverSetupCustomKeyEH\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_currentKeys\"];\r\n\r\nparams [\"_veh\", \"_key\"];\r\nTRACE_2(\"params\",_veh,_key);\r\n\r\nif (!isServer) exitWith {ERROR(\"only run on server\");};\r\nif (isNull _veh) exitWith {ERROR(\"null vehicle\");};\r\nif (_key == \"\") exitWith {ERROR(\"empty key string\");};\r\n\r\n_currentKeys = _veh getVariable [QGVAR(customKeys), []];\r\n_currentKeys pushBack _key;\r\n_veh setVariable [QGVAR(customKeys), _currentKeys, true];\r\n"},{"name":"ace_vehiclelock_fnc_setVehicleLockEH","file":"vehiclelock/functions/fnc_setVehicleLockEH.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Sets a vehicle lock state because of a \"ace_vehiclelock_setVehicleLock\" event\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: New lock state <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [tank1, false] call ACE_VehicleLock_fnc_setVehicleLockEH;\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_lockNumber\"];\r\n\r\nparams [\"_veh\", \"_isLocked\"];\r\nTRACE_2(\"params\",_veh,_isLocked);\r\n\r\n_lockNumber = if (_isLocked) then {2} else {0};\r\nTRACE_2(\"Setting Lock State\", _veh, _lockNumber);\r\n_veh lock _lockNumber;\r\n"}],"vehicles":[{"name":"ace_vehicles_fnc_speedLimiter","file":"vehicles/functions/fnc_speedLimiter.sqf","text":"/*\r\n * Author: commy2\r\n * Toggle speed limiter for Driver in Vehicle.\r\n *\r\n * Arguments:\r\n * 0: Driver <OBJECT>\r\n * 1: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, car] call ace_vehicles_fnc_speedLimiter\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_driver\", \"_vehicle\"];\r\n\r\nif (GVAR(isSpeedLimiter)) exitWith {\r\n    [localize LSTRING(Off)] call EFUNC(common,displayTextStructured);\r\n    playSound \"ACE_Sound_Click\";\r\n    GVAR(isSpeedLimiter) = false;\r\n};\r\n\r\n[localize LSTRING(On)] call EFUNC(common,displayTextStructured);\r\nplaySound \"ACE_Sound_Click\";\r\nGVAR(isSpeedLimiter) = true;\r\n\r\nprivate _maxSpeed = speed _vehicle max 10;\r\n\r\n[{\r\n    params [\"_args\", \"_idPFH\"];\r\n    _args params [\"_driver\", \"_vehicle\", \"_maxSpeed\"];\r\n\r\n    if (GVAR(isUAV)) then {\r\n        private _uavControll = UAVControl _vehicle;\r\n        if ((_uavControll select 0) != _driver || _uavControll select 1 != \"DRIVER\") then {\r\n            GVAR(isSpeedLimiter) = false;\r\n        };\r\n    } else {\r\n        if (_driver != driver _vehicle) then {\r\n            GVAR(isSpeedLimiter) = false;\r\n        };\r\n    };\r\n\r\n    if (!GVAR(isSpeedLimiter)) exitWith {\r\n        [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    private _speed = speed _vehicle;\r\n\r\n    if (_speed > _maxSpeed) then {\r\n        _vehicle setVelocity ((velocity _vehicle) vectorMultiply ((_maxSpeed / _speed) - 0.00001));  // fix 1.42-hotfix PhysX libraries applying force in previous direction when turning\r\n    };\r\n\r\n} , 0, [_driver, _vehicle, _maxSpeed]] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_vehicles_fnc_startEngine","file":"vehicles/functions/fnc_startEngine.sqf","text":"/*\r\n * Author: commy2\r\n * Delays engine start of vehicle.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n * 1: Is Engine on <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle player, false] call ace_vehicle_fnc_startEngine\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\", \"_isEngineOn\"];\r\n\r\nif (!_isEngineOn || {floor abs speed _vehicle > 0}) exitWith {};\r\n\r\n[{\r\n    params [\"_args\", \"_idPFH\"];\r\n    _args params [\"_vehicle\", \"_time\", \"_direction\"];\r\n\r\n    if (CBA_missionTime > _time) exitWith { [_idPFH] call CBA_fnc_removePerFrameHandler; };\r\n\r\n    _vehicle setVelocity [0, 0, 0];\r\n    _vehicle setVectorDirAndUp _direction;\r\n\r\n} , 0, [_vehicle, CBA_missionTime + STARTUP_DELAY, [vectorDir _vehicle, vectorUp _vehicle]]] call CBA_fnc_addPerFrameHandler;\r\n"}],"viewdistance":[{"name":"ace_viewdistance_fnc_adaptViewDistance","file":"viewdistance/functions/fnc_adaptViewDistance.sqf","text":"/*\r\n * Author: Winter\r\n * Sets the player's current view distance according to whether s/he is on foot, in a land vehicle or in an air vehicle.\r\n *\r\n * Arguments:\r\n * 0: Show Prompt <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_viewdistance_fnc_adaptViewDistance\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_showPrompt\"];\r\n\r\nif (!GVAR(enabled) || isNull ACE_player) exitWith {};\r\n\r\nprivate _vehicle = vehicle ACE_player;\r\n\r\nprivate _landVehicle = _vehicle isKindOf \"LandVehicle\" || {_vehicle isKindOf \"Ship_F\"};\r\nprivate _airVehicle = _vehicle isKindOf \"Air\";\r\n\r\nif (!_landVehicle && !_airVehicle) exitWith {\r\n    [GVAR(viewDistanceOnFoot), _showPrompt] call FUNC(changeViewDistance);\r\n};\r\n\r\nif (_landVehicle) exitWith {\r\n    [GVAR(viewDistanceLandVehicle), _showPrompt] call FUNC(changeViewDistance);\r\n};\r\n\r\nif (_airVehicle) exitWith {\r\n    [GVAR(viewDistanceAirVehicle), _showPrompt] call FUNC(changeViewDistance);\r\n};\r\n"},{"name":"ace_viewdistance_fnc_changeViewDistance","file":"viewdistance/functions/fnc_changeViewDistance.sqf","text":"/*\r\n * Author: Winter\r\n * Sets the player's current view distance according to allowed values.\r\n *\r\n * Arguments:\r\n * 0: View Distance setting INDEX <NUMBER>\r\n * 1: Show Prompt <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_viewdistance_fnc_changeViewDistance\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_indexRequested\", \"_showPrompt\"];\r\n\r\nprivate _newViewDistance = [_indexRequested] call FUNC(returnValue); // changes the setting index into an actual view distance value\r\nprivate _objectViewDistanceCoeff = [GVAR(objectViewDistanceCoeff)] call FUNC(returnObjectCoeff); // changes the setting index into a coefficient.\r\nprivate _viewDistanceLimit = GVAR(limitViewDistance); // Grab the limit\r\n\r\nTRACE_3(\"Limit\",_newViewDistance,_viewDistanceLimit,_showPrompt);\r\nsetViewDistance (_newViewDistance min _viewDistanceLimit);\r\n\r\nif (_objectViewDistanceCoeff isEqualType 0) then {\r\n    if (_objectViewDistanceCoeff > 0) then {\r\n        setObjectViewDistance (_objectViewDistanceCoeff * viewDistance);\r\n    } else {\r\n        // Restore correct view distance when changing from FoV Based to Off\r\n        // Restoring directly inside PFH's self-exit resulted in the need of selecting another option to take effect\r\n        setObjectViewDistance GVAR(fovBasedPFHminimalViewDistance);\r\n    };\r\n} else {\r\n    if (isNil QGVAR(fovBasedPFHminimalViewDistance)) then {\r\n        GVAR(fovBasedPFHminimalViewDistance) = getObjectViewDistance select 0; // Minimal view distance holder and PFH isRunning variable\r\n        [FUNC(setFovBasedOvdPFH), 0, []] call CBA_fnc_addPerFrameHandler;\r\n    };\r\n};\r\n\r\nif (_showPrompt) then {\r\n    if (GVAR(objectViewDistanceCoeff) > 0) then {\r\n        private _text = \"\";\r\n        // FoV Based or %\r\n        if (GVAR(objectViewDistanceCoeff) == 6) then {\r\n            _text = format [\"<t align='center'>%1 %2<br/>Min. %3<br/>Max. %4</t>\", localize LSTRING(objectinfotext), localize LSTRING(object_fovBased), GVAR(fovBasedPFHminimalViewDistance), viewDistance];\r\n        } else {\r\n            _text = [\r\n                format [\"<t align='center'>%1 %2m\", localize LSTRING(invalid), viewDistance],\r\n                format [\"<t align='center'>%1 %2m\", localize LSTRING(infotext), viewDistance]\r\n            ] select (_newViewDistance <= _viewDistanceLimit);\r\n            _text = _text + format [\"<br/><t align='center'>%1 %2%3</t>\", localize LSTRING(objectinfotext), _objectViewDistanceCoeff * 100, \"%\"];\r\n        };\r\n        [parseText _text, 2] call EFUNC(common,displayTextStructured);\r\n    };\r\n};\r\n"},{"name":"ace_viewdistance_fnc_initModule","file":"viewdistance/functions/fnc_initModule.sqf","text":"/*\r\n * Author: Winter\r\n * Initializes the view distance limiter module.\r\n *\r\n * Arguments:\r\n * 0: logic <OBJECT>\r\n * 1: Synchronised Units <ARRAY>\r\n * 2: Module Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nif (!isServer) exitWith {};\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif (!_activated) exitWith {\r\n    ACE_LOGWARNING(\"View Distance Limit Module is placed but NOT active.\");\r\n};\r\n\r\n[_logic, QGVAR(enabled),\"moduleViewDistanceEnabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(limitViewDistance),\"moduleViewDistanceLimit\"] call EFUNC(common,readSettingFromModule);\r\n\r\nACE_LOGINFO_1(\"View Distance Limit Module Initialized. Limit set by module: %1\",GVAR(limitViewDistance));\r\n"},{"name":"ace_viewdistance_fnc_returnObjectCoeff","file":"viewdistance/functions/fnc_returnObjectCoeff.sqf","text":"/*\r\n * Author: Winter\r\n * Returns the object view distance coefficient according to the given index\r\n *\r\n * Arguments:\r\n * 0: Object View Distance setting Index <NUMBER>\r\n *\r\n * Return Value:\r\n * Object View Distance <NUMBER>\r\n *\r\n * Example:\r\n * [2] call ace_viewdistance_fnc_returnObjectCoeff;\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_index\"];\r\n\r\nswitch (_index) do {\r\n    case 0: {0.00}; // Off\r\n    case 1: {0.20}; // Very Low\r\n    case 2: {0.40}; // Low\r\n    case 3: {0.60}; // Medium\r\n    case 4: {0.80}; // High\r\n    case 5: {1.00}; // Very High\r\n    case 6: {\"fov\"}; // FoV Based\r\n    default {0.50}; // something broke if this returns\r\n};\r\n"},{"name":"ace_viewdistance_fnc_returnValue","file":"viewdistance/functions/fnc_returnValue.sqf","text":"/*\r\n * Author: Winter\r\n * Returns the view distance value according to the given index.\r\n *\r\n * Arguments:\r\n * 0: View Distance Index <NUMBER>\r\n *\r\n * Return Value:\r\n * View Distance <NUMBER>\r\n *\r\n * Example:\r\n * [2] call ace_viewdistance_fnc_returnViewDistanceValue\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_index\"];\r\n\r\nswitch (_index) do {\r\n    case 0: {viewDistance}; // Video Settings option\r\n    case 1: {500};\r\n    case 2: {1000};\r\n    case 3: {1500};\r\n    case 4: {2000};\r\n    case 5: {2500};\r\n    case 6: {3000};\r\n    case 7: {3500};\r\n    case 8: {4000};\r\n    case 9: {5000};\r\n    case 10: {6000};\r\n    case 11: {7000};\r\n    case 12: {8000};\r\n    case 13: {9000};\r\n    case 14: {10000};\r\n    default {1000};\r\n};\r\n"},{"name":"ace_viewdistance_fnc_setFovBasedOvdPFH","file":"viewdistance/functions/fnc_setFovBasedOvdPFH.sqf","text":"/*\r\n * Author: Jonpas\r\n * Sets Object View Distance dynamically based on current Field of View, between Object View Distance (minimal value) and View Distance (maximum value) set before this PFH starts.\r\n *\r\n * Arguments:\r\n * 0: PFH Arguments <ARRAY>\r\n * 1: PFH Handle <NUMBER>\r\n *\r\n * Return Value:\r\n * PFH Handle <NUMBER>\r\n *\r\n * Example:\r\n * [] call ace_viewdistance_fnc_setFovBasedOvdPFH\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"\", \"_idPFH\"];\r\n\r\n// Remove PFH and set Object View Distance back to what it was before\r\nif (GVAR(objectViewDistanceCoeff) < 6) exitWith {\r\n    [_idPFH] call CBA_fnc_removePerFrameHandler;\r\n    GVAR(fovBasedPFHminimalViewDistance) = nil;\r\n};\r\n\r\nprivate _zoom = (call CBA_fnc_getFov) select 1;\r\n\r\nif (_zoom > VD_ZOOM_NORMAL) then {\r\n    // Dynamically set Object View Distance based on player's Zoom Level and View Distance\r\n    if ((vehicle ACE_player) isKindOf \"Air\") then {\r\n        setObjectViewDistance ((_zoom / VD_ZOOM_DIVISION_AIR * (viewDistance - GVAR(fovBasedPFHminimalViewDistance))) + GVAR(fovBasedPFHminimalViewDistance));\r\n    } else {\r\n        setObjectViewDistance ((_zoom / VD_ZOOM_DIVISION * (viewDistance - GVAR(fovBasedPFHminimalViewDistance))) + GVAR(fovBasedPFHminimalViewDistance));\r\n    };\r\n} else {\r\n    if ((vehicle ACE_player) isKindOf \"Air\") then {\r\n        setObjectViewDistance (GVAR(fovBasedPFHminimalViewDistance) + viewDistance / 10);\r\n    } else {\r\n        setObjectViewDistance GVAR(fovBasedPFHminimalViewDistance);\r\n    };\r\n};\r\nTRACE_2(\"FoV Based\",getObjectViewDistance select 0,_zoom);\r\n"}],"weaponselect":[{"name":"ace_weaponselect_fnc_displayGrenadeTypeAndNumber","file":"weaponselect/functions/fnc_displayGrenadeTypeAndNumber.sqf","text":"/*\r\n * Author: esteldunedain, commy2\r\n * Display a grenade type and quantity.\r\n *\r\n * Arguments:\r\n * 0: grenade magazine class <STRING>\r\n * 1: number of grenades <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [currentMagazine player, 3] call ace_weaponselect_fnc_displayGrenadeTypeAndNumber\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif !(GVAR(DisplayText)) exitWith {};\r\n\r\nparams [\"_magazine\", \"_numberofGrenades\"];\r\n\r\nprivate _color = [[1, 0, 0], [1, 1, 1]] select (_numberofGrenades > 0);\r\nprivate _name = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"displayNameShort\");\r\n\r\nprivate _text = [format [\"%1  x%2\", _name, _numberofGrenades], _color] call EFUNC(common,stringToColoredText);\r\nprivate _picture = getText (configFile >> \"CfgMagazines\" >> _magazine >> \"picture\");\r\n\r\n[_text, _picture] call EFUNC(common,displayTextPicture);\r\n"},{"name":"ace_weaponselect_fnc_fireSmokeLauncher","file":"weaponselect/functions/fnc_fireSmokeLauncher.sqf","text":"/*\r\n * Author: commy2\r\n * Fire Vehicle Smoke Launcher.\r\n *\r\n * Arguments:\r\n * 0: Vehicle <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [vehicle player] call ace_weaponselect_fnc_fireSmokeLauncher\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_vehicle\"];\r\n\r\nprivate _turret = _vehicle call EFUNC(common,getTurretCommander);\r\nprivate _weapons = _vehicle weaponsTurret _turret;\r\n\r\nif (\r\n    count _weapons > 1\r\n    || {count _weapons > 0 && {!(_weapons select 0 in [\"SmokeLauncher\", \"BWA3_SmokeLauncher\"])}}  // @todo somebody might use custom smoke launcher weapons aswell, maybe ...\r\n) then {\r\n    //This doesn't work reliably for vehilces with additional weapons for the commander. Select smoke launcher instead.\r\n\r\n    // avoid infinite loop\r\n    if !(\"SmokeLauncher\" in _weapons) exitWith {};\r\n\r\n    private _index = 0;\r\n\r\n    while {\r\n        _vehicle currentWeaponTurret _turret != \"SmokeLauncher\"\r\n    } do {\r\n        [commander _vehicle, _vehicle, _index] call FUNC(selectWeaponVehicle);\r\n        _index = _index + 1;\r\n    };\r\n\r\n} else {\r\n    // fire away!\r\n\r\n    private _logic = createGroup sideLogic createUnit [\"Logic\", [0,0,0], [], 0, \"NONE\"];\r\n\r\n    _logic action [\"useWeapon\", _vehicle, commander _vehicle, 0];\r\n\r\n    deleteVehicle _logic;\r\n};\r\n"},{"name":"ace_weaponselect_fnc_playChangeFiremodeSound","file":"weaponselect/functions/fnc_playChangeFiremodeSound.sqf","text":"/*\r\n * Author: commy2\r\n * Play weapon firemode change sound.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player] call ace_weaponselect_fnc_playChangeFiremodeSound\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\n\r\nprivate _sound = getArray (configFile >> \"CfgWeapons\" >> _weapon >> \"changeFiremodeSound\");\r\n\r\nif (_sound isEqualTo []) exitWith {};\r\n\r\n// get position where to play the sound (position of the weapon)\r\nprivate _position = AGLToASL (_unit modelToWorldVisual (_unit selectionPosition \"RightHand\"));\r\n\r\n_sound params [\"_filename\", [\"_volume\", 1], [\"_soundPitch\", 1], [\"_distance\", 0]];\r\n\r\nif (_filename == \"\") exitWith {};\r\n\r\n// add file extension .wss as default\r\nif !(toLower (_filename select [count _filename - 4]) in [\".wav\", \".ogg\", \".wss\"]) then {\r\n    _filename = format [\"%1.wss\", _filename];\r\n};\r\n\r\nplaySound3D [_filename, objNull, false, _position, _volume, _soundPitch, _distance];\r\n"},{"name":"ace_weaponselect_fnc_putWeaponAway","file":"weaponselect/functions/fnc_putWeaponAway.sqf","text":"/*\r\n * Author: commy2\r\n * The unit will put its current weapon away.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player] call ace_weaponselect_fnc_putWeaponAway\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\"];\r\n\r\n_unit call EFUNC(common,fixLoweredRifleAnimation);\r\n\r\n_unit action [\"SwitchWeapon\", _unit, _unit, 99];\r\n"},{"name":"ace_weaponselect_fnc_selectNextGrenade","file":"weaponselect/functions/fnc_selectNextGrenade.sqf","text":"/*\r\n * Author: commy2\r\n * Select the next grenade.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Grenade type [0: all, 1: frags, 2: non-frags] (default: 0) <NUMBER>\r\n *\r\n * Return Value:\r\n * Selecting successful? <BOOL>\r\n *\r\n * Example:\r\n * [player] call ace_weaponselect_fnc_selectNextGrenade\r\n *\r\n * Public: Yes\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", [\"_type\", 0]];\r\n\r\n// get currently selected grenade\r\nprivate _currentGrenade = currentThrowable _unit;\r\n\r\n// get correct array format if no grenade is selected\r\nif (_currentGrenade isEqualTo []) then {\r\n    _currentGrenade = [\"\", \"\"];\r\n};\r\n\r\n_currentGrenade = _currentGrenade select 0;\r\n\r\n// get available magazines for that unit\r\nprivate _magazines = magazines _unit;\r\n\r\nprivate _grenades = [];\r\n\r\n{\r\n    if (_x in _magazines) then {\r\n        _grenades pushBack _x;\r\n    };\r\n    false\r\n} count ([GVAR(GrenadesAll), GVAR(GrenadesFrag), GVAR(GrenadesNonFrag)] select _type);\r\n\r\n// abort if no grenades are available\r\nif (_grenades isEqualTo []) exitWith {false};\r\n\r\n// get next grenade muzzle\r\nprivate _nextGrenadeIndex = (_grenades find _currentGrenade) + 1;\r\n\r\n// roll over if the last grenade was selected\r\nif (_nextGrenadeIndex >= count _grenades) then {\r\n    _nextGrenadeIndex = 0;\r\n};\r\n\r\nprivate _nextGrenade = _grenades select _nextGrenadeIndex;\r\n\r\n// abort if the same grenade would be selected\r\nif (_currentGrenade == _nextGrenade) exitWith {false};\r\n\r\n// current best method to select a grenade: remove all grenades except the one you want to select, then add them back\r\nprivate _uniformGrenades =  uniformItems  _unit select {_x in GVAR(GrenadesAll) && {_x != _nextGrenade}};\r\nprivate _vestGrenades =     vestItems     _unit select {_x in GVAR(GrenadesAll) && {_x != _nextGrenade}};\r\nprivate _backpackGrenades = backpackItems _unit select {_x in GVAR(GrenadesAll) && {_x != _nextGrenade}};\r\n\r\n// remove all grenades except those we are switching to --> this breaks the selector\r\n{_unit removeItemFromUniform  _x; false} count _uniformGrenades;\r\n{_unit removeItemFromVest     _x; false} count _vestGrenades;\r\n{_unit removeItemFromBackpack _x; false} count _backpackGrenades;\r\n\r\n// readd grenades\r\n{_unit addItemToUniform  _x; false} count _uniformGrenades;\r\n{_unit addItemToVest     _x; false} count _vestGrenades;\r\n{_unit addItemToBackpack _x; false} count _backpackGrenades;\r\n\r\n[_nextGrenade, {_x == _nextGrenade} count _magazines] call FUNC(displayGrenadeTypeAndNumber);\r\n\r\ntrue\r\n"},{"name":"ace_weaponselect_fnc_selectWeaponMode","file":"weaponselect/functions/fnc_selectWeaponMode.sqf","text":"/*\r\n * Author: commy2\r\n * The player will select the specified weapon or will change to the next firing mode if the weapon was already selected.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player] call ace_weaponselect_fnc_selectWeaponMode\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\n\r\nif (_weapon == \"\") exitWith {};\r\n\r\nif (currentWeapon _unit != _weapon) exitWith {\r\n    _unit selectWeapon _weapon;\r\n};\r\n\r\n// unlock safety\r\nif (_weapon in (_unit getVariable [QEGVAR(safemode,safedWeapons), []])) exitWith {\r\n    [_unit, _weapon, _weapon] call EFUNC(safemode,unlockSafety);\r\n};\r\n\r\nprivate _muzzles = [_weapon] call EFUNC(common,getWeaponMuzzles);\r\nprivate _modes = [_weapon] call EFUNC(common,getWeaponModes);\r\n\r\nprivate _index = (_modes find currentWeaponMode _unit) + 1;\r\n\r\nif (_index > count _modes - 1) then {_index = 0};\r\n\r\nprivate _muzzle = _muzzles select 0;\r\nprivate _mode = _modes select _index;\r\n\r\n_index = 0;\r\n\r\nwhile {\r\n    _index < 100 && {currentMuzzle _unit != _muzzle || {currentWeaponMode _unit != _mode}}\r\n} do {\r\n    _unit action [\"SwitchWeapon\", _unit, _unit, _index];\r\n    _index = _index + 1;\r\n};\r\n\r\n// play fire mode selector sound\r\n[_unit, _weapon] call FUNC(playChangeFiremodeSound);\r\n"},{"name":"ace_weaponselect_fnc_selectWeaponMuzzle","file":"weaponselect/functions/fnc_selectWeaponMuzzle.sqf","text":"/*\r\n * Author: commy2\r\n * The player will select the specified weapon and change to the first additional muzzle. E.g. the grenade launcher of a assault rifle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Weapon <STRING>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, currentWeapon player] call ace_weaponselect_fnc_selectWeaponMuzzle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_weapon\"];\r\n\r\nif (_weapon == \"\") exitWith {};\r\n\r\nprivate _muzzles = _weapon call EFUNC(common,getWeaponMuzzles);\r\n\r\nif (currentWeapon _unit != _weapon) exitWith {\r\n    if (count _muzzles > 1) then {\r\n\r\n        // unlock safety\r\n        /*if (_weapon in (_unit getVariable [QEGVAR(safemode,safedWeapons), []])) exitWith {\r\n            [_unit, _weapon, _muzzles select 1] call EFUNC(safemode,unlockSafety);\r\n        };*/\r\n\r\n        _unit selectWeapon (_muzzles select 1);\r\n    };\r\n};\r\n\r\nprivate _index = (_muzzles find currentMuzzle _unit) + 1;\r\n\r\nif (_index > count _muzzles - 1) then {_index = 1};\r\n\r\nprivate _muzzle = _muzzles select _index;\r\n\r\n_index = 0;\r\nwhile {\r\n    _index < 100 && {currentMuzzle _unit != _muzzle}\r\n} do {\r\n    _unit action [\"SwitchWeapon\", _unit, _unit, _index];\r\n    _index = _index + 1;\r\n};\r\n"},{"name":"ace_weaponselect_fnc_selectWeaponVehicle","file":"weaponselect/functions/fnc_selectWeaponVehicle.sqf","text":"/*\r\n * Author: commy2\r\n * Select weapon for unit in vehicle.\r\n *\r\n * Arguments:\r\n * 0: Unit <OBJECT>\r\n * 1: Vehicle <OBJECT>\r\n * 2: Weapon index <NUMBER>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [player, vehicle player, 1] call ace_weaponselect_fnc_selectWeaponVehicle\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\", \"_vehicle\", \"_index\"];\r\n\r\nprivate _turret = _unit call EFUNC(common,getTurretIndex);\r\n\r\nif (_turret isEqualTo [] && {_unit == driver _vehicle}) then {\r\n    private _weapons = weapons _vehicle;\r\n\r\n    if (_index > count _weapons - 1) exitWith {};\r\n\r\n    private _weapon = _weapons select _index;\r\n\r\n    _index = 0;\r\n\r\n    while {\r\n        _index < 100 && {currentWeapon _vehicle != _weapon}\r\n    } do {\r\n        _unit action [\"SwitchWeapon\", _vehicle, _unit, _index];\r\n        _index = _index + 1;\r\n    };\r\n} else {\r\n    private _weapons = _vehicle weaponsTurret _turret;\r\n\r\n    if (_index > count _weapons - 1) exitWith {};\r\n\r\n    private _weapon = _weapons select _index;\r\n\r\n    _index = 0;\r\n\r\n    while {\r\n        _index < 100 && {_vehicle currentWeaponTurret _turret != _weapon}\r\n    } do {\r\n        _unit action [\"SwitchWeapon\", _vehicle, _unit, _index];\r\n        _index = _index + 1;\r\n    };\r\n};\r\n"},{"name":"ace_weaponselect_fnc_throwGrenade","file":"weaponselect/functions/fnc_throwGrenade.sqf","text":"/*\r\n * Author: commy2\r\n * Display Grenade information on grenade throw. Called from the unified fired EH only for the local player.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile] call ace_weaponselect_fnc_throwGrenade\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nif (_weapon != \"Throw\") exitWith {};\r\n\r\nprivate _count = {_x == _magazine} count magazines _unit;\r\n\r\n[_magazine, _count] call FUNC(displayGrenadeTypeAndNumber);\r\n\r\nif (_count == 0) then {\r\n    if (GVAR(CurrentGrenadeMuzzleIsFrag)) then {GVAR(CurrentGrenadeMuzzleFrag) = \"\"} else {GVAR(CurrentGrenadeMuzzleOther) = \"\"};\r\n};\r\n"}],"weather":[{"name":"ace_weather_fnc_calculateAirDensity","file":"weather/functions/fnc_calculateAirDensity.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the air density\r\n *\r\n * Arguments:\r\n * 0: temperature - degrees celsius <NUMBER>\r\n * 1: pressure - hPa <NUMBER>\r\n * 2: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\r\n *\r\n * Return Value:\r\n * density of air - kg * m^(-3) <NUMBER>\r\n *\r\n * Example:\r\n * [0, 1020, 0.5] call ace_weather_fnc_calculateAirDensity\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_temperature\", \"_pressure\", \"_relativeHumidity\"];\r\n\r\n_pressure = _pressure * 100; // hPa to Pa\r\n\r\nif (_relativeHumidity > 0) then {\r\n    // Saturation vapor pressure calculated according to: http://wahiduddin.net/calc/density_algorithms.htm\r\n    private _pSat = 6.1078 * 10 ^ ((7.5 * _temperature) / (_temperature + 237.3));\r\n    private _vaporPressure = _relativeHumidity * _pSat;\r\n    private _partialPressure = _pressure - _vaporPressure;\r\n\r\n    (_partialPressure * DRY_AIR_MOLAR_MASS + _vaporPressure * WATER_VAPOR_MOLAR_MASS) / (UNIVERSAL_GAS_CONSTANT * KELVIN(_temperature))\r\n} else {\r\n    _pressure / (SPECIFIC_GAS_CONSTANT_DRY_AIR * KELVIN(_temperature))\r\n};\r\n"},{"name":"ace_weather_fnc_calculateBarometricPressure","file":"weather/functions/fnc_calculateBarometricPressure.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the barometric pressure based on altitude and weather\r\n *\r\n * Arguments:\r\n * altitude - meters <NUMBER>\r\n *\r\n * Return Value:\r\n * barometric pressure - hPA <NUMBER>\r\n *\r\n * Example:\r\n * 0 call ace_weather_fnc_calculateBarometricPressure\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n((1013.25 - 10 * overcast) * (1 - (0.0065 * (EGVAR(common,mapAltitude) + _this)) / (KELVIN(GVAR(currentTemperature)) + 0.0065 * EGVAR(common,mapAltitude))) ^ 5.255754495);\r\n"},{"name":"ace_weather_fnc_calculateDensityAltitude","file":"weather/functions/fnc_calculateDensityAltitude.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates density altitude for a given air density\r\n *\r\n * Arguments:\r\n * density of air - kg * m^(-3) <NUMBER>\r\n *\r\n * Return Value:\r\n * density altitude - m <NUMBER>\r\n *\r\n * Example:\r\n * 1.225 call ace_weather_fnc_calculateDensityAltitude\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Source: http://wahiduddin.net/calc/density_altitude.htm\r\n\r\n((44.3308 - 42.2665 * _this ^ 0.2349692456) * 1000)\r\n"},{"name":"ace_weather_fnc_calculateDewPoint","file":"weather/functions/fnc_calculateDewPoint.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates dew point based on temperature and relative humidity\r\n *\r\n * Arguments:\r\n * 0: temperature - degrees celsius <NUMBER>\r\n * 1: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\r\n *\r\n * Return Value:\r\n * dew point <NUMBER>\r\n *\r\n * Example:\r\n * [32, 0.4] call ace_weather_fnc_calculateDewPoint\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __b 17.67\r\n#define __c 243.5\r\n\r\nparams [\"_t\", \"_rh\"];\r\n\r\nif (_rh == 0) exitWith { CELSIUS(0) };\r\n\r\n// Source: https://en.wikipedia.org/wiki/Dew_point\r\n\r\nprivate _gamma = ln(_rh) + (__b * _t) / (__c + _t);\r\n\r\n(__c * _gamma) / (__b - _gamma)\r\n"},{"name":"ace_weather_fnc_calculateHeatIndex","file":"weather/functions/fnc_calculateHeatIndex.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates heat index based on temperature and relative humidity\r\n *\r\n * Arguments:\r\n * 0: temperature - degrees celsius <NUMBER>\r\n * 1: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\r\n *\r\n * Return Value:\r\n * heat index <NUMBER>\r\n *\r\n * Example:\r\n * [36, 0.75] call ace_weather_fnc_calculateHeatIndex\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __C1 0.363445176\r\n#define __C2 0.988622465\r\n#define __C3 4.777114035\r\n#define __C4 -0.114037667\r\n#define __C5 -0.000850208\r\n#define __C6 -0.020716198\r\n#define __C7 0.000687678\r\n#define __C8  0.000274954\r\n\r\nparams [\"_t\", \"_rh\"];\r\n\r\n// Source: https://en.wikipedia.org/wiki/Heat_index\r\n\r\n_t = TO_FAHRENHEIT(_t);\r\n_rh = _rh * 100; // relative humidity in %\r\n\r\nTO_CELSIUS(__C1 + __C2 * _t + __C3 * _rh + __C4 * _t * _rh + __C5 * _t^2 + __C6 * _rh^2 + __C7 * _t^2 * _rh + __C8 * _t * _rh^2)\r\n"},{"name":"ace_weather_fnc_calculateRoughnessLength","file":"weather/functions/fnc_calculateRoughnessLength.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the terrain roughness length at a given world position\r\n *\r\n * Arguments:\r\n * world position <posASL>\r\n *\r\n * Return Value:\r\n * roughness length <NUMBER>\r\n *\r\n * Example:\r\n * (getPosASL player) call ace_weather_fnc_calculateRoughnessLength\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Source: http://es.ucsc.edu/~jnoble/wind/extrap/index.html\r\n#define ROUGHNESS_LENGTHS [0.0002, 0.0005, 0.0024, 0.03, 0.055, 0.1, 0.2, 0.4, 0.8, 1.6]\r\n\r\nprivate _windSource = _this vectorDiff ((vectorNormalized ACE_wind) vectorMultiply 25);\r\n\r\nprivate _nearBuildings = count (_windSource nearObjects [\"Building\", 50]);\r\nprivate _isWater = surfaceIsWater _windSource;\r\n\r\nif (_nearBuildings == 0 && _isWater) exitWith {\r\n    0.0005\r\n};\r\n\r\nif (_nearBuildings >= 10) exitWith {\r\n    1.6\r\n};\r\n\r\nROUGHNESS_LENGTHS select (2 + (_nearBuildings min 6))\r\n"},{"name":"ace_weather_fnc_calculateSpeedOfSound","file":"weather/functions/fnc_calculateSpeedOfSound.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the speed of sound for a given temperature\r\n *\r\n * Arguments:\r\n * temperature - degrees celsius <NUMBER>\r\n *\r\n * Return Value:\r\n * speed of sound - m/s <NUMBER>\r\n *\r\n * Example:\r\n * 0 call ace_weather_fnc_calculateSpeedOfSound\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(331.3 + (0.6 * _this))\r\n"},{"name":"ace_weather_fnc_calculateTemperatureAtHeight","file":"weather/functions/fnc_calculateTemperatureAtHeight.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the temperature based on altitude and weather\r\n *\r\n * Arguments:\r\n * height - meters <NUMBER>\r\n *\r\n * Return Value:\r\n * temperature - degrees celsius <NUMBER>\r\n *\r\n * Example:\r\n * 500 call ace_weather_fnc_calculateTemperatureAtHeight\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n(GVAR(currentTemperature) - 0.0065 * _this)\r\n"},{"name":"ace_weather_fnc_calculateWetBulb","file":"weather/functions/fnc_calculateWetBulb.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates wet bulb based on temperature and relative humidity\r\n *\r\n * Arguments:\r\n * 0: temperature - degrees celsius <NUMBER>\r\n * 1: pressure - hPa <NUMBER>\r\n * 2: relativeHumidity - value between 0.0 and 1.0 <NUMBER>\r\n *\r\n * Return Value:\r\n * wet bulb <NUMBER>\r\n *\r\n * Example:\r\n * [0, 1020, 0.5] call ace_weather_fnc_calculateWetBulb\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_temperature\", \"_pressure\", \"_relativeHumidity\"];\r\n\r\n// Source: http://cosmoquest.org/forum/showthread.php?155366-Calculating-Wet-Bulb-Temperature-from-RH-amp-Dry-Bulb\r\nprivate _es = 6.112 * exp((17.67 * _temperature) / (_temperature + 243.5));\r\nprivate _e = _es * _relativeHumidity;\r\nprivate _eDiff = _es - _e;\r\nprivate _eGuessPrev = _es;\r\nprivate _cTempDelta = 3.3145;\r\nprivate _twGuess = _temperature;\r\n\r\nfor \"_j\" from 1 to 50 do {\r\n    _twGuess = _twGuess - _cTempDelta;\r\n    private _eguess = 6.112 * exp((17.67 * _twGuess) / (_twGuess + 243.5));\r\n    _eguess = _eguess - (_pressure * (_temperature - _twGuess) * 0.00066 * (1 + (0.00115 * _twGuess)));\r\n    _eDiff = _eguess - _e;\r\n    if (abs(_eDiff) <= 0.001) exitWith {};\r\n    _cTempDelta = _eDiff / ((_eguessprev - _eguess) / _cTempDelta);\r\n    _eguessprev = _eguess;\r\n};\r\n\r\n_twGuess\r\n"},{"name":"ace_weather_fnc_calculateWindChill","file":"weather/functions/fnc_calculateWindChill.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates wind chill based on temperature and wind speed\r\n *\r\n * Arguments:\r\n * 0: temperature - degrees celsius <NUMBER>\r\n * 1: wind speed - m/s <NUMBER>\r\n *\r\n * Return Value:\r\n * wind chill <NUMBER>\r\n *\r\n * Example:\r\n * [0, 10] call ace_weather_fnc_calculateWindChill\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_t\", \"_v\"];\r\n\r\n// Source: https://en.wikipedia.org/wiki/Wind_chill\r\n\r\nif (_t > 10) exitWith { _t };\r\nif (_v < 1.39) exitWith { _t };\r\n\r\n_v = _v * 3,6; // wind speed in km/h\r\n(13.12 + 0.6215 * _t - 11.37 * _v ^ 0.16 + 0.3965 * _t * _v ^ 0.16)\r\n"},{"name":"ace_weather_fnc_calculateWindSpeed","file":"weather/functions/fnc_calculateWindSpeed.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Calculates the true wind speed at a given world position\r\n *\r\n * Arguments:\r\n * 0: world position - posASL <POSTION>\r\n * 1: Account for wind gradient (used in advanced ballistics) <BOOL>\r\n * 2: Account for terrain <BOOL>\r\n * 3: Account for obstacles <BOOL>\r\n *\r\n * Return Value:\r\n * wind speed - m/s <NUMBER>\r\n *\r\n * Example:\r\n * [eyePos ACE_player, true, true, true] call ace_weather_fnc_calculateWindSpeed;\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_position\", \"_windGradientEnabled\", \"_terrainEffectEnabled\", \"_obstacleEffectEnabled\"];\r\n\r\nprivate _fnc_polar2vect = {\r\n    params [\"_mag\",\"_dir\",\"_elev\"];\r\n    private _mag2D = _mag * cos(_elev);\r\n    [_mag2D * sin(_dir), _mag2D * cos(_dir), _mag * sin(_elev)];\r\n};\r\n\r\nprivate _windSpeed = vectorMagnitude ACE_wind;\r\nprivate _windDir = (ACE_wind select 0) atan2 (ACE_wind select 1);\r\nprivate _windDirAdjusted = _windDir + 180;\r\n\r\n// Wind gradient\r\nif (_windGradientEnabled) then {\r\n    if (_windSpeed > 0.05) then {\r\n        private _height = (ASLToATL _position) select 2;\r\n        _height = 0 max _height min 20;\r\n        if (_height < 20) then {\r\n            private _roughnessLength = _position call FUNC(calculateRoughnessLength);\r\n            _windSpeed = _windSpeed * abs(ln(_height / _roughnessLength) / ln(20 / _roughnessLength));\r\n        };\r\n    };\r\n};\r\n\r\n// Terrain effect on wind\r\nif (_terrainEffectEnabled) then {\r\n    if (_windSpeed > 0.05) then {\r\n        private _newWindSpeed = 0;\r\n        {\r\n            private _windSource = [100, _windDirAdjusted, _x] call _fnc_polar2vect;\r\n            if (!(terrainIntersectASL [_position, _position vectorAdd _windSource])) exitWith {\r\n                _newWindSpeed = cos(_x * 9) * _windSpeed;\r\n            };\r\n            _windSource = [100, _windDirAdjusted + _x, 0] call _fnc_polar2vect;\r\n            if (!(terrainIntersectASL [_position, _position vectorAdd _windSource])) exitWith {\r\n                _newWindSpeed = cos(_x * 9) * _windSpeed;\r\n            };\r\n            _windSource = [100, _windDirAdjusted - _x, 0] call _fnc_polar2vect;\r\n            if (!(terrainIntersectASL [_position, _position vectorAdd _windSource])) exitWith {\r\n                _newWindSpeed = cos(_x * 9) * _windSpeed;\r\n            };\r\n            nil\r\n        } count [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        _windSpeed = _newWindSpeed;\r\n    };\r\n};\r\n\r\n// Obstacle effect on wind\r\nif (_obstacleEffectEnabled) then {\r\n    if (_windSpeed > 0.05) then {\r\n        private _newWindSpeed = 0;\r\n        {\r\n            private _windSource = [20, _windDirAdjusted, _x] call _fnc_polar2vect;\r\n            if (!(lineIntersects [_position, _position vectorAdd _windSource])) exitWith {\r\n                _newWindSpeed = cos(_x * 2) * _windSpeed;\r\n            };\r\n            _windSource = [20, _windDirAdjusted + _x, 0] call _fnc_polar2vect;\r\n            if (!(lineIntersects [_position, _position vectorAdd _windSource])) exitWith {\r\n                _newWindSpeed = cos(_x * 2) * _windSpeed;\r\n            };\r\n            _windSource = [20, _windDirAdjusted - _x, 0] call _fnc_polar2vect;\r\n            if (!(lineIntersects [_position, _position vectorAdd _windSource])) exitWith {\r\n                _newWindSpeed = cos(_x * 2) * _windSpeed;\r\n            };\r\n            nil\r\n        } count [0, 5, 10, 15, 20, 25, 30, 35, 40, 45];\r\n        _windSpeed = _newWindSpeed;\r\n    };\r\n};\r\n\r\n_windSpeed = 0 max _windSpeed;\r\n\r\n_windSpeed\r\n"},{"name":"ace_weather_fnc_displayWindInfo","file":"weather/functions/fnc_displayWindInfo.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Displays a wind info (colored arrow) in the top left corner of the screen\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_displayWindInfo\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __dsp (uiNamespace getVariable \"RscWindIntuitive\")\r\n#define __ctrl (__dsp displayCtrl 132948)\r\n\r\nif (GVAR(WindInfo)) exitWith {\r\n    GVAR(WindInfo) = false;\r\n    ([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\n    true\r\n};\r\n\r\nEGVAR(advanced_ballistics,Protractor) = false;\r\n1 cutText [\"\", \"PLAIN\"];\r\nGVAR(WindInfo) = true;\r\n\r\n\r\nTRACE_1(\"Starting Wind Info PFEH\", GVAR(WindInfo));\r\n\r\n[{\r\n    disableSerialization;\r\n    params [\"\", \"_pfID\"];\r\n\r\n    if ((!GVAR(WindInfo)) || {!([ACE_player, ACE_player, []] call EFUNC(common,canInteractWith))}) exitWith {\r\n        TRACE_1(\"Ending Wind Info PFEH\", GVAR(WindInfo));\r\n        GVAR(WindInfo) = false;\r\n        ([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutText [\"\", \"PLAIN\"];\r\n        [_pfID] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    //Keeps the display open:\r\n    ([\"RscWindIntuitive\"] call BIS_fnc_rscLayer) cutRsc [\"RscWindIntuitive\", \"PLAIN\", 1, false];\r\n\r\n    private _windSpeed = if (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false]) then {\r\n        // With wind gradient\r\n        [eyePos ACE_player, true, true, true] call FUNC(calculateWindSpeed);\r\n    } else {\r\n        // Without wind gradient\r\n        [eyePos ACE_player, false, true, true] call FUNC(calculateWindSpeed);\r\n    };\r\n\r\n\r\n    private _playerDir = (ACE_player call CBA_fnc_headDir) select 0;\r\n    private _windDir = (ACE_wind select 0) atan2 (ACE_wind select 1);\r\n    _windDir = 30 * (round(((_windDir - _playerDir + 360) % 360) / 30));\r\n\r\n    // Color Codes from https://en.wikipedia.org/wiki/Beaufort_scale#Modern_scale\r\n    private _beaufortNumber = 0;\r\n    private _windColor = [1, 1, 1, 1];\r\n    if (_windSpeed > 0.3) then { _windColor = [0.796, 1, 1, 1]; _beaufortNumber = 1; };\r\n    if (_windSpeed > 1.5) then { _windColor = [0.596, 0.996, 0.796, 1]; _beaufortNumber = 2; };\r\n    if (_windSpeed > 3.3) then { _windColor = [0.596, 0.996, 0.596, 1]; _beaufortNumber = 3; };\r\n    if (_windSpeed > 5.4) then { _windColor = [0.6, 0.996, 0.4, 1]; _beaufortNumber = 4; };\r\n    if (_windSpeed > 7.9) then { _windColor = [0.6, 0.996, 0.047, 1]; _beaufortNumber = 5; };\r\n    if (_windSpeed > 10.7) then { _windColor = [0.8, 0.996, 0.059, 1]; _beaufortNumber = 6; };\r\n    if (_windSpeed > 13.8) then { _windColor = [1, 0.996, 0.067, 1]; _beaufortNumber = 7; };\r\n    if (_windSpeed > 17.1) then { _windColor = [1, 0.796, 0.051, 1]; _beaufortNumber = 8; };\r\n    if (_windSpeed > 20.7) then { _windColor = [1, 0.596, 0.039, 1]; _beaufortNumber = 9; };\r\n    if (_windSpeed > 24.4) then { _windColor = [1, 0.404, 0.031, 1]; _beaufortNumber = 10; };\r\n    if (_windSpeed > 28.4) then { _windColor = [1, 0.22, 0.027, 1]; _beaufortNumber = 11; };\r\n    if (_windSpeed > 32.6) then { _windColor = [1, 0.078, 0.027, 1]; _beaufortNumber = 12; };\r\n\r\n\r\n    TRACE_3(\"update display\",_beaufortNumber,_windDir,_windSpeed);\r\n    __ctrl ctrlSetTextColor _windColor;\r\n    if (_beaufortNumber > 0) then {\r\n        __ctrl ctrlSetText QPATHTOF(UI\\wind_arrow_ca.paa);\r\n        __ctrl ctrlSetAngle [_windDir, 0.5, 0.5];\r\n    } else {\r\n        __ctrl ctrlSetText QPATHTOF(UI\\wind_noneCircle_ca.paa);\r\n    };\r\n    __ctrl ctrlCommit 0;\r\n\r\n    //Update the beaufort balls:\r\n    (ctrlPosition __ctrl) params [\"_ctrlX\", \"_ctrlY\", \"_ctrlWidth\", \"_ctrlHeight\"];\r\n    private _centerX = _ctrlX + _ctrlWidth / 2;\r\n    private _centerY = _ctrlY + _ctrlHeight / 2;\r\n    private _ballHeight = _ctrlHeight / 17;\r\n    private _ballWidth = _ballHeight * 3/4;\r\n\r\n    for \"_index\" from 0 to (_beaufortNumber - 1) do {\r\n        private _ball = __dsp ctrlCreate [\"RscPicture\", _index];\r\n        _ball ctrlSetText QPATHTOF(UI\\wind_dot_ca.paa);\r\n        _ball ctrlSetTextColor [1,1,1,1];\r\n        private _ballCenterX = _centerX - (_ballWidth / 2) + ((sin _windDir) * 0.013333) * (_index - 4.9) + ((cos _windDir) * 0.0125);\r\n        private _ballCenterY = _centerY - (_ballHeight / 2) - ((1 * cos _windDir) * 4/3*0.013333) * (_index - 4.9) + ((sin _windDir) * 0.0125);\r\n        _ball ctrlSetPosition [_ballCenterX, _ballCenterY, _ballWidth, _ballHeight];\r\n        _ball ctrlCommit 0;\r\n    };\r\n\r\n}, 0.5, []] call CBA_fnc_addPerFrameHandler;\r\n\r\ntrue\r\n"},{"name":"ace_weather_fnc_getMapData","file":"weather/functions/fnc_getMapData.sqf","text":"/*\r\n * Author: Ruthberg, esteldunedain\r\n * Get the weather data for the current map\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_getMapData\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Assume default wind values\r\n// Source: https://weatherspark.com/averages/32194/Lemnos-Limnos-North-Aegean-Islands-Greece\r\nGVAR(WindSpeedMax) = [[8.8, 5.5], [8.8, 5], [8.6, 4.8], [7.6, 3.4], [7.0, 3.0], [7.1, 3.0], [7.5, 3.1], [8.0, 3.2], [7.6, 3.5], [7.8, 4.6], [7.9, 5.0], [8.2, 5.5]];\r\nGVAR(WindSpeedMean) = [4.8, 4.9, 4.6, 4.1, 3.5, 3.5, 4.3, 4.4, 4.1, 4.5, 4.5, 5.0];\r\nGVAR(WindSpeedMin) = [[0.2, 5.0], [0.1, 5.0], [0.2, 4.3], [0.0, 3.0], [0.0, 2.1], [0.0, 2.0], [0.1, 3.1], [0.3, 3.1], [0.0, 3.6], [0.0, 4.2], [0.1, 5.0], [0.2, 5.5]];\r\nGVAR(WindDirectionProbabilities) = [\r\n    [0.06, 0.32, 0.05, 0.04, 0.15, 0.06, 0.02, 0.02], // January\r\n    [0.08, 0.32, 0.04, 0.04, 0.18, 0.06, 0.02, 0.02], // February\r\n    [0.09, 0.30, 0.04, 0.04, 0.20, 0.06, 0.02, 0.03], // March\r\n    [0.10, 0.25, 0.03, 0.04, 0.22, 0.06, 0.02, 0.04], // April\r\n    [0.18, 0.25, 0.03, 0.04, 0.18, 0.04, 0.01, 0.05], // May\r\n    [0.25, 0.25, 0.03, 0.03, 0.15, 0.03, 0.00, 0.08], // June\r\n    [0.32, 0.30, 0.02, 0.02, 0.10, 0.01, 0.00, 0.09], // July\r\n    [0.28, 0.35, 0.02, 0.01, 0.08, 0.01, 0.00, 0.08], // August\r\n    [0.20, 0.37, 0.03, 0.01, 0.11, 0.01, 0.01, 0.05], // September\r\n    [0.10, 0.39, 0.04, 0.02, 0.15, 0.02, 0.01, 0.03], // October\r\n    [0.08, 0.38, 0.06, 0.04, 0.19, 0.03, 0.02, 0.02], // November\r\n    [0.06, 0.37, 0.05, 0.03, 0.18, 0.04, 0.02, 0.02]  // December\r\n];\r\n\r\n// Check if the wind data is defined in the map config\r\nif (isArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_WindSpeedMean\")) then {\r\n    GVAR(WindSpeedMin)               = getArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_WindSpeedMin\");\r\n    GVAR(WindSpeedMean)              = getArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_WindSpeedMean\");\r\n    GVAR(WindSpeedMax)               = getArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_WindSpeedMax\");\r\n    GVAR(WindDirectionProbabilities) = getArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_WindDirectionProbabilities\");\r\n};\r\n\r\n// Check if the weather data is defined in the map config\r\nif (isArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_TempDay\")) exitWith {\r\n    GVAR(TempDay)   = getArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_TempDay\");\r\n    GVAR(TempNight) = getArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_TempNight\");\r\n    GVAR(Humidity)  = getArray (configFile >> \"CfgWorlds\" >> worldName >> \"ACE_Humidity\");\r\n};\r\n\r\n// Check if the map is among the most popular\r\nif (toLower worldName in [\"chernarus\", \"bootcamp_acr\", \"woodland_acr\", \"utes\"]) then {\r\n    // Source: http://www.iten-online.ch/klima/europa/tschechien/prag.htm\r\n    GVAR(TempDay) = [1, 3, 9, 14, 19, 23, 25, 24, 21, 13, 7, 2];\r\n    GVAR(TempNight) = [-4, -3, 0, 4, 9, 12, 14, 14, 10, 6, 2, -2];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Prague,Czech-Republic\r\n    GVAR(Humidity) = [82, 80, 78, 70, 71, 72, 70, 73, 78, 80, 83, 82];\r\n\r\n    // Source: https://weatherspark.com/averages/32335/Prague-Central-Bohemia-Czech-Republic\r\n    GVAR(WindSpeedMax)  = [[6.7, 2.4], [6.8, 2.2], [7.1, 2.0], [6.7, 1.9], [6.5, 1.8], [6.4, 1.8], [6.4, 1.8], [5.9, 1.9], [5.8, 2.1], [5.9, 2.3], [6.4, 2.8], [7.0, 3.0]];\r\n    GVAR(WindSpeedMean) = [4.5, 4.3, 4.4, 4.1, 3.6, 3.6, 3.6, 3.4, 3.6, 0, 4.1, 4.6];\r\n    GVAR(WindSpeedMin)  = [[1.5, 1.1], [1.5, 1.1], [1.5, 1.0], [1.2, 0.9], [1.1, 0.8], [1.0, 0.8], [1.0, 1.0], [1.0, 0.9], [1.1, 1.0], [1.0, 1.0], [1.3, 1.1], [1.8, 1.2]];\r\n    GVAR(WindDirectionProbabilities) = [\r\n        [0.06, 0.02, 0.06, 0.06, 0.10, 0.23, 0.15, 0.06], // January\r\n        [0.08, 0.03, 0.08, 0.06, 0.08, 0.18, 0.15, 0.08], // February\r\n        [0.08, 0.02, 0.10, 0.06, 0.07, 0.17, 0.15, 0.08], // March\r\n        [0.12, 0.04, 0.10, 0.05, 0.06, 0.12, 0.13, 0.10], // April\r\n        [0.12, 0.05, 0.09, 0.05, 0.05, 0.10, 0.13, 0.10], // May\r\n        [0.12, 0.04, 0.06, 0.03, 0.05, 0.13, 0.16, 0.10], // June\r\n        [0.09, 0.03, 0.07, 0.04, 0.06, 0.16, 0.18, 0.10], // July\r\n        [0.09, 0.03, 0.08, 0.04, 0.06, 0.15, 0.16, 0.09], // August\r\n        [0.07, 0.03, 0.08, 0.06, 0.08, 0.18, 0.15, 0.08], // September\r\n        [0.06, 0.03, 0.10, 0.07, 0.10, 0.19, 0.13, 0.05], // October\r\n        [0.06, 0.02, 0.08, 0.07, 0.10, 0.15, 0.13, 0.05], // November\r\n        [0.06, 0.02, 0.06, 0.06, 0.10, 0.24, 0.15, 0.05]  // December\r\n    ];\r\n};\r\n\r\nif (toLower worldName in [\"takistan\", \"zargabad\", \"mountains_acr\", \"shapur_baf\", \"provinggrounds_pmc\"]) exitWith {\r\n    // Source: http://www.iten-online.ch/klima/asien/afghanistan/kabul.htm\r\n    GVAR(TempDay) = [4.5, 5.5, 12.5, 19.2, 24.4, 30.2, 32.1, 32, 28.5, 22.4, 15, 8.3];\r\n    GVAR(TempNight) = [-7.1, -5.7, 0.7, 6, 8.8, 12.4, 15.3, 14.3, 9.4, 3.9, -1.2, -4.7];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Kabul,Afghanistan\r\n    GVAR(Humidity) = [68, 69, 62, 60, 49, 37, 38, 39, 40, 41, 56, 61];\r\n\r\n    // Source: https://weatherspark.com/averages/32750/Kabul-Afghanistan\r\n    GVAR(WindSpeedMax)  = [[4.0, 1.0], [4.1, 1.0], [5.1, 1.1], [6.9, 1.2], [8.9, 1.2], [10.0, 1.1], [9.1,1.0], [8.2, 1.0], [6.9, 1.0], [5.2, 1.0], [3.8, 0.9], [3.7, 0.9]];\r\n    GVAR(WindSpeedMean) = [2.2, 2.2, 2.5, 2.8, 3.8, 4.4, 0, 3.3, 2.7, 2.4, 1.8, 1.9];\r\n    GVAR(WindSpeedMin)  = [[0.2, 0.4], [0.2, 0.4], [0.2, 0.4], [0.3, 0.4], [0.6, 0.4], [0.9, 0.4], [0.7, 0.4], [0.5, 0.4], [0.2, 0.5], [0.1, 0.1], [0, 0.1], [0, 0.1]];\r\n    GVAR(WindDirectionProbabilities) = [\r\n        [0.04, 0.02, 0.05, 0.04, 0.05, 0.04, 0.11, 0.29], // January\r\n        [0.08, 0.04, 0.06, 0.04, 0.06, 0.04, 0.10, 0.20], // February\r\n        [0.12, 0.06, 0.08, 0.04, 0.05, 0.04, 0.09, 0.19], // March\r\n        [0.18, 0.07, 0.09, 0.05, 0.05, 0.04, 0.08, 0.16], // April\r\n        [0.27, 0.05, 0.05, 0.03, 0.04, 0.03, 0.08, 0.16], // May\r\n        [0.35, 0.04, 0.04, 0.02, 0.02, 0.02, 0.07, 0.13], // June\r\n        [0.30, 0.07, 0.09, 0.04, 0.02, 0.02, 0.05, 0.10], // July\r\n        [0.23, 0.07, 0.08, 0.06, 0.03, 0.02, 0.05, 0.10], // August\r\n        [0.15, 0.06, 0.10, 0.06, 0.04, 0.02, 0.07, 0.13], // September\r\n        [0.12, 0.04, 0.07, 0.06, 0.04, 0.03, 0.10, 0.17], // October\r\n        [0.07, 0.03, 0.06, 0.05, 0.06, 0.02, 0.10, 0.20], // November\r\n        [0.05, 0.03, 0.06, 0.05, 0.06, 0.04, 0.11, 0.26]  // December\r\n    ];\r\n};\r\n\r\nif (toLower worldName in [\"fallujah\"]) exitWith {\r\n    // Source: http://www.iten-online.ch/klima/asien/irak/bagdad.htm\r\n    GVAR(TempDay) = [16, 19, 23, 29, 36, 41, 43, 43, 40, 33, 24, 17];\r\n    GVAR(TempNight) = [4, 6, 10, 15, 20, 23, 25, 25, 21, 16, 10, 5];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Bagdad,Iraq\r\n    GVAR(Humidity) = [69, 60, 55, 50, 36, 23, 21, 22, 29, 38, 58, 68];\r\n};\r\n\r\nif (toLower worldName in [\"fata\", \"Abbottabad\"]) exitWith {\r\n     // Source: http://www.iten-online.ch/klima/asien/pakistan/zhob.htm\r\n    GVAR(TempDay) = [12.4, 15.8, 20.8, 26.9, 32.8, 37, 36.8, 35.9, 33.8, 28.2, 22.2, 16.2];\r\n    GVAR(TempNight) = [-0.6, 2.4, 7.4, 13.1, 18.2, 22.8, 23.8, 22.9, 19.2, 12, 5.6, 1.2];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Zhob,Pakistan\r\n    GVAR(Humidity) = [50, 40, 42, 40, 30, 30, 50, 49, 40, 32, 38, 41];\r\n\r\n    // Source: https://weatherspark.com/averages/31382/Shkin-Paktika-Afghanistan\r\n    GVAR(WindSpeedMax)  = [[3.0, 1.0], [3.3, 1.0], [4.0, 1.0], [4.3, 1.4], [4.3, 1.5], [4.6, 1.4], [4.5, 1.3], [4.0, 0.9], [4.0, 1.0], [3.5, 1.0], [3.4, 1.0], [3.1, 1.0]];\r\n    GVAR(WindSpeedMean) = [1.3, 1.5, 1.6, 1.7, 1.7, 1.7, 1.6, 1.5, 1.5, 1.4, 1.4, 1.2];\r\n    GVAR(WindSpeedMin)  = [[0.2, 0.1], [0.2, 0.1], [0.2, 0.1], [0.2, 0.1], [0.1, 0.1], [0.1, 0.1], [0.3, 0.1], [0.2, 0.1], [0.1, 0.1], [0.1, 0.1], [0.1, 0.1], [0.1, 0.1]];\r\n    GVAR(WindDirectionProbabilities) = [\r\n        [0.09, 0.03, 0.02, 0.03, 0.05, 0.07, 0.07, 0.18], // January\r\n        [0.07, 0.02, 0.01, 0.05, 0.10, 0.10, 0.06, 0.12], // February\r\n        [0.07, 0.02, 0.01, 0.07, 0.14, 0.11, 0.08, 0.12], // March\r\n        [0.07, 0.04, 0.03, 0.05, 0.12, 0.08, 0.06, 0.13], // April\r\n        [0.10, 0.03, 0.02, 0.04, 0.10, 0.09, 0.08, 0.18], // May\r\n        [0.12, 0.05, 0.04, 0.05, 0.08, 0.06, 0.06, 0.16], // June\r\n        [0.06, 0.04, 0.02, 0.06, 0.05, 0.01, 0.02, 0.06], // July\r\n        [0.08, 0.03, 0.04, 0.05, 0.09, 0.04, 0.02, 0.06], // August\r\n        [0.10, 0.04, 0.02, 0.06, 0.11, 0.09, 0.06, 0.13], // September\r\n        [0.07, 0.02, 0.01, 0.04, 0.11, 0.08, 0.08, 0.19], // October\r\n        [0.06, 0.01, 0.00, 0.05, 0.11, 0.09, 0.08, 0.13], // November\r\n        [0.07, 0.01, 0.01, 0.03, 0.08, 0.09, 0.09, 0.18]  // December\r\n    ];\r\n};\r\n\r\nif (worldName in [\"sfp_wamako\"]) exitWith {\r\n     // Source: http://www.iten-online.ch/klima/afrika/niger/tahoua.htm\r\n    GVAR(TempDay) = [33.4, 35, 38.4, 41.5, 41.4, 40, 35.6, 32.9, 35.8, 38.2, 36.4, 33.1];\r\n    GVAR(TempNight) = [14.9, 16.3, 20.4, 23.7, 25.8, 24.8, 23.1, 22, 22.6, 21.6, 18.6, 15.3];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Tahoua,Niger\r\n    GVAR(Humidity) = [68, 60, 57, 50, 32, 22, 20, 21, 25, 38, 58, 69];\r\n};\r\n\r\nif (worldName in [\"sfp_sturko\"]) exitWith {\r\n     // Source: http://www.iten-online.ch/klima/afrika/niger/tahoua.htm\r\n    GVAR(TempDay) = [2.2, 2.4, 5.1, 10.2, 16.1, 20.1, 21.1, 20.9, 17.2, 12.7, 7.4, 3.9];\r\n    GVAR(TempNight) = [-2, -2.3, -0.7, 2.6, 7.1, 11.4, 13.1, 12.7, 10, 6.9, 3.1, -0.1];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,karlskrona,Sweden\r\n    GVAR(Humidity) = [86, 85, 80, 72, 68, 69, 74, 77, 79, 81, 86, 88];\r\n};\r\n\r\nif (worldName in [\"Bornholm\"]) exitWith {\r\n     // Source: http://www.iten-online.ch/klima/afrika/niger/tahoua.htm\r\n    GVAR(TempDay) = [1.9, 1.7, 3.8, 8.1, 14, 18.1, 19.6, 19.8, 16.2, 11.9, 7.3, 3.9];\r\n    GVAR(TempNight) = [-1.6, -2.1, -0.7, 1.7, 6.2, 10.7, 13, 13.1, 10.6, 7.2, 3.5, 0.1];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,allinge,Denmark\r\n    GVAR(Humidity) = [85, 84, 80, 76, 69, 69, 76, 77, 79, 81, 86, 86];\r\n\r\n    // Source: https://weatherspark.com/averages/28830/R-nne-Capital-Region-of-Denmark\r\n    GVAR(WindSpeedMax)  = [[9.3, 2.2], [8.4, 2.2], [7.9, 2.2], [7.1, 2.1], [7.2, 2.1], [6.8, 2.0], [6.8, 2.0], [7.1, 2.1], [7.7, 2.2], [8.6, 2.2], [8.8, 2.2], [9.3, 2.2]];\r\n    GVAR(WindSpeedMean) = [6.9, 6.0, 5.7, 4.9, 4.8, 4.6, 4.7, 4.9, 5.5, 6.2, 6.5, 6.7];\r\n    GVAR(WindSpeedMin)  = [[3.9, 2.0], [3.0, 2.0], [2.3, 2.0], [1.8, 1.8], [1.7, 1.8], [1.7, 1.7], [1.7, 1.8], [1.9, 1.9], [2.6, 2.0], [2.9, 2.0], [3.3, 2.1], [3.5, 2.0]];\r\n    GVAR(WindDirectionProbabilities) = [\r\n        [0.07, 0.04, 0.07, 0.05, 0.09, 0.12, 0.20, 0.07], // January\r\n        [0.08, 0.06, 0.10, 0.06, 0.06, 0.08, 0.20, 0.08], // February\r\n        [0.05, 0.06, 0.13, 0.08, 0.07, 0.08, 0.19, 0.06], // March\r\n        [0.05, 0.11, 0.16, 0.09, 0.05, 0.06, 0.17, 0.06], // April\r\n        [0.04, 0.10, 0.15, 0.08, 0.05, 0.06, 0.20, 0.05], // May\r\n        [0.03, 0.07, 0.10, 0.07, 0.05, 0.07, 0.28, 0.06], // June\r\n        [0.04, 0.06, 0.11, 0.07, 0.04, 0.07, 0.28, 0.06], // July\r\n        [0.05, 0.06, 0.11, 0.07, 0.06, 0.08, 0.26, 0.06], // August\r\n        [0.06, 0.06, 0.11, 0.07, 0.06, 0.09, 0.21, 0.06], // September\r\n        [0.07, 0.05, 0.09, 0.08, 0.08, 0.12, 0.18, 0.07], // October\r\n        [0.08, 0.06, 0.08, 0.07, 0.10, 0.12, 0.16, 0.07], // November\r\n        [0.08, 0.05, 0.06, 0.04, 0.10, 0.14, 0.19, 0.07]  // December\r\n    ];\r\n};\r\nif (worldName in [\"Imrali\"]) exitWith {\r\n     // Source: http://www.iten-online.ch/klima/europa/tuerkei/bursa.htm\r\n    GVAR(TempDay) = [9.3, 10.7, 13.6, 18.8, 23.5, 28.2, 30.3, 30.2, 27, 21.4, 16.5, 11.8];\r\n    GVAR(TempNight) = [1.4, 2.4, 3.7, 7.1, 10.9, 14.3, 16.5, 16.3, 13, 9.5, 6, 3.8];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Bursa,Turkey\r\n    GVAR(Humidity) = [78, 75, 70, 70, 71, 61, 58, 59, 63, 69, 77, 76];\r\n};\r\nif (worldName in [\"Kunduz\"]) exitWith {\r\n     // Source: http://www.iten-online.ch/klima/asien/afghanistan/kunduz.htm\r\n    GVAR(TempDay) = [6.3, 9.5, 15.8, 23, 29.8, 37.3, 39, 36.9, 31.8, 24.5, 16, 9.7];\r\n    GVAR(TempNight) = [-2.4, 0, 5.7, 11.6, 15.7, 20.9, 21.5, 21.5, 16.3, 10.6, 4.1, 0];\r\n    // Source: http://www.weather-and-climate.com/average-monthly-Humidity-perc,Kabul,Afghanistan\r\n    GVAR(Humidity) = [70, 72, 64, 61, 49, 34, 36, 38, 39, 52, 51, 63];\r\n\r\n    // Source: https://weatherspark.com/averages/32753/Kunduz-Afghanistan\r\n    GVAR(WindSpeedMax)  = [[3.5, 0.8], [4.0, 0.6], [4.3, 2.0], [4.6, 1.1], [5.1, 1.2], [5.7, 1.0], [4.9, 0.8], [4.5, 0.3], [4.3, 0.3], [3.8, 0.5], [3.0, 1.3], [3.1, 0.8]];\r\n    GVAR(WindSpeedMean) = [1.5, 1.8, 2.1, 2.4, 2.5, 2.8, 2.7, 2.5, 2.3, 2.1, 1.7, 1.6];\r\n    GVAR(WindSpeedMin)  = [[0.2, 0.1], [0.3, 0.3], [0.4, 0.1], [0.8, 0.2], [0.8, 0.1], [1.0, 0.3], [0.9, 0.5], [0.8, 0.2], [0.8, 0.1], [0.7, 0.1], [0.5, 0.1], [0.2, 0.2]];\r\n    GVAR(WindDirectionProbabilities) = [\r\n        [0.04, 0.02, 0.05, 0.11, 0.12, 0.06, 0.09, 0.06], // January\r\n        [0.04, 0.02, 0.05, 0.11, 0.12, 0.06, 0.08, 0.07], // February\r\n        [0.05, 0.04, 0.06, 0.14, 0.12, 0.06, 0.10, 0.08], // March\r\n        [0.09, 0.05, 0.08, 0.13, 0.07, 0.05, 0.07, 0.07], // April\r\n        [0.14, 0.07, 0.13, 0.13, 0.06, 0.05, 0.05, 0.08], // May\r\n        [0.16, 0.06, 0.12, 0.12, 0.05, 0.04, 0.05, 0.10], // June\r\n        [0.17, 0.06, 0.08, 0.12, 0.06, 0.04, 0.05, 0.12], // July\r\n        [0.15, 0.05, 0.06, 0.16, 0.08, 0.05, 0.07, 0.13], // August\r\n        [0.15, 0.04, 0.08, 0.20, 0.13, 0.05, 0.10, 0.14], // September\r\n        [0.08, 0.02, 0.08, 0.22, 0.15, 0.06, 0.13, 0.13], // October\r\n        [0.06, 0.02, 0.05, 0.20, 0.17, 0.06, 0.12, 0.10], // November\r\n        [0.04, 0.02, 0.05, 0.14, 0.19, 0.07, 0.10, 0.07]  // December\r\n    ];\r\n};\r\n\r\n// Assume default values\r\nGVAR(TempDay) = [1, 3, 9, 14, 19, 23, 25, 24, 21, 13, 7, 2];\r\nGVAR(TempNight) = [-4, -3, 0, 4, 9, 12, 14, 14, 10, 6, 2, -2];\r\nGVAR(Humidity) = [82, 80, 78, 70, 71, 72, 70, 73, 78, 80, 83, 82];\r\n\r\nGVAR(currentTemperature) = 20;\r\nGVAR(currentHumidity) = 0.5;\r\n"},{"name":"ace_weather_fnc_getWind","file":"weather/functions/fnc_getWind.sqf","text":"/*\r\n * Author: ACE2 Team, Ruthberg\r\n * Calculate current wind locally from the data broadcasted by the server\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * Wind <ARRAY>\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_getWind\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (isNil \"ACE_WIND_PARAMS\") exitWith { [0, 0, 0] };\r\n\r\nACE_WIND_PARAMS params [\"_dir\", \"_dirChange\", \"_spd\", \"_spdChange\", \"_period\"];\r\n//Wind _dir is the \"source\" of the wind [eg: \"northerly wind\": _dir = 0 -> wind = [0,-1,0];]\r\n\r\nprivate _periodPosition = (CBA_missionTime - GVAR(wind_period_start_time)) min _period;\r\nprivate _periodPercent = _periodPosition / _period;\r\n\r\n_spd = _spd + _spdChange * _periodPercent;\r\n_dir = _dir + _dirChange * _periodPercent;\r\n\r\n_dir = (360 + _dir) % 360;\r\n\r\nTRACE_1(\"PeriodStartTime\",Round(GVAR(wind_period_start_time)));\r\nTRACE_2(\"Dir: Current/Change\",Round(_dir),Round(_dirChange));\r\nTRACE_2(\"Spd: Current/Change\",Round(_spd * 10) / 10,Round(_spdChange * 10) / 10);\r\nTRACE_3(\"Period/Position/Percent\",Round(_period),Round(_periodPosition),Round(_periodPercent * 100) / 100);\r\n\r\n// TODO: Add some deterministic noise\r\n\r\n[-_spd * sin(_dir), -_spd * cos(_dir), 0]\r\n"},{"name":"ace_weather_fnc_initModuleSettings","file":"weather/functions/fnc_initModuleSettings.sqf","text":"/*\r\n * Author: Glowbal, Ruthberg\r\n * Module for adjusting the wind deflection settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [module, [], true] call ace_weather_fnc_initModuleSettings\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n// Control server side weather propagation\r\n[_logic, QGVAR(enableServerController), \"enableServerController\"] call EFUNC(common,readSettingFromModule);\r\n\r\n// Overrides the default weather (editor, mission settings) with ACE weather (map based)\r\n[_logic, QGVAR(useACEWeather), \"useACEWeather\"] call EFUNC(common,readSettingFromModule);\r\n\r\n// Control client side weather effects\r\n[_logic, QGVAR(syncRain), \"syncRain\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(syncWind), \"syncWind\"] call EFUNC(common,readSettingFromModule); // Wind, Gusts, Waves\r\n[_logic, QGVAR(syncMisc), \"syncMisc\"] call EFUNC(common,readSettingFromModule); // Lightnings, Rainbow, Fog\r\n\r\n// Server weather update interval\r\n[_logic, QGVAR(serverUpdateInterval), \"serverUpdateInterval\"] call EFUNC(common,readSettingFromModule);\r\n\r\nGVAR(serverUpdateInterval) = 1 max GVAR(serverUpdateInterval) min 600;\r\n"},{"name":"ace_weather_fnc_initWind","file":"weather/functions/fnc_initWind.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Inits the wind variables on mission start\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_initWind\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _month = date select 1;\r\nprivate _windDirectionProbabilities = GVAR(WindDirectionProbabilities) select (_month - 1);\r\n\r\nACE_wind = [0, 0, 0];\r\n\r\nGVAR(wind_direction_reference) = random 360;\r\nprivate _sum = 0;\r\nfor \"_i\" from 0 to 7 do {\r\n    _sum = _sum + (_windDirectionProbabilities select _i);\r\n};\r\nprivate _rand = random _sum;\r\nprivate _csum = [0, 0, 0, 0, 0, 0, 0, 0];\r\nfor \"_i\" from 0 to 7 do {\r\n    for \"_j\" from 0 to _i do {\r\n        _csum set [_i, (_csum select _i) + (_windDirectionProbabilities select _j)];\r\n    };\r\n};\r\nprivate _index = 0;\r\nfor \"_i\" from 0 to 7 do {\r\n    if (_rand > (_csum select _i)) then {\r\n        _index = _index + 1;\r\n    };\r\n};\r\nGVAR(wind_direction_reference) = 45 * _index;\r\n\r\nGVAR(wind_mean_dir) = GVAR(wind_direction_reference);\r\nGVAR(wind_direction_reference) = GVAR(wind_direction_reference) + (random 22.5) - (random 22.5);\r\nGVAR(wind_direction_reference) = (360 + GVAR(wind_direction_reference)) % 360;\r\n\r\nGVAR(min_wind_speed) = GVAR(WindSpeedMin) select (_month - 1);\r\nGVAR(min_wind_speed) = (GVAR(min_wind_speed) select 0) + (random (GVAR(min_wind_speed) select 1)) - (random (GVAR(min_wind_speed) select 1));\r\nGVAR(min_wind_speed) = 0 max GVAR(min_wind_speed);\r\nGVAR(mean_wind_speed) = GVAR(WindSpeedMean) select (_month - 1);\r\nGVAR(max_wind_speed) = GVAR(WindSpeedMax) select (_month - 1);\r\nGVAR(max_wind_speed) = (GVAR(max_wind_speed) select 0) + (random (GVAR(max_wind_speed) select 1)) - (random (GVAR(max_wind_speed) select 1));\r\nGVAR(max_wind_speed) = 0 max GVAR(max_wind_speed);\r\n\r\nGVAR(current_wind_direction) = GVAR(wind_direction_reference);\r\nGVAR(current_wind_speed) = GVAR(min_wind_speed) + (GVAR(max_wind_speed) - GVAR(min_wind_speed)) * (random 1);\r\n\r\nGVAR(wind_period_count) = 0;\r\nGVAR(wind_next_period) = -1;\r\n\r\nGVAR(wind_speed_debug_output) = [];\r\n"},{"name":"ace_weather_fnc_serverController","file":"weather/functions/fnc_serverController.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Gather weather parameters and broadcast them to the clients\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_serverController\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (GVAR(useACEWeather)) then {\r\n    // Use location based real world weather data\r\n    [] call FUNC(updateAceWeather);\r\n} else {\r\n    // Simply replicate the server weather on the clients\r\n    if (GVAR(syncRain)) then {\r\n        ACE_RAIN_PARAMS = [rain, rain, GVAR(serverUpdateInterval)];\r\n        publicVariable \"ACE_RAIN_PARAMS\";\r\n    };\r\n    if (GVAR(syncWind)) then {\r\n        //Wind _dir is the \"source\" of the wind [eg: \"northerly wind\": _dir = 0 -> wind = [0,-1,0];]\r\n        private _windDir = ((((wind select 0) atan2 (wind select 1)) + 180) % 360);\r\n        ACE_WIND_PARAMS = [_windDir, 0, vectorMagnitude wind, 0, GVAR(serverUpdateInterval)];\r\n        publicVariable \"ACE_WIND_PARAMS\";\r\n    };\r\n    if (GVAR(syncMisc)) then {\r\n        ACE_MISC_PARAMS = [lightnings, rainbow, fogParams, GVAR(temperatureShift), GVAR(badWeatherShift), GVAR(humidityShift)];\r\n        publicVariable \"ACE_MISC_PARAMS\";\r\n    };\r\n};\r\n"},{"name":"ace_weather_fnc_updateAceWeather","file":"weather/functions/fnc_updateAceWeather.sqf","text":"/*\r\n * Author: ACE2 Team, esteldunedain, ruthberg\r\n * Updates the wind and rain evolution on the server. Broadcasts the current and next values to the clients\r\n *\r\n * Arguments:\r\n * None\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_updateAceWeather\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _overcastMultiplier = 1 max (2* overcast) min 2; // 0 (@ overcast 0), 2 (@ overcast 1)\r\n\r\n// Rain simulation\r\nif (GVAR(syncRain) && {GVAR(rain_period_count) > GVAR(rain_next_period)}) then {\r\n\r\n    GVAR(rain_next_period) = ceil((1 + (random 10)) / _overcastMultiplier);\r\n    GVAR(rain_period_count) = 0;\r\n\r\n    private _lastRain = GVAR(current_rain);\r\n    private _rainOverCast = 0;\r\n\r\n    if (overcast >= 0.7) then {\r\n        _rainOverCast = (overcast - 0.7) / 0.3;\r\n        if (GVAR(current_rain) == 0) then {\r\n            // Initialize rain with a random strength depending on the current overcast value\r\n            GVAR(current_rain) = -0.25 + (random 0.75) + (random 0.5) * _rainOverCast;\r\n        };\r\n\r\n        GVAR(current_rain) = GVAR(current_rain) + GVAR(current_rain) * ((_rainOverCast * _overcastMultiplier) / 8) * GVAR(rain_current_range);\r\n        GVAR(current_rain) = 0 max GVAR(current_rain) min 1;\r\n\r\n        GVAR(rain_current_range) = -1 + (random 2);\r\n    } else {\r\n        _rainOverCast = 1;\r\n\r\n        GVAR(current_rain) = 0;\r\n    };\r\n\r\n    private _transitionTime = 1 + (_rainOverCast * 5) + (random (_rainOverCast * 20));\r\n\r\n    ACE_RAIN_PARAMS = [_lastRain, GVAR(current_rain), _transitionTime];\r\n    TRACE_4(\"\",_lastRain,_rainOverCast,_transitionTime,overcast);\r\n\r\n    GVAR(rain_period_start_time) = CBA_missionTime;\r\n    publicVariable \"ACE_RAIN_PARAMS\";\r\n};\r\n\r\n// Wind simulation\r\nif (GVAR(syncWind) && {GVAR(wind_period_count) > GVAR(wind_next_period)}) then {\r\n\r\n    GVAR(wind_next_period) = ceil((2 + (random 5)) / _overcastMultiplier);\r\n    GVAR(wind_period_count) = 0;\r\n\r\n    private _windDirectionVariance = (90 - (random 180)) * (overcast ^ 2);\r\n    private _windDirection = (360 + GVAR(wind_direction_reference) + _windDirectionVariance) % 360;\r\n    private _windDirectionChange = _windDirection - GVAR(current_wind_direction);\r\n    if (_windDirectionChange > 180) then {\r\n        _windDirectionChange = _windDirectionChange - 360;\r\n    };\r\n    if (_windDirectionChange < -180) then {\r\n        _windDirectionChange = 360 + _windDirectionChange;\r\n    };\r\n\r\n    private _windMaxDiff = GVAR(mean_wind_speed) - GVAR(max_wind_speed);\r\n    private _windMinDiff = GVAR(min_wind_speed) - GVAR(mean_wind_speed);\r\n\r\n    private _ratioMax = (random 1) ^ 2;\r\n    private _ratioMin = (random 1) ^ 2;\r\n\r\n    private _windSpeed = GVAR(current_wind_speed);\r\n    private _windSpeedChange = 0;\r\n    if ((random 1) < (0.3 max overcast)) then {\r\n        _windSpeed = GVAR(mean_wind_speed) + _windMaxDiff * _ratioMax + _windMinDiff * _ratioMin;\r\n        _windSpeedChange = _windSpeed - GVAR(current_wind_speed);\r\n    };\r\n\r\n    private _transitionTime = GVAR(wind_next_period) * GVAR(serverUpdateInterval);\r\n\r\n    TRACE_5(\"dirCur/dirNew/spdCur/spdNew/period\",GVAR(current_wind_direction),_windDirection,GVAR(current_wind_speed),_windSpeed,_transitionTime);\r\n\r\n    ACE_WIND_PARAMS = [GVAR(current_wind_direction),\r\n    _windDirectionChange,\r\n    GVAR(current_wind_speed),\r\n    _windSpeedChange,\r\n    _transitionTime];\r\n\r\n    GVAR(current_wind_direction) = _windDirection;\r\n    GVAR(current_wind_speed) = _windSpeed;\r\n\r\n    GVAR(wind_period_start_time) = CBA_missionTime;\r\n    publicVariable \"ACE_WIND_PARAMS\";\r\n};\r\n\r\n\r\nif (GVAR(syncMisc)) then {\r\n    ACE_MISC_PARAMS = [lightnings, rainbow, fogParams, GVAR(temperatureShift), GVAR(badWeatherShift), GVAR(humidityShift)];\r\n    publicVariable \"ACE_MISC_PARAMS\";\r\n};\r\n\r\nGVAR(rain_period_count) = GVAR(rain_period_count) + 1;\r\nGVAR(wind_period_count) = GVAR(wind_period_count) + 1;\r\n"},{"name":"ace_weather_fnc_updateHumidity","file":"weather/functions/fnc_updateHumidity.sqf","text":"/*\r\n * Author: ACE2 Team\r\n * Updates GVAR(currentHumidity)\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_updateHumidity\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _month = date select 1;\r\n\r\nGVAR(currentHumidity) = (GVAR(Humidity) select (_month - 1)) / 100;\r\n\r\nif ((rain > 0) && {overcast > 0.7}) then {\r\n    GVAR(currentHumidity) = 1;\r\n} else {\r\n    private _avgTemperature = ((GVAR(TempDay) select (_month - 1)) + (GVAR(TempNight) select (_month - 1))) / 2;\r\n    private _pS1 = 6.112 * exp((17.62 * _avgTemperature) / (243.12 + _avgTemperature));\r\n    private _PS2 = 6.112 * exp((17.62 * GVAR(currentTemperature)) / (243.12 + GVAR(currentTemperature)));\r\n    GVAR(currentHumidity) = GVAR(currentHumidity) * _PS1 / _PS2;\r\n    GVAR(currentHumidity) = GVAR(currentHumidity) + GVAR(humidityShift);\r\n\r\n    TRACE_1(\"humidityShift\",GVAR(humidityShift));\r\n};\r\n\r\nGVAR(currentHumidity) = 0 max GVAR(currentHumidity) min 1;\r\n"},{"name":"ace_weather_fnc_updateRain","file":"weather/functions/fnc_updateRain.sqf","text":"/*\r\n * Author: ACE2 Team, Ruthberg\r\n * Updates rain based on ACE_RAIN_PARAMS\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_updateRain\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!isNil \"ACE_RAIN_PARAMS\") then {\r\n    ACE_RAIN_PARAMS params [\"_oldRain\", \"_newRain\", \"_period\"];\r\n\r\n    private _periodPosition = (CBA_missionTime - GVAR(rain_period_start_time)) min _period;\r\n    private _periodPercent = (_periodPosition / _period) min 1;\r\n\r\n    GVAR(ACE_Rain) = linearConversion [GVAR(rain_period_start_time), (GVAR(rain_period_start_time) + _period), CBA_missionTime, _oldRain, _newRain];\r\n\r\n    TRACE_3(\"Update Rain\",rain,ACE_RAIN_PARAMS,GVAR(ACE_Rain));\r\n};\r\n"},{"name":"ace_weather_fnc_updateTemperature","file":"weather/functions/fnc_updateTemperature.sqf","text":"/*\r\n * Author: ACE2 Team\r\n * Updates GVAR(currentTemperature) based on the map data\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_updateTemperature\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nprivate _time = daytime;\r\nprivate _month = date select 1;\r\n\r\nprivate _timeRatio = abs(_time - 12) / 12;\r\n\r\nGVAR(currentTemperature) = (GVAR(TempDay) select (_month - 1)) * (1 - _timeRatio) + (GVAR(TempNight) select (_month - 1)) * _timeRatio;\r\nGVAR(currentTemperature) = GVAR(currentTemperature) + GVAR(temperatureShift) - GVAR(badWeatherShift) * overcast;\r\nGVAR(currentTemperature) = round(GVAR(currentTemperature) * 10) / 10;\r\n\r\nTRACE_2(\"temperatureShift/badWeatherShift\",GVAR(temperatureShift),GVAR(badWeatherShift));\r\n"},{"name":"ace_weather_fnc_updateWind","file":"weather/functions/fnc_updateWind.sqf","text":"/*\r\n * Author: ACE2 Team, Ruthberg\r\n * Updates wind, gusts and waves based on ACE_wind\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [] call ace_weather_fnc_updateWind\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nif (!GVAR(syncWind)) exitWith { ACE_wind = wind };\r\n\r\nACE_wind = [] call FUNC(getWind);\r\nsetWind [ACE_wind select 0, ACE_wind select 1, true];\r\n2 setGusts 0;\r\n\r\n// Set waves: 0 when no wind, 1 when wind >= 16 m/s\r\nprivate _newWaves = ((vectorMagnitude ACE_wind) / 16.0) min 1.0;\r\nif (abs(_newWaves - waves) > 0.1) then {\r\n    1 setWaves _newWaves;\r\n};\r\n\r\nTRACE_3(\"Wind/ACE_wind/Deviation(m/s)\",wind,ACE_wind,Round((vectorMagnitude (ACE_wind vectorDiff wind)) * 1000) / 1000);\r\n"}],"winddeflection":[{"name":"ace_winddeflection_fnc_handleFired","file":"winddeflection/functions/fnc_handleFired.sqf","text":"/*\r\n * Author: Glowbal, Ruthberg\r\n * Handles wind deflection for projectiles. Called from the unified fired EH only for players on foot and their vehicles if required by settings.\r\n *\r\n * Arguments:\r\n * None. Parameters inherited from EFUNC(common,firedEH)\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n * [clientFiredBIS-XEH] call ace_advanced_ballistics_fnc_handleFired\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n//IGNORE_PRIVATE_WARNING [\"_unit\", \"_weapon\", \"_muzzle\", \"_mode\", \"_ammo\", \"_magazine\", \"_projectile\", \"_vehicle\", \"_gunner\", \"_turret\"];\r\nTRACE_10(\"firedEH:\",_unit, _weapon, _muzzle, _mode, _ammo, _magazine, _projectile, _vehicle, _gunner, _turret);\r\n\r\nif (missionNamespace getVariable [QEGVAR(advanced_ballistics,enabled), false] && (_projectile isKindOf \"BulletBase\") && (_unit isKindOf \"Man\")) exitWith {false};\r\n\r\nif (!((_projectile isKindOf \"BulletBase\") || (_projectile isKindOf \"GrenadeBase\"))) exitWith {false};\r\nif (_unit distance ACE_player > GVAR(simulationRadius)) exitWith {false};\r\n\r\nGVAR(trackedBullets) pushBack [_projectile, getNumber(configFile >> \"CfgAmmo\" >> _ammo >> \"airFriction\")];\r\n"},{"name":"ace_winddeflection_fnc_initModuleSettings","file":"winddeflection/functions/fnc_initModuleSettings.sqf","text":"/*\r\n * Author: Glowbal, Ruthberg\r\n * Module for adjusting the wind deflection settings\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(enabled), \"enabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(vehicleEnabled), \"vehicleEnabled\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(simulationInterval), \"simulationInterval\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(simulationRadius), \"simulationRadius\"] call EFUNC(common,readSettingFromModule);\r\n\r\nGVAR(simulationInterval) = 0 max GVAR(simulationInterval) min 0.2;\r\n"},{"name":"ace_winddeflection_fnc_updateTrajectoryPFH","file":"winddeflection/functions/fnc_updateTrajectoryPFH.sqf","text":"/*\r\n * Author: Glowbal, Ruthberg\r\n * Handles wind deflection for projectiles.\r\n *\r\n * Arguments:\r\n * 0: bullet - Object the event handler is assigned to <OBJECT>\r\n * 1: airFriction - air friction of the bullet <NUMBER>\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n// #define ENABLE_PERFORMANCE_COUNTERS\r\n#include \"script_component.hpp\"\r\n\r\n[{\r\n    // BEGIN_COUNTER(pfeh);\r\n    private[\"_accel\", \"_accelRef\", \"_bulletSpeed\", \"_bulletVelocity\", \"_deleted\", \"_deltaT\", \"_drag\", \"_dragRef\", \"_isWind\", \"_trueSpeed\", \"_trueVelocity\"];\r\n\r\n    params [\"_args\"];\r\n    _args params [\"_lastTime\"];\r\n    _deltaT = CBA_missionTime - _lastTime;\r\n    _args set [0, CBA_missionTime];\r\n    _deleted = 0;\r\n    _isWind = (vectorMagnitude ACE_wind > 0);\r\n\r\n    {\r\n        _x params [\"_bullet\", \"_airFriction\"];\r\n\r\n        _bulletVelocity = velocity _bullet;\r\n        _bulletSpeed = vectorMagnitude _bulletVelocity;\r\n\r\n        if ((!alive _bullet) || {(_bullet isKindOf \"BulletBase\") && {_bulletSpeed < 100}}) then {\r\n            GVAR(trackedBullets) deleteAt (GVAR(trackedBullets) find _x);\r\n        } else {\r\n            if (_isWind) then {\r\n                _trueVelocity = _bulletVelocity vectorDiff ACE_wind;\r\n                _trueSpeed = vectorMagnitude _trueVelocity;\r\n\r\n                _dragRef = _deltaT * _airFriction * _bulletSpeed * _bulletSpeed;\r\n                _accelRef = (vectorNormalized _bulletVelocity) vectorMultiply (_dragRef);\r\n                _bulletVelocity = _bulletVelocity vectorDiff _accelRef;\r\n\r\n                _drag = _deltaT * _airFriction * _trueSpeed;\r\n                _accel = _trueVelocity vectorMultiply (_drag);\r\n                _bulletVelocity = _bulletVelocity vectorAdd _accel;\r\n            };\r\n            _bullet setVelocity _bulletVelocity;\r\n        };\r\n        nil\r\n    } count +GVAR(trackedBullets);\r\n    // END_COUNTER(pfeh);\r\n}, GVAR(simulationInterval), [CBA_missionTime]] call CBA_fnc_addPerFrameHandler;\r\n"}],"yardage450":[{"name":"ace_yardage450_fnc_acquireTarget","file":"yardage450/functions/fnc_acquireTarget.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Fires the laser to acquire the target\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n// Reference: http://www.optcorp.com/pdf/Bushnell/YardageProSport.pdf\r\n#define MIN_DISTANCE ([9, 10] select GVAR(useYards))\r\n#define MAX_DISTANCE ([732, 800] select GVAR(useYards))\r\n#define METERING_POINT_NUMBER 8\r\n\r\nprivate [\"_result\", \"_distance\", \"_min\", \"_max\", \"_range\"];\r\n\r\nGVAR(lasing) = true;\r\nGVAR(targetAcquired) = false;\r\n\r\nGVAR(distances) = [];\r\nGVAR(distanceIndex) = -1;\r\n\r\n[{\r\n    if (GVAR(targetAcquired) || !GVAR(powerButtonPressed)) exitWith {\r\n        GVAR(lasing) = false;\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    _result = [eyePos ACE_player, ACE_player weaponDirection (currentWeapon ACE_player)] call EFUNC(laser,shootRay);\r\n    _distance = _result select 1;\r\n\r\n    _distance = _distance - 1 + (random 2);\r\n\r\n    GVAR(distanceIndex) = (GVAR(distanceIndex) + 1) % METERING_POINT_NUMBER;\r\n    GVAR(distances) set [GVAR(distanceIndex), _distance];\r\n\r\n    if (count GVAR(distances) == METERING_POINT_NUMBER) then {\r\n        _min = MAX_DISTANCE;\r\n        _max = MIN_DISTANCE;\r\n        {\r\n            _min = _x min _min;\r\n            _max = _max max _x;\r\n        } forEach GVAR(distances);\r\n\r\n        if (abs(_max - _min) < 5) then {\r\n            _range = (_min + _max) / 2;\r\n            if (_range >= MIN_DISTANCE && _range <= MAX_DISTANCE) then {\r\n                GVAR(targetAcquired) = true;\r\n                GVAR(targetRangeText) = Str(round(_range));\r\n            };\r\n        };\r\n    };\r\n}, 0.1, []] call CBA_fnc_addPerFrameHandler;\r\n"},{"name":"ace_yardage450_fnc_turnOn","file":"yardage450/functions/fnc_turnOn.sqf","text":"/*\r\n * Author: Ruthberg\r\n * Shows the Yardage 450 screen elements\r\n *\r\n * Arguments:\r\n * Nothing\r\n *\r\n * Return Value:\r\n * Nothing\r\n *\r\n * Example:\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\n#define __dsp (uiNamespace getVariable \"ACE_RscYardage450\")\r\n#define __ctrlTarget (__dsp displayCtrl 720041)\r\n#define __ctrlLaser (__dsp displayCtrl 720042)\r\n#define __ctrlRange (__dsp displayCtrl 720043)\r\n#define __ctrlMeters (__dsp displayCtrl 720044)\r\n#define __ctrlYards (__dsp displayCtrl 720045)\r\n\r\nif (currentWeapon ACE_player != \"ACE_Yardage450\" || cameraView != \"GUNNER\") exitWith {};\r\n\r\nGVAR(powerOnTime) = CBA_missionTime;\r\n\r\nif (GVAR(active)) exitWith {};\r\n\r\nGVAR(active) = true;\r\n\r\n[{\r\n    if (CBA_missionTime - GVAR(powerOnTime) > 30) exitWith {\r\n        GVAR(active) = false;\r\n        74210 cutText [\"\", \"PLAIN\"];\r\n        [_this select 1] call CBA_fnc_removePerFrameHandler;\r\n    };\r\n\r\n    if (currentWeapon ACE_player == \"ACE_Yardage450\" && cameraView == \"GUNNER\") then {\r\n        74210 cutRsc [\"ACE_RscYardage450\", \"PLAIN\", 1, false];\r\n\r\n        __ctrlLaser ctrlShow GVAR(lasing);\r\n        if (GVAR(targetAcquired)) then {\r\n            __ctrlTarget ctrlSetText \"Target Acquired\";\r\n            __ctrlRange ctrlSetText GVAR(targetRangeText);\r\n        } else {\r\n            __ctrlTarget ctrlSetText \"\";\r\n            __ctrlRange ctrlSetText \"---\";\r\n        };\r\n        __ctrlMeters ctrlShow !GVAR(useYards);\r\n        __ctrlYards ctrlShow GVAR(useYards);\r\n    } else {\r\n        74210 cutText [\"\", \"PLAIN\"];\r\n    };\r\n\r\n}, 0, []] call CBA_fnc_addPerFrameHandler;\r\n"}],"zeus":[{"name":"ace_zeus_fnc_addObjectToCurator","file":"zeus/functions/fnc_addObjectToCurator.sqf","text":"/*\r\n * Author: Glowbal\r\n * Adds an object to curator upon spawn\r\n *\r\n * Arguments:\r\n * Object <OBJECT>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_object\"];\r\n\r\nif (!(_object getVariable [QGVAR(addObject), GVAR(autoAddObjects)])) exitWith {};\r\n\r\n[{\r\n    TRACE_1(\"Delayed addCuratorEditableObjects\",_this);\r\n    {\r\n        _x addCuratorEditableObjects [[_this], true];\r\n    } forEach allCurators;\r\n}, _object] call CBA_fnc_execNextFrame;\r\n"},{"name":"ace_zeus_fnc_bi_moduleCurator","file":"zeus/functions/fnc_bi_moduleCurator.sqf","text":"/*\r\n * Author: Bohemia Interactive\r\n * Module function for initalizing zeus\r\n * Edited to remove eagle and global ascension message\r\n * Added \"zeusUnitAssigned\" event call\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n_logic = _this select 0;\r\n_units = _this select 1;\r\n_activated = _this select 2;\r\n\r\nif (_activated) then {\r\n\r\n    //--- Terminate when not created on the server\r\n    if (!isserver && local _logic && isnull (getassignedcuratorunit _logic)) exitwith {\r\n        [format [\"%1 is trying to create curator logic ModuleCurator_F\",profilename],\"bis_fnc_error\",false] call bis_fnc_mp;\r\n        deletevehicle _logic;\r\n    };\r\n\r\n    //--- Get curator owner\r\n    _ownerVar = _logic getvariable [\"owner\",\"\"];\r\n    _ownerUID = parsenumber _ownerVar;\r\n    if (cheatsenabled) then {\r\n        _ownerVarArray = toarray _ownerVar;\r\n        _ownerVarArray resize 3;\r\n        if (tostring _ownerVarArray == \"DEV\") then {_ownerUID = 1;};\r\n    };\r\n    if (_ownerVar == \"\" && !ismultiplayer) then {\r\n        [\"Curator owner not defined, player used instead in singleplayer.\"] call bis_fnc_error;\r\n        _ownerVar = player call bis_fnc_objectvar;\r\n    };\r\n    if (_ownerUID > 0 && !ismultiplayer) then {\r\n        _ownerVar = player call bis_fnc_objectvar;\r\n    };\r\n    _isAdmin = _ownerVar == \"#adminLogged\" || _ownerVar == \"#adminVoted\";\r\n\r\n    //--- Wipe out the variable so clients can't access it\r\n    _logic setvariable [\"owner\",nil];\r\n\r\n    //--- Server\r\n    if (isserver) then {\r\n\r\n        //--- Prepare admin variable\r\n        _adminVar = \"\";\r\n        if (_isAdmin) then {\r\n            _letters = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"];\r\n            _adminVar = \"admin_\";\r\n            for \"_i\" from 0 to 9 do {_adminVar = _adminVar + selectRandom _letters};\r\n            _logic setvariable [\"adminVar\",_adminVar,true];\r\n        };\r\n\r\n        //--- Get allowed addons\r\n        _addonsType = _logic getvariable [\"Addons\",2];\r\n        _addons = [];\r\n        switch _addonsType do {\r\n\r\n            //--- All (including unofficial ones)\r\n            case 3: {\r\n                _cfgPatches = configfile >> \"cfgpatches\";\r\n                for \"_i\" from 0 to (count _cfgPatches - 1) do {\r\n                    _class = _cfgPatches select _i;\r\n                    if (isclass _class) then {_addons set [count _addons,configname _class];};\r\n                };\r\n                _addons call bis_fnc_activateaddons;\r\n                removeallcuratoraddons _logic;\r\n                _logic addcuratoraddons _addons;\r\n            };\r\n\r\n            //--- All active\r\n            case 2: {};\r\n\r\n            //--- All mission\r\n            case 1: {\r\n                _addonsList = [];\r\n                {\r\n                    _addonsList = _addonsList + (unitaddons typeof _x);\r\n                } foreach (entities \"all\");\r\n                removeallcuratoraddons _logic;\r\n                _logic addcuratoraddons _addonsList;\r\n            };\r\n\r\n            //--- None\r\n            case 0: {\r\n                removeallcuratoraddons _logic;\r\n            };\r\n        };\r\n\r\n        //--- Handle ownership\r\n        [_logic,_ownerVar,_ownerUID,_adminVar] spawn {\r\n            scriptname \"BIS_fnc_moduleCurator: Owner\";\r\n\r\n            _logic = _this select 0;\r\n            _ownerVar = _this select 1;\r\n            _ownerUID = _this select 2;\r\n            _adminVar = _this select 3;\r\n\r\n            if (_adminVar != \"\") then {_ownerVar = _adminVar;};\r\n\r\n            _forced = _logic getvariable [\"forced\",0] > 0;\r\n            _name = _logic getvariable [\"name\",\"\"];\r\n            if (_name == \"\") then {_name = localize \"STR_A3_curator\";};\r\n\r\n            //--- Wait until mission starts\r\n            waitUntil {time > 0}; // NOTE: DO NOT CHANGE TO CBA_missionTime, IT BREAKS THE MODULE\r\n\r\n            //--- Refresh addon list, so it's broadcasted to clients\r\n            _addons = curatoraddons _logic;\r\n            removeAllCuratorAddons _logic;\r\n            _logic addcuratoraddons _addons;\r\n\r\n            while {true} do {\r\n                //--- Wait for player to become Zeus\r\n                switch true do {\r\n                    case (_ownerUID > 0): {\r\n                        waituntil {\r\n                            sleep 0.01;\r\n                            {getplayeruid _x == _ownerVar} count playableunits > 0 || isnull _logic\r\n                        };\r\n                    };\r\n                    default {\r\n                        waituntil {isplayer (missionnamespace getvariable [_ownerVar,objnull]) || isnull _logic};\r\n                    };\r\n                };\r\n                if (isnull _logic) exitwith {};\r\n\r\n                //--- Assign\r\n                _player = objnull;\r\n                switch true do {\r\n                    case (_ownerUID > 0): {\r\n                        {\r\n                            if (getplayeruid _x == _ownerVar) exitwith {_player = _x;};\r\n                        } foreach playableunits;\r\n                    };\r\n                    default {\r\n                        _player = missionnamespace getvariable [_ownerVar,objnull];\r\n                    };\r\n                };\r\n\r\n                waituntil {unassigncurator _logic; isnull (getassignedcuratorunit _logic) || isnull _logic};\r\n                waituntil {_player assignCurator _logic; getassignedcuratorunit _logic == _player || isnull _logic};\r\n                if (isnull _logic) exitwith {};\r\n\r\n                //--- Add radio channels\r\n                {\r\n                    _x radiochanneladd [_player];\r\n                } foreach (_logic getvariable [\"channels\",[]]);\r\n\r\n                // Added by ace_zeus to delay ascension message code\r\n                private _msgCode = {\r\n                    params [\"_logic\",\"_player\"];\r\n\r\n                    //--- Sent notification to all assigned players\r\n                    if ((_logic getVariable [\"showNotification\",true]) && GVAR(zeusAscension)) then {\r\n                        {\r\n                            if (isplayer _x) then {\r\n                                [[\"CuratorAssign\",[_name,name _player]],\"bis_fnc_showNotification\",_x] call bis_fnc_mp;\r\n                            };\r\n                        } forEach (curatoreditableobjects _logic);\r\n                    };\r\n                };\r\n\r\n                // Added by ace_zeus to hide ascension messages\r\n                if !(EGVAR(common,settingsInitFinished)) then {\r\n                    EGVAR(common,runAtSettingsInitialized) pushBack [_msgCode, [_logic,_player]];\r\n                } else {\r\n                    [_logic,_player] call _msgCode;\r\n                };\r\n\r\n                [_logic,\"curatorUnitAssigned\",[_logic,_player]] call bis_fnc_callscriptedeventhandler;\r\n\r\n                // Added by ace_zeus\r\n                [QGVAR(zeusUnitAssigned), [_logic,_player]] call CBA_fnc_globalEvent;\r\n\r\n                //--- Wait for player to stop being Zeus\r\n                switch true do {\r\n                    case (_ownerUID > 0): {\r\n                        waituntil {\r\n                            sleep 0.01;\r\n                            {getplayeruid _x == _ownerVar} count playableunits == 0 || isnull _logic\r\n                        };\r\n                    };\r\n                    default {\r\n                        waituntil {_player != missionnamespace getvariable [_ownerVar,objnull] || isnull _logic};\r\n                    };\r\n                };\r\n                if (isnull _logic) exitwith {};\r\n\r\n                //--- Add radio channels\r\n                {\r\n                    _x radiochannelremove [_player];\r\n                } foreach (_logic getvariable [\"channels\",[]]);\r\n\r\n                //--- Unassign\r\n                waituntil {unassigncurator _logic; isnull (getassignedcuratorunit _logic) || isnull _logic};\r\n                if (isnull _logic) exitwith {};\r\n            };\r\n        };\r\n\r\n        // Added by ace_zeus to delay bird code\r\n        private _birdCode = {\r\n            params [\"_logic\"];\r\n\r\n            if (GVAR(zeusBird)) then {\r\n                //--- Create bird\r\n                _birdType = _logic getVariable [\"birdType\",\"eagle_f\"];\r\n                if (_birdType != \"\") then {\r\n                    _bird = createvehicle [_birdType,[100,100,100],[],0,\"none\"];\r\n                    _logic setVariable [\"bird\",_bird,true];\r\n                };\r\n\r\n                //--- Locality changed\r\n                _logic addeventhandler [\r\n                    \"local\",\r\n                    {\r\n                        _logic = _this select 0;\r\n                        _bird = _logic getVariable [\"bird\",objnull];\r\n                        _bird setowner owner _logic;\r\n                    }\r\n                ];\r\n            };\r\n        };\r\n\r\n        // Added by ace_zeus to hide camera bird\r\n        if !(EGVAR(common,settingsInitFinished)) then {\r\n            EGVAR(common,runAtSettingsInitialized) pushBack [_birdCode, [_logic]];\r\n        } else {\r\n            [_logic] call _birdCode;\r\n        };\r\n\r\n        //--- Activated all future addons\r\n        _addons = [];\r\n        {\r\n            if (typeof _x == \"ModuleCuratorAddAddons_F\") then {\r\n                _paramAddons = call compile (\"[\" + (_x getvariable [\"addons\",\"\"]) + \"]\");\r\n                {\r\n                    if !(_x in _addons) then {_addons set [count _addons,_x];};\r\n                    {\r\n                        if !(_x in _addons) then {_addons set [count _addons,_x];};\r\n                    } foreach (unitaddons _x);\r\n                } foreach _paramAddons;\r\n            };\r\n        } foreach (synchronizedobjects _logic);\r\n        _addons call bis_fnc_activateaddons;\r\n    };\r\n\r\n    //--- Player\r\n    if (hasinterface) then {\r\n        waituntil {local player};\r\n        _serverCommand = if (_ownerVar == \"#adminLogged\") then {\"#shutdown\"} else {\"#kick\"};\r\n\r\n        //--- Black effect until the interface is open\r\n        _forced = _logic getvariable [\"forced\",0] > 0;\r\n        if (_forced) then {\r\n            _isCurator = switch true do {\r\n                case (_ownerUID > 0): {\r\n                    getplayeruid player == _ownerVar\r\n                };\r\n                case (_isAdmin): {\r\n                    isserver || servercommandavailable _serverCommand\r\n                };\r\n                default {\r\n                    player == missionnamespace getvariable [_ownerVar,objnull]\r\n                };\r\n            };\r\n            if (_isCurator) then {\r\n                [true,true] spawn bis_fnc_forceCuratorInterface;\r\n                (\"RscDisplayCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",1e10];\r\n            };\r\n        };\r\n\r\n        //--- Check if player is server admin\r\n        if (_isAdmin) then {\r\n            _adminVar = _logic getvariable [\"adminVar\",\"\"];\r\n            _logic setvariable [\"adminVar\",nil];\r\n            if (isserver) then {\r\n                //--- Host\r\n                missionnamespace setvariable [_adminVar,player];\r\n            } else {\r\n                //--- Client\r\n                [_logic,_adminVar,_serverCommand] spawn {\r\n                    scriptname \"BIS_fnc_moduleCurator: Admin check\";\r\n\r\n                    _logic = _this select 0;\r\n                    _adminVar = _this select 1;\r\n                    _serverCommand = _this select 2;\r\n                    while {true} do {\r\n                        waituntil {sleep 0.1; servercommandavailable _serverCommand};\r\n                        missionnamespace setvariable [_adminVar,player];\r\n                        publicvariable _adminVar;\r\n                        _respawn = player addeventhandler [\"respawn\",format [\"%1 = _this select 0; publicvariable '%1';\",_adminVar]];\r\n\r\n                        waituntil {sleep 0.1; !servercommandavailable _serverCommand};\r\n                        missionnamespace setvariable [_adminVar,objnull];\r\n                        publicvariable _adminVar;\r\n                        player removeeventhandler [\"respawn\",_respawn];\r\n                    };\r\n                };\r\n            };\r\n        };\r\n\r\n        [_logic] spawn {\r\n            _logic = _this select 0;\r\n            sleep 1;\r\n            waituntil {alive player};\r\n\r\n            //--- Show warning when Zeus key is not assigned\r\n            if (count (actionkeys \"curatorInterface\") == 0) then {\r\n                [\r\n                    format [\r\n                        localize \"str_a3_cfgvehicles_modulecurator_f_keyNotAssigned\",\r\n                        ([\"IGUI\",\"WARNING_RGB\"] call bis_fnc_displaycolorget) call bis_fnc_colorRGBAtoHTML\r\n                    ]\r\n                ] call bis_fnc_guiMessage;\r\n            };\r\n\r\n            //--- Show hint about pinging for players\r\n            if (\r\n                isnil {profilenamespace getvariable \"bis_fnc_curatorPinged_done\"}\r\n                &&\r\n                {isTutHintsEnabled}\r\n                &&\r\n                {isnull getassignedcuratorlogic player}\r\n                &&\r\n                {player in curatoreditableobjects _logic}\r\n            ) then {\r\n                sleep 0.5;\r\n                [[\"Curator\",\"Ping\"]] call bis_fnc_advHint;\r\n            };\r\n        };\r\n\r\n        //--- Add local event handlers\r\n        _logic addeventhandler [\"curatorFeedbackMessage\",{_this call bis_fnc_showCuratorFeedbackMessage;}];\r\n        _logic addeventhandler [\"curatorPinged\",{_this call bis_fnc_curatorPinged;}];\r\n        _logic addeventhandler [\"curatorObjectPlaced\",{_this call bis_fnc_curatorObjectPlaced;}];\r\n        _logic addeventhandler [\"curatorObjectEdited\",{_this call bis_fnc_curatorObjectEdited;}];\r\n        _logic addeventhandler [\"curatorWaypointPlaced\",{_this call bis_fnc_curatorWaypointPlaced;}];\r\n\r\n        _logic addeventhandler [\"curatorObjectDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\r\n        _logic addeventhandler [\"curatorGroupDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\r\n        _logic addeventhandler [\"curatorWaypointDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\r\n        _logic addeventhandler [\"curatorMarkerDoubleClicked\",{(_this select 1) call bis_fnc_showCuratorAttributes;}];\r\n\r\n        player call bis_fnc_curatorRespawn;\r\n    };\r\n};\r\n"},{"name":"ace_zeus_fnc_bi_moduleMine","file":"zeus/functions/fnc_bi_moduleMine.sqf","text":"/*\r\n * Author: Bohemia Interactive\r\n * Module function for spawning mines\r\n * Edited to remove forced map markers and mines being revealed to players\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n_logic = _this select 0;\r\n_units = _this select 1;\r\n_activated = _this select 2;\r\n\r\nif (_activated) then {\r\n    _explosive = gettext (configFile >> \"CfgVehicles\" >> typeOf _logic >> \"explosive\");\r\n    if (_explosive != \"\") then {\r\n        _explosive = createvehicle [_explosive,position _logic,[],0,\"none\"];\r\n        _explosive attachto [_logic];\r\n\r\n        // Added by ace_zeus to control if mines are revealed\r\n        if (GVAR(revealMines) > 0) then {\r\n            //--- Reveal the mine to curator's side\r\n            {\r\n                _side = (getassignedcuratorunit _x) call bis_fnc_objectSide;\r\n                _side revealmine _explosive;\r\n            } forEach (objectcurators _logic);\r\n\r\n            if (GVAR(revealMines) > 1) then {\r\n                //--- Mark minefields in the map\r\n                [] spawn bis_fnc_drawMinefields;\r\n            };\r\n        };\r\n\r\n        //--- Show hint to curator who placed the object\r\n        [[[\"Curator\",\"PlaceMines\"],nil,nil,nil,nil,nil,nil,true],\"bis_fnc_advHint\",_logic] call bis_fnc_mp;\r\n\r\n        waitUntil {sleep 0.1; isnull _explosive || isnull _logic || !alive _logic};\r\n        if (isnull _logic) then {deletevehicle _explosive;} else {_explosive setdamage 1;};\r\n        deletevehicle _logic;\r\n    };\r\n};\r\n"},{"name":"ace_zeus_fnc_bi_moduleProjectile","file":"zeus/functions/fnc_bi_moduleProjectile.sqf","text":"/*\r\n * Author: Bohemia Interactive\r\n * Module function for spawning projectiles\r\n * Used by Curator artillery modules etc\r\n * Edited to remove radio warning and add ballistics support\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n_fnc_scriptNameParentTemp = if !(isNil '_fnc_scriptName') then {_fnc_scriptName} else {'BIS_fnc_moduleProjectile'};\r\nprivate ['_fnc_scriptNameParent'];\r\n_fnc_scriptNameParent = _fnc_scriptNameParentTemp;\r\n_fnc_scriptNameParentTemp = nil;\r\n\r\nprivate ['_fnc_scriptName'];\r\n_fnc_scriptName = 'BIS_fnc_moduleProjectile';\r\nscriptname _fnc_scriptName;\r\n\r\nprivate [\"_logic\", \"_units\", \"_activated\"];\r\n_logic = _this select 0;\r\n_units = _this select 1;\r\n_activated = _this select 2;\r\n\r\nif ({local _x} count (objectcurators _logic) > 0) then {\r\n    //--- Reveal the circle to curators\r\n    _logic hideobject false;\r\n    _logic setpos position _logic;\r\n};\r\nif !(isserver) exitWith {};\r\n\r\nif (_activated) then {\r\n    _ammo = _logic getVariable [\"type\",gettext (configFile >> \"CfgVehicles\" >> typeOf _logic >> \"ammo\")];\r\n    if (_ammo != \"\") then {\r\n        _CfgAmmo = configFile >> \"CfgAmmo\" >> _ammo;\r\n        _dirVar = _fnc_scriptname + typeOf _logic;\r\n        _logic setdir (missionnamespace getVariable [_dirVar,direction _logic]); //--- Restore custom direction\r\n        _pos = getposatl _logic;\r\n        _posAmmo = +_pos;\r\n        _posAmmo set [2,0];\r\n        _dir = direction _logic;\r\n        _simulation = tolower gettext (configFile >> \"CfgAmmo\" >> _ammo >> \"simulation\");\r\n        _altitude = 0;\r\n        _velocity = [];\r\n        _attach = false;\r\n        _radio = \"\";\r\n        _delay = 60;\r\n        _sound = \"\";\r\n        _soundSourceClass = \"\";\r\n        _hint = [];\r\n        _shakeStrength = 0;\r\n        _shakeRadius = 0;\r\n        switch (_simulation) do {\r\n            case \"shotshell\": {\r\n                _altitude = 1000;\r\n                _velocity = [0,0,-100];\r\n                _radio = \"SentGenIncoming\";\r\n                _sounds = if (getnumber (_cfgAmmo >> \"hit\") < 200) then {[\"mortar1\",\"mortar2\"]} else {[\"shell1\",\"shell2\",\"shell3\",\"shell4\"]};\r\n                _sound = selectRandom _sounds;\r\n                _hint = [\"Curator\",\"PlaceOrdnance\"];\r\n                _shakeStrength = 0.01;\r\n                _shakeRadius = 300;\r\n            };\r\n            case \"shotsubmunitions\": {\r\n                _posAmmo = [_posAmmo,500,_dir + 180] call bis_fnc_relpos;\r\n                _altitude = 1000 - ((getterrainheightasl _posAmmo) - (getterrainheightasl _pos));\r\n                _posAmmo set [2,_altitude];\r\n                _velocity = [sin _dir * 68,cos _dir * 68,-100];\r\n                _radio = \"SentGenIncoming\";\r\n                _hint = [\"Curator\",\"PlaceOrdnance\"];\r\n                _shakeStrength = 0.02;\r\n                _shakeRadius = 500;\r\n            };\r\n            case \"shotilluminating\": {\r\n                _altitude = 66;\r\n                _velocity = [wind select 0,wind select 1,30];\r\n                _sound = \"SN_Flare_Fired_4\";\r\n                _soundSourceClass = \"SoundFlareLoop_F\";\r\n            };\r\n            case \"shotnvgmarker\";\r\n            case \"shotsmokex\": {\r\n                _altitude = 0;\r\n                _velocity = [0,0,0];\r\n                _attach = true;\r\n            };\r\n            default {[\"Ammo simulation '%1' is not supported\",_simulation] call bis_fnc_error;};\r\n        };\r\n        _fnc_playRadio = {\r\n            if (_radio != \"\") then {\r\n                _entities = (getposatl _logic) nearentities [\"All\",100];\r\n                _sides = [];\r\n                {\r\n                    if (isplayer _x) then {\r\n                        _side = side group _x;\r\n                        if (_side in [east,west,resistance,civilian]) then {\r\n                            //--- Play radio (only if it wasn't played recently)\r\n                            if (CBA_missionTime > _x getVariable [\"BIS_fnc_moduleProjectile_radio\",-_delay]) then {\r\n                                [[_side,_radio,\"side\"],\"bis_fnc_sayMessage\",_x] call bis_fnc_mp;\r\n                                _x setVariable [\"BIS_fnc_moduleProjectile_radio\",CBA_missionTime + _delay];\r\n                            };\r\n                        };\r\n                    };\r\n                } forEach _entities;\r\n            };\r\n        };\r\n        if (count _hint > 0 && {count objectCurators _logic > 0}) then {\r\n            [[_hint,nil,nil,nil,nil,nil,nil,true],\"bis_fnc_advHint\",objectcurators _logic] call bis_fnc_mp;\r\n        };\r\n        if (count _velocity == 3) then {\r\n            _altitude = (_logic getVariable [\"altitude\",_altitude]) call bis_fnc_parsenumber;\r\n            _radio = _logic getVariable [\"radio\",_radio];\r\n\r\n            //--- Create projectile\r\n            _posAmmo set [2,_altitude];\r\n            _projectile = createvehicle [_ammo,_posAmmo,[],0,\"none\"];\r\n            _projectile setpos _posAmmo;\r\n            _projectile setvelocity _velocity;\r\n            if (_attach) then {_projectile attachto [_logic,[0,0,_altitude]];};\r\n\r\n           // Added by ace_zeus for ace_frag compatibility\r\n            if (!isNil QEFUNC(frag,addPfhRound)) then {\r\n                [objNull, _ammo, _projectile, true] call EFUNC(frag,addPfhRound);\r\n            };\r\n\r\n            //--- Play sound\r\n            if (_sound != \"\") then {[[_logic,_sound,\"say3D\"],\"bis_fnc_sayMessage\"] call bis_fnc_mp;};\r\n\r\n            //--- Create sound source\r\n            _soundSource = if (_soundSourceClass != \"\") then {createSoundSource [_soundSourceClass,_pos,[],0]} else {objnull};\r\n\r\n            // Added by ace_zeus to toggle ordnance radio message\r\n            if (GVAR(radioOrdnance)) then {\r\n                //--- Play radio warning\r\n                [] call _fnc_playRadio;\r\n            };\r\n\r\n            //--- Update\r\n            if (_attach) then {\r\n                waitUntil {\r\n                    _soundSource setposatl getposatl _projectile;\r\n                    sleep 1;\r\n                    isnull _projectile || isnull _logic\r\n                };\r\n            } else {\r\n                waitUntil {\r\n                    _soundSource setposatl getposatl _projectile;\r\n\r\n                    if (getposatl _logic distance _pos > 0 || direction _logic != _dir) then {\r\n                        _posNew = getposasl _logic;\r\n                        _dirDiff = direction _logic - _dir;\r\n                        _posNew = [_posNew,[getposasl _projectile,_pos] call bis_fnc_distance2d,direction _logic + 180] call bis_fnc_relpos;\r\n                        _posNew set [2,getposasl _projectile select 2];\r\n                        _projectile setvelocity ([velocity _projectile,-_dirDiff] call bis_fnc_rotatevector2d);\r\n                        _projectile setposasl _posNew;\r\n                        _pos = getposatl _logic;\r\n                        _dir = direction _logic;\r\n                        missionnamespace setVariable [_dirVar,_dir];\r\n                    };\r\n                    sleep 0.1;\r\n                    isnull _projectile || isnull _logic\r\n                };\r\n            };\r\n            deletevehicle _projectile;\r\n            deletevehicle _soundSource;\r\n            if (count objectcurators _logic > 0) then {\r\n\r\n                //--- Delete curator spawned logic\r\n                if (_shakeStrength > 0) then {\r\n                    if (_simulation == \"shotsubmunitions\") then {sleep 0.5;};\r\n                    [[_shakeStrength,0.7,[position _logic,_shakeRadius]],\"bis_fnc_shakeCuratorCamera\"] call bis_fnc_mp;\r\n                };\r\n                deletevehicle _logic;\r\n            } else {\r\n\r\n                //--- Repeat to achieve permanent effect\r\n                _repeat = _logic getVariable [\"repeat\",0] > 0;\r\n                if (_repeat) then {\r\n                    [_logic,_units,_activated] call bis_fnc_moduleprojectile;\r\n                } else {\r\n                    deletevehicle _logic;\r\n                };\r\n            };\r\n        } else {\r\n            deletevehicle _logic;\r\n        };\r\n    } else {\r\n        [\"Cannot create projectile, 'ammo' config attribute is missing in %1\",typeOf _logic] call bis_fnc_error;\r\n    };\r\n};\r\n"},{"name":"ace_zeus_fnc_bi_moduleRemoteControl","file":"zeus/functions/fnc_bi_moduleRemoteControl.sqf","text":"/*\r\n * Author: Bohemia Interactive\r\n * Module function for remote controlling units as zeus\r\n * Edited to remove global wind sound\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n_logic = _this select 0;\r\n_units = _this select 1;\r\n_activated = _this select 2;\r\n\r\nif (_activated && local _logic && !isnull curatorcamera) then {\r\n\r\n    //--- Terminate when remote control is already in progress\r\n    if !(isnull (missionnamespace getvariable [\"bis_fnc_moduleRemoteControl_unit\",objnull])) exitwith {};\r\n\r\n    //--- Get unit under cursor\r\n    _unit = objnull;\r\n    _mouseOver = missionnamespace getvariable [\"bis_fnc_curatorObjectPlaced_mouseOver\",[\"\"]];\r\n    if ((_mouseOver select 0) == typename objnull) then {_unit = _mouseOver select 1;};\r\n    _unit = effectivecommander _unit;\r\n\r\n    //--- Check if the unit is suitable\r\n    _error = \"\";\r\n    if !(side group _unit in [east,west,resistance,civilian]) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorEmpty\";};\r\n    if (isplayer _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorPlayer\";};\r\n    if !(alive _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorDestroyed\";};\r\n    if (isnull _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorNull\";};\r\n    if !(isnull (_unit getvariable [\"bis_fnc_moduleRemoteControl_owner\",objnull])) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorControl\";};\r\n    if (isuavconnected vehicle _unit) then {_error = localize \"str_a3_cfgvehicles_moduleremotecontrol_f_errorControl\";};\r\n\r\n    if (_error == \"\") then {\r\n        _unit spawn {\r\n            scriptname \"bis_fnc_moduleRemoteControl: Loop\";\r\n            _unit = _this;\r\n            _vehicle = vehicle _unit;\r\n            _vehicleRole = str assignedvehiclerole _unit;\r\n\r\n            bis_fnc_moduleRemoteControl_unit = _unit;\r\n            _unit setvariable [\"bis_fnc_moduleRemoteControl_owner\",player,true];\r\n\r\n            // Added by ace_zeus to toggle remote control wind sound\r\n            if (GVAR(remoteWind)) then {\r\n                //--- Play wind cue to all players\r\n                [format [\"wind%1\",ceil random 5],\"bis_fnc_playsound\"] call bis_fnc_mp;\r\n            };\r\n\r\n            _blur = ppeffectcreate [\"RadialBlur\",144];\r\n            _blur ppeffectenable true;\r\n            _blur ppeffectadjust [0,0,0.3,0.3];\r\n            _blur ppeffectcommit 0;\r\n            _blur ppeffectadjust [0.03,0.03,0.1,0.1];\r\n            _blur ppeffectcommit 1;\r\n\r\n            _cam = \"camera\" camcreate getposatl curatorcamera;\r\n            _cam cameraeffect [\"internal\",\"back\"];\r\n            _cam campreparetarget (screentoworld [0.5,0.5]);\r\n            _cam camcommitprepared 0;\r\n            _cam campreparetarget _unit;\r\n            _cam campreparefov 0.1;\r\n            _cam camcommitprepared 1;\r\n            sleep 0.75;\r\n\r\n            (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black out\",0.25];\r\n            sleep 0.25;\r\n\r\n            //--- Wait for interface to close\r\n            (finddisplay 312) closedisplay 2;\r\n            waituntil {isnull curatorcamera};\r\n\r\n            //--- Switch\r\n            player remotecontrol _unit;\r\n            if (cameraon != _vehicle) then {\r\n                _vehicle switchcamera cameraview;\r\n            };\r\n\r\n            ppeffectdestroy _blur;\r\n            _cam cameraeffect [\"terminate\",\"back\"];\r\n            camdestroy _cam;\r\n\r\n            _color = ppeffectcreate [\"colorCorrections\",1896];\r\n            _color ppeffectenable true;\r\n            _color ppeffectadjust [1,1,0,[0,0,0,1],[1,1,1,1],[0,0,0,0],[0.9,0.0,0,0,0,0.5,1]];\r\n            _color ppeffectcommit 0;\r\n\r\n            _curator = getassignedcuratorlogic player;\r\n            [_curator,\"curatorObjectRemoteControlled\",[_curator,player,_unit,true]] call bis_fnc_callScriptedEventHandler;\r\n            [[\"Curator\",\"RemoteControl\"],nil,nil,nil,nil,nil,nil,true] call bis_fnc_advHint;\r\n\r\n            sleep 0.3;\r\n            _color ppeffectadjust [1,1,0,[0,0,0,1],[1,1,1,1],[0,0,0,0],[0.9,0.85,0,0,0,0.5,1]];\r\n            _color ppeffectcommit 0.3;\r\n            (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",0.5];\r\n\r\n            //--- Back to player\r\n            _vehicle = vehicle _unit;\r\n            _vehicleRole = str assignedvehiclerole _unit;\r\n            _rating = rating player;\r\n            waituntil {\r\n                //--- Refresh when vehicle or vehicle role changes\r\n                if ((vehicle _unit != _vehicle || str assignedvehiclerole _unit != _vehicleRole) && {alive _unit}) then {\r\n                    player remotecontrol _unit;\r\n                    _vehicle = vehicle _unit;\r\n                    _vehicleRole = str assignedvehiclerole _unit;\r\n                };\r\n                if (rating player < _rating) then {\r\n                    player addrating (-rating player + _rating);\r\n                };\r\n                sleep 0.01;\r\n                !isnull curatorcamera\r\n                ||\r\n                {cameraon == vehicle player}\r\n                ||\r\n                {!alive _unit} //--- Also isnull check, objNull is not alive\r\n                ||\r\n                {!alive player}\r\n                ||\r\n                {isnull getassignedcuratorlogic player}\r\n            };\r\n\r\n            player addrating (-rating player + _rating);\r\n            objnull remotecontrol _unit;\r\n            _unit setvariable [\"bis_fnc_moduleRemoteControl_owner\",nil,true];\r\n\r\n            if (alive player) then {\r\n                //--- Death screen\r\n                if (\r\n                    isnull curatorcamera\r\n                    &&\r\n                    {cameraon != vehicle player}\r\n                    &&\r\n                    {!isnull _unit}\r\n                    &&\r\n                    {!isnull getassignedcuratorlogic player}\r\n                    //&&\r\n                    //{(_unit getvariable [\"bis_fnc_moduleRemoteControl_owner\",objnull] == player)}\r\n                ) then {\r\n                    sleep 2;\r\n                    (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black out\",1];\r\n                    sleep 1;\r\n                };\r\n                if !(isnull _unit) then {\r\n                    _unitPos = getposatl _unit;\r\n                    _camPos = [_unitPos,10,direction _unit + 180] call bis_fnc_relpos;\r\n                    _camPos set [2,(_unitPos select 2) + (getterrainheightasl _unitPos) - (getterrainheightasl _camPos) + 10];\r\n                    //[_camPos,_unit] call bis_fnc_setcuratorcamera;\r\n                    (getassignedcuratorlogic player) setvariable [\"bis_fnc_modulecuratorsetcamera_params\",[_camPos,_unit]];\r\n                };\r\n\r\n                sleep 0.1; //--- Engine needs a delay in case controlled unit was deleted\r\n                (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",1e10];\r\n                opencuratorinterface;\r\n                ppeffectdestroy _color;\r\n\r\n                waituntil {!isnull curatorcamera};\r\n            } else {\r\n                ppeffectdestroy _color;\r\n            };\r\n            player switchcamera cameraview;\r\n            bis_fnc_moduleRemoteControl_unit = nil;\r\n            (\"bis_fnc_moduleRemoteCurator\" call bis_fnc_rscLayer) cuttext [\"\",\"black in\",1];\r\n            [_curator,\"curatorObjectRemoteControlled\",[_curator,player,_unit,false]] call bis_fnc_callScriptedEventHandler;\r\n            sleep 0.01;\r\n        };\r\n    } else {\r\n        [objnull,_error] call bis_fnc_showCuratorFeedbackMessage;\r\n    };\r\n    deletevehicle _logic;\r\n};\r\n"},{"name":"ace_zeus_fnc_handleZeusUnitAssigned","file":"zeus/functions/fnc_handleZeusUnitAssigned.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Contextually removes addons (given in ACE_Curator) from zeus based on their required addon(s)\r\n *\r\n * ACE_Curator format:\r\n * ModuleAddon = \"RequiredAddon\";\r\n * OR\r\n * ModuleAddon[] = {\"RequiredAddon1\",\"RequiredAddon2\",...}\r\n *\r\n * Arguments:\r\n * 0: The zeus logic <LOGIC>\r\n * 1: The zeus player <UNIT>\r\n *\r\n * Return Value:\r\n * nil\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nprivate [\"_removeAddons\", \"_numCfgs\", \"_cfg\", \"_requiredAddon\"];\r\n\r\nif !(isClass (configFile >> \"ACE_Curator\")) exitWith { ERROR(\"The ACE_Curator class does not exist\") };\r\n\r\nparams [\"_logic\"];\r\n_removeAddons = [];\r\n\r\n_numCfgs = count (configFile >> \"ACE_Curator\");\r\nfor \"_n\" from 0 to (_numCfgs - 1) do {\r\n    _cfg = (configFile >> \"ACE_Curator\") select _n;\r\n\r\n    if (isArray _cfg) then {\r\n        _requiredAddon = getArray _cfg;\r\n        {\r\n            if !(isClass (configFile >> \"CfgPatches\" >> _x)) exitWith {\r\n                _removeAddons pushBack (configName _cfg);\r\n            };\r\n        } forEach _requiredAddon;\r\n    };\r\n\r\n    if (isText _cfg) then {\r\n        _requiredAddon = getText _cfg;\r\n        if !(isClass (configFile >> \"CfgPatches\" >> _requiredAddon)) then {\r\n            _removeAddons pushBack (configName _cfg);\r\n        };\r\n    };\r\n};\r\n\r\n_logic removeCuratorAddons _removeAddons;\r\n"},{"name":"ace_zeus_fnc_moduleAddSpareTrack","file":"zeus/functions/fnc_moduleAddSpareTrack.sqf","text":"/*\r\n * Author: Jonpas\r\n * Adds a Spare Track to the vehicle.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif !([\"ace_cargo\"] call EFUNC(common,isModLoaded) && [\"ace_repair\"] call EFUNC(common,isModLoaded)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    (GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"])) params [\"_mouseOverType\", \"_mouseOverUnit\"];\r\n\r\n    if (_mouseOverType != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        if !(alive _mouseOverUnit) then {\r\n            [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if (getNumber (configFile >> \"CfgVehicles\" >> \"ACE_Track\" >> QEGVAR(cargo,size)) > [_mouseOverUnit] call EFUNC(cargo,getCargoSpaceLeft)) then {\r\n                [LSTRING(OnlyEnoughCargoSpace)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                [\"ace_addCargoByClass\", [\"ACE_Track\", _mouseOverUnit, 1, true]] call CBA_fnc_localEvent;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleAddSpareWheel","file":"zeus/functions/fnc_moduleAddSpareWheel.sqf","text":"/*\r\n * Author: Jonpas\r\n * Adds a Spare Wheel to the vehicle.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None\r\n *\r\n * Public: No\r\n */\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif !([\"ace_cargo\"] call EFUNC(common,isModLoaded) && [\"ace_repair\"] call EFUNC(common,isModLoaded)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    (GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"])) params [\"_mouseOverType\", \"_mouseOverUnit\"];\r\n\r\n    if (_mouseOverType != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        if !(alive _mouseOverUnit) then {\r\n            [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if (getNumber (configFile >> \"CfgVehicles\" >> \"ACE_Wheel\" >> QEGVAR(cargo,size)) > [_mouseOverUnit] call EFUNC(cargo,getCargoSpaceLeft)) then {\r\n                [LSTRING(OnlyEnoughCargoSpace)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                [\"ace_addCargoByClass\", [\"ACE_Wheel\", _mouseOverUnit, 1, true]] call CBA_fnc_localEvent;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleCaptive","file":"zeus/functions/fnc_moduleCaptive.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Flips the capture state of the unit the module is placed on.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\nprivate [\"_mouseOver\", \"_unit\", \"_captive\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif (isNil QEFUNC(captives,setHandcuffed)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\r\n\r\n    if ((_mouseOver select 0) != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        _unit = effectivecommander (_mouseOver select 1);\r\n\r\n        if !(_unit isKindOf \"CAManBase\") then {\r\n            [LSTRING(OnlyInfantry)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if !(alive _unit) then {\r\n                [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                _captive = GETVAR(_unit,EGVAR(captives,isHandcuffed),false);\r\n                // Event initalized by ACE_Captives\r\n                [QEGVAR(captives,setHandcuffed), [_unit, !_captive], _unit] call CBA_fnc_targetEvent;\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleGlobalSetSkill","file":"zeus/functions/fnc_moduleGlobalSetSkill.sqf","text":"/*\r\n * Author: SilentSpike\r\n * PV event handler to update the AI skill on all machines when set by zeus module\r\n *\r\n * Arguments:\r\n * 0: Variable name <STRING>\r\n * 1: Variable new value <ANY>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * \"ace_zeus_GlobalSkillAI\" addPublicVariableEventHandler ace_zeus_fnc_moduleGlobalSetSkill\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\n_this params [\"_varName\",\"_varValue\"];\r\n_varValue params [\"_general\",\"_accuracy\",\"_handling\",\"_spotting\",\"_cover\",\"_combat\"];\r\nTRACE_1(\"Params\",_this);\r\n\r\nTRACE_6(\"AI settings updated\",GVAR(GlobalSkillAI));\r\n{\r\n    if (local _x) then {\r\n        _unit setSkill [\"general\", _general];\r\n        _unit setSkill [\"commanding\", _general];\r\n        _unit setSkill [\"courage\", _general];\r\n        _unit setSkill [\"aimingAccuracy\", _accuracy];\r\n        _unit setSkill [\"aimingShake\", _handling];\r\n        _unit setSkill [\"aimingSpeed\", _handling];\r\n        _unit setSkill [\"reloadSpeed\", _handling];\r\n        _unit setSkill [\"spotDistance\", _spotting];\r\n        _unit setSkill [\"spotTime\", _spotting];\r\n\r\n        if (_cover) then {\r\n            _unit enableAI \"COVER\";\r\n        } else {\r\n            _unit disableAI \"COVER\";\r\n        };\r\n\r\n        if (_combat) then {\r\n            _unit enableAI \"AUTOCOMBAT\";\r\n        } else {\r\n            _unit disableAI \"AUTOCOMBAT\";\r\n        };\r\n    };\r\n} forEach allUnits;\r\n"},{"name":"ace_zeus_fnc_moduleGroupSide","file":"zeus/functions/fnc_moduleGroupSide.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Zeus module function to change side of a group on dialog confirmation\r\n *\r\n * Arguments:\r\n * 0: Unit to target <OBJECT>\r\n * 1: Chosen side <SIDE>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [this, west] call ace_zeus_fnc_moduleGroupSide\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_unit\",\"_newSide\"];\r\nprivate _side = side _unit;\r\n\r\n// Nothing to do here\r\nif (_side == _newSide) exitWith {};\r\n\r\nprivate _oldGroup = group _unit;\r\nprivate _newGroup = createGroup _newSide;\r\n\r\n// Pretty hacky, will replace units return group with this new group if unconcious\r\nif (GETVAR(_unit,ACE_isUnconscious,false) && {GETMVAR(EGVAR(medical,moveUnitsFromGroupOnUnconscious),false)}) then {\r\n        private _previousGroupsList = _unit getVariable [QEGVAR(common,previousGroupSwitchTo), []];\r\n\r\n        {\r\n            if (\"ACE_isUnconscious\" == (_x select 2)) exitWith {\r\n                _x set [0,_newGroup];\r\n                _x set [1,_newSide];\r\n                _previousGroupsList set [_forEachIndex, _x];\r\n            };\r\n        } forEach _previousGroupsList;\r\n\r\n        _unit setVariable [QEGVAR(common,previousGroupSwitchTo), _previousGroupsList, true];\r\n} else {\r\n    (units _unit) joinSilent _newGroup;\r\n    deleteGroup _oldGroup;\r\n};\r\n"},{"name":"ace_zeus_fnc_moduleSearchNearby","file":"zeus/functions/fnc_moduleSearchNearby.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Commands the group the module is placed on to search the nearest building\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\",\"_units\",\"_activated\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\n//Validate the module target:\r\nprivate _unit = effectiveCommander (attachedTo _logic);\r\nprivate _building = nearestBuilding (getPosASL _unit);\r\n\r\nscopeName \"Main\";\r\nprivate _fnc_errorAndClose = {\r\n    params [\"_msg\"];\r\n    deleteVehicle _logic;\r\n    [_msg] call EFUNC(common,displayTextStructured);\r\n    breakOut \"Main\";\r\n};\r\n\r\nswitch (false) do {\r\n    case !(isNull _unit): {\r\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\r\n    };\r\n    case (_unit isKindOf \"CAManBase\"): {\r\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\r\n    };\r\n    case (alive _unit): {\r\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\r\n    };\r\n    case (_unit distance _building < 500): {\r\n        [LSTRING(BuildingTooFar)] call _fnc_errorAndClose;\r\n    };\r\n};\r\n\r\n//Perform the module function:\r\n[QGVAR(moduleSearchNearby), [_unit], _unit] call CBA_fnc_targetEvent;\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleSetMedic","file":"zeus/functions/fnc_moduleSetMedic.sqf","text":"/*\r\n * Author: SilentSpike, Glowbal\r\n * Assigns a medic role from the medical module to a unit\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\nprivate [\"_mouseOver\", \"_unit\", \"_medicN\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif !([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\r\n\r\n    if ((_mouseOver select 0) != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        _unit = effectivecommander (_mouseOver select 1);\r\n\r\n        if !(_unit isKindOf \"CAManBase\") then {\r\n            [LSTRING(OnlyInfantry)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if !(alive _unit) then {\r\n                [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\r\n                    [LSTRING(OnlyNonCaptive)] call EFUNC(common,displayTextStructured);\r\n                } else {\r\n                    _medicN = GETVAR(_unit,EGVAR(medical,medicClass),0);\r\n                    if (_medicN < 1) then {\r\n                        _unit setVariable [QEGVAR(medical,medicClass), 1, true];\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleSetMedicalFacility","file":"zeus/functions/fnc_moduleSetMedicalFacility.sqf","text":"/*\r\n * Author: SilentSpike, Glowbal\r\n * Assigns a medic role from the medical module to a unit\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\nprivate [\"_mouseOver\", \"_unit\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif !([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\r\n\r\n    if ((_mouseOver select 0) != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        _unit = (_mouseOver select 1);\r\n\r\n        if (_unit isKindOf \"Man\" || {!(_unit isKindOf \"Building\")}) then {\r\n            [LSTRING(OnlyStructures)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if !(alive _unit) then {\r\n                [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\r\n                    [LSTRING(OnlyNonCaptive)] call EFUNC(common,displayTextStructured);\r\n                } else {\r\n                    if (!(GETVAR(_unit,EGVAR(medical,isMedicalFacility),false))) then {\r\n                        _unit setVariable [QEGVAR(medical,isMedicalFacility), true, true];\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleSetMedicalVehicle","file":"zeus/functions/fnc_moduleSetMedicalVehicle.sqf","text":"/*\r\n * Author: SilentSpike, Glowbal\r\n * Assigns a medic role from the medical module to a unit\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\nprivate [\"_mouseOver\", \"_unit\", \"_medicN\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif !([\"ACE_Medical\"] call EFUNC(common,isModLoaded)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\r\n\r\n    if ((_mouseOver select 0) != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        _unit = (_mouseOver select 1);\r\n\r\n        if (_unit isKindOf \"Man\" || {_unit isKindOf \"Building\"}) then {\r\n            [LSTRING(OnlyVehicles)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if !(alive _unit) then {\r\n                [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\r\n                    [LSTRING(OnlyNonCaptive)] call EFUNC(common,displayTextStructured);\r\n                } else {\r\n                    _medicN = GETVAR(_unit,EGVAR(medical,medicClass),0);\r\n                    if (_medicN < 1) then {\r\n                        _unit setVariable [QEGVAR(medical,medicClass), 1, true];\r\n                    };\r\n                };\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleSurrender","file":"zeus/functions/fnc_moduleSurrender.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Flips the surrender state of the unit the module is placed on.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\nprivate [\"_mouseOver\", \"_unit\", \"_surrendering\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif (isNil QEFUNC(captives,setSurrendered)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\r\n\r\n    if ((_mouseOver select 0) != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        _unit = effectivecommander (_mouseOver select 1);\r\n\r\n        if !(_unit isKindOf \"CAManBase\") then {\r\n            [LSTRING(OnlyInfantry)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if !(alive _unit) then {\r\n                [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                if (GETVAR(_unit,EGVAR(captives,isHandcuffed),false)) then {\r\n                    [LSTRING(OnlyNonCaptive)] call EFUNC(common,displayTextStructured);\r\n                } else {\r\n                    _surrendering = GETVAR(_unit,EGVAR(captives,isSurrendering),false);\r\n                    // Event initalized by ACE_Captives\r\n                    [QEGVAR(captives,setSurrendered), [_unit, !_surrendering], _unit] call CBA_fnc_targetEvent;\r\n                };\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleTeleportPlayers","file":"zeus/functions/fnc_moduleTeleportPlayers.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Zeus module function to teleport players on dialog confirmation\r\n *\r\n * Arguments:\r\n * 0: Teleport to <OBJECT>\r\n * 1: Player UID <STRING>\r\n * 2: Teleport group <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * [player, \"5854854754\", false] call ace_zeus_fnc_moduleTeleportPlayers\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\",\"_uid\",\"_group\"];\r\n\r\n// Get the chosen unit\r\nprivate _player = [_uid] call BIS_fnc_getUnitByUID;\r\n\r\n// Handle if group mode was selected\r\nif (_group) then {\r\n    _player = units _player;\r\n} else {\r\n    _player = [_player];\r\n};\r\n\r\n// Handle teleportation\r\n{\r\n    moveOut _x;\r\n\r\n    private _attached = attachedTo _logic;\r\n    if (isNull _attached) then {\r\n        [_x, _logic] call BIS_fnc_moveToRespawnPosition;\r\n    } else {\r\n        [_x, _attached] call BIS_fnc_moveToRespawnPosition;\r\n    };\r\n} forEach _player;\r\n"},{"name":"ace_zeus_fnc_moduleUnconscious","file":"zeus/functions/fnc_moduleUnconscious.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Flips the unconscious state of the unit the module is placed on.\r\n *\r\n * Arguments:\r\n * 0: The module logic <OBJECT>\r\n * 1: Synchronized units <ARRAY>\r\n * 2: Activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\nprivate [\"_mouseOver\", \"_unit\", \"_conscious\"];\r\n\r\nif !(_activated && local _logic) exitWith {};\r\n\r\nif (isNil QEFUNC(medical,setUnconscious)) then {\r\n    [LSTRING(RequiresAddon)] call EFUNC(common,displayTextStructured);\r\n} else {\r\n    _mouseOver = GETMVAR(bis_fnc_curatorObjectPlaced_mouseOver,[\"\"]);\r\n\r\n    if ((_mouseOver select 0) != \"OBJECT\") then {\r\n        [LSTRING(NothingSelected)] call EFUNC(common,displayTextStructured);\r\n    } else {\r\n        _unit = effectivecommander (_mouseOver select 1);\r\n\r\n        if !(_unit isKindOf \"CAManBase\") then {\r\n            [LSTRING(OnlyInfantry)] call EFUNC(common,displayTextStructured);\r\n        } else {\r\n            if !(alive _unit) then {\r\n                [LSTRING(OnlyAlive)] call EFUNC(common,displayTextStructured);\r\n            } else {\r\n                _conscious = GETVAR(_unit,ACE_isUnconscious,false);\r\n                // Function handles locality for me\r\n                [_unit, !_conscious, 10e10, true] call EFUNC(medical,setUnconscious);\r\n            };\r\n        };\r\n    };\r\n};\r\n\r\ndeleteVehicle _logic;\r\n"},{"name":"ace_zeus_fnc_moduleZeusSettings","file":"zeus/functions/fnc_moduleZeusSettings.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Module for adjusting various aspects of zeus\r\n *\r\n * Arguments:\r\n * 0: The module logic <LOGIC>\r\n * 1: units <ARRAY>\r\n * 2: activated <BOOL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_logic\", \"_units\", \"_activated\"];\r\n\r\nif !(_activated) exitWith {};\r\n\r\n[_logic, QGVAR(zeusAscension), \"zeusAscension\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(zeusBird), \"zeusBird\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(radioOrdnance), \"radioOrdnance\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(revealMines), \"revealMines\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(remoteWind), \"remoteWind\"] call EFUNC(common,readSettingFromModule);\r\n[_logic, QGVAR(autoAddObjects), \"autoAddObjects\"] call EFUNC(common,readSettingFromModule);\r\n"},{"name":"ace_zeus_fnc_ui_attributeCargo","file":"zeus/functions/fnc_ui_attributeCargo.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Initalises the ace_cargo attribute of the zeus vehicle attributes display\r\n * (the display shown on double click)\r\n *\r\n * Arguments:\r\n * 0: ace_cargo controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * onSetFocus = \"_this call ace_zeus_fnc_ui_vehCargo\"\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nparams [\"_control\"];\r\nTRACE_1(\"params\",_control);\r\n\r\nprivate _veh = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\nTRACE_1(\"\",_veh);\r\n\r\nprivate _loaded = _veh getVariable [QEGVAR(cargo,loaded), []];\r\nTRACE_1(\"\",_loaded);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n{\r\n    (_control controlsGroupCtrl 80086) lbAdd (str _x);\r\n} forEach _loaded;\r\n"},{"name":"ace_zeus_fnc_ui_attributePosition","file":"zeus/functions/fnc_ui_attributePosition.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Initalises the `position` zeus module attribute\r\n *\r\n * Arguments:\r\n * 0: position controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\n//Generic Init:\r\nparams [\"_control\"];\r\nprivate _display = ctrlParent _control;\r\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Specific on-load stuff:\r\nprivate _map = _control controlsGroupCtrl 26469;\r\n\r\n// Centre map on the logic initially\r\n_map ctrlMapAnimAdd [0, ctrlMapScale _map, _logic];\r\nctrlMapAnimCommit _map;\r\n\r\nprivate _fnc_onDraw = {\r\n    params [\"_map\"];\r\n\r\n    private _display = ctrlParent _map;\r\n    private _pos = GETVAR(_display,GVAR(position),[]);\r\n    private _radius = GETVAR(_display,GVAR(radius),0);\r\n\r\n    if !(_pos isEqualTo []) then {\r\n        // Works alongside radius attribute\r\n        if (_radius == 0) then {\r\n            _map drawIcon [\"\\A3\\ui_f\\data\\map\\markers\\military\\dot_CA.paa\", [0,0,0,1], _pos, 19, 19, 0, \"\", 0, 0];\r\n        } else {\r\n            _map drawEllipse [_pos, _radius, _radius, 0, [0,0,0,1], \"\"];\r\n        };\r\n    };\r\n};\r\n\r\nprivate _fnc_onMapClick = {\r\n    params [\"_map\",\"_button\",\"_x\",\"_y\",\"_shift\",\"_ctrl\",\"_alt\"];\r\n\r\n    if (_button == 0) then {\r\n        private _display = ctrlParent _map;\r\n        SETVAR(_display,GVAR(position),_pos);\r\n    };\r\n};\r\n\r\nSETVAR(_display,GVAR(position),getPos _logic);\r\n_map ctrlAddEventHandler [\"draw\",_fnc_onDraw];\r\n_map ctrlAddEventHandler [\"mouseButtonDown\",_fnc_onMapClick];\r\n"},{"name":"ace_zeus_fnc_ui_attributeRadius","file":"zeus/functions/fnc_ui_attributeRadius.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Initalises the `radius` zeus module attribute\r\n *\r\n * Arguments:\r\n * 0: radius controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\n//Generic Init:\r\nparams [\"_control\"];\r\nprivate _display = ctrlParent _control;\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Specific on-load stuff:\r\nprivate _edit = _control controlsGroupCtrl 26467;\r\n\r\n_edit ctrlSetText \"100\";\r\n\r\nprivate _fnc_onKeyUp = {\r\n    params [\"_display\"];\r\n\r\n    private _edit = _display displayCtrl 26467;\r\n    private _radius = parseNumber (ctrlText _edit);\r\n\r\n    // Handle invalid radius (non-numerical input)\r\n    if (_radius == 0) then {\r\n        _edit ctrlSetTooltip (localize LSTRING(AttributeRadiusInvalid));\r\n        _edit ctrlSetTextColor [1,0,0,1];\r\n    } else {\r\n        _edit ctrlSetTooltip \"\";\r\n        _edit ctrlSetTextColor [1,1,1,1];\r\n        SETVAR(_display,GVAR(radius),_radius);\r\n    };\r\n};\r\n\r\n[_display] call _fnc_onKeyUp;\r\n_display displayAddEventHandler [\"keyUp\", _fnc_onKeyUp];\r\n"},{"name":"ace_zeus_fnc_ui_defendArea","file":"zeus/functions/fnc_ui_defendArea.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Initalises the `defend area` zeus module display\r\n *\r\n * Arguments:\r\n * 0: dummy controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\n//Generic Init:\r\nparams [\"_control\"];\r\nprivate _display = ctrlParent _control;\r\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Validate the module target:\r\nprivate _unit = effectiveCommander (attachedTo _logic);\r\n\r\nscopeName \"Main\";\r\nprivate _fnc_errorAndClose = {\r\n    params [\"_msg\"];\r\n    _display closeDisplay 0;\r\n    deleteVehicle _logic;\r\n    [_msg] call EFUNC(common,displayTextStructured);\r\n    breakOut \"Main\";\r\n};\r\n\r\nswitch (false) do {\r\n    case !(isNull _unit): {\r\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\r\n    };\r\n    case (_unit isKindOf \"CAManBase\"): {\r\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\r\n    };\r\n    case (alive _unit): {\r\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\r\n    };\r\n};\r\n\r\nprivate _fnc_onUnload = {\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    if (_this select 1 == 2) then {\r\n        deleteVehicle _logic;\r\n    };\r\n};\r\n\r\nprivate _fnc_onConfirm = {\r\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\r\n\r\n    private _display = ctrlparent _ctrlButtonOK;\r\n    if (isNull _display) exitWith {};\r\n\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    private _unit = effectiveCommander (attachedTo _logic);\r\n    private _radius = GETVAR(_display,GVAR(radius),50);\r\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\r\n\r\n    [QGVAR(moduleDefendArea), [_unit,_position,_radius], _unit] call CBA_fnc_targetEvent;\r\n    deleteVehicle _logic;\r\n};\r\n\r\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\r\n_control ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\r\n"},{"name":"ace_zeus_fnc_ui_globalSetSkill","file":"zeus/functions/fnc_ui_globalSetSkill.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Initalises the `global skill` zeus module display\r\n *\r\n * Arguments:\r\n * 0: globalSetSkill controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * onSetFocus = \"_this call ace_zeus_fnc_ui_globalSetSkill\"\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_control\"];\r\nTRACE_1(\"params\",_control);\r\n\r\n//Generic Init:\r\nprivate _display = ctrlparent _control;\r\nprivate _ctrlButtonOK = _display displayctrl 1; //IDC_OK\r\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\nTRACE_1(\"logicObject\",_logic);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Specific on-load stuff:\r\nprivate _fnc_sliderMove = {\r\n    params [\"_slider\"];\r\n    private _idc = ctrlIDC _slider; // IDCs ∈ [16184,16187]\r\n    private _curVal = GVAR(GlobalSkillAI) select (_idc - 16184); // [0,3]\r\n    _slider ctrlSetTooltip format [\"%1%3 (was %2%3)\", round(sliderPosition _slider * 100), round(_curVal * 100), \"%\"];\r\n};\r\n\r\n{\r\n    private _slider = _display displayCtrl _x;\r\n    _slider sliderSetRange [0, 1];\r\n    _slider sliderSetSpeed [0.01,0.1];\r\n    _slider sliderSetPosition (GVAR(GlobalSkillAI) select _forEachIndex);\r\n    _slider ctrlAddEventHandler [\"SliderPosChanged\", _fnc_sliderMove];\r\n    _slider call _fnc_sliderMove;\r\n} forEach [16184,16185,16186,16187];\r\n\r\n(_display displayCtrl 16188) cbSetChecked (GVAR(GlobalSkillAI) select 4);\r\n(_display displayCtrl 16189) cbSetChecked (GVAR(GlobalSkillAI) select 5);\r\n\r\nprivate _fnc_onUnload = {\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    deleteVehicle _logic;\r\n};\r\n\r\nprivate _fnc_onConfirm = {\r\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\r\n    TRACE_1(\"_fnc_onConfirm params\",_this);\r\n\r\n    private _display = ctrlparent _ctrlButtonOK;\r\n    if (isNull _display) exitWith {};\r\n\r\n    GVAR(GlobalSkillAI) = [\r\n        sliderPosition (_display displayCtrl 16184), // General\r\n        sliderPosition (_display displayCtrl 16185), // Accuracy\r\n        sliderPosition (_display displayCtrl 16186), // Handling\r\n        sliderPosition (_display displayCtrl 16187), // Spotting\r\n        cbChecked (_display displayCtrl 16188), // Seek cover\r\n        cbChecked (_display displayCtrl 16189) // Autocombat\r\n    ];\r\n    publicVariable QGVAR(GlobalSkillAI); // Values should persist for future use\r\n\r\n    // PV EH won't run on local machine\r\n    [QGVAR(GlobalSkillAI),GVAR(GlobalSkillAI)] call FUNC(moduleGlobalSetSkill);\r\n};\r\n\r\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\r\n_ctrlButtonOK ctrlAddEventHandler [\"buttonclick\", _fnc_onConfirm];\r\n"},{"name":"ace_zeus_fnc_ui_groupSide","file":"zeus/functions/fnc_ui_groupSide.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Initalises the `group side` zeus module display\r\n *\r\n * Arguments:\r\n * 0: groupSide controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * NONE <NIL>\r\n *\r\n * Example:\r\n * onSetFocus = \"_this call ace_zeus_fnc_ui_groupSide\"\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n#define IDCs [31201,31200,31202,31203]\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_control\"];\r\n\r\n//Generic Init:\r\nprivate _display = ctrlparent _control;\r\nprivate _ctrlButtonOK = _display displayctrl 1; //IDC_OK\r\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\nTRACE_1(\"logicObject\",_logic);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Validate the module target:\r\nprivate _unit = effectiveCommander (attachedTo _logic);\r\nprivate _side = side _unit;\r\n\r\nscopeName \"Main\";\r\nprivate _fnc_errorAndClose = {\r\n    params [\"_msg\"];\r\n    _display closeDisplay 0;\r\n    deleteVehicle _logic;\r\n    [_msg] call EFUNC(common,displayTextStructured);\r\n    breakOut \"Main\";\r\n};\r\n\r\nswitch (false) do {\r\n    case !(isNull _unit): {\r\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\r\n    };\r\n    case (_unit isKindOf \"CAManBase\"): {\r\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\r\n    };\r\n    case (alive _unit): {\r\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\r\n    };\r\n    case (_side in [west,east,independent,civilian]): {\r\n        [LSTRING(OnlySpecificSide)] call _fnc_errorAndClose;\r\n    };\r\n};\r\n\r\n//Specific on-load stuff:\r\nprivate _idcActive = 31200 + ([west,east,independent,civilian] find _side);\r\nSETVAR(_display,oldSide,_idcActive - 31200);\r\nSETVAR(_display,newSide,_idcActive - 31200);\r\n\r\nprivate _fnc_onSelection = {\r\n    params [[\"_activeCtrl\", controlNull, [controlNull]]];\r\n\r\n    private _display = ctrlParent _activeCtrl;\r\n    if (isNull _display) exitWith {};\r\n\r\n    // Update the button scales and colours on selection\r\n    {\r\n        private _ctrl = _display displayCtrl _x;\r\n        private _color = _ctrl getVariable \"color\";\r\n        private _scale = 1;\r\n\r\n        if (ctrlIDC _activeCtrl == _x) then {\r\n            _color set [3,1];\r\n            _scale = 1.2\r\n        } else {\r\n            _color set [3,0.5];\r\n        };\r\n\r\n        _ctrl ctrlSetTextColor _color;\r\n        [_ctrl,_scale,0.1] call BIS_fnc_ctrlSetScale;\r\n    } forEach IDCs;\r\n\r\n    // Store selected button index for confirmation\r\n    SETVAR(_display,newSide,(ctrlIDC _activeCtrl) - 31200);\r\n};\r\n\r\n// Initalize buttons with colour and scale\r\n{\r\n    private _ctrl = _display displayCtrl _x;\r\n    private _color = [_forEachIndex] call BIS_fnc_sideColor;\r\n    _ctrl setVariable [\"color\", _color];\r\n    _ctrl ctrlSetActiveColor _color;\r\n    _color set [3,0.5];\r\n\r\n    if (ctrlIDC _ctrl == _idcActive) then {\r\n        [_ctrl,1.2,0] call BIS_fnc_ctrlSetScale;\r\n        _color set [3,1];\r\n    };\r\n\r\n    _ctrl ctrlSetTextColor _color;\r\n\r\n    _ctrl ctrlAddEventHandler [\"buttonclick\", _fnc_onSelection];\r\n} forEach IDCs;\r\n\r\nprivate _fnc_onUnload = {\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    if (_this select 1 == 2) then {\r\n        deleteVehicle _logic;\r\n    };\r\n};\r\n\r\nprivate _fnc_onConfirm = {\r\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\r\n\r\n    private _display = ctrlparent _ctrlButtonOK;\r\n    if (isNull _display) exitWith {};\r\n\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    private _unit = effectiveCommander (attachedTo _logic);\r\n    private _side = [west,east,independent,civilian] select (GETVAR(_display,newSide,GETVAR(_display,oldSide,0)));\r\n\r\n    [_unit, _side] call FUNC(moduleGroupSide);\r\n    deleteVehicle _logic;\r\n};\r\n\r\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\r\n_ctrlButtonOK ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\r\n"},{"name":"ace_zeus_fnc_ui_patrolArea","file":"zeus/functions/fnc_ui_patrolArea.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Initalises the `patrol area` zeus module display\r\n *\r\n * Arguments:\r\n * 0: dummy controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\n//Generic Init:\r\nparams [\"_control\"];\r\nprivate _display = ctrlParent _control;\r\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Validate the module target:\r\nprivate _unit = effectiveCommander (attachedTo _logic);\r\n\r\nscopeName \"Main\";\r\nprivate _fnc_errorAndClose = {\r\n    params [\"_msg\"];\r\n    _display closeDisplay 0;\r\n    deleteVehicle _logic;\r\n    [_msg] call EFUNC(common,displayTextStructured);\r\n    breakOut \"Main\";\r\n};\r\n\r\nswitch (false) do {\r\n    case !(isNull _unit): {\r\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\r\n    };\r\n    case (_unit isKindOf \"CAManBase\"): {\r\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\r\n    };\r\n    case (alive _unit): {\r\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\r\n    };\r\n};\r\n\r\nprivate _fnc_onUnload = {\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    if (_this select 1 == 2) then {\r\n        deleteVehicle _logic;\r\n    };\r\n};\r\n\r\nprivate _fnc_onConfirm = {\r\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\r\n\r\n    private _display = ctrlparent _ctrlButtonOK;\r\n    if (isNull _display) exitWith {};\r\n\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    private _unit = effectiveCommander (attachedTo _logic);\r\n    private _radius = GETVAR(_display,GVAR(radius),50);\r\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\r\n\r\n    [QGVAR(modulePatrolArea), [_unit,_position,_radius,5], _unit] call CBA_fnc_targetEvent;\r\n    deleteVehicle _logic;\r\n};\r\n\r\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\r\n_control ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\r\n"},{"name":"ace_zeus_fnc_ui_searchArea","file":"zeus/functions/fnc_ui_searchArea.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Initalises the `search area` zeus module display\r\n *\r\n * Arguments:\r\n * 0: dummy controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\n//Generic Init:\r\nparams [\"_control\"];\r\nprivate _display = ctrlParent _control;\r\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Validate the module target:\r\nprivate _unit = effectiveCommander (attachedTo _logic);\r\n\r\nscopeName \"Main\";\r\nprivate _fnc_errorAndClose = {\r\n    params [\"_msg\"];\r\n    _display closeDisplay 0;\r\n    deleteVehicle _logic;\r\n    [_msg] call EFUNC(common,displayTextStructured);\r\n    breakOut \"Main\";\r\n};\r\n\r\nswitch (false) do {\r\n    case !(isNull _unit): {\r\n        [LSTRING(NothingSelected)] call _fnc_errorAndClose;\r\n    };\r\n    case (_unit isKindOf \"CAManBase\"): {\r\n        [LSTRING(OnlyInfantry)] call _fnc_errorAndClose;\r\n    };\r\n    case (alive _unit): {\r\n        [LSTRING(OnlyAlive)] call _fnc_errorAndClose;\r\n    };\r\n};\r\n\r\nprivate _fnc_onUnload = {\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    if (_this select 1 == 2) then {\r\n        deleteVehicle _logic;\r\n    };\r\n};\r\n\r\nprivate _fnc_onConfirm = {\r\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\r\n\r\n    private _display = ctrlparent _ctrlButtonOK;\r\n    if (isNull _display) exitWith {};\r\n\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    private _unit = effectiveCommander (attachedTo _logic);\r\n    private _radius = GETVAR(_display,GVAR(radius),50);\r\n    private _position = GETVAR(_display,GVAR(position),getPos _logic);\r\n    private _marker = QGVAR(ModuleSearchArea) + str(_unit);\r\n\r\n    createMarker [_marker, _position];\r\n    _marker setMarkerAlpha 0;\r\n    _marker setMarkerShape \"ELLIPSE\";\r\n    _marker setMarkerSize [_radius,_radius];\r\n\r\n    [QGVAR(moduleSearchArea), [_unit,_marker], _unit] call CBA_fnc_targetEvent;\r\n    deleteVehicle _logic;\r\n};\r\n\r\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\r\n_control ctrlAddEventHandler [\"buttonClick\", _fnc_onConfirm];\r\n"},{"name":"ace_zeus_fnc_ui_teleportPlayers","file":"zeus/functions/fnc_ui_teleportPlayers.sqf","text":"/*\r\n * Author: SilentSpike\r\n * Initalises the `teleport players` zeus module display\r\n *\r\n * Arguments:\r\n * 0: teleportPlayers controls group <CONTROL>\r\n *\r\n * Return Value:\r\n * NONE <NIL>\r\n *\r\n * Example:\r\n * onSetFocus = \"_this call ace_zeus_fnc_ui_teleportPlayers\"\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\ndisableSerialization;\r\n\r\nparams [\"_control\"];\r\n\r\n//Generic Init:\r\nprivate _display = ctrlparent _control;\r\nprivate _ctrlButtonOK = _display displayctrl 1; //IDC_OK\r\nprivate _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\nTRACE_1(\"logicObject\",_logic);\r\n\r\n_control ctrlRemoveAllEventHandlers \"setFocus\";\r\n\r\n//Specific on-load stuff:\r\nprivate _listbox = _display displayCtrl 16189;\r\n{\r\n    if (alive _x) then {\r\n        _listbox lbSetData [_listbox lbAdd (name _x), getPlayerUID _x];\r\n    };\r\n} forEach allPlayers;\r\n\r\n_listbox lbSetCurSel 0;\r\n(_display displayCtrl 16188) cbSetChecked (_logic getVariable [\"tpGroup\",false]);\r\n\r\nprivate _fnc_onUnload = {\r\n    params [\"_display\"];\r\n\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    // Store checkbox value for reopening\r\n    _logic setVariable [\"tpGroup\", cbChecked (_display displayCtrl 16188)];\r\n};\r\n\r\nprivate _fnc_onConfirm = {\r\n    params [[\"_ctrlButtonOK\", controlNull, [controlNull]]];\r\n\r\n    private _display = ctrlparent _ctrlButtonOK;\r\n    if (isNull _display) exitWith {};\r\n\r\n    private _logic = GETMVAR(BIS_fnc_initCuratorAttributes_target,objnull);\r\n    if (isNull _logic) exitWith {};\r\n\r\n    private _lb = _display displayCtrl 16189;\r\n\r\n    private _uid = _lb lbData (lbCurSel _lb);\r\n    private _group = cbChecked (_display displayCtrl 16188);\r\n\r\n    [_logic, _uid, _group] call FUNC(moduleTeleportPlayers);\r\n};\r\n\r\n_display displayAddEventHandler [\"unload\", _fnc_onUnload];\r\n_ctrlButtonOK ctrlAddEventHandler [\"buttonclick\", _fnc_onConfirm];\r\n"},{"name":"ace_zeus_fnc_zeusAttributes","file":"zeus/functions/fnc_zeusAttributes.sqf","text":"/*\r\n * Author: PabstMirror\r\n * Dummy function to include BIS script file.\r\n * Used in initalisation of zeus attribute displays.\r\n *\r\n * Arguments:\r\n * 0: UI event string <STRING>\r\n * 1: UI event parameters <ARRAY>\r\n * 2: Display class name <STRING>\r\n *\r\n * Return Value:\r\n * None <NIL>\r\n *\r\n * Example:\r\n * onLoad = \"['onLoad',_this,'RscDisplayExample'] call ace_zeus_fnc_zeusAttributes\"\r\n *\r\n * Public: No\r\n */\r\n\r\n#include \"script_component.hpp\"\r\n\r\nTRACE_1(\"params\",_this);\r\n\r\n#include \"\\a3\\ui_f_curator\\UI\\Displays\\RscDisplayAttributes.sqf\"\r\n"}]}